/**
 * Loader generated by glad 2.0.4 on Wed Oct  4 12:04:37 2023
 *
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 *
 * Generator: C/C++
 * Specification: vk
 * Extensions: 344
 *
 * APIs:
 *  - vulkan=1.3
 *
 * Options:
 *  - ALIAS = True
 *  - DEBUG = True
 *  - HEADER_ONLY = True
 *  - LOADER = True
 *  - MX = False
 *  - ON_DEMAND = False
 *
 * Commandline:
 *    --api='vulkan=1.3' --extensions='VK_AMDX_shader_enqueue,VK_AMD_buffer_marker,VK_AMD_device_coherent_memory,VK_AMD_display_native_hdr,VK_AMD_draw_indirect_count,VK_AMD_gcn_shader,VK_AMD_gpu_shader_half_float,VK_AMD_gpu_shader_int16,VK_AMD_memory_overallocation_behavior,VK_AMD_mixed_attachment_samples,VK_AMD_negative_viewport_height,VK_AMD_pipeline_compiler_control,VK_AMD_rasterization_order,VK_AMD_shader_ballot,VK_AMD_shader_core_properties,VK_AMD_shader_core_properties2,VK_AMD_shader_early_and_late_fragment_tests,VK_AMD_shader_explicit_vertex_parameter,VK_AMD_shader_fragment_mask,VK_AMD_shader_image_load_store_lod,VK_AMD_shader_info,VK_AMD_shader_trinary_minmax,VK_AMD_texture_gather_bias_lod,VK_ANDROID_external_format_resolve,VK_ANDROID_external_memory_android_hardware_buffer,VK_ARM_rasterization_order_attachment_access,VK_ARM_shader_core_builtins,VK_ARM_shader_core_properties,VK_EXT_4444_formats,VK_EXT_acquire_drm_display,VK_EXT_acquire_xlib_display,VK_EXT_astc_decode_mode,VK_EXT_attachment_feedback_loop_dynamic_state,VK_EXT_attachment_feedback_loop_layout,VK_EXT_blend_operation_advanced,VK_EXT_border_color_swizzle,VK_EXT_buffer_device_address,VK_EXT_calibrated_timestamps,VK_EXT_color_write_enable,VK_EXT_conditional_rendering,VK_EXT_conservative_rasterization,VK_EXT_custom_border_color,VK_EXT_debug_marker,VK_EXT_debug_report,VK_EXT_debug_utils,VK_EXT_depth_bias_control,VK_EXT_depth_clamp_zero_one,VK_EXT_depth_clip_control,VK_EXT_depth_clip_enable,VK_EXT_depth_range_unrestricted,VK_EXT_descriptor_buffer,VK_EXT_descriptor_indexing,VK_EXT_device_address_binding_report,VK_EXT_device_fault,VK_EXT_device_memory_report,VK_EXT_direct_mode_display,VK_EXT_directfb_surface,VK_EXT_discard_rectangles,VK_EXT_display_control,VK_EXT_display_surface_counter,VK_EXT_dynamic_rendering_unused_attachments,VK_EXT_extended_dynamic_state,VK_EXT_extended_dynamic_state2,VK_EXT_extended_dynamic_state3,VK_EXT_external_memory_acquire_unmodified,VK_EXT_external_memory_dma_buf,VK_EXT_external_memory_host,VK_EXT_filter_cubic,VK_EXT_fragment_density_map,VK_EXT_fragment_density_map2,VK_EXT_fragment_shader_interlock,VK_EXT_frame_boundary,VK_EXT_full_screen_exclusive,VK_EXT_global_priority,VK_EXT_global_priority_query,VK_EXT_graphics_pipeline_library,VK_EXT_hdr_metadata,VK_EXT_headless_surface,VK_EXT_host_image_copy,VK_EXT_host_query_reset,VK_EXT_image_2d_view_of_3d,VK_EXT_image_compression_control,VK_EXT_image_compression_control_swapchain,VK_EXT_image_drm_format_modifier,VK_EXT_image_robustness,VK_EXT_image_sliced_view_of_3d,VK_EXT_image_view_min_lod,VK_EXT_index_type_uint8,VK_EXT_inline_uniform_block,VK_EXT_legacy_dithering,VK_EXT_line_rasterization,VK_EXT_load_store_op_none,VK_EXT_memory_budget,VK_EXT_memory_priority,VK_EXT_mesh_shader,VK_EXT_metal_objects,VK_EXT_metal_surface,VK_EXT_multi_draw,VK_EXT_multisampled_render_to_single_sampled,VK_EXT_mutable_descriptor_type,VK_EXT_non_seamless_cube_map,VK_EXT_opacity_micromap,VK_EXT_pageable_device_local_memory,VK_EXT_pci_bus_info,VK_EXT_physical_device_drm,VK_EXT_pipeline_creation_cache_control,VK_EXT_pipeline_creation_feedback,VK_EXT_pipeline_library_group_handles,VK_EXT_pipeline_properties,VK_EXT_pipeline_protected_access,VK_EXT_pipeline_robustness,VK_EXT_post_depth_coverage,VK_EXT_primitive_topology_list_restart,VK_EXT_primitives_generated_query,VK_EXT_private_data,VK_EXT_provoking_vertex,VK_EXT_queue_family_foreign,VK_EXT_rasterization_order_attachment_access,VK_EXT_rgba10x6_formats,VK_EXT_robustness2,VK_EXT_sample_locations,VK_EXT_sampler_filter_minmax,VK_EXT_scalar_block_layout,VK_EXT_separate_stencil_usage,VK_EXT_shader_atomic_float,VK_EXT_shader_atomic_float2,VK_EXT_shader_demote_to_helper_invocation,VK_EXT_shader_image_atomic_int64,VK_EXT_shader_module_identifier,VK_EXT_shader_object,VK_EXT_shader_stencil_export,VK_EXT_shader_subgroup_ballot,VK_EXT_shader_subgroup_vote,VK_EXT_shader_tile_image,VK_EXT_shader_viewport_index_layer,VK_EXT_subgroup_size_control,VK_EXT_subpass_merge_feedback,VK_EXT_surface_maintenance1,VK_EXT_swapchain_colorspace,VK_EXT_swapchain_maintenance1,VK_EXT_texel_buffer_alignment,VK_EXT_texture_compression_astc_hdr,VK_EXT_tooling_info,VK_EXT_transform_feedback,VK_EXT_validation_cache,VK_EXT_validation_features,VK_EXT_validation_flags,VK_EXT_vertex_attribute_divisor,VK_EXT_vertex_input_dynamic_state,VK_EXT_video_encode_h264,VK_EXT_video_encode_h265,VK_EXT_ycbcr_2plane_444_formats,VK_EXT_ycbcr_image_arrays,VK_FUCHSIA_buffer_collection,VK_FUCHSIA_external_memory,VK_FUCHSIA_external_semaphore,VK_FUCHSIA_imagepipe_surface,VK_GGP_frame_token,VK_GGP_stream_descriptor_surface,VK_GOOGLE_decorate_string,VK_GOOGLE_display_timing,VK_GOOGLE_hlsl_functionality1,VK_GOOGLE_surfaceless_query,VK_GOOGLE_user_type,VK_HUAWEI_cluster_culling_shader,VK_HUAWEI_invocation_mask,VK_HUAWEI_subpass_shading,VK_IMG_filter_cubic,VK_IMG_format_pvrtc,VK_INTEL_performance_query,VK_INTEL_shader_integer_functions2,VK_KHR_16bit_storage,VK_KHR_8bit_storage,VK_KHR_acceleration_structure,VK_KHR_android_surface,VK_KHR_bind_memory2,VK_KHR_buffer_device_address,VK_KHR_cooperative_matrix,VK_KHR_copy_commands2,VK_KHR_create_renderpass2,VK_KHR_dedicated_allocation,VK_KHR_deferred_host_operations,VK_KHR_depth_stencil_resolve,VK_KHR_descriptor_update_template,VK_KHR_device_group,VK_KHR_device_group_creation,VK_KHR_display,VK_KHR_display_swapchain,VK_KHR_draw_indirect_count,VK_KHR_driver_properties,VK_KHR_dynamic_rendering,VK_KHR_external_fence,VK_KHR_external_fence_capabilities,VK_KHR_external_fence_fd,VK_KHR_external_fence_win32,VK_KHR_external_memory,VK_KHR_external_memory_capabilities,VK_KHR_external_memory_fd,VK_KHR_external_memory_win32,VK_KHR_external_semaphore,VK_KHR_external_semaphore_capabilities,VK_KHR_external_semaphore_fd,VK_KHR_external_semaphore_win32,VK_KHR_format_feature_flags2,VK_KHR_fragment_shader_barycentric,VK_KHR_fragment_shading_rate,VK_KHR_get_display_properties2,VK_KHR_get_memory_requirements2,VK_KHR_get_physical_device_properties2,VK_KHR_get_surface_capabilities2,VK_KHR_global_priority,VK_KHR_image_format_list,VK_KHR_imageless_framebuffer,VK_KHR_incremental_present,VK_KHR_maintenance1,VK_KHR_maintenance2,VK_KHR_maintenance3,VK_KHR_maintenance4,VK_KHR_maintenance5,VK_KHR_map_memory2,VK_KHR_multiview,VK_KHR_performance_query,VK_KHR_pipeline_executable_properties,VK_KHR_pipeline_library,VK_KHR_portability_enumeration,VK_KHR_portability_subset,VK_KHR_present_id,VK_KHR_present_wait,VK_KHR_push_descriptor,VK_KHR_ray_query,VK_KHR_ray_tracing_maintenance1,VK_KHR_ray_tracing_pipeline,VK_KHR_ray_tracing_position_fetch,VK_KHR_relaxed_block_layout,VK_KHR_sampler_mirror_clamp_to_edge,VK_KHR_sampler_ycbcr_conversion,VK_KHR_separate_depth_stencil_layouts,VK_KHR_shader_atomic_int64,VK_KHR_shader_clock,VK_KHR_shader_draw_parameters,VK_KHR_shader_float16_int8,VK_KHR_shader_float_controls,VK_KHR_shader_integer_dot_product,VK_KHR_shader_non_semantic_info,VK_KHR_shader_subgroup_extended_types,VK_KHR_shader_subgroup_uniform_control_flow,VK_KHR_shader_terminate_invocation,VK_KHR_shared_presentable_image,VK_KHR_spirv_1_4,VK_KHR_storage_buffer_storage_class,VK_KHR_surface,VK_KHR_surface_protected_capabilities,VK_KHR_swapchain,VK_KHR_swapchain_mutable_format,VK_KHR_synchronization2,VK_KHR_timeline_semaphore,VK_KHR_uniform_buffer_standard_layout,VK_KHR_variable_pointers,VK_KHR_video_decode_h264,VK_KHR_video_decode_h265,VK_KHR_video_decode_queue,VK_KHR_video_encode_queue,VK_KHR_video_queue,VK_KHR_vulkan_memory_model,VK_KHR_wayland_surface,VK_KHR_win32_keyed_mutex,VK_KHR_win32_surface,VK_KHR_workgroup_memory_explicit_layout,VK_KHR_xcb_surface,VK_KHR_xlib_surface,VK_KHR_zero_initialize_workgroup_memory,VK_LUNARG_direct_driver_loading,VK_MSFT_layered_driver,VK_MVK_ios_surface,VK_MVK_macos_surface,VK_NN_vi_surface,VK_NVX_binary_import,VK_NVX_image_view_handle,VK_NVX_multiview_per_view_attributes,VK_NV_acquire_winrt_display,VK_NV_clip_space_w_scaling,VK_NV_compute_shader_derivatives,VK_NV_cooperative_matrix,VK_NV_copy_memory_indirect,VK_NV_corner_sampled_image,VK_NV_coverage_reduction_mode,VK_NV_dedicated_allocation,VK_NV_dedicated_allocation_image_aliasing,VK_NV_descriptor_pool_overallocation,VK_NV_device_diagnostic_checkpoints,VK_NV_device_diagnostics_config,VK_NV_device_generated_commands,VK_NV_device_generated_commands_compute,VK_NV_displacement_micromap,VK_NV_external_memory,VK_NV_external_memory_capabilities,VK_NV_external_memory_rdma,VK_NV_external_memory_win32,VK_NV_fill_rectangle,VK_NV_fragment_coverage_to_color,VK_NV_fragment_shader_barycentric,VK_NV_fragment_shading_rate_enums,VK_NV_framebuffer_mixed_samples,VK_NV_geometry_shader_passthrough,VK_NV_glsl_shader,VK_NV_inherited_viewport_scissor,VK_NV_linear_color_attachment,VK_NV_low_latency,VK_NV_low_latency2,VK_NV_memory_decompression,VK_NV_mesh_shader,VK_NV_optical_flow,VK_NV_present_barrier,VK_NV_ray_tracing,VK_NV_ray_tracing_invocation_reorder,VK_NV_ray_tracing_motion_blur,VK_NV_representative_fragment_test,VK_NV_sample_mask_override_coverage,VK_NV_scissor_exclusive,VK_NV_shader_image_footprint,VK_NV_shader_sm_builtins,VK_NV_shader_subgroup_partitioned,VK_NV_shading_rate_image,VK_NV_viewport_array2,VK_NV_viewport_swizzle,VK_NV_win32_keyed_mutex,VK_QCOM_filter_cubic_clamp,VK_QCOM_filter_cubic_weights,VK_QCOM_fragment_density_map_offset,VK_QCOM_image_processing,VK_QCOM_image_processing2,VK_QCOM_multiview_per_view_render_areas,VK_QCOM_multiview_per_view_viewports,VK_QCOM_render_pass_shader_resolve,VK_QCOM_render_pass_store_ops,VK_QCOM_render_pass_transform,VK_QCOM_rotated_copy_commands,VK_QCOM_tile_properties,VK_QCOM_ycbcr_degamma,VK_QNX_external_memory_screen_buffer,VK_QNX_screen_surface,VK_SEC_amigo_profiling,VK_VALVE_descriptor_set_host_mapping,VK_VALVE_mutable_descriptor_type' c --alias --debug --header-only --loader
 *
 * Online:
 *    http://glad.sh/#api=vulkan%3D1.3&generator=c&options=ALIAS%2CDEBUG%2CHEADER_ONLY%2CLOADER
 *
 */

#ifndef GLAD_VULKAN_H_
#define GLAD_VULKAN_H_

#ifdef VULKAN_H_
	#error header already included (API: vulkan), remove previous include!
#endif
#define VULKAN_H_ 1

#ifdef VULKAN_CORE_H_
	#error header already included (API: vulkan), remove previous include!
#endif
#define VULKAN_CORE_H_ 1


#define GLAD_VULKAN
#define GLAD_OPTION_VULKAN_ALIAS
#define GLAD_OPTION_VULKAN_DEBUG
#define GLAD_OPTION_VULKAN_HEADER_ONLY
#define GLAD_OPTION_VULKAN_LOADER

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
	#define GLAD_PLATFORM_H_

	#ifndef GLAD_PLATFORM_WIN32
		#if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
			#define GLAD_PLATFORM_WIN32 1
		#else
			#define GLAD_PLATFORM_WIN32 0
		#endif
	#endif

	#ifndef GLAD_PLATFORM_APPLE
		#ifdef __APPLE__
			#define GLAD_PLATFORM_APPLE 1
		#else
			#define GLAD_PLATFORM_APPLE 0
		#endif
	#endif

	#ifndef GLAD_PLATFORM_EMSCRIPTEN
		#ifdef __EMSCRIPTEN__
			#define GLAD_PLATFORM_EMSCRIPTEN 1
		#else
			#define GLAD_PLATFORM_EMSCRIPTEN 0
		#endif
	#endif

	#ifndef GLAD_PLATFORM_UWP
		#if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
			#ifdef __has_include
				#if __has_include(<winapifamily.h>)
					#define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
				#endif
			#elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
				#define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
			#endif
		#endif

		#ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
			#include <winapifamily.h>
			#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
				#define GLAD_PLATFORM_UWP 1
			#endif
		#endif

		#ifndef GLAD_PLATFORM_UWP
			#define GLAD_PLATFORM_UWP 0
		#endif
	#endif

	#ifdef __GNUC__
		#define GLAD_GNUC_EXTENSION __extension__
	#else
		#define GLAD_GNUC_EXTENSION
	#endif

	#define GLAD_UNUSED(x) (void)(x)

	#ifndef GLAD_API_CALL
		#if defined(GLAD_API_CALL_EXPORT)
			#if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
				#if defined(GLAD_API_CALL_EXPORT_BUILD)
					#if defined(__GNUC__)
						#define GLAD_API_CALL __attribute__((dllexport)) extern
					#else
						#define GLAD_API_CALL __declspec(dllexport) extern
					#endif
				#else
					#if defined(__GNUC__)
						#define GLAD_API_CALL __attribute__((dllimport)) extern
					#else
						#define GLAD_API_CALL __declspec(dllimport) extern
					#endif
				#endif
			#elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
				#define GLAD_API_CALL __attribute__((visibility("default"))) extern
			#else
				#define GLAD_API_CALL extern
			#endif
		#else
			#define GLAD_API_CALL extern
		#endif
	#endif

	#ifdef APIENTRY
		#define GLAD_API_PTR APIENTRY
	#elif GLAD_PLATFORM_WIN32
		#define GLAD_API_PTR __stdcall
	#else
		#define GLAD_API_PTR
	#endif

	#ifndef GLAPI
		#define GLAPI GLAD_API_CALL
	#endif

	#ifndef GLAPIENTRY
		#define GLAPIENTRY GLAD_API_PTR
	#endif

	#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
	#define GLAD_VERSION_MAJOR(version)     (version / 10000)
	#define GLAD_VERSION_MINOR(version)     (version % 10000)

	#define GLAD_GENERATOR_VERSION "2.0.4"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_AMDX_SHADER_ENQUEUE_EXTENSION_NAME "VK_AMDX_shader_enqueue"

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_AMDX_SHADER_ENQUEUE_SPEC_VERSION 1

#endif
#define VK_AMD_BUFFER_MARKER_EXTENSION_NAME                        "VK_AMD_buffer_marker"
#define VK_AMD_BUFFER_MARKER_SPEC_VERSION                          1
#define VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME               "VK_AMD_device_coherent_memory"
#define VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION                 1
#define VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME                   "VK_AMD_display_native_hdr"
#define VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION                     1
#define VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME                  "VK_AMD_draw_indirect_count"
#define VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION                    2
#define VK_AMD_GCN_SHADER_EXTENSION_NAME                           "VK_AMD_gcn_shader"
#define VK_AMD_GCN_SHADER_SPEC_VERSION                             1
#define VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME                "VK_AMD_gpu_shader_half_float"
#define VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION                  2
#define VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME                     "VK_AMD_gpu_shader_int16"
#define VK_AMD_GPU_SHADER_INT16_SPEC_VERSION                       2
#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME       "VK_AMD_memory_overallocation_behavior"
#define VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION         1
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME             "VK_AMD_mixed_attachment_samples"
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION               1
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME             "VK_AMD_negative_viewport_height"
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION               1
#define VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME            "VK_AMD_pipeline_compiler_control"
#define VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION              1
#define VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME                  "VK_AMD_rasterization_order"
#define VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION                    1
#define VK_AMD_SHADER_BALLOT_EXTENSION_NAME                        "VK_AMD_shader_ballot"
#define VK_AMD_SHADER_BALLOT_SPEC_VERSION                          1
#define VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME             "VK_AMD_shader_core_properties2"
#define VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION               1
#define VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME               "VK_AMD_shader_core_properties"
#define VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION                 2
#define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME "VK_AMD_shader_early_and_late_fragment_tests"
#define VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION   1
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME     "VK_AMD_shader_explicit_vertex_parameter"
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION       1
#define VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME                 "VK_AMD_shader_fragment_mask"
#define VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION                   1
#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME          "VK_AMD_shader_image_load_store_lod"
#define VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION            1
#define VK_AMD_SHADER_INFO_EXTENSION_NAME                          "VK_AMD_shader_info"
#define VK_AMD_SHADER_INFO_SPEC_VERSION                            1
#define VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME                "VK_AMD_shader_trinary_minmax"
#define VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION                  1
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME              "VK_AMD_texture_gather_bias_lod"
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION                1
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	#define VK_ANDROID_EXTERNAL_FORMAT_RESOLVE_EXTENSION_NAME "VK_ANDROID_external_format_resolve"

#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	#define VK_ANDROID_EXTERNAL_FORMAT_RESOLVE_SPEC_VERSION 1

#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	#define VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME "VK_ANDROID_external_memory_android_hardware_buffer"

#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	#define VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION 5

#endif
#define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME "VK_ARM_rasterization_order_attachment_access"
#define VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION   1
#define VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME                  "VK_ARM_shader_core_builtins"
#define VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION                    2
#define VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME                "VK_ARM_shader_core_properties"
#define VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION                  1
#define VK_ATTACHMENT_UNUSED                                        (~0U)
#define VK_EXT_4444_FORMATS_EXTENSION_NAME                          "VK_EXT_4444_formats"
#define VK_EXT_4444_FORMATS_SPEC_VERSION                            1
#define VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME                   "VK_EXT_acquire_drm_display"
#define VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION                     1
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	#define VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME "VK_EXT_acquire_xlib_display"

#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	#define VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION 1

#endif
#define VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME                       "VK_EXT_astc_decode_mode"
#define VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION                         1
#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME "VK_EXT_attachment_feedback_loop_dynamic_state"
#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION   1
#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME        "VK_EXT_attachment_feedback_loop_layout"
#define VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION          2
#define VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME               "VK_EXT_blend_operation_advanced"
#define VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION                 2
#define VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME                   "VK_EXT_border_color_swizzle"
#define VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION                     1
#define VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME                  "VK_EXT_buffer_device_address"
#define VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION                    2
#define VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME                  "VK_EXT_calibrated_timestamps"
#define VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION                    2
#define VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME                     "VK_EXT_color_write_enable"
#define VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION                       1
#define VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME                  "VK_EXT_conditional_rendering"
#define VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION                    2
#define VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME             "VK_EXT_conservative_rasterization"
#define VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION               1
#define VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME                    "VK_EXT_custom_border_color"
#define VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION                      12
#define VK_EXT_DEBUG_MARKER_EXTENSION_NAME                           "VK_EXT_debug_marker"
#define VK_EXT_DEBUG_MARKER_SPEC_VERSION                             4
#define VK_EXT_DEBUG_REPORT_EXTENSION_NAME                           "VK_EXT_debug_report"
#define VK_EXT_DEBUG_REPORT_SPEC_VERSION                             10
#define VK_EXT_DEBUG_UTILS_EXTENSION_NAME                            "VK_EXT_debug_utils"
#define VK_EXT_DEBUG_UTILS_SPEC_VERSION                              2
#define VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME                     "VK_EXT_depth_bias_control"
#define VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION                       1
#define VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME                   "VK_EXT_depth_clamp_zero_one"
#define VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION                     1
#define VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME                     "VK_EXT_depth_clip_control"
#define VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION                       1
#define VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME                      "VK_EXT_depth_clip_enable"
#define VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION                        1
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME               "VK_EXT_depth_range_unrestricted"
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION                 1
#define VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME                      "VK_EXT_descriptor_buffer"
#define VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION                        1
#define VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME                    "VK_EXT_descriptor_indexing"
#define VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION                      2
#define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME          "VK_EXT_device_address_binding_report"
#define VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION            1
#define VK_EXT_DEVICE_FAULT_EXTENSION_NAME                           "VK_EXT_device_fault"
#define VK_EXT_DEVICE_FAULT_SPEC_VERSION                             2
#define VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME                   "VK_EXT_device_memory_report"
#define VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION                     2
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	#define VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME "VK_EXT_directfb_surface"

#endif
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	#define VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION 1

#endif
#define VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME                  "VK_EXT_direct_mode_display"
#define VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION                    1
#define VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME                   "VK_EXT_discard_rectangles"
#define VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION                     2
#define VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME                      "VK_EXT_display_control"
#define VK_EXT_DISPLAY_CONTROL_SPEC_VERSION                        1
#define VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME              "VK_EXT_display_surface_counter"
#define VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION                1
#define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME "VK_EXT_dynamic_rendering_unused_attachments"
#define VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION   1
#define VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME             "VK_EXT_extended_dynamic_state2"
#define VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION               1
#define VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME             "VK_EXT_extended_dynamic_state3"
#define VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION               2
#define VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME               "VK_EXT_extended_dynamic_state"
#define VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION                 1
#define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME   "VK_EXT_external_memory_acquire_unmodified"
#define VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION     1
#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME              "VK_EXT_external_memory_dma_buf"
#define VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION                1
#define VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME                 "VK_EXT_external_memory_host"
#define VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION                   1
#define VK_EXT_FILTER_CUBIC_EXTENSION_NAME                         "VK_EXT_filter_cubic"
#define VK_EXT_FILTER_CUBIC_SPEC_VERSION                           3
#define VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME               "VK_EXT_fragment_density_map2"
#define VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION                 1
#define VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME                 "VK_EXT_fragment_density_map"
#define VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION                   2
#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME            "VK_EXT_fragment_shader_interlock"
#define VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION              1
#define VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME                       "VK_EXT_frame_boundary"
#define VK_EXT_FRAME_BOUNDARY_SPEC_VERSION                         1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME "VK_EXT_full_screen_exclusive"

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION 4

#endif
#define VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME                     "VK_EXT_global_priority"
#define VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME               "VK_EXT_global_priority_query"
#define VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION                 1
#define VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION                       2
#define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME           "VK_EXT_graphics_pipeline_library"
#define VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION             1
#define VK_EXT_HDR_METADATA_EXTENSION_NAME                        "VK_EXT_hdr_metadata"
#define VK_EXT_HDR_METADATA_SPEC_VERSION                          2
#define VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME                    "VK_EXT_headless_surface"
#define VK_EXT_HEADLESS_SURFACE_SPEC_VERSION                      1
#define VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME                     "VK_EXT_host_image_copy"
#define VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION                       1
#define VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME                    "VK_EXT_host_query_reset"
#define VK_EXT_HOST_QUERY_RESET_SPEC_VERSION                      1
#define VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME                 "VK_EXT_image_2d_view_of_3d"
#define VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION                   1
#define VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME           "VK_EXT_image_compression_control"
#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION             1
#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME "VK_EXT_image_compression_control_swapchain"
#define VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION   1
#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME           "VK_EXT_image_drm_format_modifier"
#define VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION             2
#define VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME                    "VK_EXT_image_robustness"
#define VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION                      1
#define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME             "VK_EXT_image_sliced_view_of_3d"
#define VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION               1
#define VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME                  "VK_EXT_image_view_min_lod"
#define VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION                    1
#define VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME                    "VK_EXT_index_type_uint8"
#define VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION                      1
#define VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME                "VK_EXT_inline_uniform_block"
#define VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION                  1
#define VK_EXT_LEGACY_DITHERING_EXTENSION_NAME                    "VK_EXT_legacy_dithering"
#define VK_EXT_LEGACY_DITHERING_SPEC_VERSION                      1
#define VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME                  "VK_EXT_line_rasterization"
#define VK_EXT_LINE_RASTERIZATION_SPEC_VERSION                    1
#define VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME                  "VK_EXT_load_store_op_none"
#define VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION                    1
#define VK_EXT_MEMORY_BUDGET_EXTENSION_NAME                       "VK_EXT_memory_budget"
#define VK_EXT_MEMORY_BUDGET_SPEC_VERSION                         1
#define VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME                     "VK_EXT_memory_priority"
#define VK_EXT_MEMORY_PRIORITY_SPEC_VERSION                       1
#define VK_EXT_MESH_SHADER_EXTENSION_NAME                         "VK_EXT_mesh_shader"
#define VK_EXT_MESH_SHADER_SPEC_VERSION                           1
#if defined(VK_USE_PLATFORM_METAL_EXT)
	#define VK_EXT_METAL_OBJECTS_EXTENSION_NAME "VK_EXT_metal_objects"

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
	#define VK_EXT_METAL_OBJECTS_SPEC_VERSION 1

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
	#define VK_EXT_METAL_SURFACE_EXTENSION_NAME "VK_EXT_metal_surface"

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
	#define VK_EXT_METAL_SURFACE_SPEC_VERSION 1

#endif
#define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME "VK_EXT_multisampled_render_to_single_sampled"
#define VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION   1
#define VK_EXT_MULTI_DRAW_EXTENSION_NAME                            "VK_EXT_multi_draw"
#define VK_EXT_MULTI_DRAW_SPEC_VERSION                              1
#define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME               "VK_EXT_mutable_descriptor_type"
#define VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION                 1
#define VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME                 "VK_EXT_non_seamless_cube_map"
#define VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION                   1
#define VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME                      "VK_EXT_opacity_micromap"
#define VK_EXT_OPACITY_MICROMAP_SPEC_VERSION                        2
#define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME          "VK_EXT_pageable_device_local_memory"
#define VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION            1
#define VK_EXT_PCI_BUS_INFO_EXTENSION_NAME                          "VK_EXT_pci_bus_info"
#define VK_EXT_PCI_BUS_INFO_SPEC_VERSION                            2
#define VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME                   "VK_EXT_physical_device_drm"
#define VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION                     1
#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME       "VK_EXT_pipeline_creation_cache_control"
#define VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION         3
#define VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME            "VK_EXT_pipeline_creation_feedback"
#define VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION              1
#define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME        "VK_EXT_pipeline_library_group_handles"
#define VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION          1
#define VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME                   "VK_EXT_pipeline_properties"
#define VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION                     1
#define VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME             "VK_EXT_pipeline_protected_access"
#define VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION               1
#define VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME                   "VK_EXT_pipeline_robustness"
#define VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION                     1
#define VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME                   "VK_EXT_post_depth_coverage"
#define VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION                     1
#define VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME            "VK_EXT_primitives_generated_query"
#define VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION              1
#define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME       "VK_EXT_primitive_topology_list_restart"
#define VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION         1
#define VK_EXT_PRIVATE_DATA_EXTENSION_NAME                          "VK_EXT_private_data"
#define VK_EXT_PRIVATE_DATA_SPEC_VERSION                            1
#define VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME                      "VK_EXT_provoking_vertex"
#define VK_EXT_PROVOKING_VERTEX_SPEC_VERSION                        1
#define VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME                  "VK_EXT_queue_family_foreign"
#define VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION                    1
#define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME "VK_EXT_rasterization_order_attachment_access"
#define VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION   1
#define VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME                      "VK_EXT_rgba10x6_formats"
#define VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION                        1
#define VK_EXT_ROBUSTNESS_2_EXTENSION_NAME                          "VK_EXT_robustness2"
#define VK_EXT_ROBUSTNESS_2_SPEC_VERSION                            1
#define VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME                 "VK_EXT_sampler_filter_minmax"
#define VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION                   2
#define VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME                      "VK_EXT_sample_locations"
#define VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION                        1
#define VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME                   "VK_EXT_scalar_block_layout"
#define VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION                     1
#define VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME                "VK_EXT_separate_stencil_usage"
#define VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION                  1
#define VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME                 "VK_EXT_shader_atomic_float2"
#define VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION                   1
#define VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME                   "VK_EXT_shader_atomic_float"
#define VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION                     1
#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME    "VK_EXT_shader_demote_to_helper_invocation"
#define VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION      1
#define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME             "VK_EXT_shader_image_atomic_int64"
#define VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION               1
#define VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME              "VK_EXT_shader_module_identifier"
#define VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION                1
#define VK_EXT_SHADER_OBJECT_EXTENSION_NAME                         "VK_EXT_shader_object"
#define VK_EXT_SHADER_OBJECT_SPEC_VERSION                           1
#define VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME                 "VK_EXT_shader_stencil_export"
#define VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION                   1
#define VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME                "VK_EXT_shader_subgroup_ballot"
#define VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION                  1
#define VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME                  "VK_EXT_shader_subgroup_vote"
#define VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION                    1
#define VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME                     "VK_EXT_shader_tile_image"
#define VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION                       1
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME           "VK_EXT_shader_viewport_index_layer"
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION             1
#define VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME                 "VK_EXT_subgroup_size_control"
#define VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION                   2
#define VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME                "VK_EXT_subpass_merge_feedback"
#define VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION                  2
#define VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME                 "VK_EXT_surface_maintenance1"
#define VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION                   1
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME                 "VK_EXT_swapchain_colorspace"
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION                   4
#define VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME               "VK_EXT_swapchain_maintenance1"
#define VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION                 1
#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME                "VK_EXT_texel_buffer_alignment"
#define VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION                  1
#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME          "VK_EXT_texture_compression_astc_hdr"
#define VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION            1
#define VK_EXT_TOOLING_INFO_EXTENSION_NAME                          "VK_EXT_tooling_info"
#define VK_EXT_TOOLING_INFO_SPEC_VERSION                            1
#define VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME                    "VK_EXT_transform_feedback"
#define VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION                      1
#define VK_EXT_VALIDATION_CACHE_EXTENSION_NAME                      "VK_EXT_validation_cache"
#define VK_EXT_VALIDATION_CACHE_SPEC_VERSION                        1
#define VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME                   "VK_EXT_validation_features"
#define VK_EXT_VALIDATION_FEATURES_SPEC_VERSION                     5
#define VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME                      "VK_EXT_validation_flags"
#define VK_EXT_VALIDATION_FLAGS_SPEC_VERSION                        2
#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME              "VK_EXT_vertex_attribute_divisor"
#define VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION                3
#define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME            "VK_EXT_vertex_input_dynamic_state"
#define VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION              2
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_EXT_VIDEO_ENCODE_H264_EXTENSION_NAME "VK_EXT_video_encode_h264"

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_EXT_VIDEO_ENCODE_H264_SPEC_VERSION 12

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_EXT_VIDEO_ENCODE_H265_EXTENSION_NAME "VK_EXT_video_encode_h265"

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_EXT_VIDEO_ENCODE_H265_SPEC_VERSION 12

#endif
#define VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME "VK_EXT_ycbcr_2plane_444_formats"
#define VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION   1
#define VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME       "VK_EXT_ycbcr_image_arrays"
#define VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION         1
#define VK_FALSE                                       0
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_BUFFER_COLLECTION_EXTENSION_NAME "VK_FUCHSIA_buffer_collection"

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_BUFFER_COLLECTION_SPEC_VERSION 2

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_EXTERNAL_MEMORY_EXTENSION_NAME "VK_FUCHSIA_external_memory"

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_EXTERNAL_MEMORY_SPEC_VERSION 1

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_EXTERNAL_SEMAPHORE_EXTENSION_NAME "VK_FUCHSIA_external_semaphore"

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_EXTERNAL_SEMAPHORE_SPEC_VERSION 1

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME "VK_FUCHSIA_imagepipe_surface"

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION 1

#endif
#if defined(VK_USE_PLATFORM_GGP)
	#define VK_GGP_FRAME_TOKEN_EXTENSION_NAME "VK_GGP_frame_token"

#endif
#if defined(VK_USE_PLATFORM_GGP)
	#define VK_GGP_FRAME_TOKEN_SPEC_VERSION 1

#endif
#if defined(VK_USE_PLATFORM_GGP)
	#define VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME "VK_GGP_stream_descriptor_surface"

#endif
#if defined(VK_USE_PLATFORM_GGP)
	#define VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION 1

#endif
#define VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME           "VK_GOOGLE_decorate_string"
#define VK_GOOGLE_DECORATE_STRING_SPEC_VERSION             1
#define VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME            "VK_GOOGLE_display_timing"
#define VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION              1
#define VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME       "VK_GOOGLE_hlsl_functionality1"
#define VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION         1
#define VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME      "VK_GOOGLE_hlsl_functionality1"
#define VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION        1
#define VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME         "VK_GOOGLE_surfaceless_query"
#define VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION           2
#define VK_GOOGLE_USER_TYPE_EXTENSION_NAME                 "VK_GOOGLE_user_type"
#define VK_GOOGLE_USER_TYPE_SPEC_VERSION                   1
#define VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME    "VK_HUAWEI_cluster_culling_shader"
#define VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION      2
#define VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME           "VK_HUAWEI_invocation_mask"
#define VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION             1
#define VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME           "VK_HUAWEI_subpass_shading"
#define VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION             3
#define VK_IMG_FILTER_CUBIC_EXTENSION_NAME                 "VK_IMG_filter_cubic"
#define VK_IMG_FILTER_CUBIC_SPEC_VERSION                   1
#define VK_IMG_FORMAT_PVRTC_EXTENSION_NAME                 "VK_IMG_format_pvrtc"
#define VK_IMG_FORMAT_PVRTC_SPEC_VERSION                   1
#define VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME          "VK_INTEL_performance_query"
#define VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION            2
#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME "VK_INTEL_shader_integer_functions2"
#define VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION   1
#define VK_KHR_16BIT_STORAGE_EXTENSION_NAME                "VK_KHR_16bit_storage"
#define VK_KHR_16BIT_STORAGE_SPEC_VERSION                  1
#define VK_KHR_8BIT_STORAGE_EXTENSION_NAME                 "VK_KHR_8bit_storage"
#define VK_KHR_8BIT_STORAGE_SPEC_VERSION                   1
#define VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME       "VK_KHR_acceleration_structure"
#define VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION         13
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	#define VK_KHR_ANDROID_SURFACE_EXTENSION_NAME "VK_KHR_android_surface"

#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	#define VK_KHR_ANDROID_SURFACE_SPEC_VERSION 6

#endif
#define VK_KHR_BIND_MEMORY_2_EXTENSION_NAME               "VK_KHR_bind_memory2"
#define VK_KHR_BIND_MEMORY_2_SPEC_VERSION                 1
#define VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME       "VK_KHR_buffer_device_address"
#define VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION         1
#define VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME          "VK_KHR_cooperative_matrix"
#define VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION            2
#define VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME             "VK_KHR_copy_commands2"
#define VK_KHR_COPY_COMMANDS_2_SPEC_VERSION               1
#define VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME         "VK_KHR_create_renderpass2"
#define VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION           1
#define VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME        "VK_KHR_dedicated_allocation"
#define VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION          3
#define VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME    "VK_KHR_deferred_host_operations"
#define VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION      4
#define VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME       "VK_KHR_depth_stencil_resolve"
#define VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION         1
#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME  "VK_KHR_descriptor_update_template"
#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION    1
#define VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME       "VK_KHR_device_group_creation"
#define VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION         1
#define VK_KHR_DEVICE_GROUP_EXTENSION_NAME                "VK_KHR_device_group"
#define VK_KHR_DEVICE_GROUP_SPEC_VERSION                  4
#define VK_KHR_DISPLAY_EXTENSION_NAME                     "VK_KHR_display"
#define VK_KHR_DISPLAY_SPEC_VERSION                       23
#define VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME           "VK_KHR_display_swapchain"
#define VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION             10
#define VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME         "VK_KHR_draw_indirect_count"
#define VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION           1
#define VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME           "VK_KHR_driver_properties"
#define VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION             1
#define VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME           "VK_KHR_dynamic_rendering"
#define VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION             1
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_fence_capabilities"
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION   1
#define VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME              "VK_KHR_external_fence"
#define VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME           "VK_KHR_external_fence_fd"
#define VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION             1
#define VK_KHR_EXTERNAL_FENCE_SPEC_VERSION                1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME "VK_KHR_external_fence_win32"

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION 1

#endif
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_memory_capabilities"
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION   1
#define VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME              "VK_KHR_external_memory"
#define VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME           "VK_KHR_external_memory_fd"
#define VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION             1
#define VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION                1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME "VK_KHR_external_memory_win32"

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION 1

#endif
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_semaphore_capabilities"
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION   1
#define VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME              "VK_KHR_external_semaphore"
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME           "VK_KHR_external_semaphore_fd"
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION             1
#define VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION                1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME "VK_KHR_external_semaphore_win32"

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION 1

#endif
#define VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME           "VK_KHR_format_feature_flags2"
#define VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION             2
#define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME      "VK_KHR_fragment_shader_barycentric"
#define VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION        1
#define VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME            "VK_KHR_fragment_shading_rate"
#define VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION              2
#define VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME         "VK_KHR_get_display_properties2"
#define VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION           1
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME        "VK_KHR_get_memory_requirements2"
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION          1
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME "VK_KHR_get_physical_device_properties2"
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION   2
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME       "VK_KHR_get_surface_capabilities2"
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION         1
#define VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME                  "VK_KHR_global_priority"
#define VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION                    1
#define VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME            "VK_KHR_imageless_framebuffer"
#define VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION              1
#define VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME                "VK_KHR_image_format_list"
#define VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION                  1
#define VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME              "VK_KHR_incremental_present"
#define VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION                2
#define VK_KHR_MAINTENANCE1_EXTENSION_NAME                     "VK_KHR_maintenance1"
#define VK_KHR_MAINTENANCE1_SPEC_VERSION                       2
#define VK_KHR_MAINTENANCE2_EXTENSION_NAME                     "VK_KHR_maintenance2"
#define VK_KHR_MAINTENANCE2_SPEC_VERSION                       1
#define VK_KHR_MAINTENANCE3_EXTENSION_NAME                     "VK_KHR_maintenance3"
#define VK_KHR_MAINTENANCE3_SPEC_VERSION                       1
#define VK_KHR_MAINTENANCE_1_EXTENSION_NAME                    "VK_KHR_maintenance1"
#define VK_KHR_MAINTENANCE_1_SPEC_VERSION                      2
#define VK_KHR_MAINTENANCE_2_EXTENSION_NAME                    "VK_KHR_maintenance2"
#define VK_KHR_MAINTENANCE_2_SPEC_VERSION                      1
#define VK_KHR_MAINTENANCE_3_EXTENSION_NAME                    "VK_KHR_maintenance3"
#define VK_KHR_MAINTENANCE_3_SPEC_VERSION                      1
#define VK_KHR_MAINTENANCE_4_EXTENSION_NAME                    "VK_KHR_maintenance4"
#define VK_KHR_MAINTENANCE_4_SPEC_VERSION                      2
#define VK_KHR_MAINTENANCE_5_EXTENSION_NAME                    "VK_KHR_maintenance5"
#define VK_KHR_MAINTENANCE_5_SPEC_VERSION                      1
#define VK_KHR_MAP_MEMORY_2_EXTENSION_NAME                     "VK_KHR_map_memory2"
#define VK_KHR_MAP_MEMORY_2_SPEC_VERSION                       1
#define VK_KHR_MULTIVIEW_EXTENSION_NAME                        "VK_KHR_multiview"
#define VK_KHR_MULTIVIEW_SPEC_VERSION                          1
#define VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME                "VK_KHR_performance_query"
#define VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION                  1
#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME   "VK_KHR_pipeline_executable_properties"
#define VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION     1
#define VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME                 "VK_KHR_pipeline_library"
#define VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION                   1
#define VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME          "VK_KHR_portability_enumeration"
#define VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION            1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME "VK_KHR_portability_subset"

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_KHR_PORTABILITY_SUBSET_SPEC_VERSION 1

#endif
#define VK_KHR_PRESENT_ID_EXTENSION_NAME                           "VK_KHR_present_id"
#define VK_KHR_PRESENT_ID_SPEC_VERSION                             1
#define VK_KHR_PRESENT_WAIT_EXTENSION_NAME                         "VK_KHR_present_wait"
#define VK_KHR_PRESENT_WAIT_SPEC_VERSION                           1
#define VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME                      "VK_KHR_push_descriptor"
#define VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION                        2
#define VK_KHR_RAY_QUERY_EXTENSION_NAME                            "VK_KHR_ray_query"
#define VK_KHR_RAY_QUERY_SPEC_VERSION                              1
#define VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME            "VK_KHR_ray_tracing_maintenance1"
#define VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION              1
#define VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME                 "VK_KHR_ray_tracing_pipeline"
#define VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION                   1
#define VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME           "VK_KHR_ray_tracing_position_fetch"
#define VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION             1
#define VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME                 "VK_KHR_relaxed_block_layout"
#define VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION                   1
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME         "VK_KHR_sampler_mirror_clamp_to_edge"
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION           3
#define VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME             "VK_KHR_sampler_ycbcr_conversion"
#define VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION               14
#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME       "VK_KHR_separate_depth_stencil_layouts"
#define VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION         1
#define VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME                  "VK_KHR_shader_atomic_int64"
#define VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION                    1
#define VK_KHR_SHADER_CLOCK_EXTENSION_NAME                         "VK_KHR_shader_clock"
#define VK_KHR_SHADER_CLOCK_SPEC_VERSION                           1
#define VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME               "VK_KHR_shader_draw_parameters"
#define VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION                 1
#define VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME                  "VK_KHR_shader_float16_int8"
#define VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION                    1
#define VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME                "VK_KHR_shader_float_controls"
#define VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION                  4
#define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME           "VK_KHR_shader_integer_dot_product"
#define VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION             1
#define VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME             "VK_KHR_shader_non_semantic_info"
#define VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION               1
#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME       "VK_KHR_shader_subgroup_extended_types"
#define VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION         1
#define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME "VK_KHR_shader_subgroup_uniform_control_flow"
#define VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION   1
#define VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME          "VK_KHR_shader_terminate_invocation"
#define VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION            1
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME             "VK_KHR_shared_presentable_image"
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION               1
#define VK_KHR_SPIRV_1_4_EXTENSION_NAME                            "VK_KHR_spirv_1_4"
#define VK_KHR_SPIRV_1_4_SPEC_VERSION                              1
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME         "VK_KHR_storage_buffer_storage_class"
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION           1
#define VK_KHR_SURFACE_EXTENSION_NAME                              "VK_KHR_surface"
#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME       "VK_KHR_surface_protected_capabilities"
#define VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION         1
#define VK_KHR_SURFACE_SPEC_VERSION                                25
#define VK_KHR_SWAPCHAIN_EXTENSION_NAME                            "VK_KHR_swapchain"
#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME             "VK_KHR_swapchain_mutable_format"
#define VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION               1
#define VK_KHR_SWAPCHAIN_SPEC_VERSION                              70
#define VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME                    "VK_KHR_synchronization2"
#define VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION                      1
#define VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME                   "VK_KHR_timeline_semaphore"
#define VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION                     2
#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME       "VK_KHR_uniform_buffer_standard_layout"
#define VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION         1
#define VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME                    "VK_KHR_variable_pointers"
#define VK_KHR_VARIABLE_POINTERS_SPEC_VERSION                      1
#define VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME                    "VK_KHR_video_decode_h264"
#define VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION                      8
#define VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME                    "VK_KHR_video_decode_h265"
#define VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION                      7
#define VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME                   "VK_KHR_video_decode_queue"
#define VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION                     7
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME "VK_KHR_video_encode_queue"

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION 10

#endif
#define VK_KHR_VIDEO_QUEUE_EXTENSION_NAME         "VK_KHR_video_queue"
#define VK_KHR_VIDEO_QUEUE_SPEC_VERSION           8
#define VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME "VK_KHR_vulkan_memory_model"
#define VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION   3
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	#define VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME "VK_KHR_wayland_surface"

#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	#define VK_KHR_WAYLAND_SURFACE_SPEC_VERSION 6

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME "VK_KHR_win32_keyed_mutex"

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION 1

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_WIN32_SURFACE_EXTENSION_NAME "VK_KHR_win32_surface"

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_WIN32_SURFACE_SPEC_VERSION 6

#endif
#define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME "VK_KHR_workgroup_memory_explicit_layout"
#define VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION   1
#if defined(VK_USE_PLATFORM_XCB_KHR)
	#define VK_KHR_XCB_SURFACE_EXTENSION_NAME "VK_KHR_xcb_surface"

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
	#define VK_KHR_XCB_SURFACE_SPEC_VERSION 6

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
	#define VK_KHR_XLIB_SURFACE_EXTENSION_NAME "VK_KHR_xlib_surface"

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
	#define VK_KHR_XLIB_SURFACE_SPEC_VERSION 6

#endif
#define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME "VK_KHR_zero_initialize_workgroup_memory"
#define VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION   1
#define VK_LOD_CLAMP_NONE                                      1000.0F
#define VK_LUID_SIZE                                           8
#define VK_LUID_SIZE_KHR                                       8
#define VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME         "VK_LUNARG_direct_driver_loading"
#define VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION           1
#define VK_MAX_DESCRIPTION_SIZE                                256
#define VK_MAX_DEVICE_GROUP_SIZE                               32
#define VK_MAX_DEVICE_GROUP_SIZE_KHR                           32
#define VK_MAX_DRIVER_INFO_SIZE                                256
#define VK_MAX_DRIVER_INFO_SIZE_KHR                            256
#define VK_MAX_DRIVER_NAME_SIZE                                256
#define VK_MAX_DRIVER_NAME_SIZE_KHR                            256
#define VK_MAX_EXTENSION_NAME_SIZE                             256
#define VK_MAX_GLOBAL_PRIORITY_SIZE_EXT                        16
#define VK_MAX_GLOBAL_PRIORITY_SIZE_KHR                        16
#define VK_MAX_MEMORY_HEAPS                                    16
#define VK_MAX_MEMORY_TYPES                                    32
#define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE                       256
#define VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT               32
#define VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME                  "VK_MSFT_layered_driver"
#define VK_MSFT_LAYERED_DRIVER_SPEC_VERSION                    1
#if defined(VK_USE_PLATFORM_IOS_MVK)
	#define VK_MVK_IOS_SURFACE_EXTENSION_NAME "VK_MVK_ios_surface"

#endif
#if defined(VK_USE_PLATFORM_IOS_MVK)
	#define VK_MVK_IOS_SURFACE_SPEC_VERSION 3

#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
	#define VK_MVK_MACOS_SURFACE_EXTENSION_NAME "VK_MVK_macos_surface"

#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
	#define VK_MVK_MACOS_SURFACE_SPEC_VERSION 3

#endif
#if defined(VK_USE_PLATFORM_VI_NN)
	#define VK_NN_VI_SURFACE_EXTENSION_NAME "VK_NN_vi_surface"

#endif
#if defined(VK_USE_PLATFORM_VI_NN)
	#define VK_NN_VI_SURFACE_SPEC_VERSION 1

#endif
#define VK_NVX_BINARY_IMPORT_EXTENSION_NAME                 "VK_NVX_binary_import"
#define VK_NVX_BINARY_IMPORT_SPEC_VERSION                   1
#define VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME             "VK_NVX_image_view_handle"
#define VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION               2
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME "VK_NVX_multiview_per_view_attributes"
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION   1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME "VK_NV_acquire_winrt_display"

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION 1

#endif
#define VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME                "VK_NV_clip_space_w_scaling"
#define VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION                  1
#define VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME          "VK_NV_compute_shader_derivatives"
#define VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION            1
#define VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME                  "VK_NV_cooperative_matrix"
#define VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION                    1
#define VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME                "VK_NV_copy_memory_indirect"
#define VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION                  1
#define VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME                "VK_NV_corner_sampled_image"
#define VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION                  2
#define VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME             "VK_NV_coverage_reduction_mode"
#define VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION               1
#define VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME                "VK_NV_dedicated_allocation"
#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME "VK_NV_dedicated_allocation_image_aliasing"
#define VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION   1
#define VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION                  1
#define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME      "VK_NV_descriptor_pool_overallocation"
#define VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION        1
#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME           "VK_NV_device_diagnostics_config"
#define VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION             2
#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME       "VK_NV_device_diagnostic_checkpoints"
#define VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION         2
#define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME   "VK_NV_device_generated_commands_compute"
#define VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION     2
#define VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME           "VK_NV_device_generated_commands"
#define VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION             3
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_NV_DISPLACEMENT_MICROMAP_EXTENSION_NAME "VK_NV_displacement_micromap"

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_NV_DISPLACEMENT_MICROMAP_SPEC_VERSION 2

#endif
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_NV_external_memory_capabilities"
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION   1
#define VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME              "VK_NV_external_memory"
#define VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME         "VK_NV_external_memory_rdma"
#define VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION           1
#define VK_NV_EXTERNAL_MEMORY_SPEC_VERSION                1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME "VK_NV_external_memory_win32"

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION 1

#endif
#define VK_NV_FILL_RECTANGLE_EXTENSION_NAME                 "VK_NV_fill_rectangle"
#define VK_NV_FILL_RECTANGLE_SPEC_VERSION                   1
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME     "VK_NV_fragment_coverage_to_color"
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION       1
#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME    "VK_NV_fragment_shader_barycentric"
#define VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION      1
#define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME    "VK_NV_fragment_shading_rate_enums"
#define VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION      1
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME      "VK_NV_framebuffer_mixed_samples"
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION        1
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME    "VK_NV_geometry_shader_passthrough"
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION      1
#define VK_NV_GLSL_SHADER_EXTENSION_NAME                    "VK_NV_glsl_shader"
#define VK_NV_GLSL_SHADER_SPEC_VERSION                      1
#define VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME     "VK_NV_inherited_viewport_scissor"
#define VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION       1
#define VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME        "VK_NV_linear_color_attachment"
#define VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION          1
#define VK_NV_LOW_LATENCY_2_EXTENSION_NAME                  "VK_NV_low_latency2"
#define VK_NV_LOW_LATENCY_2_SPEC_VERSION                    1
#define VK_NV_LOW_LATENCY_EXTENSION_NAME                    "VK_NV_low_latency"
#define VK_NV_LOW_LATENCY_SPEC_VERSION                      1
#define VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME           "VK_NV_memory_decompression"
#define VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION             1
#define VK_NV_MESH_SHADER_EXTENSION_NAME                    "VK_NV_mesh_shader"
#define VK_NV_MESH_SHADER_SPEC_VERSION                      1
#define VK_NV_OPTICAL_FLOW_EXTENSION_NAME                   "VK_NV_optical_flow"
#define VK_NV_OPTICAL_FLOW_SPEC_VERSION                     1
#define VK_NV_PRESENT_BARRIER_EXTENSION_NAME                "VK_NV_present_barrier"
#define VK_NV_PRESENT_BARRIER_SPEC_VERSION                  1
#define VK_NV_RAY_TRACING_EXTENSION_NAME                    "VK_NV_ray_tracing"
#define VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME "VK_NV_ray_tracing_invocation_reorder"
#define VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION   1
#define VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME        "VK_NV_ray_tracing_motion_blur"
#define VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION          1
#define VK_NV_RAY_TRACING_SPEC_VERSION                      3
#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME   "VK_NV_representative_fragment_test"
#define VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION     2
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME  "VK_NV_sample_mask_override_coverage"
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION    1
#define VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME              "VK_NV_scissor_exclusive"
#define VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION                2
#define VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME         "VK_NV_shader_image_footprint"
#define VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION           2
#define VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME             "VK_NV_shader_sm_builtins"
#define VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION               1
#define VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME    "VK_NV_shader_subgroup_partitioned"
#define VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION      1
#define VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME             "VK_NV_shading_rate_image"
#define VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION               3
#define VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME                "VK_NV_viewport_array2"
#define VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION                  1
#define VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME               "VK_NV_viewport_array2"
#define VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION                 1
#define VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME               "VK_NV_viewport_swizzle"
#define VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION                 1
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME "VK_NV_win32_keyed_mutex"

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION 2

#endif
#define VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME              "VK_QCOM_filter_cubic_clamp"
#define VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION                1
#define VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME            "VK_QCOM_filter_cubic_weights"
#define VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION              1
#define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME     "VK_QCOM_fragment_density_map_offset"
#define VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION       1
#define VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME              "VK_QCOM_image_processing2"
#define VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION                1
#define VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME                "VK_QCOM_image_processing"
#define VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION                  1
#define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME "VK_QCOM_multiview_per_view_render_areas"
#define VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION   1
#define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME    "VK_QCOM_multiview_per_view_viewports"
#define VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION      1
#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME      "VK_QCOM_render_pass_shader_resolve"
#define VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION        4
#define VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME           "VK_QCOM_render_pass_store_ops"
#define VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION             2
#define VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME           "VK_QCOM_render_pass_transform"
#define VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION             3
#define VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME           "VK_QCOM_rotated_copy_commands"
#define VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION             1
#define VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME                 "VK_QCOM_tile_properties"
#define VK_QCOM_TILE_PROPERTIES_SPEC_VERSION                   1
#define VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME                   "VK_QCOM_ycbcr_degamma"
#define VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION                     1
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	#define VK_QNX_EXTERNAL_MEMORY_SCREEN_BUFFER_EXTENSION_NAME "VK_QNX_external_memory_screen_buffer"

#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	#define VK_QNX_EXTERNAL_MEMORY_SCREEN_BUFFER_SPEC_VERSION 1

#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	#define VK_QNX_SCREEN_SURFACE_EXTENSION_NAME "VK_QNX_screen_surface"

#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	#define VK_QNX_SCREEN_SURFACE_SPEC_VERSION 1

#endif
#define VK_QUEUE_FAMILY_EXTERNAL              (~1U)
#define VK_QUEUE_FAMILY_EXTERNAL_KHR          (~1U)
#define VK_QUEUE_FAMILY_FOREIGN_EXT           (~2U)
#define VK_QUEUE_FAMILY_IGNORED               (~0U)
#define VK_REMAINING_3D_SLICES_EXT            (~0U)
#define VK_REMAINING_ARRAY_LAYERS             (~0U)
#define VK_REMAINING_MIP_LEVELS               (~0U)
#define VK_SEC_AMIGO_PROFILING_EXTENSION_NAME "VK_SEC_amigo_profiling"
#define VK_SEC_AMIGO_PROFILING_SPEC_VERSION   1
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_SHADER_INDEX_UNUSED_AMDX (~0U)

#endif
#define VK_SHADER_UNUSED_KHR                                (~0U)
#define VK_SHADER_UNUSED_NV                                 (~0U)
#define VK_SUBPASS_EXTERNAL                                 (~0U)
#define VK_TRUE                                             1
#define VK_UUID_SIZE                                        16
#define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME "VK_VALVE_descriptor_set_host_mapping"
#define VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION   1
#define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME     "VK_VALVE_mutable_descriptor_type"
#define VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION       1
#define VK_WHOLE_SIZE                                       (~0ULL)


/* */
/* File: vk_platform.h */
/* */
/*
** Copyright 2014-2023 The Khronos Group Inc.
**
** SPDX-License-Identifier: Apache-2.0
*/


#ifndef VK_PLATFORM_H_
	#define VK_PLATFORM_H_

	#ifdef __cplusplus
extern "C" {
	#endif /* __cplusplus */

	/*
***************************************************************************************************
*   Platform-specific directives and type declarations
***************************************************************************************************
*/

	/* Platform-specific calling convention macros.
 *
 * Platforms should define these so that Vulkan clients call Vulkan commands
 * with the same calling conventions that the Vulkan implementation expects.
 *
 * VKAPI_ATTR - Placed before the return type in function declarations.
 *              Useful for C++11 and GCC/Clang-style function attribute syntax.
 * VKAPI_CALL - Placed after the return type in function declarations.
 *              Useful for MSVC-style calling convention syntax.
 * VKAPI_PTR  - Placed between the '(' and '*' in function pointer types.
 *
 * Function declaration:  VKAPI_ATTR void VKAPI_CALL vkCommand(void);
 * Function pointer type: typedef void (VKAPI_PTR *PFN_vkCommand)(void);
 */
	#if defined(_WIN32)
		/* On Windows, Vulkan commands use the stdcall convention */
		#define VKAPI_ATTR
		#define VKAPI_CALL __stdcall
		#define VKAPI_PTR  VKAPI_CALL
	#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH < 7
		#error "Vulkan is not supported for the 'armeabi' NDK ABI"
	#elif defined(__ANDROID__) && defined(__ARM_ARCH) && __ARM_ARCH >= 7 && defined(__ARM_32BIT_STATE)
		/* On Android 32-bit ARM targets, Vulkan functions use the "hardfloat" */
		/* calling convention, i.e. float parameters are passed in registers. This */
		/* is true even if the rest of the application passes floats on the stack, */
		/* as it does by default when compiling for the armeabi-v7a NDK ABI. */
		#define VKAPI_ATTR __attribute__((pcs("aapcs-vfp")))
		#define VKAPI_CALL
		#define VKAPI_PTR VKAPI_ATTR
	#else
		/* On other platforms, use the default calling convention */
		#define VKAPI_ATTR
		#define VKAPI_CALL
		#define VKAPI_PTR
	#endif

	#if !defined(VK_NO_STDDEF_H)
		#include <stddef.h>
	#endif /* !defined(VK_NO_STDDEF_H) */

	#if !defined(VK_NO_STDINT_H)
		#if defined(_MSC_VER) && (_MSC_VER < 1600)
typedef signed __int8    int8_t;
typedef unsigned __int8  uint8_t;
typedef signed __int16   int16_t;
typedef unsigned __int16 uint16_t;
typedef signed __int32   int32_t;
typedef unsigned __int32 uint32_t;
typedef signed __int64   int64_t;
typedef unsigned __int64 uint64_t;
		#else
			#include <stdint.h>
		#endif
	#endif /* !defined(VK_NO_STDINT_H) */

	#ifdef __cplusplus
} /* extern "C" */
	#endif /* __cplusplus */

#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT) || defined(VK_USE_PLATFORM_XLIB_KHR)
	#include <X11/Xlib.h>
#endif

#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	#include <X11/extensions/Xrandr.h>
#endif

#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	#include <wayland-client.h>
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) \
	|| defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR)
	#include <windows.h>
#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)
	#include <xcb/xcb.h>
#endif

#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	#include <directfb.h>
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA) || defined(VK_USE_PLATFORM_FUCHSIA) || defined(VK_USE_PLATFORM_FUCHSIA) || defined(VK_USE_PLATFORM_FUCHSIA)
	#include <zircon/types.h>
#endif

#if defined(VK_USE_PLATFORM_GGP) || defined(VK_USE_PLATFORM_GGP)
	#include <ggp_c/vulkan_types.h>
#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX) || defined(VK_USE_PLATFORM_SCREEN_QNX)
	#include <screen/screen.h>
#endif

#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT) || defined(VK_USE_PLATFORM_XLIB_KHR)

#endif

#if defined(VK_USE_PLATFORM_XLIB_KHR)

#endif

#if defined(VK_USE_PLATFORM_XLIB_KHR)

#endif

#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)

#endif

#if defined(VK_USE_PLATFORM_WAYLAND_KHR)

#endif

#if defined(VK_USE_PLATFORM_WAYLAND_KHR)

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR)

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR)

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR)

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR) || defined(VK_USE_PLATFORM_WIN32_KHR)

#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)

#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)

#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)

#endif

#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)

#endif

#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA) || defined(VK_USE_PLATFORM_FUCHSIA) || defined(VK_USE_PLATFORM_FUCHSIA) || defined(VK_USE_PLATFORM_FUCHSIA)

#endif

#if defined(VK_USE_PLATFORM_GGP)

#endif

#if defined(VK_USE_PLATFORM_GGP)

#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)

#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)

#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)

#endif

/* DEPRECATED: This define is deprecated. VK_MAKE_API_VERSION should be used instead. */
#define VK_MAKE_VERSION(major, minor, patch) ((((uint32_t)(major)) << 22U) | (((uint32_t)(minor)) << 12U) | ((uint32_t)(patch)))
/* DEPRECATED: This define is deprecated. VK_API_VERSION_MAJOR should be used instead. */
#define VK_VERSION_MAJOR(version) ((uint32_t)(version) >> 22U)
/* DEPRECATED: This define is deprecated. VK_API_VERSION_MINOR should be used instead. */
#define VK_VERSION_MINOR(version) (((uint32_t)(version) >> 12U) & 0x3FFU)
/* DEPRECATED: This define is deprecated. VK_API_VERSION_PATCH should be used instead. */
#define VK_VERSION_PATCH(version) ((uint32_t)(version) & 0xFFFU)
#define VK_MAKE_API_VERSION(variant, major, minor, patch) \
	((((uint32_t)(variant)) << 29U) | (((uint32_t)(major)) << 22U) | (((uint32_t)(minor)) << 12U) | ((uint32_t)(patch)))
#define VK_API_VERSION_VARIANT(version) ((uint32_t)(version) >> 29U)
#define VK_API_VERSION_MAJOR(version)   (((uint32_t)(version) >> 22U) & 0x7FU)
#define VK_API_VERSION_MINOR(version)   (((uint32_t)(version) >> 12U) & 0x3FFU)
#define VK_API_VERSION_PATCH(version)   ((uint32_t)(version) & 0xFFFU)
/* DEPRECATED: This define has been removed. Specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION macro, should be used instead. */
/*#define VK_API_VERSION VK_MAKE_API_VERSION(0, 1, 0, 0) // Patch version should always be set to 0 */
/* Vulkan 1.0 version number */
#define VK_API_VERSION_1_0 VK_MAKE_API_VERSION(0, 1, 0, 0) /* Patch version should always be set to 0 */
/* Vulkan 1.1 version number */
#define VK_API_VERSION_1_1 VK_MAKE_API_VERSION(0, 1, 1, 0) /* Patch version should always be set to 0 */
/* Vulkan 1.2 version number */
#define VK_API_VERSION_1_2 VK_MAKE_API_VERSION(0, 1, 2, 0) /* Patch version should always be set to 0 */
/* Vulkan 1.3 version number */
#define VK_API_VERSION_1_3 VK_MAKE_API_VERSION(0, 1, 3, 0) /* Patch version should always be set to 0 */
/* Version of this file */
#define VK_HEADER_VERSION        266
#define VK_DEFINE_HANDLE(object) typedef struct object##_T *object;
#ifndef VK_USE_64_BIT_PTR_DEFINES
	#if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__)) || defined(_M_X64) || defined(__ia64) || defined(_M_IA64) \
		|| defined(__aarch64__) || defined(__powerpc64__) || (defined(__riscv) && __riscv_xlen == 64)
		#define VK_USE_64_BIT_PTR_DEFINES 1
	#else
		#define VK_USE_64_BIT_PTR_DEFINES 0
	#endif
#endif
#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE
	#if (VK_USE_64_BIT_PTR_DEFINES == 1)
		#if (defined(__cplusplus) && (__cplusplus >= 201103L)) || (defined(_MSVC_LANG) && (_MSVC_LANG >= 201103L))
			#define VK_NULL_HANDLE nullptr
		#else
			#define VK_NULL_HANDLE ((void *)0)
		#endif
	#else
		#define VK_NULL_HANDLE 0ULL
	#endif
#endif
#ifndef VK_NULL_HANDLE
	#define VK_NULL_HANDLE 0
#endif
#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE
	#if (VK_USE_64_BIT_PTR_DEFINES == 1)
		#define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;
	#else
		#define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
	#endif
#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
struct ANativeWindow;
#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
struct AHardwareBuffer;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
	#ifdef __OBJC__
@class CAMetalLayer;
	#else
typedef void CAMetalLayer;
	#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
	#ifdef __OBJC__
@protocol             MTLDevice;
typedef id<MTLDevice> MTLDevice_id;
	#else
typedef void *MTLDevice_id;
	#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
	#ifdef __OBJC__
@protocol                   MTLCommandQueue;
typedef id<MTLCommandQueue> MTLCommandQueue_id;
	#else
typedef void *MTLCommandQueue_id;
	#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
	#ifdef __OBJC__
@protocol             MTLBuffer;
typedef id<MTLBuffer> MTLBuffer_id;
	#else
typedef void *MTLBuffer_id;
	#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
	#ifdef __OBJC__
@protocol              MTLTexture;
typedef id<MTLTexture> MTLTexture_id;
	#else
typedef void *MTLTexture_id;
	#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
	#ifdef __OBJC__
@protocol                  MTLSharedEvent;
typedef id<MTLSharedEvent> MTLSharedEvent_id;
	#else
typedef void *MTLSharedEvent_id;
	#endif
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct __IOSurface *IOSurfaceRef;
#endif



VK_DEFINE_HANDLE(VkInstance)
VK_DEFINE_HANDLE(VkPhysicalDevice)
VK_DEFINE_HANDLE(VkDevice)
VK_DEFINE_HANDLE(VkQueue)
VK_DEFINE_HANDLE(VkCommandBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeviceMemory)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCommandPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImage)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImageView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderModule)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipeline)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSampler)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSet)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSetLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFence)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSemaphore)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkEvent)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkQueryPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFramebuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkRenderPass)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineCache)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkIndirectCommandsLayoutNV)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorUpdateTemplate)
#define VkDescriptorUpdateTemplateKHR VkDescriptorUpdateTemplate
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSamplerYcbcrConversion)
#define VkSamplerYcbcrConversionKHR VkSamplerYcbcrConversion
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkValidationCacheEXT)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureNV)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPerformanceConfigurationINTEL)
#if defined(VK_USE_PLATFORM_FUCHSIA)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferCollectionFUCHSIA)
#endif

VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeferredOperationKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPrivateDataSlot)
#define VkPrivateDataSlotEXT VkPrivateDataSlot
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCuModuleNVX)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCuFunctionNVX)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkOpticalFlowSessionNV)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkMicromapEXT)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderEXT)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayModeKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSurfaceKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSwapchainKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugReportCallbackEXT)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugUtilsMessengerEXT)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkVideoSessionKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkVideoSessionParametersKHR)
typedef enum VkAttachmentLoadOp {
	VK_ATTACHMENT_LOAD_OP_LOAD = 0,
	VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
	VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
	VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000,
	VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentLoadOp;
typedef enum VkAttachmentStoreOp {
	VK_ATTACHMENT_STORE_OP_STORE = 0,
	VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
	VK_ATTACHMENT_STORE_OP_NONE = 1000301000,
	VK_ATTACHMENT_STORE_OP_NONE_KHR = VK_ATTACHMENT_STORE_OP_NONE,
	VK_ATTACHMENT_STORE_OP_NONE_QCOM = VK_ATTACHMENT_STORE_OP_NONE,
	VK_ATTACHMENT_STORE_OP_NONE_EXT = VK_ATTACHMENT_STORE_OP_NONE,
	VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentStoreOp;
typedef enum VkBlendFactor {
	VK_BLEND_FACTOR_ZERO = 0,
	VK_BLEND_FACTOR_ONE = 1,
	VK_BLEND_FACTOR_SRC_COLOR = 2,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
	VK_BLEND_FACTOR_DST_COLOR = 4,
	VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
	VK_BLEND_FACTOR_SRC_ALPHA = 6,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
	VK_BLEND_FACTOR_DST_ALPHA = 8,
	VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
	VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
	VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
	VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
	VK_BLEND_FACTOR_SRC1_COLOR = 15,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
	VK_BLEND_FACTOR_SRC1_ALPHA = 17,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
	VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
} VkBlendFactor;
typedef enum VkBlendOp {
	VK_BLEND_OP_ADD = 0,
	VK_BLEND_OP_SUBTRACT = 1,
	VK_BLEND_OP_REVERSE_SUBTRACT = 2,
	VK_BLEND_OP_MIN = 3,
	VK_BLEND_OP_MAX = 4,
	VK_BLEND_OP_ZERO_EXT = 1000148000,
	VK_BLEND_OP_SRC_EXT = 1000148001,
	VK_BLEND_OP_DST_EXT = 1000148002,
	VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
	VK_BLEND_OP_DST_OVER_EXT = 1000148004,
	VK_BLEND_OP_SRC_IN_EXT = 1000148005,
	VK_BLEND_OP_DST_IN_EXT = 1000148006,
	VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
	VK_BLEND_OP_DST_OUT_EXT = 1000148008,
	VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
	VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
	VK_BLEND_OP_XOR_EXT = 1000148011,
	VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
	VK_BLEND_OP_SCREEN_EXT = 1000148013,
	VK_BLEND_OP_OVERLAY_EXT = 1000148014,
	VK_BLEND_OP_DARKEN_EXT = 1000148015,
	VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
	VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
	VK_BLEND_OP_COLORBURN_EXT = 1000148018,
	VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
	VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
	VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
	VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
	VK_BLEND_OP_INVERT_EXT = 1000148023,
	VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
	VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
	VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
	VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
	VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
	VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
	VK_BLEND_OP_HARDMIX_EXT = 1000148030,
	VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
	VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
	VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
	VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
	VK_BLEND_OP_PLUS_EXT = 1000148035,
	VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
	VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
	VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
	VK_BLEND_OP_MINUS_EXT = 1000148039,
	VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
	VK_BLEND_OP_CONTRAST_EXT = 1000148041,
	VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
	VK_BLEND_OP_RED_EXT = 1000148043,
	VK_BLEND_OP_GREEN_EXT = 1000148044,
	VK_BLEND_OP_BLUE_EXT = 1000148045,
	VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF
} VkBlendOp;
typedef enum VkBorderColor {
	VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
	VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
	VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
	VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
	VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
	VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
	VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
	VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
	VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF
} VkBorderColor;
typedef enum VkFramebufferCreateFlagBits {
	VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1,
	VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
	VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFramebufferCreateFlagBits;
typedef enum VkRenderPassCreateFlagBits {
	VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2,
	VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkRenderPassCreateFlagBits;
typedef enum VkSamplerCreateFlagBits {
	VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1,
	VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2,
	VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8,
	VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4,
	VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16,
	VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSamplerCreateFlagBits;
typedef enum VkPipelineCacheHeaderVersion {
	VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
	VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCacheHeaderVersion;
typedef enum VkPipelineCacheCreateFlagBits {
	VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1,
	VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT,
	VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCacheCreateFlagBits;
typedef enum VkPipelineShaderStageCreateFlagBits {
	VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1,
	VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2,
	VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT,
	VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT,
	VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineShaderStageCreateFlagBits;
typedef enum VkDescriptorSetLayoutCreateFlagBits {
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = 128,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4,
	VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorSetLayoutCreateFlagBits;
typedef enum VkInstanceCreateFlagBits {
	VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1,
	VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkInstanceCreateFlagBits;
typedef enum VkDeviceQueueCreateFlagBits {
	VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
	VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDeviceQueueCreateFlagBits;
typedef enum VkBufferCreateFlagBits {
	VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
	VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
	VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
	VK_BUFFER_CREATE_PROTECTED_BIT = 8,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
	VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
	VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32,
	VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkBufferCreateFlagBits;
typedef enum VkBufferUsageFlagBits {
	VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
	VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
	VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
	VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
	VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
	VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
	VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
	VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
	VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072,
	VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192,
	VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384,
	VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048,
	VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096,
	VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512,
	VK_BUFFER_USAGE_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 33554432,
	VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288,
	VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576,
	VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024,
	VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
	VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
	VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768,
	VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536,
	VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152,
	VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304,
	VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864,
	VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608,
	VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216,
	VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkBufferUsageFlagBits;
typedef enum VkColorComponentFlagBits {
	VK_COLOR_COMPONENT_R_BIT = 1,
	VK_COLOR_COMPONENT_G_BIT = 2,
	VK_COLOR_COMPONENT_B_BIT = 4,
	VK_COLOR_COMPONENT_A_BIT = 8,
	VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkColorComponentFlagBits;
typedef enum VkComponentSwizzle {
	VK_COMPONENT_SWIZZLE_IDENTITY = 0,
	VK_COMPONENT_SWIZZLE_ZERO = 1,
	VK_COMPONENT_SWIZZLE_ONE = 2,
	VK_COMPONENT_SWIZZLE_R = 3,
	VK_COMPONENT_SWIZZLE_G = 4,
	VK_COMPONENT_SWIZZLE_B = 5,
	VK_COMPONENT_SWIZZLE_A = 6,
	VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF
} VkComponentSwizzle;
typedef enum VkCommandPoolCreateFlagBits {
	VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
	VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
	VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
	VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandPoolCreateFlagBits;
typedef enum VkCommandPoolResetFlagBits {
	VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
	VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandPoolResetFlagBits;
typedef enum VkCommandBufferResetFlagBits {
	VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
	VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferResetFlagBits;
typedef enum VkCommandBufferLevel {
	VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
	VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
	VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferLevel;
typedef enum VkCommandBufferUsageFlagBits {
	VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
	VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
	VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
	VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferUsageFlagBits;
typedef enum VkCompareOp {
	VK_COMPARE_OP_NEVER = 0,
	VK_COMPARE_OP_LESS = 1,
	VK_COMPARE_OP_EQUAL = 2,
	VK_COMPARE_OP_LESS_OR_EQUAL = 3,
	VK_COMPARE_OP_GREATER = 4,
	VK_COMPARE_OP_NOT_EQUAL = 5,
	VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
	VK_COMPARE_OP_ALWAYS = 7,
	VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF
} VkCompareOp;
typedef enum VkCullModeFlagBits {
	VK_CULL_MODE_NONE = 0,
	VK_CULL_MODE_FRONT_BIT = 1,
	VK_CULL_MODE_BACK_BIT = 2,
	VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
	VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkCullModeFlagBits;
typedef enum VkDescriptorType {
	VK_DESCRIPTOR_TYPE_SAMPLER = 0,
	VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
	VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
	VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
	VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
	VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
	VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
	VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK,
	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
	VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
	VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000,
	VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000,
	VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001,
	VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000,
	VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorType;
typedef enum VkDynamicState {
	VK_DYNAMIC_STATE_VIEWPORT = 0,
	VK_DYNAMIC_STATE_SCISSOR = 1,
	VK_DYNAMIC_STATE_LINE_WIDTH = 2,
	VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
	VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
	VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
	VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
	VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
	VK_DYNAMIC_STATE_CULL_MODE = 1000267000,
	VK_DYNAMIC_STATE_FRONT_FACE = 1000267001,
	VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002,
	VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003,
	VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004,
	VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005,
	VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006,
	VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007,
	VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009,
	VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010,
	VK_DYNAMIC_STATE_STENCIL_OP = 1000267011,
	VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001,
	VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002,
	VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004,
	VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1000099001,
	VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1000099002,
	VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
	VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
	VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
	VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
	VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1000205000,
	VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
	VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
	VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
	VK_DYNAMIC_STATE_CULL_MODE_EXT = VK_DYNAMIC_STATE_CULL_MODE,
	VK_DYNAMIC_STATE_FRONT_FACE_EXT = VK_DYNAMIC_STATE_FRONT_FACE,
	VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY,
	VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT,
	VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT,
	VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE,
	VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE,
	VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE,
	VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = VK_DYNAMIC_STATE_DEPTH_COMPARE_OP,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE,
	VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE,
	VK_DYNAMIC_STATE_STENCIL_OP_EXT = VK_DYNAMIC_STATE_STENCIL_OP,
	VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000,
	VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000,
	VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE,
	VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE,
	VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003,
	VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE,
	VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000,
	VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002,
	VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003,
	VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004,
	VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005,
	VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006,
	VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007,
	VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008,
	VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009,
	VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010,
	VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011,
	VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012,
	VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013,
	VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014,
	VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015,
	VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016,
	VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017,
	VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018,
	VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019,
	VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020,
	VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021,
	VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022,
	VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023,
	VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024,
	VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025,
	VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026,
	VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027,
	VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028,
	VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029,
	VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030,
	VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031,
	VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032,
	VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = 1000524000,
	VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF
} VkDynamicState;
typedef enum VkFenceCreateFlagBits {
	VK_FENCE_CREATE_SIGNALED_BIT = 1,
	VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFenceCreateFlagBits;
typedef enum VkPolygonMode {
	VK_POLYGON_MODE_FILL = 0,
	VK_POLYGON_MODE_LINE = 1,
	VK_POLYGON_MODE_POINT = 2,
	VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
	VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF
} VkPolygonMode;
typedef enum VkFormat {
	VK_FORMAT_UNDEFINED = 0,
	VK_FORMAT_R4G4_UNORM_PACK8 = 1,
	VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
	VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
	VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
	VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
	VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
	VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
	VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
	VK_FORMAT_R8_UNORM = 9,
	VK_FORMAT_R8_SNORM = 10,
	VK_FORMAT_R8_USCALED = 11,
	VK_FORMAT_R8_SSCALED = 12,
	VK_FORMAT_R8_UINT = 13,
	VK_FORMAT_R8_SINT = 14,
	VK_FORMAT_R8_SRGB = 15,
	VK_FORMAT_R8G8_UNORM = 16,
	VK_FORMAT_R8G8_SNORM = 17,
	VK_FORMAT_R8G8_USCALED = 18,
	VK_FORMAT_R8G8_SSCALED = 19,
	VK_FORMAT_R8G8_UINT = 20,
	VK_FORMAT_R8G8_SINT = 21,
	VK_FORMAT_R8G8_SRGB = 22,
	VK_FORMAT_R8G8B8_UNORM = 23,
	VK_FORMAT_R8G8B8_SNORM = 24,
	VK_FORMAT_R8G8B8_USCALED = 25,
	VK_FORMAT_R8G8B8_SSCALED = 26,
	VK_FORMAT_R8G8B8_UINT = 27,
	VK_FORMAT_R8G8B8_SINT = 28,
	VK_FORMAT_R8G8B8_SRGB = 29,
	VK_FORMAT_B8G8R8_UNORM = 30,
	VK_FORMAT_B8G8R8_SNORM = 31,
	VK_FORMAT_B8G8R8_USCALED = 32,
	VK_FORMAT_B8G8R8_SSCALED = 33,
	VK_FORMAT_B8G8R8_UINT = 34,
	VK_FORMAT_B8G8R8_SINT = 35,
	VK_FORMAT_B8G8R8_SRGB = 36,
	VK_FORMAT_R8G8B8A8_UNORM = 37,
	VK_FORMAT_R8G8B8A8_SNORM = 38,
	VK_FORMAT_R8G8B8A8_USCALED = 39,
	VK_FORMAT_R8G8B8A8_SSCALED = 40,
	VK_FORMAT_R8G8B8A8_UINT = 41,
	VK_FORMAT_R8G8B8A8_SINT = 42,
	VK_FORMAT_R8G8B8A8_SRGB = 43,
	VK_FORMAT_B8G8R8A8_UNORM = 44,
	VK_FORMAT_B8G8R8A8_SNORM = 45,
	VK_FORMAT_B8G8R8A8_USCALED = 46,
	VK_FORMAT_B8G8R8A8_SSCALED = 47,
	VK_FORMAT_B8G8R8A8_UINT = 48,
	VK_FORMAT_B8G8R8A8_SINT = 49,
	VK_FORMAT_B8G8R8A8_SRGB = 50,
	VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
	VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
	VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
	VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
	VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
	VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
	VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
	VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
	VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
	VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
	VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
	VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
	VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
	VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
	VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
	VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
	VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
	VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
	VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
	VK_FORMAT_R16_UNORM = 70,
	VK_FORMAT_R16_SNORM = 71,
	VK_FORMAT_R16_USCALED = 72,
	VK_FORMAT_R16_SSCALED = 73,
	VK_FORMAT_R16_UINT = 74,
	VK_FORMAT_R16_SINT = 75,
	VK_FORMAT_R16_SFLOAT = 76,
	VK_FORMAT_R16G16_UNORM = 77,
	VK_FORMAT_R16G16_SNORM = 78,
	VK_FORMAT_R16G16_USCALED = 79,
	VK_FORMAT_R16G16_SSCALED = 80,
	VK_FORMAT_R16G16_UINT = 81,
	VK_FORMAT_R16G16_SINT = 82,
	VK_FORMAT_R16G16_SFLOAT = 83,
	VK_FORMAT_R16G16B16_UNORM = 84,
	VK_FORMAT_R16G16B16_SNORM = 85,
	VK_FORMAT_R16G16B16_USCALED = 86,
	VK_FORMAT_R16G16B16_SSCALED = 87,
	VK_FORMAT_R16G16B16_UINT = 88,
	VK_FORMAT_R16G16B16_SINT = 89,
	VK_FORMAT_R16G16B16_SFLOAT = 90,
	VK_FORMAT_R16G16B16A16_UNORM = 91,
	VK_FORMAT_R16G16B16A16_SNORM = 92,
	VK_FORMAT_R16G16B16A16_USCALED = 93,
	VK_FORMAT_R16G16B16A16_SSCALED = 94,
	VK_FORMAT_R16G16B16A16_UINT = 95,
	VK_FORMAT_R16G16B16A16_SINT = 96,
	VK_FORMAT_R16G16B16A16_SFLOAT = 97,
	VK_FORMAT_R32_UINT = 98,
	VK_FORMAT_R32_SINT = 99,
	VK_FORMAT_R32_SFLOAT = 100,
	VK_FORMAT_R32G32_UINT = 101,
	VK_FORMAT_R32G32_SINT = 102,
	VK_FORMAT_R32G32_SFLOAT = 103,
	VK_FORMAT_R32G32B32_UINT = 104,
	VK_FORMAT_R32G32B32_SINT = 105,
	VK_FORMAT_R32G32B32_SFLOAT = 106,
	VK_FORMAT_R32G32B32A32_UINT = 107,
	VK_FORMAT_R32G32B32A32_SINT = 108,
	VK_FORMAT_R32G32B32A32_SFLOAT = 109,
	VK_FORMAT_R64_UINT = 110,
	VK_FORMAT_R64_SINT = 111,
	VK_FORMAT_R64_SFLOAT = 112,
	VK_FORMAT_R64G64_UINT = 113,
	VK_FORMAT_R64G64_SINT = 114,
	VK_FORMAT_R64G64_SFLOAT = 115,
	VK_FORMAT_R64G64B64_UINT = 116,
	VK_FORMAT_R64G64B64_SINT = 117,
	VK_FORMAT_R64G64B64_SFLOAT = 118,
	VK_FORMAT_R64G64B64A64_UINT = 119,
	VK_FORMAT_R64G64B64A64_SINT = 120,
	VK_FORMAT_R64G64B64A64_SFLOAT = 121,
	VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
	VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
	VK_FORMAT_D16_UNORM = 124,
	VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
	VK_FORMAT_D32_SFLOAT = 126,
	VK_FORMAT_S8_UINT = 127,
	VK_FORMAT_D16_UNORM_S8_UINT = 128,
	VK_FORMAT_D24_UNORM_S8_UINT = 129,
	VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
	VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
	VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
	VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
	VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
	VK_FORMAT_BC2_UNORM_BLOCK = 135,
	VK_FORMAT_BC2_SRGB_BLOCK = 136,
	VK_FORMAT_BC3_UNORM_BLOCK = 137,
	VK_FORMAT_BC3_SRGB_BLOCK = 138,
	VK_FORMAT_BC4_UNORM_BLOCK = 139,
	VK_FORMAT_BC4_SNORM_BLOCK = 140,
	VK_FORMAT_BC5_UNORM_BLOCK = 141,
	VK_FORMAT_BC5_SNORM_BLOCK = 142,
	VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
	VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
	VK_FORMAT_BC7_UNORM_BLOCK = 145,
	VK_FORMAT_BC7_SRGB_BLOCK = 146,
	VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
	VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
	VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
	VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
	VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
	VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
	VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
	VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
	VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
	VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
	VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
	VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
	VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
	VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
	VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
	VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
	VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
	VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
	VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
	VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
	VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
	VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
	VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
	VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
	VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
	VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
	VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
	VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
	VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
	VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
	VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
	VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
	VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
	VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
	VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
	VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
	VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
	VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
	VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
	VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
	VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
	VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
	VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
	VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
	VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
	VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
	VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
	VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
	VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
	VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
	VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
	VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
	VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
	VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
	VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
	VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
	VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
	VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
	VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002,
	VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003,
	VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000,
	VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001,
	VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
	VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
	VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
	VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
	VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
	VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
	VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
	VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
	VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
	VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
	VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
	VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
	VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
	VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
	VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
	VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
	VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
	VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
	VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
	VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
	VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
	VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
	VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,
	VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,
	VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
	VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
	VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
	VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
	VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
	VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
	VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
	VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
	VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
	VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
	VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
	VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
	VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
	VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
	VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
	VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
	VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
	VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
	VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
	VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
	VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
	VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
	VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
	VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
	VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,
	VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
	VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
	VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,
	VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = VK_FORMAT_A4R4G4B4_UNORM_PACK16,
	VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = VK_FORMAT_A4B4G4R4_UNORM_PACK16,
	VK_FORMAT_R16G16_S10_5_NV = 1000464000,
	VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR = 1000470000,
	VK_FORMAT_A8_UNORM_KHR = 1000470001,
	VK_FORMAT_MAX_ENUM = 0x7FFFFFFF
} VkFormat;
typedef enum VkFormatFeatureFlagBits {
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
	VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
	VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
	VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
	VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
	VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
	VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
	VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
	VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
	VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
	VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
	VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
	VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
	VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
	VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192,
	VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432,
	VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864,
	VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
	VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
	VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912,
	VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR =
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR =
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR =
		VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
	VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,
	VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
	VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192,
	VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216,
	VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824,
	VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728,
	VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 268435456,
	VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFormatFeatureFlagBits;
typedef enum VkFrontFace {
	VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
	VK_FRONT_FACE_CLOCKWISE = 1,
	VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF
} VkFrontFace;
typedef enum VkImageAspectFlagBits {
	VK_IMAGE_ASPECT_COLOR_BIT = 1,
	VK_IMAGE_ASPECT_DEPTH_BIT = 2,
	VK_IMAGE_ASPECT_STENCIL_BIT = 4,
	VK_IMAGE_ASPECT_METADATA_BIT = 8,
	VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
	VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
	VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
	VK_IMAGE_ASPECT_NONE = 0,
	VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,
	VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,
	VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,
	VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128,
	VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256,
	VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512,
	VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024,
	VK_IMAGE_ASPECT_NONE_KHR = VK_IMAGE_ASPECT_NONE,
	VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageAspectFlagBits;
typedef enum VkImageCreateFlagBits {
	VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
	VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
	VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
	VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
	VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
	VK_IMAGE_CREATE_ALIAS_BIT = 1024,
	VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
	VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
	VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
	VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
	VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
	VK_IMAGE_CREATE_DISJOINT_BIT = 512,
	VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192,
	VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
	VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
	VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
	VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
	VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
	VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,
	VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,
	VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384,
	VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536,
	VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144,
	VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072,
	VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768,
	VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageCreateFlagBits;
typedef enum VkImageLayout {
	VK_IMAGE_LAYOUT_UNDEFINED = 0,
	VK_IMAGE_LAYOUT_GENERAL = 1,
	VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
	VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
	VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
	VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
	VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
	VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
	VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
	VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
	VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000,
	VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001,
	VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002,
	VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
	VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
	VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,
	VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001,
	VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002,
	VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL,
	VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,
	VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000,
	VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
} VkImageLayout;
typedef enum VkImageTiling {
	VK_IMAGE_TILING_OPTIMAL = 0,
	VK_IMAGE_TILING_LINEAR = 1,
	VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
	VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF
} VkImageTiling;
typedef enum VkImageType {
	VK_IMAGE_TYPE_1D = 0,
	VK_IMAGE_TYPE_2D = 1,
	VK_IMAGE_TYPE_3D = 2,
	VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkImageType;
typedef enum VkImageUsageFlagBits {
	VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
	VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
	VK_IMAGE_USAGE_SAMPLED_BIT = 4,
	VK_IMAGE_USAGE_STORAGE_BIT = 8,
	VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
	VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
	VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
	VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
	VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024,
	VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048,
	VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096,
	VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256,
	VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512,
	VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256,
	VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT = 4194304,
	VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 8192,
	VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 16384,
	VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768,
	VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288,
	VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144,
	VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 1048576,
	VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152,
	VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageUsageFlagBits;
typedef enum VkImageViewCreateFlagBits {
	VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1,
	VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4,
	VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2,
	VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkImageViewCreateFlagBits;
typedef enum VkImageViewType {
	VK_IMAGE_VIEW_TYPE_1D = 0,
	VK_IMAGE_VIEW_TYPE_2D = 1,
	VK_IMAGE_VIEW_TYPE_3D = 2,
	VK_IMAGE_VIEW_TYPE_CUBE = 3,
	VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
	VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
	VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
	VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkImageViewType;
typedef enum VkSharingMode {
	VK_SHARING_MODE_EXCLUSIVE = 0,
	VK_SHARING_MODE_CONCURRENT = 1,
	VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSharingMode;
typedef enum VkIndexType {
	VK_INDEX_TYPE_UINT16 = 0,
	VK_INDEX_TYPE_UINT32 = 1,
	VK_INDEX_TYPE_NONE_KHR = 1000165000,
	VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,
	VK_INDEX_TYPE_UINT8_EXT = 1000265000,
	VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkIndexType;
typedef enum VkLogicOp {
	VK_LOGIC_OP_CLEAR = 0,
	VK_LOGIC_OP_AND = 1,
	VK_LOGIC_OP_AND_REVERSE = 2,
	VK_LOGIC_OP_COPY = 3,
	VK_LOGIC_OP_AND_INVERTED = 4,
	VK_LOGIC_OP_NO_OP = 5,
	VK_LOGIC_OP_XOR = 6,
	VK_LOGIC_OP_OR = 7,
	VK_LOGIC_OP_NOR = 8,
	VK_LOGIC_OP_EQUIVALENT = 9,
	VK_LOGIC_OP_INVERT = 10,
	VK_LOGIC_OP_OR_REVERSE = 11,
	VK_LOGIC_OP_COPY_INVERTED = 12,
	VK_LOGIC_OP_OR_INVERTED = 13,
	VK_LOGIC_OP_NAND = 14,
	VK_LOGIC_OP_SET = 15,
	VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF
} VkLogicOp;
typedef enum VkMemoryHeapFlagBits {
	VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
	VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
	VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
	VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryHeapFlagBits;
typedef enum VkAccessFlagBits {
	VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
	VK_ACCESS_INDEX_READ_BIT = 2,
	VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
	VK_ACCESS_UNIFORM_READ_BIT = 8,
	VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
	VK_ACCESS_SHADER_READ_BIT = 32,
	VK_ACCESS_SHADER_WRITE_BIT = 64,
	VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
	VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
	VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
	VK_ACCESS_TRANSFER_READ_BIT = 2048,
	VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
	VK_ACCESS_HOST_READ_BIT = 8192,
	VK_ACCESS_HOST_WRITE_BIT = 16384,
	VK_ACCESS_MEMORY_READ_BIT = 32768,
	VK_ACCESS_MEMORY_WRITE_BIT = 65536,
	VK_ACCESS_NONE = 0,
	VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432,
	VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864,
	VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728,
	VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576,
	VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
	VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152,
	VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304,
	VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608,
	VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
	VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
	VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216,
	VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608,
	VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072,
	VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144,
	VK_ACCESS_NONE_KHR = VK_ACCESS_NONE,
	VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkAccessFlagBits;
typedef enum VkMemoryPropertyFlagBits {
	VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
	VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
	VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
	VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
	VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
	VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
	VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64,
	VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128,
	VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256,
	VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryPropertyFlagBits;
typedef enum VkPhysicalDeviceType {
	VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
	VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
	VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
	VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
	VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
	VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkPhysicalDeviceType;
typedef enum VkPipelineBindPoint {
	VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
	VK_PIPELINE_BIND_POINT_COMPUTE = 1,
	VK_PIPELINE_BIND_POINT_EXECUTION_GRAPH_AMDX = 1000134000,
	VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
	VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
	VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003,
	VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF
} VkPipelineBindPoint;
typedef enum VkPipelineCreateFlagBits {
	VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
	VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
	VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
	VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
	VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16,
	VK_PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
	VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256,
	VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512,
	VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152,
	VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
	VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304,
	VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT,
	VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
	VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536,
	VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072,
	VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096,
	VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192,
	VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288,
	VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32,
	VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64,
	VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128,
	VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144,
	VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048,
	VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT,
	VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT,
	VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912,
	VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608,
	VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024,
	VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576,
	VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432,
	VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864,
	VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216,
	VK_PIPELINE_CREATE_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = 268435456,
	VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 134217728,
	VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824,
	VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCreateFlagBits;
typedef enum VkPrimitiveTopology {
	VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
	VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
	VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF
} VkPrimitiveTopology;
typedef enum VkQueryControlFlagBits {
	VK_QUERY_CONTROL_PRECISE_BIT = 1,
	VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryControlFlagBits;
typedef enum VkQueryPipelineStatisticFlagBits {
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
	VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
	VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
	VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
	VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
	VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
	VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
	VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
	VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 2048,
	VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 4096,
	VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 8192,
	VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryPipelineStatisticFlagBits;
typedef enum VkQueryResultFlagBits {
	VK_QUERY_RESULT_64_BIT = 1,
	VK_QUERY_RESULT_WAIT_BIT = 2,
	VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
	VK_QUERY_RESULT_PARTIAL_BIT = 8,
	VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16,
	VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueryResultFlagBits;
typedef enum VkQueryType {
	VK_QUERY_TYPE_OCCLUSION = 0,
	VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
	VK_QUERY_TYPE_TIMESTAMP = 2,
	VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000,
	VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
	VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
	VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
	VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR = 1000299000,
	VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000,
	VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000,
	VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001,
	VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000,
	VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001,
	VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkQueryType;
typedef enum VkQueueFlagBits {
	VK_QUEUE_GRAPHICS_BIT = 1,
	VK_QUEUE_COMPUTE_BIT = 2,
	VK_QUEUE_TRANSFER_BIT = 4,
	VK_QUEUE_SPARSE_BINDING_BIT = 8,
	VK_QUEUE_PROTECTED_BIT = 16,
	VK_QUEUE_VIDEO_DECODE_BIT_KHR = 32,
	VK_QUEUE_VIDEO_ENCODE_BIT_KHR = 64,
	VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256,
	VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkQueueFlagBits;
typedef enum VkSubpassContents {
	VK_SUBPASS_CONTENTS_INLINE = 0,
	VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
	VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF
} VkSubpassContents;
typedef enum VkResult {
	VK_SUCCESS = 0,
	VK_NOT_READY = 1,
	VK_TIMEOUT = 2,
	VK_EVENT_SET = 3,
	VK_EVENT_RESET = 4,
	VK_INCOMPLETE = 5,
	VK_ERROR_OUT_OF_HOST_MEMORY = -1,
	VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
	VK_ERROR_INITIALIZATION_FAILED = -3,
	VK_ERROR_DEVICE_LOST = -4,
	VK_ERROR_MEMORY_MAP_FAILED = -5,
	VK_ERROR_LAYER_NOT_PRESENT = -6,
	VK_ERROR_EXTENSION_NOT_PRESENT = -7,
	VK_ERROR_FEATURE_NOT_PRESENT = -8,
	VK_ERROR_INCOMPATIBLE_DRIVER = -9,
	VK_ERROR_TOO_MANY_OBJECTS = -10,
	VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
	VK_ERROR_FRAGMENTED_POOL = -12,
	VK_ERROR_UNKNOWN = -13,
	VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
	VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
	VK_ERROR_FRAGMENTATION = -1000161000,
	VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
	VK_PIPELINE_COMPILE_REQUIRED = 1000297000,
	VK_ERROR_SURFACE_LOST_KHR = -1000000000,
	VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
	VK_SUBOPTIMAL_KHR = 1000001003,
	VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
	VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
	VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
	VK_ERROR_INVALID_SHADER_NV = -1000012000,
	VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = -1000023000,
	VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = -1000023001,
	VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = -1000023002,
	VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = -1000023003,
	VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = -1000023004,
	VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = -1000023005,
	VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
	VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
	VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
	VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,
	VK_ERROR_NOT_PERMITTED_EXT = -1000174001,
	VK_ERROR_NOT_PERMITTED_KHR = -1000174001,
	VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
	VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
	VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
	VK_THREAD_IDLE_KHR = 1000268000,
	VK_THREAD_DONE_KHR = 1000268001,
	VK_OPERATION_DEFERRED_KHR = 1000268002,
	VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
	VK_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
	VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
	VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = -1000299000,
	VK_ERROR_COMPRESSION_EXHAUSTED_EXT = -1000338000,
	VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000,
	VK_RESULT_MAX_ENUM = 0x7FFFFFFF
} VkResult;
typedef enum VkShaderStageFlagBits {
	VK_SHADER_STAGE_VERTEX_BIT = 1,
	VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
	VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
	VK_SHADER_STAGE_GEOMETRY_BIT = 8,
	VK_SHADER_STAGE_FRAGMENT_BIT = 16,
	VK_SHADER_STAGE_COMPUTE_BIT = 32,
	VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
	VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
	VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256,
	VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512,
	VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024,
	VK_SHADER_STAGE_MISS_BIT_KHR = 2048,
	VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096,
	VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192,
	VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
	VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
	VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
	VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR,
	VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
	VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
	VK_SHADER_STAGE_TASK_BIT_NV = 64,
	VK_SHADER_STAGE_MESH_BIT_NV = 128,
	VK_SHADER_STAGE_TASK_BIT_EXT = 64,
	VK_SHADER_STAGE_MESH_BIT_EXT = 128,
	VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384,
	VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 524288,
	VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkShaderStageFlagBits;
typedef enum VkSparseMemoryBindFlagBits {
	VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
	VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSparseMemoryBindFlagBits;
typedef enum VkStencilFaceFlagBits {
	VK_STENCIL_FACE_FRONT_BIT = 1,
	VK_STENCIL_FACE_BACK_BIT = 2,
	VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
	VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK,
	VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkStencilFaceFlagBits;
typedef enum VkStencilOp {
	VK_STENCIL_OP_KEEP = 0,
	VK_STENCIL_OP_ZERO = 1,
	VK_STENCIL_OP_REPLACE = 2,
	VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
	VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
	VK_STENCIL_OP_INVERT = 5,
	VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
	VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
	VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF
} VkStencilOp;
typedef enum VkStructureType {
	VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
	VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
	VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
	VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
	VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
	VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
	VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
	VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
	VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
	VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
	VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
	VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
	VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
	VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
	VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
	VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
	VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
	VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
	VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
	VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
	VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
	VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
	VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
	VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
	VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
	VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
	VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
	VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
	VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
	VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
	VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
	VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
	VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
	VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
	VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
	VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
	VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
	VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
	VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
	VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
	VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
	VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
	VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
	VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
	VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
	VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
	VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
	VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
	VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54,
	VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000,
	VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001,
	VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002,
	VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003,
	VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004,
	VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000,
	VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000,
	VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001,
	VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004,
	VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005,
	VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006,
	VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007,
	VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008,
	VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009,
	VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000,
	VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001,
	VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001,
	VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003,
	VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
	VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
	VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
	VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
	VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
	VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
	VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
	VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
	VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
	VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
	VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
	VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
	VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
	VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
	VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000,
	VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001,
	VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003,
	VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006,
	VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007,
	VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008,
	VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009,
	VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010,
	VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012,
	VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014,
	VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1000024002,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
	VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
	VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000,
	VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001,
	VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT = 1000038000,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000038001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000038002,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT = 1000038003,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT = 1000038004,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT = 1000038005,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT = 1000038006,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT = 1000038007,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT = 1000038008,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT = 1000038009,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT = 1000038010,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT = 1000038011,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT = 1000038012,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT = 1000038013,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT = 1000039000,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000039001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000039002,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT = 1000039003,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT = 1000039004,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT = 1000039005,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT = 1000039006,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT = 1000039007,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT = 1000039009,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT = 1000039010,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT = 1000039011,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT = 1000039012,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT = 1000039013,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT = 1000039014,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = 1000040000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = 1000040001,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = 1000040003,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000040004,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000040005,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = 1000040006,
	VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
	VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_INFO,
	VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO,
	VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006,
	VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007,
	VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008,
	VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD,
	VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009,
	VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
	VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
	VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
	VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
	VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
	VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = 1000068000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = 1000068001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = 1000068002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
	VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
	VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
	VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
	VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
	VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
	VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
	VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
	VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
	VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
	VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
	VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
	VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
	VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
	VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
	VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
	VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
	VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
	VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
	VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
	VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
	VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
	VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
	VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
	VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
	VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
	VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
	VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
	VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
	VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
	VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
	VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
	VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
	VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
	VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
	VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_RESERVATION_INFO_KHR = 1000116007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
	VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
	VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
	VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
	VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
	VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
	VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
	VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
	VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
	VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
	VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
	VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
	VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
	VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX = 1000134000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX = 1000134001,
	VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX = 1000134002,
	VK_STRUCTURE_TYPE_EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX = 1000134003,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX = 1000134004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO,
	VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
	VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
	VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
	VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
	VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
	VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
	VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
	VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
	VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
	VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
	VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
	VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
	VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
	VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
	VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
	VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
	VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006,
	VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
	VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT =
		VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
	VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
	VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
	VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
	VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
	VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
	VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
	VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
	VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR =
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
	VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
	VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
	VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = 1000187000,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000187001,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000187002,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = 1000187003,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = 1000187004,
	VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = 1000187005,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
	VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
	VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
	VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
	VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
	VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
	VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
	VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
	VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
	VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
	VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
	VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
	VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
	VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
	VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
	VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
	VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES,
	VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
	VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT =
		VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES,
	VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
	VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
	VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
	VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR =
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
	VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
	VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES,
	VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
	VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
	VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
	VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR =
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002,
	VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
	VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
	VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
	VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
	VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
	VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
	VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
	VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT = 1000270000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT = 1000270001,
	VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT = 1000270002,
	VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT = 1000270003,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT = 1000270004,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT = 1000270005,
	VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT = 1000270006,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT = 1000270007,
	VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT = 1000270008,
	VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT = 1000270009,
	VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = 1000271000,
	VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = 1000271001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000,
	VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = 1000274000,
	VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = 1000274001,
	VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = 1000274002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = 1000275000,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = 1000275001,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = 1000275002,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = 1000275003,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = 1000275004,
	VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = 1000275005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT =
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
	VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
	VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
	VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
	VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT = 1000283000,
	VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT = 1000283001,
	VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT = 1000283002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
	VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
	VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
	VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
	VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000,
	VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001,
	VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002,
	VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES,
	VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO,
	VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT =
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = 1000299004,
	VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR = 1000299005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299006,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = 1000299007,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR = 1000299008,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR = 1000299009,
	VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR = 1000299010,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
	VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
	VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = 1000310000,
	VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000,
	VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001,
	VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1000311002,
	VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003,
	VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1000311004,
	VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1000311005,
	VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006,
	VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007,
	VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008,
	VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009,
	VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010,
	VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2,
	VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = VK_STRUCTURE_TYPE_DEPENDENCY_INFO,
	VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = VK_STRUCTURE_TYPE_SUBMIT_INFO_2,
	VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008,
	VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002,
	VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003,
	VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1000316004,
	VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005,
	VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007,
	VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008,
	VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010,
	VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011,
	VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1000321000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR =
		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
	VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
	VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
	VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2,
	VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2,
	VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_COPY_2,
	VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_IMAGE_COPY_2,
	VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = VK_STRUCTURE_TYPE_IMAGE_BLIT_2,
	VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2,
	VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000,
	VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1000338001,
	VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = 1000338002,
	VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = 1000338003,
	VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000,
	VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1000341001,
	VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1000341002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000,
	VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000,
	VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000,
	VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001,
	VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000,
	VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000,
	VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000,
	VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001,
	VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002,
	VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000,
	VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000,
	VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003,
	VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005,
	VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006,
	VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007,
	VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008,
	VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009,
	VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000,
	VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001,
	VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001,
	VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT = 1000375000,
	VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT = 1000375001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1000376000,
	VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001,
	VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000,
	VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR,
	VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = 1000395000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = 1000395001,
	VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000,
	VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001,
	VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002,
	VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003,
	VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006,
	VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007,
	VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV = 1000397000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV = 1000397001,
	VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV = 1000397002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = 1000404000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = 1000404001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000,
	VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,
	VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = 1000415000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = 1000418000,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = 1000418001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1000421000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001,
	VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV = 1000428000,
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV = 1000428001,
	VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV = 1000428002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002,
	VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT = 1000453000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1000458001,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002,
	VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003,
	VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = 1000459000,
	VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = 1000459001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002,
	VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1000462003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1000342000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005,
	VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = 1000466000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID = 1000468000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468001,
	VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID = 1000468002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR = 1000470000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR = 1000470001,
	VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR = 1000470003,
	VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR = 1000470004,
	VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR = 1000338002,
	VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR = 1000338003,
	VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR = 1000470005,
	VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR = 1000470006,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR = 1000481000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1000482000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1000482001,
	VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1000482002,
	VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000,
	VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1000484001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000,
	VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = 1000488000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000,
	VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = 1000498000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT = 1000499000,
	VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV = 1000505000,
	VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV = 1000505001,
	VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV = 1000505002,
	VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV = 1000505003,
	VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV = 1000505004,
	VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV = 1000505005,
	VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV = 1000505006,
	VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV = 1000505007,
	VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV = 1000505008,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR = 1000506000,
	VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = 1000506002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = 1000510000,
	VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = 1000510001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM = 1000518000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM = 1000518001,
	VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM = 1000518002,
	VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM = 1000519000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM = 1000519001,
	VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM = 1000519002,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM = 1000520000,
	VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM = 1000520001,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM = 1000521000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT = 1000524000,
	VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX = 1000529000,
	VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX = 1000529001,
	VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX = 1000529002,
	VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX = 1000529003,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX = 1000529004,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT = 1000530000,
	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV = 1000546000,
	VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkStructureType;
typedef enum VkSystemAllocationScope {
	VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
	VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
	VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
	VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
	VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
	VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF
} VkSystemAllocationScope;
typedef enum VkInternalAllocationType {
	VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
	VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkInternalAllocationType;
typedef enum VkSamplerAddressMode {
	VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
	VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
	VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
	VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerAddressMode;
typedef enum VkFilter {
	VK_FILTER_NEAREST = 0,
	VK_FILTER_LINEAR = 1,
	VK_FILTER_CUBIC_IMG = 1000015000,
	VK_FILTER_CUBIC_EXT = 1000015000,
	VK_FILTER_MAX_ENUM = 0x7FFFFFFF
} VkFilter;
typedef enum VkSamplerMipmapMode {
	VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
	VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
	VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerMipmapMode;
typedef enum VkVertexInputRate {
	VK_VERTEX_INPUT_RATE_VERTEX = 0,
	VK_VERTEX_INPUT_RATE_INSTANCE = 1,
	VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF
} VkVertexInputRate;
typedef enum VkPipelineStageFlagBits {
	VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
	VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
	VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
	VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
	VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
	VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
	VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
	VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
	VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
	VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
	VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
	VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
	VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
	VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
	VK_PIPELINE_STAGE_HOST_BIT = 16384,
	VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
	VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
	VK_PIPELINE_STAGE_NONE = 0,
	VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216,
	VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144,
	VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432,
	VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152,
	VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304,
	VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
	VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
	VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288,
	VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576,
	VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608,
	VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304,
	VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072,
	VK_PIPELINE_STAGE_NONE_KHR = VK_PIPELINE_STAGE_NONE,
	VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 524288,
	VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 1048576,
	VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineStageFlagBits;
typedef enum VkSparseImageFormatFlagBits {
	VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
	VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
	VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
	VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSparseImageFormatFlagBits;
typedef enum VkSampleCountFlagBits {
	VK_SAMPLE_COUNT_1_BIT = 1,
	VK_SAMPLE_COUNT_2_BIT = 2,
	VK_SAMPLE_COUNT_4_BIT = 4,
	VK_SAMPLE_COUNT_8_BIT = 8,
	VK_SAMPLE_COUNT_16_BIT = 16,
	VK_SAMPLE_COUNT_32_BIT = 32,
	VK_SAMPLE_COUNT_64_BIT = 64,
	VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSampleCountFlagBits;
typedef enum VkAttachmentDescriptionFlagBits {
	VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
	VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentDescriptionFlagBits;
typedef enum VkDescriptorPoolCreateFlagBits {
	VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
	VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2,
	VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
	VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4,
	VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4,
	VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = 8,
	VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = 16,
	VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorPoolCreateFlagBits;
typedef enum VkDependencyFlagBits {
	VK_DEPENDENCY_BY_REGION_BIT = 1,
	VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
	VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
	VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,
	VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
	VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8,
	VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDependencyFlagBits;
typedef enum VkObjectType {
	VK_OBJECT_TYPE_UNKNOWN = 0,
	VK_OBJECT_TYPE_INSTANCE = 1,
	VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
	VK_OBJECT_TYPE_DEVICE = 3,
	VK_OBJECT_TYPE_QUEUE = 4,
	VK_OBJECT_TYPE_SEMAPHORE = 5,
	VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
	VK_OBJECT_TYPE_FENCE = 7,
	VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
	VK_OBJECT_TYPE_BUFFER = 9,
	VK_OBJECT_TYPE_IMAGE = 10,
	VK_OBJECT_TYPE_EVENT = 11,
	VK_OBJECT_TYPE_QUERY_POOL = 12,
	VK_OBJECT_TYPE_BUFFER_VIEW = 13,
	VK_OBJECT_TYPE_IMAGE_VIEW = 14,
	VK_OBJECT_TYPE_SHADER_MODULE = 15,
	VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
	VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
	VK_OBJECT_TYPE_RENDER_PASS = 18,
	VK_OBJECT_TYPE_PIPELINE = 19,
	VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
	VK_OBJECT_TYPE_SAMPLER = 21,
	VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
	VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
	VK_OBJECT_TYPE_FRAMEBUFFER = 24,
	VK_OBJECT_TYPE_COMMAND_POOL = 25,
	VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
	VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
	VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000,
	VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
	VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
	VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
	VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
	VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
	VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000,
	VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001,
	VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000,
	VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001,
	VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
	VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
	VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
	VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
	VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
	VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
	VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
	VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
	VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
	VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = VK_OBJECT_TYPE_PRIVATE_DATA_SLOT,
	VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000,
	VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000,
	VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000,
	VK_OBJECT_TYPE_SHADER_EXT = 1000482000,
	VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkObjectType;
typedef enum VkEventCreateFlagBits {
	VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1,
	VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = VK_EVENT_CREATE_DEVICE_ONLY_BIT,
	VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkEventCreateFlagBits;
typedef enum VkPipelineLayoutCreateFlagBits {
	VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2,
	VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineLayoutCreateFlagBits;
typedef enum VkRayTracingInvocationReorderModeNV {
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0,
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1,
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkRayTracingInvocationReorderModeNV;
typedef enum VkIndirectCommandsLayoutUsageFlagBitsNV {
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4,
	VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkIndirectCommandsLayoutUsageFlagBitsNV;
typedef enum VkIndirectCommandsTokenTypeNV {
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = 1000428003,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = 1000428004,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkIndirectCommandsTokenTypeNV;
typedef enum VkIndirectStateFlagBitsNV {
	VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1,
	VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkIndirectStateFlagBitsNV;
typedef enum VkDescriptorUpdateTemplateType {
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorUpdateTemplateType;
typedef enum VkDescriptorUpdateTemplateType VkDescriptorUpdateTemplateTypeKHR;

typedef enum VkViewportCoordinateSwizzleNV {
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
	VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF
} VkViewportCoordinateSwizzleNV;
typedef enum VkDiscardRectangleModeEXT {
	VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
	VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
	VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDiscardRectangleModeEXT;
typedef enum VkSubpassDescriptionFlagBits {
	VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
	VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
	VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4,
	VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32,
	VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64,
	VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128,
	VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSubpassDescriptionFlagBits;
typedef enum VkPointClippingBehavior {
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
	VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF
} VkPointClippingBehavior;
typedef enum VkPointClippingBehavior VkPointClippingBehaviorKHR;

typedef enum VkCoverageModulationModeNV {
	VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
	VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
	VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
	VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
	VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkCoverageModulationModeNV;
typedef enum VkCoverageReductionModeNV {
	VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
	VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
	VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
} VkCoverageReductionModeNV;
typedef enum VkValidationCacheHeaderVersionEXT {
	VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
	VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationCacheHeaderVersionEXT;
typedef enum VkShaderInfoTypeAMD {
	VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
	VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
	VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
	VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF
} VkShaderInfoTypeAMD;
typedef enum VkQueueGlobalPriorityKHR {
	VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024,
	VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR,
	VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 0x7FFFFFFF
} VkQueueGlobalPriorityKHR;
typedef enum VkQueueGlobalPriorityKHR VkQueueGlobalPriorityEXT;

typedef enum VkTimeDomainEXT {
	VK_TIME_DOMAIN_DEVICE_EXT = 0,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
	VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
	VK_TIME_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF
} VkTimeDomainEXT;
typedef enum VkConservativeRasterizationModeEXT {
	VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
	VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
	VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
	VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkConservativeRasterizationModeEXT;
typedef enum VkResolveModeFlagBits {
	VK_RESOLVE_MODE_NONE = 0,
	VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1,
	VK_RESOLVE_MODE_AVERAGE_BIT = 2,
	VK_RESOLVE_MODE_MIN_BIT = 4,
	VK_RESOLVE_MODE_MAX_BIT = 8,
	VK_RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE,
	VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
	VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT,
	VK_RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT,
	VK_RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT,
	VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = 16,
	VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkResolveModeFlagBits;
typedef enum VkResolveModeFlagBits VkResolveModeFlagBitsKHR;

typedef enum VkDescriptorBindingFlagBits {
	VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1,
	VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2,
	VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4,
	VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8,
	VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
	VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
	VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
	VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
	VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorBindingFlagBits;
typedef enum VkDescriptorBindingFlagBits VkDescriptorBindingFlagBitsEXT;

typedef enum VkConditionalRenderingFlagBitsEXT {
	VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1,
	VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkConditionalRenderingFlagBitsEXT;
typedef enum VkSemaphoreType {
	VK_SEMAPHORE_TYPE_BINARY = 0,
	VK_SEMAPHORE_TYPE_TIMELINE = 1,
	VK_SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY,
	VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,
	VK_SEMAPHORE_TYPE_MAX_ENUM = 0x7FFFFFFF
} VkSemaphoreType;
typedef enum VkSemaphoreType VkSemaphoreTypeKHR;

typedef enum VkGeometryFlagBitsKHR {
	VK_GEOMETRY_OPAQUE_BIT_KHR = 1,
	VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2,
	VK_GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR,
	VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
	VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkGeometryFlagBitsKHR;
typedef enum VkGeometryFlagBitsKHR VkGeometryFlagBitsNV;

typedef enum VkGeometryInstanceFlagBitsKHR {
	VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2,
	VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4,
	VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR,
	VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
	VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16,
	VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32,
	VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkGeometryInstanceFlagBitsKHR;
typedef enum VkGeometryInstanceFlagBitsKHR VkGeometryInstanceFlagBitsNV;

typedef enum VkBuildAccelerationStructureFlagBitsKHR {
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8,
	VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
	VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISPLACEMENT_MICROMAP_UPDATE_NV = 512,
	VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = 2048,
	VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkBuildAccelerationStructureFlagBitsKHR;
typedef enum VkBuildAccelerationStructureFlagBitsKHR VkBuildAccelerationStructureFlagBitsNV;

typedef enum VkAccelerationStructureCreateFlagBitsKHR {
	VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1,
	VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8,
	VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4,
	VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkAccelerationStructureCreateFlagBitsKHR;
typedef enum VkBuildAccelerationStructureModeKHR {
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1,
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkBuildAccelerationStructureModeKHR;
typedef enum VkCopyAccelerationStructureModeKHR {
	VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkCopyAccelerationStructureModeKHR;
typedef enum VkCopyAccelerationStructureModeKHR VkCopyAccelerationStructureModeNV;

typedef enum VkAccelerationStructureTypeKHR {
	VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
	VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
	VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,
	VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
	VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
	VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkAccelerationStructureTypeKHR;
typedef enum VkAccelerationStructureTypeKHR VkAccelerationStructureTypeNV;

typedef enum VkGeometryTypeKHR {
	VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
	VK_GEOMETRY_TYPE_AABBS_KHR = 1,
	VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,
	VK_GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR,
	VK_GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR,
	VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkGeometryTypeKHR;
typedef enum VkGeometryTypeKHR VkGeometryTypeNV;

typedef enum VkRayTracingShaderGroupTypeKHR {
	VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkRayTracingShaderGroupTypeKHR;
typedef enum VkRayTracingShaderGroupTypeKHR VkRayTracingShaderGroupTypeNV;

typedef enum VkAccelerationStructureMemoryRequirementsTypeNV {
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkAccelerationStructureMemoryRequirementsTypeNV;
typedef enum VkAccelerationStructureBuildTypeKHR {
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkAccelerationStructureBuildTypeKHR;
typedef enum VkAccelerationStructureCompatibilityKHR {
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1,
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 0x7FFFFFFF
} VkAccelerationStructureCompatibilityKHR;
typedef enum VkShaderGroupShaderKHR {
	VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,
	VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,
	VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,
	VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3,
	VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 0x7FFFFFFF
} VkShaderGroupShaderKHR;
typedef enum VkMemoryOverallocationBehaviorAMD {
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF
} VkMemoryOverallocationBehaviorAMD;
typedef enum VkDeviceDiagnosticsConfigFlagBitsNV {
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4,
	VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8,
	VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkDeviceDiagnosticsConfigFlagBitsNV;
typedef enum VkPipelineCreationFeedbackFlagBits {
	VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1,
	VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT,
	VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2,
	VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT,
	VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4,
	VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT,
	VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCreationFeedbackFlagBits;
typedef enum VkPipelineCreationFeedbackFlagBits VkPipelineCreationFeedbackFlagBitsEXT;

typedef enum VkPerformanceCounterScopeKHR {
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
	VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
	VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
	VK_QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
	VK_QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
	VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPerformanceCounterScopeKHR;
typedef enum VkPerformanceCounterUnitKHR {
	VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
	VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
	VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
	VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
	VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
	VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
	VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
	VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
	VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
	VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPerformanceCounterUnitKHR;
typedef enum VkPerformanceCounterStorageKHR {
	VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
	VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
	VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPerformanceCounterStorageKHR;
typedef enum VkPerformanceCounterDescriptionFlagBitsKHR {
	VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,
	VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPerformanceCounterDescriptionFlagBitsKHR;
typedef enum VkSemaphoreWaitFlagBits {
	VK_SEMAPHORE_WAIT_ANY_BIT = 1,
	VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT,
	VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSemaphoreWaitFlagBits;
typedef enum VkSemaphoreWaitFlagBits VkSemaphoreWaitFlagBitsKHR;

typedef enum VkPerformanceConfigurationTypeINTEL {
	VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
	VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkPerformanceConfigurationTypeINTEL;
typedef enum VkQueryPoolSamplingModeINTEL {
	VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
	VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkQueryPoolSamplingModeINTEL;
typedef enum VkPerformanceOverrideTypeINTEL {
	VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
	VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
	VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkPerformanceOverrideTypeINTEL;
typedef enum VkPerformanceParameterTypeINTEL {
	VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
	VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
	VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkPerformanceParameterTypeINTEL;
typedef enum VkPerformanceValueTypeINTEL {
	VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
	VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
	VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
	VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
	VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
	VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
} VkPerformanceValueTypeINTEL;
typedef enum VkLineRasterizationModeEXT {
	VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
	VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
	VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkLineRasterizationModeEXT;
typedef enum VkToolPurposeFlagBits {
	VK_TOOL_PURPOSE_VALIDATION_BIT = 1,
	VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = VK_TOOL_PURPOSE_VALIDATION_BIT,
	VK_TOOL_PURPOSE_PROFILING_BIT = 2,
	VK_TOOL_PURPOSE_PROFILING_BIT_EXT = VK_TOOL_PURPOSE_PROFILING_BIT,
	VK_TOOL_PURPOSE_TRACING_BIT = 4,
	VK_TOOL_PURPOSE_TRACING_BIT_EXT = VK_TOOL_PURPOSE_TRACING_BIT,
	VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8,
	VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT,
	VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16,
	VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT,
	VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32,
	VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64,
	VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkToolPurposeFlagBits;
typedef enum VkToolPurposeFlagBits VkToolPurposeFlagBitsEXT;

typedef enum VkFragmentShadingRateNV {
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
	VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
	VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
	VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
	VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
	VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15,
	VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 0x7FFFFFFF
} VkFragmentShadingRateNV;
typedef enum VkFragmentShadingRateTypeNV {
	VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
	VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,
	VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkFragmentShadingRateTypeNV;
typedef enum VkSubpassMergeStatusEXT {
	VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0,
	VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13,
	VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkSubpassMergeStatusEXT;
typedef uint64_t               VkAccessFlagBits2;
static const VkAccessFlagBits2 VK_ACCESS_2_NONE = 0;
static const VkAccessFlagBits2 VK_ACCESS_2_NONE_KHR = 0;
static const VkAccessFlagBits2 VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT = 1;
static const VkAccessFlagBits2 VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 1;
static const VkAccessFlagBits2 VK_ACCESS_2_INDEX_READ_BIT = 2;
static const VkAccessFlagBits2 VK_ACCESS_2_INDEX_READ_BIT_KHR = 2;
static const VkAccessFlagBits2 VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT = 4;
static const VkAccessFlagBits2 VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 4;
static const VkAccessFlagBits2 VK_ACCESS_2_UNIFORM_READ_BIT = 8;
static const VkAccessFlagBits2 VK_ACCESS_2_UNIFORM_READ_BIT_KHR = 8;
static const VkAccessFlagBits2 VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT = 16;
static const VkAccessFlagBits2 VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 16;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_READ_BIT = 32;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_READ_BIT_KHR = 32;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_WRITE_BIT = 64;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_WRITE_BIT_KHR = 64;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT = 128;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 128;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT = 256;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 256;
static const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512;
static const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 512;
static const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024;
static const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 1024;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_READ_BIT = 2048;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_READ_BIT_KHR = 2048;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_WRITE_BIT = 4096;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR = 4096;
static const VkAccessFlagBits2 VK_ACCESS_2_HOST_READ_BIT = 8192;
static const VkAccessFlagBits2 VK_ACCESS_2_HOST_READ_BIT_KHR = 8192;
static const VkAccessFlagBits2 VK_ACCESS_2_HOST_WRITE_BIT = 16384;
static const VkAccessFlagBits2 VK_ACCESS_2_HOST_WRITE_BIT_KHR = 16384;
static const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_READ_BIT = 32768;
static const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_READ_BIT_KHR = 32768;
static const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_WRITE_BIT = 65536;
static const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_WRITE_BIT_KHR = 65536;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_SAMPLED_READ_BIT = 4294967296;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 4294967296;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_READ_BIT = 8589934592;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 8589934592;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT = 17179869184;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 17179869184;
static const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = 34359738368;
static const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = 68719476736;
static const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = 137438953472;
static const VkAccessFlagBits2 VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = 274877906944;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864;
static const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728;
static const VkAccessFlagBits2 VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576;
static const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 131072;
static const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144;
static const VkAccessFlagBits2 VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608;
static const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152;
static const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304;
static const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152;
static const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304;
static const VkAccessFlagBits2 VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216;
static const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288;
static const VkAccessFlagBits2 VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT = 2199023255552;
static const VkAccessFlagBits2 VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI = 549755813888;
static const VkAccessFlagBits2 VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR = 1099511627776;
static const VkAccessFlagBits2 VK_ACCESS_2_MICROMAP_READ_BIT_EXT = 17592186044416;
static const VkAccessFlagBits2 VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT = 35184372088832;
static const VkAccessFlagBits2 VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV = 4398046511104;
static const VkAccessFlagBits2 VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV = 8796093022208;

typedef VkAccessFlagBits2 VkAccessFlagBits2KHR;

typedef uint64_t                      VkPipelineStageFlagBits2;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_NONE = 0;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_NONE_KHR = 0;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT = 1;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 1;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT = 2;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 2;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT = 4;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 4;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT = 8;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 8;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT = 16;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 16;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT = 32;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 32;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT = 64;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 64;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT = 128;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 128;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT = 256;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 256;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT = 512;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 512;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT = 1024;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 1024;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT = 2048;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 2048;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT = 4096;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 4096;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFER_BIT = 4096;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR = 4096;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT = 8192;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 8192;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_HOST_BIT = 16384;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_HOST_BIT_KHR = 16384;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT = 32768;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 32768;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT = 65536;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 65536;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COPY_BIT = 4294967296;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COPY_BIT_KHR = 4294967296;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RESOLVE_BIT = 8589934592;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 8589934592;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BLIT_BIT = 17179869184;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BLIT_BIT_KHR = 17179869184;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLEAR_BIT = 34359738368;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR = 34359738368;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT = 68719476736;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 68719476736;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT = 137438953472;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 137438953472;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT = 274877906944;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 274877906944;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = 67108864;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = 134217728;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 16777216;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 262144;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 131072;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 4194304;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 2097152;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 2097152;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 524288;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 1048576;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT = 524288;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT = 1048576;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI = 549755813888;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI = 549755813888;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI = 1099511627776;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR = 268435456;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT = 1073741824;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI = 2199023255552;
static const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV = 536870912;

typedef VkPipelineStageFlagBits2 VkPipelineStageFlagBits2KHR;

typedef enum VkProvokingVertexModeEXT {
	VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0,
	VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1,
	VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkProvokingVertexModeEXT;
typedef enum VkHostImageCopyFlagBitsEXT {
	VK_HOST_IMAGE_COPY_MEMCPY_EXT = 1,
	VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkHostImageCopyFlagBitsEXT;
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef enum VkImageConstraintsInfoFlagBitsFUCHSIA {
	VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA = 1,
	VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA = 2,
	VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA = 4,
	VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA = 8,
	VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA = 16,
	VK_IMAGE_CONSTRAINTS_INFO_FLAG_BITS_MAX_ENUM_FUCHSIA = 0x7FFFFFFF
} VkImageConstraintsInfoFlagBitsFUCHSIA;
#endif

typedef uint64_t                      VkFormatFeatureFlagBits2;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT = 1;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR = 1;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT = 2;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR = 2;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT = 4;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR = 4;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT = 8;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 8;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT = 16;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 16;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR = 32;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT = 64;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR = 64;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT = 128;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR = 128;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT = 256;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR = 256;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT = 512;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR = 512;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_SRC_BIT = 1024;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR = 1024;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_DST_BIT = 2048;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR = 2048;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR = 4096;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT = 8192;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT = 16384;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR = 16384;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT = 32768;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR = 32768;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR = 65536;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT = 131072;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DISJOINT_BIT = 4194304;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR = 4194304;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT = 8388608;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT = 2147483648;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR = 2147483648;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT = 4294967296;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR = 4294967296;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT = 8589934592;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR = 8589934592;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR = 67108864;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT = 70368744177664;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR = 268435456;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV = 274877906944;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM = 17179869184;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM = 34359738368;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM = 68719476736;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM = 137438953472;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV = 1099511627776;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV = 2199023255552;
static const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV = 4398046511104;

typedef VkFormatFeatureFlagBits2 VkFormatFeatureFlagBits2KHR;

typedef enum VkRenderingFlagBits {
	VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1,
	VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT,
	VK_RENDERING_SUSPENDING_BIT = 2,
	VK_RENDERING_SUSPENDING_BIT_KHR = VK_RENDERING_SUSPENDING_BIT,
	VK_RENDERING_RESUMING_BIT = 4,
	VK_RENDERING_RESUMING_BIT_KHR = VK_RENDERING_RESUMING_BIT,
	VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8,
	VK_RENDERING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkRenderingFlagBits;
typedef enum VkRenderingFlagBits VkRenderingFlagBitsKHR;

typedef enum VkPipelineDepthStencilStateCreateFlagBits {
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2,
	VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineDepthStencilStateCreateFlagBits;
typedef enum VkPipelineColorBlendStateCreateFlagBits {
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1,
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1,
	VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPipelineColorBlendStateCreateFlagBits;
typedef enum VkImageCompressionFlagBitsEXT {
	VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0,
	VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1,
	VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2,
	VK_IMAGE_COMPRESSION_DISABLED_EXT = 4,
	VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkImageCompressionFlagBitsEXT;
typedef enum VkImageCompressionFixedRateFlagBitsEXT {
	VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0,
	VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1,
	VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2,
	VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4,
	VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8,
	VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16,
	VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32,
	VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64,
	VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128,
	VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256,
	VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512,
	VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024,
	VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048,
	VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096,
	VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192,
	VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384,
	VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768,
	VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536,
	VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072,
	VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144,
	VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288,
	VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576,
	VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152,
	VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304,
	VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608,
	VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkImageCompressionFixedRateFlagBitsEXT;
#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef enum VkExportMetalObjectTypeFlagBitsEXT {
	VK_EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT = 1,
	VK_EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT = 2,
	VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT = 4,
	VK_EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT = 8,
	VK_EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT = 16,
	VK_EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT = 32,
	VK_EXPORT_METAL_OBJECT_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkExportMetalObjectTypeFlagBitsEXT;
#endif

typedef enum VkPipelineRobustnessBufferBehaviorEXT {
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = 0x7FFFFFFF
} VkPipelineRobustnessBufferBehaviorEXT;
typedef enum VkPipelineRobustnessImageBehaviorEXT {
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = 0x7FFFFFFF
} VkPipelineRobustnessImageBehaviorEXT;
typedef enum VkDeviceAddressBindingFlagBitsEXT {
	VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1,
	VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceAddressBindingFlagBitsEXT;
typedef enum VkDeviceAddressBindingTypeEXT {
	VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0,
	VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1,
	VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceAddressBindingTypeEXT;
typedef enum VkMicromapTypeEXT {
	VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0,
	VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV = 1000397000,
	VK_MICROMAP_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkMicromapTypeEXT;
typedef enum VkBuildMicromapModeEXT {
	VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0,
	VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkBuildMicromapModeEXT;
typedef enum VkCopyMicromapModeEXT {
	VK_COPY_MICROMAP_MODE_CLONE_EXT = 0,
	VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1,
	VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2,
	VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3,
	VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkCopyMicromapModeEXT;
typedef enum VkBuildMicromapFlagBitsEXT {
	VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1,
	VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2,
	VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4,
	VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkBuildMicromapFlagBitsEXT;
typedef enum VkMicromapCreateFlagBitsEXT {
	VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1,
	VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkMicromapCreateFlagBitsEXT;
typedef enum VkOpacityMicromapFormatEXT {
	VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1,
	VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2,
	VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 0x7FFFFFFF
} VkOpacityMicromapFormatEXT;
typedef enum VkOpacityMicromapSpecialIndexEXT {
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 0x7FFFFFFF
} VkOpacityMicromapSpecialIndexEXT;
typedef enum VkDeviceFaultVendorBinaryHeaderVersionEXT {
	VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1,
	VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceFaultVendorBinaryHeaderVersionEXT;
typedef enum VkFrameBoundaryFlagBitsEXT {
	VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = 1,
	VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkFrameBoundaryFlagBitsEXT;
typedef uint64_t                                   VkMemoryDecompressionMethodFlagBitsNV;
static const VkMemoryDecompressionMethodFlagBitsNV VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV = 1;

typedef enum VkDepthBiasRepresentationEXT {
	VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0,
	VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1,
	VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2,
	VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDepthBiasRepresentationEXT;
typedef enum VkDirectDriverLoadingModeLUNARG {
	VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0,
	VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1,
	VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 0x7FFFFFFF
} VkDirectDriverLoadingModeLUNARG;
typedef uint64_t                          VkPipelineCreateFlagBits2KHR;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR = 1;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR = 2;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR = 4;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR = 16;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV = 32;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR = 64;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR = 256;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR = 512;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR = 2048;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV = 262144;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT = 134217728;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV = 268435456;
static const VkPipelineCreateFlagBits2KHR VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT = 536870912;

typedef uint64_t                       VkBufferUsageFlagBits2KHR;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR = 1;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR = 2;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 4;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 8;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR = 16;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR = 32;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR = 64;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR = 128;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR = 256;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_EXECUTION_GRAPH_SCRATCH_BIT_AMDX = 33554432;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 512;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR = 1024;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV = 1024;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR = 8192;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR = 16384;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR = 32768;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR = 65536;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608;
static const VkBufferUsageFlagBits2KHR VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT = 16777216;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkDisplacementMicromapFormatNV {
	VK_DISPLACEMENT_MICROMAP_FORMAT_64_TRIANGLES_64_BYTES_NV = 1,
	VK_DISPLACEMENT_MICROMAP_FORMAT_256_TRIANGLES_128_BYTES_NV = 2,
	VK_DISPLACEMENT_MICROMAP_FORMAT_1024_TRIANGLES_128_BYTES_NV = 3,
	VK_DISPLACEMENT_MICROMAP_FORMAT_MAX_ENUM_NV = 0x7FFFFFFF
} VkDisplacementMicromapFormatNV;
#endif

typedef enum VkShaderCreateFlagBitsEXT {
	VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 1,
	VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 2,
	VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 4,
	VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 8,
	VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 16,
	VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 32,
	VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 64,
	VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkShaderCreateFlagBitsEXT;
typedef enum VkShaderCodeTypeEXT {
	VK_SHADER_CODE_TYPE_BINARY_EXT = 0,
	VK_SHADER_CODE_TYPE_SPIRV_EXT = 1,
	VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkShaderCodeTypeEXT;
typedef enum VkScopeKHR {
	VK_SCOPE_DEVICE_KHR = 1,
	VK_SCOPE_WORKGROUP_KHR = 2,
	VK_SCOPE_SUBGROUP_KHR = 3,
	VK_SCOPE_QUEUE_FAMILY_KHR = 5,
	VK_SCOPE_DEVICE_NV = VK_SCOPE_DEVICE_KHR,
	VK_SCOPE_WORKGROUP_NV = VK_SCOPE_WORKGROUP_KHR,
	VK_SCOPE_SUBGROUP_NV = VK_SCOPE_SUBGROUP_KHR,
	VK_SCOPE_QUEUE_FAMILY_NV = VK_SCOPE_QUEUE_FAMILY_KHR,
	VK_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkScopeKHR;
typedef enum VkComponentTypeKHR {
	VK_COMPONENT_TYPE_FLOAT16_KHR = 0,
	VK_COMPONENT_TYPE_FLOAT32_KHR = 1,
	VK_COMPONENT_TYPE_FLOAT64_KHR = 2,
	VK_COMPONENT_TYPE_SINT8_KHR = 3,
	VK_COMPONENT_TYPE_SINT16_KHR = 4,
	VK_COMPONENT_TYPE_SINT32_KHR = 5,
	VK_COMPONENT_TYPE_SINT64_KHR = 6,
	VK_COMPONENT_TYPE_UINT8_KHR = 7,
	VK_COMPONENT_TYPE_UINT16_KHR = 8,
	VK_COMPONENT_TYPE_UINT32_KHR = 9,
	VK_COMPONENT_TYPE_UINT64_KHR = 10,
	VK_COMPONENT_TYPE_FLOAT16_NV = VK_COMPONENT_TYPE_FLOAT16_KHR,
	VK_COMPONENT_TYPE_FLOAT32_NV = VK_COMPONENT_TYPE_FLOAT32_KHR,
	VK_COMPONENT_TYPE_FLOAT64_NV = VK_COMPONENT_TYPE_FLOAT64_KHR,
	VK_COMPONENT_TYPE_SINT8_NV = VK_COMPONENT_TYPE_SINT8_KHR,
	VK_COMPONENT_TYPE_SINT16_NV = VK_COMPONENT_TYPE_SINT16_KHR,
	VK_COMPONENT_TYPE_SINT32_NV = VK_COMPONENT_TYPE_SINT32_KHR,
	VK_COMPONENT_TYPE_SINT64_NV = VK_COMPONENT_TYPE_SINT64_KHR,
	VK_COMPONENT_TYPE_UINT8_NV = VK_COMPONENT_TYPE_UINT8_KHR,
	VK_COMPONENT_TYPE_UINT16_NV = VK_COMPONENT_TYPE_UINT16_KHR,
	VK_COMPONENT_TYPE_UINT32_NV = VK_COMPONENT_TYPE_UINT32_KHR,
	VK_COMPONENT_TYPE_UINT64_NV = VK_COMPONENT_TYPE_UINT64_KHR,
	VK_COMPONENT_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkComponentTypeKHR;
typedef enum VkScopeKHR VkScopeNV;

typedef enum VkComponentTypeKHR VkComponentTypeNV;

typedef enum VkCubicFilterWeightsQCOM {
	VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM = 0,
	VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM = 1,
	VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM = 2,
	VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM = 3,
	VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM = 0x7FFFFFFF
} VkCubicFilterWeightsQCOM;
typedef enum VkBlockMatchWindowCompareModeQCOM {
	VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM = 0,
	VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM = 1,
	VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM = 0x7FFFFFFF
} VkBlockMatchWindowCompareModeQCOM;
typedef enum VkLayeredDriverUnderlyingApiMSFT {
	VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT = 0,
	VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT = 1,
	VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT = 0x7FFFFFFF
} VkLayeredDriverUnderlyingApiMSFT;
typedef enum VkColorSpaceKHR {
	VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
	VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
	VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
	VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
	VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
	VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
	VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
	VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
	VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
	VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
	VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
	VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
	VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
	VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
	VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
	VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
	VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
	VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
	VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkColorSpaceKHR;
typedef enum VkCompositeAlphaFlagBitsKHR {
	VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
	VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
	VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
	VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
	VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkCompositeAlphaFlagBitsKHR;
typedef enum VkDisplayPlaneAlphaFlagBitsKHR {
	VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
	VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
	VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
	VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDisplayPlaneAlphaFlagBitsKHR;
typedef enum VkPresentModeKHR {
	VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
	VK_PRESENT_MODE_MAILBOX_KHR = 1,
	VK_PRESENT_MODE_FIFO_KHR = 2,
	VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
	VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
	VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
	VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPresentModeKHR;
typedef enum VkSurfaceTransformFlagBitsKHR {
	VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
	VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
	VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
	VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
	VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
	VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
	VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkSurfaceTransformFlagBitsKHR;
typedef enum VkDebugReportFlagBitsEXT {
	VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
	VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
	VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
	VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
	VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
	VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugReportFlagBitsEXT;
typedef enum VkDebugReportObjectTypeEXT {
	VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
	VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
	VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
	VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
	VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
	VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
	VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
	VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
	VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
	VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
	VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
	VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000,
	VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000,
	VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugReportObjectTypeEXT;
typedef enum VkDeviceMemoryReportEventTypeEXT {
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceMemoryReportEventTypeEXT;
typedef enum VkRasterizationOrderAMD {
	VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
	VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
	VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF
} VkRasterizationOrderAMD;
typedef enum VkExternalMemoryHandleTypeFlagBitsNV {
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkExternalMemoryHandleTypeFlagBitsNV;
typedef enum VkExternalMemoryFeatureFlagBitsNV {
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
	VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkExternalMemoryFeatureFlagBitsNV;
typedef enum VkValidationCheckEXT {
	VK_VALIDATION_CHECK_ALL_EXT = 0,
	VK_VALIDATION_CHECK_SHADERS_EXT = 1,
	VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationCheckEXT;
typedef enum VkValidationFeatureEnableEXT {
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
	VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
	VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
	VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
	VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationFeatureEnableEXT;
typedef enum VkValidationFeatureDisableEXT {
	VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
	VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
	VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
	VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
	VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
	VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
	VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
	VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7,
	VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationFeatureDisableEXT;
typedef enum VkExternalMemoryHandleTypeFlagBits {
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 16384,
	VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalMemoryHandleTypeFlagBits;
typedef enum VkExternalMemoryHandleTypeFlagBits VkExternalMemoryHandleTypeFlagBitsKHR;

typedef enum VkExternalMemoryFeatureFlagBits {
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
	VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
	VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
	VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
	VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalMemoryFeatureFlagBits;
typedef enum VkExternalMemoryFeatureFlagBits VkExternalMemoryFeatureFlagBitsKHR;

typedef enum VkExternalSemaphoreHandleTypeFlagBits {
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128,
	VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalSemaphoreHandleTypeFlagBits;
typedef enum VkExternalSemaphoreHandleTypeFlagBits VkExternalSemaphoreHandleTypeFlagBitsKHR;

typedef enum VkExternalSemaphoreFeatureFlagBits {
	VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
	VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
	VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
	VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
	VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalSemaphoreFeatureFlagBits;
typedef enum VkExternalSemaphoreFeatureFlagBits VkExternalSemaphoreFeatureFlagBitsKHR;

typedef enum VkSemaphoreImportFlagBits {
	VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
	VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
	VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSemaphoreImportFlagBits;
typedef enum VkSemaphoreImportFlagBits VkSemaphoreImportFlagBitsKHR;

typedef enum VkExternalFenceHandleTypeFlagBits {
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
	VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalFenceHandleTypeFlagBits;
typedef enum VkExternalFenceHandleTypeFlagBits VkExternalFenceHandleTypeFlagBitsKHR;

typedef enum VkExternalFenceFeatureFlagBits {
	VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
	VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
	VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
	VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
	VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkExternalFenceFeatureFlagBits;
typedef enum VkExternalFenceFeatureFlagBits VkExternalFenceFeatureFlagBitsKHR;

typedef enum VkFenceImportFlagBits {
	VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
	VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,
	VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkFenceImportFlagBits;
typedef enum VkFenceImportFlagBits VkFenceImportFlagBitsKHR;

typedef enum VkSurfaceCounterFlagBitsEXT {
	VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1,
	VK_SURFACE_COUNTER_VBLANK_EXT = VK_SURFACE_COUNTER_VBLANK_BIT_EXT,
	VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkSurfaceCounterFlagBitsEXT;
typedef enum VkDisplayPowerStateEXT {
	VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
	VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
	VK_DISPLAY_POWER_STATE_ON_EXT = 2,
	VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDisplayPowerStateEXT;
typedef enum VkDeviceEventTypeEXT {
	VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
	VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceEventTypeEXT;
typedef enum VkDisplayEventTypeEXT {
	VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
	VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDisplayEventTypeEXT;
typedef enum VkPeerMemoryFeatureFlagBits {
	VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
	VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
	VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
	VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
	VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
	VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
	VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
	VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
	VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkPeerMemoryFeatureFlagBits;
typedef enum VkPeerMemoryFeatureFlagBits VkPeerMemoryFeatureFlagBitsKHR;

typedef enum VkMemoryAllocateFlagBits {
	VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4,
	VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
	VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
	VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkMemoryAllocateFlagBits;
typedef enum VkMemoryAllocateFlagBits VkMemoryAllocateFlagBitsKHR;

typedef enum VkDeviceGroupPresentModeFlagBitsKHR {
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
	VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
	VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
	VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
	VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDeviceGroupPresentModeFlagBitsKHR;
typedef enum VkSwapchainCreateFlagBitsKHR {
	VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
	VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
	VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4,
	VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 8,
	VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkSwapchainCreateFlagBitsKHR;
typedef enum VkSubgroupFeatureFlagBits {
	VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
	VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
	VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
	VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
	VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
	VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
	VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
	VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
	VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
	VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSubgroupFeatureFlagBits;
typedef enum VkTessellationDomainOrigin {
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
	VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF
} VkTessellationDomainOrigin;
typedef enum VkTessellationDomainOrigin VkTessellationDomainOriginKHR;

typedef enum VkSamplerYcbcrModelConversion {
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF
} VkSamplerYcbcrModelConversion;
typedef enum VkSamplerYcbcrModelConversion VkSamplerYcbcrModelConversionKHR;

typedef enum VkSamplerYcbcrRange {
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
	VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerYcbcrRange;
typedef enum VkSamplerYcbcrRange VkSamplerYcbcrRangeKHR;

typedef enum VkChromaLocation {
	VK_CHROMA_LOCATION_COSITED_EVEN = 0,
	VK_CHROMA_LOCATION_MIDPOINT = 1,
	VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
	VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT,
	VK_CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF
} VkChromaLocation;
typedef enum VkChromaLocation VkChromaLocationKHR;

typedef enum VkSamplerReductionMode {
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
	VK_SAMPLER_REDUCTION_MODE_MIN = 1,
	VK_SAMPLER_REDUCTION_MODE_MAX = 2,
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
	VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN,
	VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX,
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = 1000521000,
	VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 0x7FFFFFFF
} VkSamplerReductionMode;
typedef enum VkSamplerReductionMode VkSamplerReductionModeEXT;

typedef enum VkBlendOverlapEXT {
	VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
	VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
	VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
	VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF
} VkBlendOverlapEXT;
typedef enum VkDebugUtilsMessageSeverityFlagBitsEXT {
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
	VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugUtilsMessageSeverityFlagBitsEXT;
typedef enum VkDebugUtilsMessageTypeFlagBitsEXT {
	VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
	VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
	VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
	VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8,
	VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugUtilsMessageTypeFlagBitsEXT;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef enum VkFullScreenExclusiveEXT {
	VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0,
	VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1,
	VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2,
	VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3,
	VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkFullScreenExclusiveEXT;
#endif

typedef enum VkShaderFloatControlsIndependence {
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 0x7FFFFFFF
} VkShaderFloatControlsIndependence;
typedef enum VkShaderFloatControlsIndependence VkShaderFloatControlsIndependenceKHR;

typedef enum VkFragmentShadingRateCombinerOpKHR {
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 0x7FFFFFFF
} VkFragmentShadingRateCombinerOpKHR;
typedef enum VkSubmitFlagBits {
	VK_SUBMIT_PROTECTED_BIT = 1,
	VK_SUBMIT_PROTECTED_BIT_KHR = VK_SUBMIT_PROTECTED_BIT,
	VK_SUBMIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} VkSubmitFlagBits;
typedef enum VkSubmitFlagBits VkSubmitFlagBitsKHR;

typedef enum VkGraphicsPipelineLibraryFlagBitsEXT {
	VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1,
	VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2,
	VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4,
	VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8,
	VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkGraphicsPipelineLibraryFlagBitsEXT;
typedef enum VkOpticalFlowGridSizeFlagBitsNV {
	VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1,
	VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2,
	VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4,
	VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8,
	VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowGridSizeFlagBitsNV;
typedef enum VkOpticalFlowUsageFlagBitsNV {
	VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1,
	VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2,
	VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4,
	VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 8,
	VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16,
	VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowUsageFlagBitsNV;
typedef enum VkOpticalFlowPerformanceLevelNV {
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowPerformanceLevelNV;
typedef enum VkOpticalFlowSessionBindingPointNV {
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowSessionBindingPointNV;
typedef enum VkOpticalFlowSessionCreateFlagBitsNV {
	VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1,
	VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2,
	VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4,
	VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8,
	VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16,
	VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowSessionCreateFlagBitsNV;
typedef enum VkOpticalFlowExecuteFlagBitsNV {
	VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1,
	VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
} VkOpticalFlowExecuteFlagBitsNV;
typedef enum VkDeviceFaultAddressTypeEXT {
	VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0,
	VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1,
	VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2,
	VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6,
	VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceFaultAddressTypeEXT;
typedef enum VkPresentScalingFlagBitsEXT {
	VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 1,
	VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 2,
	VK_PRESENT_SCALING_STRETCH_BIT_EXT = 4,
	VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkPresentScalingFlagBitsEXT;
typedef enum VkPresentGravityFlagBitsEXT {
	VK_PRESENT_GRAVITY_MIN_BIT_EXT = 1,
	VK_PRESENT_GRAVITY_MAX_BIT_EXT = 2,
	VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 4,
	VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkPresentGravityFlagBitsEXT;
typedef enum VkLatencyMarkerNV {
	VK_LATENCY_MARKER_SIMULATION_START_NV = 0,
	VK_LATENCY_MARKER_SIMULATION_END_NV = 1,
	VK_LATENCY_MARKER_RENDERSUBMIT_START_NV = 2,
	VK_LATENCY_MARKER_RENDERSUBMIT_END_NV = 3,
	VK_LATENCY_MARKER_PRESENT_START_NV = 4,
	VK_LATENCY_MARKER_PRESENT_END_NV = 5,
	VK_LATENCY_MARKER_INPUT_SAMPLE_NV = 6,
	VK_LATENCY_MARKER_TRIGGER_FLASH_NV = 7,
	VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV = 8,
	VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV = 9,
	VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV = 10,
	VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV = 11,
	VK_LATENCY_MARKER_MAX_ENUM_NV = 0x7FFFFFFF
} VkLatencyMarkerNV;
typedef enum VkOutOfBandQueueTypeNV {
	VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV = 0,
	VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV = 1,
	VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkOutOfBandQueueTypeNV;
typedef enum VkVendorId {
	VK_VENDOR_ID_VIV = 0x10001,
	VK_VENDOR_ID_VSI = 0x10002,
	VK_VENDOR_ID_KAZAN = 0x10003,
	VK_VENDOR_ID_CODEPLAY = 0x10004,
	VK_VENDOR_ID_MESA = 0x10005,
	VK_VENDOR_ID_POCL = 0x10006,
	VK_VENDOR_ID_MOBILEYE = 0x10007,
	VK_VENDOR_ID_MAX_ENUM = 0x7FFFFFFF
} VkVendorId;
typedef enum VkDriverId {
	VK_DRIVER_ID_AMD_PROPRIETARY = 1,
	VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
	VK_DRIVER_ID_MESA_RADV = 3,
	VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
	VK_DRIVER_ID_ARM_PROPRIETARY = 9,
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
	VK_DRIVER_ID_GGP_PROPRIETARY = 11,
	VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
	VK_DRIVER_ID_MESA_LLVMPIPE = 13,
	VK_DRIVER_ID_MOLTENVK = 14,
	VK_DRIVER_ID_COREAVI_PROPRIETARY = 15,
	VK_DRIVER_ID_JUICE_PROPRIETARY = 16,
	VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17,
	VK_DRIVER_ID_MESA_TURNIP = 18,
	VK_DRIVER_ID_MESA_V3DV = 19,
	VK_DRIVER_ID_MESA_PANVK = 20,
	VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21,
	VK_DRIVER_ID_MESA_VENUS = 22,
	VK_DRIVER_ID_MESA_DOZEN = 23,
	VK_DRIVER_ID_MESA_NVK = 24,
	VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25,
	VK_DRIVER_ID_MESA_AGXV = 26,
	VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY,
	VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE,
	VK_DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV,
	VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY,
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
	VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY,
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
	VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY,
	VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY,
	VK_DRIVER_ID_MAX_ENUM = 0x7FFFFFFF
} VkDriverId;
typedef enum VkDriverId VkDriverIdKHR;

typedef enum VkShadingRatePaletteEntryNV {
	VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
	VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
	VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
	VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
	VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
	VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF
} VkShadingRatePaletteEntryNV;
typedef enum VkCoarseSampleOrderTypeNV {
	VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
	VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
	VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
	VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
	VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkCoarseSampleOrderTypeNV;
typedef enum VkPipelineExecutableStatisticFormatKHR {
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPipelineExecutableStatisticFormatKHR;
typedef enum VkVideoCodecOperationFlagBitsKHR {
	VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0,
	VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT = 65536,
	VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT = 131072,
	VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 1,
	VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 2,
	VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoCodecOperationFlagBitsKHR;
typedef enum VkVideoChromaSubsamplingFlagBitsKHR {
	VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0,
	VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1,
	VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2,
	VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4,
	VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8,
	VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoChromaSubsamplingFlagBitsKHR;
typedef enum VkVideoComponentBitDepthFlagBitsKHR {
	VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0,
	VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1,
	VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4,
	VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16,
	VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoComponentBitDepthFlagBitsKHR;
typedef enum VkVideoCapabilityFlagBitsKHR {
	VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1,
	VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2,
	VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoCapabilityFlagBitsKHR;
typedef enum VkVideoSessionCreateFlagBitsKHR {
	VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1,
	VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = 2,
	VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoSessionCreateFlagBitsKHR;
typedef enum VkVideoCodingControlFlagBitsKHR {
	VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1,
	VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 2,
	VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = 4,
	VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoCodingControlFlagBitsKHR;
typedef enum VkQueryResultStatusKHR {
	VK_QUERY_RESULT_STATUS_ERROR_KHR = -1,
	VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0,
	VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1,
	VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = -1000299000,
	VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkQueryResultStatusKHR;
typedef enum VkVideoDecodeUsageFlagBitsKHR {
	VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0,
	VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1,
	VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2,
	VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4,
	VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoDecodeUsageFlagBitsKHR;
typedef enum VkVideoDecodeCapabilityFlagBitsKHR {
	VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1,
	VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2,
	VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoDecodeCapabilityFlagBitsKHR;
typedef enum VkVideoDecodeH264PictureLayoutFlagBitsKHR {
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0,
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 1,
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 2,
	VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoDecodeH264PictureLayoutFlagBitsKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeUsageFlagBitsKHR {
	VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0,
	VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 1,
	VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 2,
	VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 4,
	VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 8,
	VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeUsageFlagBitsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeContentFlagBitsKHR {
	VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0,
	VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 1,
	VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 2,
	VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 4,
	VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeContentFlagBitsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeTuningModeKHR {
	VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0,
	VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1,
	VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2,
	VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3,
	VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4,
	VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeTuningModeKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeCapabilityFlagBitsKHR {
	VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 1,
	VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 2,
	VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeCapabilityFlagBitsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeFeedbackFlagBitsKHR {
	VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 1,
	VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 2,
	VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 4,
	VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeFeedbackFlagBitsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeRateControlModeFlagBitsKHR {
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 1,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 2,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 4,
	VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
} VkVideoEncodeRateControlModeFlagBitsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeH264CapabilityFlagBitsEXT {
	VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_EXT = 1,
	VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_EXT = 2,
	VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_EXT = 4,
	VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT = 8,
	VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_EXT = 16,
	VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT = 32,
	VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_EXT = 64,
	VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_EXT = 128,
	VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_EXT = 256,
	VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkVideoEncodeH264CapabilityFlagBitsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeH264StdFlagBitsEXT {
	VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_EXT = 1,
	VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_EXT = 2,
	VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_EXT = 4,
	VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_EXT = 8,
	VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_EXT = 16,
	VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_EXT = 32,
	VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_EXT = 64,
	VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_EXT = 128,
	VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_EXT = 256,
	VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_EXT = 512,
	VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_EXT = 1024,
	VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_EXT = 2048,
	VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_EXT = 4096,
	VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_EXT = 8192,
	VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_EXT = 16384,
	VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_EXT = 32768,
	VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_EXT = 65536,
	VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_EXT = 131072,
	VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_EXT = 524288,
	VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_EXT = 1048576,
	VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkVideoEncodeH264StdFlagBitsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeH264RateControlFlagBitsEXT {
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_EXT = 1,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_EXT = 2,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_EXT = 4,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_EXT = 8,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_EXT = 16,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkVideoEncodeH264RateControlFlagBitsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeH265CapabilityFlagBitsEXT {
	VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_EXT = 1,
	VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_EXT = 2,
	VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_EXT = 4,
	VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_EXT = 8,
	VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_EXT = 16,
	VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT = 32,
	VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_EXT = 64,
	VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_EXT = 128,
	VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_EXT = 256,
	VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_EXT = 512,
	VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkVideoEncodeH265CapabilityFlagBitsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeH265StdFlagBitsEXT {
	VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_EXT = 1,
	VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_EXT = 2,
	VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_EXT = 4,
	VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_EXT = 8,
	VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_EXT = 16,
	VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_EXT = 32,
	VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_EXT = 64,
	VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_EXT = 128,
	VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_EXT = 256,
	VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_EXT = 512,
	VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_EXT = 1024,
	VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_EXT = 2048,
	VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_EXT = 4096,
	VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_EXT = 8192,
	VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_EXT = 16384,
	VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_EXT = 32768,
	VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_EXT = 65536,
	VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_EXT = 131072,
	VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_EXT = 262144,
	VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_EXT = 524288,
	VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_EXT = 1048576,
	VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkVideoEncodeH265StdFlagBitsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeH265RateControlFlagBitsEXT {
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_EXT = 1,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_EXT = 2,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_EXT = 4,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_EXT = 8,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_EXT = 16,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkVideoEncodeH265RateControlFlagBitsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeH265CtbSizeFlagBitsEXT {
	VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_EXT = 1,
	VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_EXT = 2,
	VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_EXT = 4,
	VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkVideoEncodeH265CtbSizeFlagBitsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef enum VkVideoEncodeH265TransformBlockSizeFlagBitsEXT {
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_EXT = 1,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_EXT = 2,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_EXT = 4,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_EXT = 8,
	VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
} VkVideoEncodeH265TransformBlockSizeFlagBitsEXT;
#endif

typedef void(VKAPI_PTR *PFN_vkInternalAllocationNotification)(void                    *pUserData,
                                                              size_t                   size,
                                                              VkInternalAllocationType allocationType,
                                                              VkSystemAllocationScope  allocationScope);
typedef void(VKAPI_PTR *PFN_vkInternalFreeNotification)(void                    *pUserData,
                                                        size_t                   size,
                                                        VkInternalAllocationType allocationType,
                                                        VkSystemAllocationScope  allocationScope);
typedef void *(VKAPI_PTR *PFN_vkReallocationFunction)(void *pUserData, void *pOriginal, size_t size, size_t alignment, VkSystemAllocationScope allocationScope);
typedef void *(VKAPI_PTR *PFN_vkAllocationFunction)(void *pUserData, size_t size, size_t alignment, VkSystemAllocationScope allocationScope);
typedef void(VKAPI_PTR *PFN_vkFreeFunction)(void *pUserData, void *pMemory);
typedef void(VKAPI_PTR *PFN_vkVoidFunction)(void);
typedef PFN_vkVoidFunction(VKAPI_PTR *PFN_vkGetInstanceProcAddrLUNARG)(VkInstance instance, const char *pName);
typedef struct VkBaseOutStructure {
	VkStructureType            sType;
	struct VkBaseOutStructure *pNext;
} VkBaseOutStructure;

typedef struct VkBaseInStructure {
	VkStructureType                 sType;
	const struct VkBaseInStructure *pNext;
} VkBaseInStructure;

typedef struct VkOffset2D {
	int32_t x;
	int32_t y;
} VkOffset2D;

typedef struct VkOffset3D {
	int32_t x;
	int32_t y;
	int32_t z;
} VkOffset3D;

typedef struct VkExtent2D {
	uint32_t width;
	uint32_t height;
} VkExtent2D;

typedef struct VkExtent3D {
	uint32_t width;
	uint32_t height;
	uint32_t depth;
} VkExtent3D;

typedef struct VkViewport {
	float x;
	float y;
	float width;
	float height;
	float minDepth;
	float maxDepth;
} VkViewport;

typedef struct VkRect2D {
	VkOffset2D offset;
	VkExtent2D extent;
} VkRect2D;

typedef struct VkClearRect {
	VkRect2D rect;
	uint32_t baseArrayLayer;
	uint32_t layerCount;
} VkClearRect;

typedef struct VkComponentMapping {
	VkComponentSwizzle r;
	VkComponentSwizzle g;
	VkComponentSwizzle b;
	VkComponentSwizzle a;
} VkComponentMapping;

typedef struct VkExtensionProperties {
	char     extensionName[VK_MAX_EXTENSION_NAME_SIZE];
	uint32_t specVersion;
} VkExtensionProperties;

typedef struct VkLayerProperties {
	char     layerName[VK_MAX_EXTENSION_NAME_SIZE];
	uint32_t specVersion;
	uint32_t implementationVersion;
	char     description[VK_MAX_DESCRIPTION_SIZE];
} VkLayerProperties;

typedef struct VkApplicationInfo {
	VkStructureType sType;
	const void     *pNext;
	const char     *pApplicationName;
	uint32_t        applicationVersion;
	const char     *pEngineName;
	uint32_t        engineVersion;
	uint32_t        apiVersion;
} VkApplicationInfo;

typedef struct VkAllocationCallbacks {
	void                                *pUserData;
	PFN_vkAllocationFunction             pfnAllocation;
	PFN_vkReallocationFunction           pfnReallocation;
	PFN_vkFreeFunction                   pfnFree;
	PFN_vkInternalAllocationNotification pfnInternalAllocation;
	PFN_vkInternalFreeNotification       pfnInternalFree;
} VkAllocationCallbacks;

typedef struct VkDescriptorImageInfo {
	VkSampler     sampler;
	VkImageView   imageView;
	VkImageLayout imageLayout;
} VkDescriptorImageInfo;

typedef struct VkCopyDescriptorSet {
	VkStructureType sType;
	const void     *pNext;
	VkDescriptorSet srcSet;
	uint32_t        srcBinding;
	uint32_t        srcArrayElement;
	VkDescriptorSet dstSet;
	uint32_t        dstBinding;
	uint32_t        dstArrayElement;
	uint32_t        descriptorCount;
} VkCopyDescriptorSet;

typedef struct VkDescriptorPoolSize {
	VkDescriptorType type;
	uint32_t         descriptorCount;
} VkDescriptorPoolSize;

typedef struct VkDescriptorSetAllocateInfo {
	VkStructureType              sType;
	const void                  *pNext;
	VkDescriptorPool             descriptorPool;
	uint32_t                     descriptorSetCount;
	const VkDescriptorSetLayout *pSetLayouts;
} VkDescriptorSetAllocateInfo;

typedef struct VkSpecializationMapEntry {
	uint32_t constantID;
	uint32_t offset;
	size_t   size;
} VkSpecializationMapEntry;

typedef struct VkSpecializationInfo {
	uint32_t                        mapEntryCount;
	const VkSpecializationMapEntry *pMapEntries;
	size_t                          dataSize;
	const void                     *pData;
} VkSpecializationInfo;

typedef struct VkVertexInputBindingDescription {
	uint32_t          binding;
	uint32_t          stride;
	VkVertexInputRate inputRate;
} VkVertexInputBindingDescription;

typedef struct VkVertexInputAttributeDescription {
	uint32_t location;
	uint32_t binding;
	VkFormat format;
	uint32_t offset;
} VkVertexInputAttributeDescription;

typedef struct VkStencilOpState {
	VkStencilOp failOp;
	VkStencilOp passOp;
	VkStencilOp depthFailOp;
	VkCompareOp compareOp;
	uint32_t    compareMask;
	uint32_t    writeMask;
	uint32_t    reference;
} VkStencilOpState;

typedef struct VkPipelineCacheHeaderVersionOne {
	uint32_t                     headerSize;
	VkPipelineCacheHeaderVersion headerVersion;
	uint32_t                     vendorID;
	uint32_t                     deviceID;
	uint8_t                      pipelineCacheUUID[VK_UUID_SIZE];
} VkPipelineCacheHeaderVersionOne;

typedef struct VkCommandBufferAllocateInfo {
	VkStructureType      sType;
	const void          *pNext;
	VkCommandPool        commandPool;
	VkCommandBufferLevel level;
	uint32_t             commandBufferCount;
} VkCommandBufferAllocateInfo;

typedef union VkClearColorValue {
	float    float32[4];
	int32_t  int32[4];
	uint32_t uint32[4];
} VkClearColorValue;

typedef struct VkClearDepthStencilValue {
	float    depth;
	uint32_t stencil;
} VkClearDepthStencilValue;

typedef union VkClearValue {
	VkClearColorValue        color;
	VkClearDepthStencilValue depthStencil;
} VkClearValue;

typedef struct VkAttachmentReference {
	uint32_t      attachment;
	VkImageLayout layout;
} VkAttachmentReference;

typedef struct VkDrawIndirectCommand {
	uint32_t vertexCount;
	uint32_t instanceCount;
	uint32_t firstVertex;
	uint32_t firstInstance;
} VkDrawIndirectCommand;

typedef struct VkDrawIndexedIndirectCommand {
	uint32_t indexCount;
	uint32_t instanceCount;
	uint32_t firstIndex;
	int32_t  vertexOffset;
	uint32_t firstInstance;
} VkDrawIndexedIndirectCommand;

typedef struct VkDispatchIndirectCommand {
	uint32_t x;
	uint32_t y;
	uint32_t z;
} VkDispatchIndirectCommand;

typedef struct VkMultiDrawInfoEXT {
	uint32_t firstVertex;
	uint32_t vertexCount;
} VkMultiDrawInfoEXT;

typedef struct VkMultiDrawIndexedInfoEXT {
	uint32_t firstIndex;
	uint32_t indexCount;
	int32_t  vertexOffset;
} VkMultiDrawIndexedInfoEXT;

typedef struct VkDisplayPlanePropertiesKHR {
	VkDisplayKHR currentDisplay;
	uint32_t     currentStackIndex;
} VkDisplayPlanePropertiesKHR;

typedef struct VkDisplayModeParametersKHR {
	VkExtent2D visibleRegion;
	uint32_t   refreshRate;
} VkDisplayModeParametersKHR;

typedef struct VkDisplayModePropertiesKHR {
	VkDisplayModeKHR           displayMode;
	VkDisplayModeParametersKHR parameters;
} VkDisplayModePropertiesKHR;

typedef struct VkSurfaceFormatKHR {
	VkFormat        format;
	VkColorSpaceKHR colorSpace;
} VkSurfaceFormatKHR;

typedef struct VkPresentInfoKHR {
	VkStructureType       sType;
	const void           *pNext;
	uint32_t              waitSemaphoreCount;
	const VkSemaphore    *pWaitSemaphores;
	uint32_t              swapchainCount;
	const VkSwapchainKHR *pSwapchains;
	const uint32_t       *pImageIndices;
	VkResult             *pResults;
} VkPresentInfoKHR;

typedef struct VkValidationFlagsEXT {
	VkStructureType             sType;
	const void                 *pNext;
	uint32_t                    disabledValidationCheckCount;
	const VkValidationCheckEXT *pDisabledValidationChecks;
} VkValidationFlagsEXT;

typedef struct VkValidationFeaturesEXT {
	VkStructureType                      sType;
	const void                          *pNext;
	uint32_t                             enabledValidationFeatureCount;
	const VkValidationFeatureEnableEXT  *pEnabledValidationFeatures;
	uint32_t                             disabledValidationFeatureCount;
	const VkValidationFeatureDisableEXT *pDisabledValidationFeatures;
} VkValidationFeaturesEXT;

typedef struct VkPipelineRasterizationStateRasterizationOrderAMD {
	VkStructureType         sType;
	const void             *pNext;
	VkRasterizationOrderAMD rasterizationOrder;
} VkPipelineRasterizationStateRasterizationOrderAMD;

typedef struct VkDebugMarkerObjectNameInfoEXT {
	VkStructureType            sType;
	const void                *pNext;
	VkDebugReportObjectTypeEXT objectType;
	uint64_t                   object;
	const char                *pObjectName;
} VkDebugMarkerObjectNameInfoEXT;

typedef struct VkDebugMarkerObjectTagInfoEXT {
	VkStructureType            sType;
	const void                *pNext;
	VkDebugReportObjectTypeEXT objectType;
	uint64_t                   object;
	uint64_t                   tagName;
	size_t                     tagSize;
	const void                *pTag;
} VkDebugMarkerObjectTagInfoEXT;

typedef struct VkDebugMarkerMarkerInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	const char     *pMarkerName;
	float           color[4];
} VkDebugMarkerMarkerInfoEXT;

typedef struct VkDedicatedAllocationMemoryAllocateInfoNV {
	VkStructureType sType;
	const void     *pNext;
	VkImage         image;
	VkBuffer        buffer;
} VkDedicatedAllocationMemoryAllocateInfoNV;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkExportMemoryWin32HandleInfoNV {
	VkStructureType            sType;
	const void                *pNext;
	const SECURITY_ATTRIBUTES *pAttributes;
	DWORD                      dwAccess;
} VkExportMemoryWin32HandleInfoNV;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkWin32KeyedMutexAcquireReleaseInfoNV {
	VkStructureType       sType;
	const void           *pNext;
	uint32_t              acquireCount;
	const VkDeviceMemory *pAcquireSyncs;
	const uint64_t       *pAcquireKeys;
	const uint32_t       *pAcquireTimeoutMilliseconds;
	uint32_t              releaseCount;
	const VkDeviceMemory *pReleaseSyncs;
	const uint64_t       *pReleaseKeys;
} VkWin32KeyedMutexAcquireReleaseInfoNV;

#endif

typedef struct VkDevicePrivateDataCreateInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        privateDataSlotRequestCount;
} VkDevicePrivateDataCreateInfo;

typedef struct VkDevicePrivateDataCreateInfo VkDevicePrivateDataCreateInfoEXT;

typedef struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxGraphicsShaderGroupCount;
	uint32_t        maxIndirectSequenceCount;
	uint32_t        maxIndirectCommandsTokenCount;
	uint32_t        maxIndirectCommandsStreamCount;
	uint32_t        maxIndirectCommandsTokenOffset;
	uint32_t        maxIndirectCommandsStreamStride;
	uint32_t        minSequencesCountBufferOffsetAlignment;
	uint32_t        minSequencesIndexBufferOffsetAlignment;
	uint32_t        minIndirectCommandsBufferOffsetAlignment;
} VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;

typedef struct VkPhysicalDeviceMultiDrawPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxMultiDrawCount;
} VkPhysicalDeviceMultiDrawPropertiesEXT;

typedef struct VkBindShaderGroupIndirectCommandNV {
	uint32_t groupIndex;
} VkBindShaderGroupIndirectCommandNV;

typedef struct VkSetStateFlagsIndirectCommandNV {
	uint32_t data;
} VkSetStateFlagsIndirectCommandNV;

typedef struct VkGeneratedCommandsMemoryRequirementsInfoNV {
	VkStructureType            sType;
	const void                *pNext;
	VkPipelineBindPoint        pipelineBindPoint;
	VkPipeline                 pipeline;
	VkIndirectCommandsLayoutNV indirectCommandsLayout;
	uint32_t                   maxSequencesCount;
} VkGeneratedCommandsMemoryRequirementsInfoNV;

typedef struct VkPipelineIndirectDeviceAddressInfoNV {
	VkStructureType     sType;
	const void         *pNext;
	VkPipelineBindPoint pipelineBindPoint;
	VkPipeline          pipeline;
} VkPipelineIndirectDeviceAddressInfoNV;

typedef struct VkPhysicalDevicePushDescriptorPropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxPushDescriptors;
} VkPhysicalDevicePushDescriptorPropertiesKHR;

typedef struct VkConformanceVersion {
	uint8_t major;
	uint8_t minor;
	uint8_t subminor;
	uint8_t patch;
} VkConformanceVersion;

typedef struct VkConformanceVersion VkConformanceVersionKHR;

typedef struct VkPhysicalDeviceDriverProperties {
	VkStructureType      sType;
	void                *pNext;
	VkDriverId           driverID;
	char                 driverName[VK_MAX_DRIVER_NAME_SIZE];
	char                 driverInfo[VK_MAX_DRIVER_INFO_SIZE];
	VkConformanceVersion conformanceVersion;
} VkPhysicalDeviceDriverProperties;

typedef struct VkPhysicalDeviceDriverProperties VkPhysicalDeviceDriverPropertiesKHR;

typedef struct VkRectLayerKHR {
	VkOffset2D offset;
	VkExtent2D extent;
	uint32_t   layer;
} VkRectLayerKHR;

typedef struct VkPhysicalDeviceExternalImageFormatInfo {
	VkStructureType                    sType;
	const void                        *pNext;
	VkExternalMemoryHandleTypeFlagBits handleType;
} VkPhysicalDeviceExternalImageFormatInfo;

typedef struct VkPhysicalDeviceExternalImageFormatInfo VkPhysicalDeviceExternalImageFormatInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkImportMemoryWin32HandleInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkExternalMemoryHandleTypeFlagBits handleType;
	HANDLE                             handle;
	LPCWSTR                            name;
} VkImportMemoryWin32HandleInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkExportMemoryWin32HandleInfoKHR {
	VkStructureType            sType;
	const void                *pNext;
	const SECURITY_ATTRIBUTES *pAttributes;
	DWORD                      dwAccess;
	LPCWSTR                    name;
} VkExportMemoryWin32HandleInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImportMemoryZirconHandleInfoFUCHSIA {
	VkStructureType                    sType;
	const void                        *pNext;
	VkExternalMemoryHandleTypeFlagBits handleType;
	zx_handle_t                        handle;
} VkImportMemoryZirconHandleInfoFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkMemoryZirconHandlePropertiesFUCHSIA {
	VkStructureType sType;
	void           *pNext;
	uint32_t        memoryTypeBits;
} VkMemoryZirconHandlePropertiesFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkMemoryGetZirconHandleInfoFUCHSIA {
	VkStructureType                    sType;
	const void                        *pNext;
	VkDeviceMemory                     memory;
	VkExternalMemoryHandleTypeFlagBits handleType;
} VkMemoryGetZirconHandleInfoFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkMemoryWin32HandlePropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	uint32_t        memoryTypeBits;
} VkMemoryWin32HandlePropertiesKHR;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkMemoryGetWin32HandleInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkDeviceMemory                     memory;
	VkExternalMemoryHandleTypeFlagBits handleType;
} VkMemoryGetWin32HandleInfoKHR;

#endif

typedef struct VkImportMemoryFdInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkExternalMemoryHandleTypeFlagBits handleType;
	int                                fd;
} VkImportMemoryFdInfoKHR;

typedef struct VkMemoryFdPropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	uint32_t        memoryTypeBits;
} VkMemoryFdPropertiesKHR;

typedef struct VkMemoryGetFdInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkDeviceMemory                     memory;
	VkExternalMemoryHandleTypeFlagBits handleType;
} VkMemoryGetFdInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkWin32KeyedMutexAcquireReleaseInfoKHR {
	VkStructureType       sType;
	const void           *pNext;
	uint32_t              acquireCount;
	const VkDeviceMemory *pAcquireSyncs;
	const uint64_t       *pAcquireKeys;
	const uint32_t       *pAcquireTimeouts;
	uint32_t              releaseCount;
	const VkDeviceMemory *pReleaseSyncs;
	const uint64_t       *pReleaseKeys;
} VkWin32KeyedMutexAcquireReleaseInfoKHR;

#endif

typedef struct VkPhysicalDeviceExternalSemaphoreInfo {
	VkStructureType                       sType;
	const void                           *pNext;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
} VkPhysicalDeviceExternalSemaphoreInfo;

typedef struct VkPhysicalDeviceExternalSemaphoreInfo VkPhysicalDeviceExternalSemaphoreInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkExportSemaphoreWin32HandleInfoKHR {
	VkStructureType            sType;
	const void                *pNext;
	const SECURITY_ATTRIBUTES *pAttributes;
	DWORD                      dwAccess;
	LPCWSTR                    name;
} VkExportSemaphoreWin32HandleInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkD3D12FenceSubmitInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        waitSemaphoreValuesCount;
	const uint64_t *pWaitSemaphoreValues;
	uint32_t        signalSemaphoreValuesCount;
	const uint64_t *pSignalSemaphoreValues;
} VkD3D12FenceSubmitInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkSemaphoreGetWin32HandleInfoKHR {
	VkStructureType                       sType;
	const void                           *pNext;
	VkSemaphore                           semaphore;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
} VkSemaphoreGetWin32HandleInfoKHR;

#endif

typedef struct VkSemaphoreGetFdInfoKHR {
	VkStructureType                       sType;
	const void                           *pNext;
	VkSemaphore                           semaphore;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
} VkSemaphoreGetFdInfoKHR;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkSemaphoreGetZirconHandleInfoFUCHSIA {
	VkStructureType                       sType;
	const void                           *pNext;
	VkSemaphore                           semaphore;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
} VkSemaphoreGetZirconHandleInfoFUCHSIA;

#endif

typedef struct VkPhysicalDeviceExternalFenceInfo {
	VkStructureType                   sType;
	const void                       *pNext;
	VkExternalFenceHandleTypeFlagBits handleType;
} VkPhysicalDeviceExternalFenceInfo;

typedef struct VkPhysicalDeviceExternalFenceInfo VkPhysicalDeviceExternalFenceInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkExportFenceWin32HandleInfoKHR {
	VkStructureType            sType;
	const void                *pNext;
	const SECURITY_ATTRIBUTES *pAttributes;
	DWORD                      dwAccess;
	LPCWSTR                    name;
} VkExportFenceWin32HandleInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkFenceGetWin32HandleInfoKHR {
	VkStructureType                   sType;
	const void                       *pNext;
	VkFence                           fence;
	VkExternalFenceHandleTypeFlagBits handleType;
} VkFenceGetWin32HandleInfoKHR;

#endif

typedef struct VkFenceGetFdInfoKHR {
	VkStructureType                   sType;
	const void                       *pNext;
	VkFence                           fence;
	VkExternalFenceHandleTypeFlagBits handleType;
} VkFenceGetFdInfoKHR;

typedef struct VkPhysicalDeviceMultiviewProperties {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxMultiviewViewCount;
	uint32_t        maxMultiviewInstanceIndex;
} VkPhysicalDeviceMultiviewProperties;

typedef struct VkPhysicalDeviceMultiviewProperties VkPhysicalDeviceMultiviewPropertiesKHR;

typedef struct VkRenderPassMultiviewCreateInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        subpassCount;
	const uint32_t *pViewMasks;
	uint32_t        dependencyCount;
	const int32_t  *pViewOffsets;
	uint32_t        correlationMaskCount;
	const uint32_t *pCorrelationMasks;
} VkRenderPassMultiviewCreateInfo;

typedef struct VkRenderPassMultiviewCreateInfo VkRenderPassMultiviewCreateInfoKHR;

typedef struct VkDisplayPowerInfoEXT {
	VkStructureType        sType;
	const void            *pNext;
	VkDisplayPowerStateEXT powerState;
} VkDisplayPowerInfoEXT;

typedef struct VkDeviceEventInfoEXT {
	VkStructureType      sType;
	const void          *pNext;
	VkDeviceEventTypeEXT deviceEvent;
} VkDeviceEventInfoEXT;

typedef struct VkDisplayEventInfoEXT {
	VkStructureType       sType;
	const void           *pNext;
	VkDisplayEventTypeEXT displayEvent;
} VkDisplayEventInfoEXT;

typedef struct VkBindBufferMemoryDeviceGroupInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        deviceIndexCount;
	const uint32_t *pDeviceIndices;
} VkBindBufferMemoryDeviceGroupInfo;

typedef struct VkBindBufferMemoryDeviceGroupInfo VkBindBufferMemoryDeviceGroupInfoKHR;

typedef struct VkBindImageMemoryDeviceGroupInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        deviceIndexCount;
	const uint32_t *pDeviceIndices;
	uint32_t        splitInstanceBindRegionCount;
	const VkRect2D *pSplitInstanceBindRegions;
} VkBindImageMemoryDeviceGroupInfo;

typedef struct VkBindImageMemoryDeviceGroupInfo VkBindImageMemoryDeviceGroupInfoKHR;

typedef struct VkDeviceGroupRenderPassBeginInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        deviceMask;
	uint32_t        deviceRenderAreaCount;
	const VkRect2D *pDeviceRenderAreas;
} VkDeviceGroupRenderPassBeginInfo;

typedef struct VkDeviceGroupRenderPassBeginInfo VkDeviceGroupRenderPassBeginInfoKHR;

typedef struct VkDeviceGroupCommandBufferBeginInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        deviceMask;
} VkDeviceGroupCommandBufferBeginInfo;

typedef struct VkDeviceGroupCommandBufferBeginInfo VkDeviceGroupCommandBufferBeginInfoKHR;

typedef struct VkDeviceGroupSubmitInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        waitSemaphoreCount;
	const uint32_t *pWaitSemaphoreDeviceIndices;
	uint32_t        commandBufferCount;
	const uint32_t *pCommandBufferDeviceMasks;
	uint32_t        signalSemaphoreCount;
	const uint32_t *pSignalSemaphoreDeviceIndices;
} VkDeviceGroupSubmitInfo;

typedef struct VkDeviceGroupSubmitInfo VkDeviceGroupSubmitInfoKHR;

typedef struct VkDeviceGroupBindSparseInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        resourceDeviceIndex;
	uint32_t        memoryDeviceIndex;
} VkDeviceGroupBindSparseInfo;

typedef struct VkDeviceGroupBindSparseInfo VkDeviceGroupBindSparseInfoKHR;

typedef struct VkImageSwapchainCreateInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	VkSwapchainKHR  swapchain;
} VkImageSwapchainCreateInfoKHR;

typedef struct VkBindImageMemorySwapchainInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	VkSwapchainKHR  swapchain;
	uint32_t        imageIndex;
} VkBindImageMemorySwapchainInfoKHR;

typedef struct VkAcquireNextImageInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	VkSwapchainKHR  swapchain;
	uint64_t        timeout;
	VkSemaphore     semaphore;
	VkFence         fence;
	uint32_t        deviceMask;
} VkAcquireNextImageInfoKHR;

typedef struct VkDeviceGroupPresentInfoKHR {
	VkStructureType                     sType;
	const void                         *pNext;
	uint32_t                            swapchainCount;
	const uint32_t                     *pDeviceMasks;
	VkDeviceGroupPresentModeFlagBitsKHR mode;
} VkDeviceGroupPresentInfoKHR;

typedef struct VkDeviceGroupDeviceCreateInfo {
	VkStructureType         sType;
	const void             *pNext;
	uint32_t                physicalDeviceCount;
	const VkPhysicalDevice *pPhysicalDevices;
} VkDeviceGroupDeviceCreateInfo;

typedef struct VkDeviceGroupDeviceCreateInfo VkDeviceGroupDeviceCreateInfoKHR;

typedef struct VkDescriptorUpdateTemplateEntry {
	uint32_t         dstBinding;
	uint32_t         dstArrayElement;
	uint32_t         descriptorCount;
	VkDescriptorType descriptorType;
	size_t           offset;
	size_t           stride;
} VkDescriptorUpdateTemplateEntry;

typedef struct VkDescriptorUpdateTemplateEntry VkDescriptorUpdateTemplateEntryKHR;

typedef struct VkXYColorEXT {
	float x;
	float y;
} VkXYColorEXT;

typedef struct VkPresentIdKHR {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        swapchainCount;
	const uint64_t *pPresentIds;
} VkPresentIdKHR;

typedef struct VkHdrMetadataEXT {
	VkStructureType sType;
	const void     *pNext;
	VkXYColorEXT    displayPrimaryRed;
	VkXYColorEXT    displayPrimaryGreen;
	VkXYColorEXT    displayPrimaryBlue;
	VkXYColorEXT    whitePoint;
	float           maxLuminance;
	float           minLuminance;
	float           maxContentLightLevel;
	float           maxFrameAverageLightLevel;
} VkHdrMetadataEXT;

typedef struct VkRefreshCycleDurationGOOGLE {
	uint64_t refreshDuration;
} VkRefreshCycleDurationGOOGLE;

typedef struct VkPastPresentationTimingGOOGLE {
	uint32_t presentID;
	uint64_t desiredPresentTime;
	uint64_t actualPresentTime;
	uint64_t earliestPresentTime;
	uint64_t presentMargin;
} VkPastPresentationTimingGOOGLE;

typedef struct VkPresentTimeGOOGLE {
	uint32_t presentID;
	uint64_t desiredPresentTime;
} VkPresentTimeGOOGLE;

typedef struct VkViewportWScalingNV {
	float xcoeff;
	float ycoeff;
} VkViewportWScalingNV;

typedef struct VkViewportSwizzleNV {
	VkViewportCoordinateSwizzleNV x;
	VkViewportCoordinateSwizzleNV y;
	VkViewportCoordinateSwizzleNV z;
	VkViewportCoordinateSwizzleNV w;
} VkViewportSwizzleNV;

typedef struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxDiscardRectangles;
} VkPhysicalDeviceDiscardRectanglePropertiesEXT;

typedef struct VkPhysicalDeviceSurfaceInfo2KHR {
	VkStructureType sType;
	const void     *pNext;
	VkSurfaceKHR    surface;
} VkPhysicalDeviceSurfaceInfo2KHR;

typedef struct VkSurfaceFormat2KHR {
	VkStructureType    sType;
	void              *pNext;
	VkSurfaceFormatKHR surfaceFormat;
} VkSurfaceFormat2KHR;

typedef struct VkDisplayPlaneProperties2KHR {
	VkStructureType             sType;
	void                       *pNext;
	VkDisplayPlanePropertiesKHR displayPlaneProperties;
} VkDisplayPlaneProperties2KHR;

typedef struct VkDisplayModeProperties2KHR {
	VkStructureType            sType;
	void                      *pNext;
	VkDisplayModePropertiesKHR displayModeProperties;
} VkDisplayModeProperties2KHR;

typedef struct VkDisplayPlaneInfo2KHR {
	VkStructureType  sType;
	const void      *pNext;
	VkDisplayModeKHR mode;
	uint32_t         planeIndex;
} VkDisplayPlaneInfo2KHR;

typedef struct VkBufferMemoryRequirementsInfo2 {
	VkStructureType sType;
	const void     *pNext;
	VkBuffer        buffer;
} VkBufferMemoryRequirementsInfo2;

typedef struct VkBufferMemoryRequirementsInfo2 VkBufferMemoryRequirementsInfo2KHR;

typedef struct VkImageMemoryRequirementsInfo2 {
	VkStructureType sType;
	const void     *pNext;
	VkImage         image;
} VkImageMemoryRequirementsInfo2;

typedef struct VkImageMemoryRequirementsInfo2 VkImageMemoryRequirementsInfo2KHR;

typedef struct VkImageSparseMemoryRequirementsInfo2 {
	VkStructureType sType;
	const void     *pNext;
	VkImage         image;
} VkImageSparseMemoryRequirementsInfo2;

typedef struct VkImageSparseMemoryRequirementsInfo2 VkImageSparseMemoryRequirementsInfo2KHR;

typedef struct VkPhysicalDevicePointClippingProperties {
	VkStructureType         sType;
	void                   *pNext;
	VkPointClippingBehavior pointClippingBehavior;
} VkPhysicalDevicePointClippingProperties;

typedef struct VkPhysicalDevicePointClippingProperties VkPhysicalDevicePointClippingPropertiesKHR;

typedef struct VkMemoryDedicatedAllocateInfo {
	VkStructureType sType;
	const void     *pNext;
	VkImage         image;
	VkBuffer        buffer;
} VkMemoryDedicatedAllocateInfo;

typedef struct VkMemoryDedicatedAllocateInfo VkMemoryDedicatedAllocateInfoKHR;

typedef struct VkImageViewSlicedCreateInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        sliceOffset;
	uint32_t        sliceCount;
} VkImageViewSlicedCreateInfoEXT;

typedef struct VkPipelineTessellationDomainOriginStateCreateInfo {
	VkStructureType            sType;
	const void                *pNext;
	VkTessellationDomainOrigin domainOrigin;
} VkPipelineTessellationDomainOriginStateCreateInfo;

typedef struct VkPipelineTessellationDomainOriginStateCreateInfo VkPipelineTessellationDomainOriginStateCreateInfoKHR;

typedef struct VkSamplerYcbcrConversionInfo {
	VkStructureType          sType;
	const void              *pNext;
	VkSamplerYcbcrConversion conversion;
} VkSamplerYcbcrConversionInfo;

typedef struct VkSamplerYcbcrConversionInfo VkSamplerYcbcrConversionInfoKHR;

typedef struct VkBindImagePlaneMemoryInfo {
	VkStructureType       sType;
	const void           *pNext;
	VkImageAspectFlagBits planeAspect;
} VkBindImagePlaneMemoryInfo;

typedef struct VkBindImagePlaneMemoryInfo VkBindImagePlaneMemoryInfoKHR;

typedef struct VkImagePlaneMemoryRequirementsInfo {
	VkStructureType       sType;
	const void           *pNext;
	VkImageAspectFlagBits planeAspect;
} VkImagePlaneMemoryRequirementsInfo;

typedef struct VkImagePlaneMemoryRequirementsInfo VkImagePlaneMemoryRequirementsInfoKHR;

typedef struct VkSamplerYcbcrConversionImageFormatProperties {
	VkStructureType sType;
	void           *pNext;
	uint32_t        combinedImageSamplerDescriptorCount;
} VkSamplerYcbcrConversionImageFormatProperties;

typedef struct VkSamplerYcbcrConversionImageFormatProperties VkSamplerYcbcrConversionImageFormatPropertiesKHR;

typedef struct VkSampleLocationEXT {
	float x;
	float y;
} VkSampleLocationEXT;

typedef struct VkSampleLocationsInfoEXT {
	VkStructureType            sType;
	const void                *pNext;
	VkSampleCountFlagBits      sampleLocationsPerPixel;
	VkExtent2D                 sampleLocationGridSize;
	uint32_t                   sampleLocationsCount;
	const VkSampleLocationEXT *pSampleLocations;
} VkSampleLocationsInfoEXT;

typedef struct VkAttachmentSampleLocationsEXT {
	uint32_t                 attachmentIndex;
	VkSampleLocationsInfoEXT sampleLocationsInfo;
} VkAttachmentSampleLocationsEXT;

typedef struct VkSubpassSampleLocationsEXT {
	uint32_t                 subpassIndex;
	VkSampleLocationsInfoEXT sampleLocationsInfo;
} VkSubpassSampleLocationsEXT;

typedef struct VkRenderPassSampleLocationsBeginInfoEXT {
	VkStructureType                       sType;
	const void                           *pNext;
	uint32_t                              attachmentInitialSampleLocationsCount;
	const VkAttachmentSampleLocationsEXT *pAttachmentInitialSampleLocations;
	uint32_t                              postSubpassSampleLocationsCount;
	const VkSubpassSampleLocationsEXT    *pPostSubpassSampleLocations;
} VkRenderPassSampleLocationsBeginInfoEXT;

typedef struct VkMultisamplePropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkExtent2D      maxSampleLocationGridSize;
} VkMultisamplePropertiesEXT;

typedef struct VkSamplerReductionModeCreateInfo {
	VkStructureType        sType;
	const void            *pNext;
	VkSamplerReductionMode reductionMode;
} VkSamplerReductionModeCreateInfo;

typedef struct VkSamplerReductionModeCreateInfo VkSamplerReductionModeCreateInfoEXT;

typedef struct VkPhysicalDeviceInlineUniformBlockProperties {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxInlineUniformBlockSize;
	uint32_t        maxPerStageDescriptorInlineUniformBlocks;
	uint32_t        maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	uint32_t        maxDescriptorSetInlineUniformBlocks;
	uint32_t        maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
} VkPhysicalDeviceInlineUniformBlockProperties;

typedef struct VkPhysicalDeviceInlineUniformBlockProperties VkPhysicalDeviceInlineUniformBlockPropertiesEXT;

typedef struct VkWriteDescriptorSetInlineUniformBlock {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        dataSize;
	const void     *pData;
} VkWriteDescriptorSetInlineUniformBlock;

typedef struct VkWriteDescriptorSetInlineUniformBlock VkWriteDescriptorSetInlineUniformBlockEXT;

typedef struct VkDescriptorPoolInlineUniformBlockCreateInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        maxInlineUniformBlockBindings;
} VkDescriptorPoolInlineUniformBlockCreateInfo;

typedef struct VkDescriptorPoolInlineUniformBlockCreateInfo VkDescriptorPoolInlineUniformBlockCreateInfoEXT;

typedef struct VkImageFormatListCreateInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        viewFormatCount;
	const VkFormat *pViewFormats;
} VkImageFormatListCreateInfo;

typedef struct VkImageFormatListCreateInfo VkImageFormatListCreateInfoKHR;

typedef struct VkShaderModuleValidationCacheCreateInfoEXT {
	VkStructureType      sType;
	const void          *pNext;
	VkValidationCacheEXT validationCache;
} VkShaderModuleValidationCacheCreateInfoEXT;

typedef struct VkRenderingAreaInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        viewMask;
	uint32_t        colorAttachmentCount;
	const VkFormat *pColorAttachmentFormats;
	VkFormat        depthAttachmentFormat;
	VkFormat        stencilAttachmentFormat;
} VkRenderingAreaInfoKHR;

typedef struct VkShaderResourceUsageAMD {
	uint32_t numUsedVgprs;
	uint32_t numUsedSgprs;
	uint32_t ldsSizePerLocalWorkGroup;
	size_t   ldsUsageSizeInBytes;
	size_t   scratchMemUsageInBytes;
} VkShaderResourceUsageAMD;

typedef struct VkDeviceQueueGlobalPriorityCreateInfoKHR {
	VkStructureType          sType;
	const void              *pNext;
	VkQueueGlobalPriorityKHR globalPriority;
} VkDeviceQueueGlobalPriorityCreateInfoKHR;

typedef struct VkDeviceQueueGlobalPriorityCreateInfoKHR VkDeviceQueueGlobalPriorityCreateInfoEXT;

typedef struct VkQueueFamilyGlobalPriorityPropertiesKHR {
	VkStructureType          sType;
	void                    *pNext;
	uint32_t                 priorityCount;
	VkQueueGlobalPriorityKHR priorities[VK_MAX_GLOBAL_PRIORITY_SIZE_KHR];
} VkQueueFamilyGlobalPriorityPropertiesKHR;

typedef struct VkQueueFamilyGlobalPriorityPropertiesKHR VkQueueFamilyGlobalPriorityPropertiesEXT;

typedef struct VkDebugUtilsObjectNameInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkObjectType    objectType;
	uint64_t        objectHandle;
	const char     *pObjectName;
} VkDebugUtilsObjectNameInfoEXT;

typedef struct VkDebugUtilsObjectTagInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkObjectType    objectType;
	uint64_t        objectHandle;
	uint64_t        tagName;
	size_t          tagSize;
	const void     *pTag;
} VkDebugUtilsObjectTagInfoEXT;

typedef struct VkDebugUtilsLabelEXT {
	VkStructureType sType;
	const void     *pNext;
	const char     *pLabelName;
	float           color[4];
} VkDebugUtilsLabelEXT;

typedef struct VkImportMemoryHostPointerInfoEXT {
	VkStructureType                    sType;
	const void                        *pNext;
	VkExternalMemoryHandleTypeFlagBits handleType;
	void                              *pHostPointer;
} VkImportMemoryHostPointerInfoEXT;

typedef struct VkMemoryHostPointerPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        memoryTypeBits;
} VkMemoryHostPointerPropertiesEXT;

typedef struct VkCalibratedTimestampInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkTimeDomainEXT timeDomain;
} VkCalibratedTimestampInfoEXT;

typedef struct VkPhysicalDeviceShaderCorePropertiesAMD {
	VkStructureType sType;
	void           *pNext;
	uint32_t        shaderEngineCount;
	uint32_t        shaderArraysPerEngineCount;
	uint32_t        computeUnitsPerShaderArray;
	uint32_t        simdPerComputeUnit;
	uint32_t        wavefrontsPerSimd;
	uint32_t        wavefrontSize;
	uint32_t        sgprsPerSimd;
	uint32_t        minSgprAllocation;
	uint32_t        maxSgprAllocation;
	uint32_t        sgprAllocationGranularity;
	uint32_t        vgprsPerSimd;
	uint32_t        minVgprAllocation;
	uint32_t        maxVgprAllocation;
	uint32_t        vgprAllocationGranularity;
} VkPhysicalDeviceShaderCorePropertiesAMD;

typedef struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        descriptorSetCount;
	const uint32_t *pDescriptorCounts;
} VkDescriptorSetVariableDescriptorCountAllocateInfo;

typedef struct VkDescriptorSetVariableDescriptorCountAllocateInfo VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;

typedef struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxVariableDescriptorCount;
} VkDescriptorSetVariableDescriptorCountLayoutSupport;

typedef struct VkDescriptorSetVariableDescriptorCountLayoutSupport VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;

typedef struct VkSubpassBeginInfo {
	VkStructureType   sType;
	const void       *pNext;
	VkSubpassContents contents;
} VkSubpassBeginInfo;

typedef struct VkSubpassBeginInfo VkSubpassBeginInfoKHR;

typedef struct VkSubpassEndInfo {
	VkStructureType sType;
	const void     *pNext;
} VkSubpassEndInfo;

typedef struct VkSubpassEndInfo VkSubpassEndInfoKHR;

typedef struct VkPhysicalDeviceTimelineSemaphoreProperties {
	VkStructureType sType;
	void           *pNext;
	uint64_t        maxTimelineSemaphoreValueDifference;
} VkPhysicalDeviceTimelineSemaphoreProperties;

typedef struct VkPhysicalDeviceTimelineSemaphoreProperties VkPhysicalDeviceTimelineSemaphorePropertiesKHR;

typedef struct VkSemaphoreTypeCreateInfo {
	VkStructureType sType;
	const void     *pNext;
	VkSemaphoreType semaphoreType;
	uint64_t        initialValue;
} VkSemaphoreTypeCreateInfo;

typedef struct VkSemaphoreTypeCreateInfo VkSemaphoreTypeCreateInfoKHR;

typedef struct VkTimelineSemaphoreSubmitInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        waitSemaphoreValueCount;
	const uint64_t *pWaitSemaphoreValues;
	uint32_t        signalSemaphoreValueCount;
	const uint64_t *pSignalSemaphoreValues;
} VkTimelineSemaphoreSubmitInfo;

typedef struct VkTimelineSemaphoreSubmitInfo VkTimelineSemaphoreSubmitInfoKHR;

typedef struct VkSemaphoreSignalInfo {
	VkStructureType sType;
	const void     *pNext;
	VkSemaphore     semaphore;
	uint64_t        value;
} VkSemaphoreSignalInfo;

typedef struct VkSemaphoreSignalInfo VkSemaphoreSignalInfoKHR;

typedef struct VkVertexInputBindingDivisorDescriptionEXT {
	uint32_t binding;
	uint32_t divisor;
} VkVertexInputBindingDivisorDescriptionEXT;

typedef struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
	VkStructureType                                  sType;
	const void                                      *pNext;
	uint32_t                                         vertexBindingDivisorCount;
	const VkVertexInputBindingDivisorDescriptionEXT *pVertexBindingDivisors;
} VkPipelineVertexInputDivisorStateCreateInfoEXT;

typedef struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxVertexAttribDivisor;
} VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;

typedef struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        pciDomain;
	uint32_t        pciBus;
	uint32_t        pciDevice;
	uint32_t        pciFunction;
} VkPhysicalDevicePCIBusInfoPropertiesEXT;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkImportAndroidHardwareBufferInfoANDROID {
	VkStructureType         sType;
	const void             *pNext;
	struct AHardwareBuffer *buffer;
} VkImportAndroidHardwareBufferInfoANDROID;

#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferUsageANDROID {
	VkStructureType sType;
	void           *pNext;
	uint64_t        androidHardwareBufferUsage;
} VkAndroidHardwareBufferUsageANDROID;

#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkMemoryGetAndroidHardwareBufferInfoANDROID {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceMemory  memory;
} VkMemoryGetAndroidHardwareBufferInfoANDROID;

#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkExternalFormatANDROID {
	VkStructureType sType;
	void           *pNext;
	uint64_t        externalFormat;
} VkExternalFormatANDROID;

#endif

typedef struct VkCheckpointDataNV {
	VkStructureType         sType;
	void                   *pNext;
	VkPipelineStageFlagBits stage;
	void                   *pCheckpointMarker;
} VkCheckpointDataNV;

typedef struct VkImageViewASTCDecodeModeEXT {
	VkStructureType sType;
	const void     *pNext;
	VkFormat        decodeMode;
} VkImageViewASTCDecodeModeEXT;

typedef struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        exclusiveScissorCount;
	const VkRect2D *pExclusiveScissors;
} VkPipelineViewportExclusiveScissorStateCreateInfoNV;

typedef struct VkShadingRatePaletteNV {
	uint32_t                           shadingRatePaletteEntryCount;
	const VkShadingRatePaletteEntryNV *pShadingRatePaletteEntries;
} VkShadingRatePaletteNV;

typedef struct VkPhysicalDeviceShadingRateImagePropertiesNV {
	VkStructureType sType;
	void           *pNext;
	VkExtent2D      shadingRateTexelSize;
	uint32_t        shadingRatePaletteSize;
	uint32_t        shadingRateMaxCoarseSamples;
} VkPhysicalDeviceShadingRateImagePropertiesNV;

typedef struct VkCoarseSampleLocationNV {
	uint32_t pixelX;
	uint32_t pixelY;
	uint32_t sample;
} VkCoarseSampleLocationNV;

typedef struct VkCoarseSampleOrderCustomNV {
	VkShadingRatePaletteEntryNV     shadingRate;
	uint32_t                        sampleCount;
	uint32_t                        sampleLocationCount;
	const VkCoarseSampleLocationNV *pSampleLocations;
} VkCoarseSampleOrderCustomNV;

typedef struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
	VkStructureType                    sType;
	const void                        *pNext;
	VkCoarseSampleOrderTypeNV          sampleOrderType;
	uint32_t                           customSampleOrderCount;
	const VkCoarseSampleOrderCustomNV *pCustomSampleOrders;
} VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;

typedef struct VkPhysicalDeviceMeshShaderPropertiesNV {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxDrawMeshTasksCount;
	uint32_t        maxTaskWorkGroupInvocations;
	uint32_t        maxTaskWorkGroupSize[3];
	uint32_t        maxTaskTotalMemorySize;
	uint32_t        maxTaskOutputCount;
	uint32_t        maxMeshWorkGroupInvocations;
	uint32_t        maxMeshWorkGroupSize[3];
	uint32_t        maxMeshTotalMemorySize;
	uint32_t        maxMeshOutputVertices;
	uint32_t        maxMeshOutputPrimitives;
	uint32_t        maxMeshMultiviewViewCount;
	uint32_t        meshOutputPerVertexGranularity;
	uint32_t        meshOutputPerPrimitiveGranularity;
} VkPhysicalDeviceMeshShaderPropertiesNV;

typedef struct VkDrawMeshTasksIndirectCommandNV {
	uint32_t taskCount;
	uint32_t firstTask;
} VkDrawMeshTasksIndirectCommandNV;

typedef struct VkDrawMeshTasksIndirectCommandEXT {
	uint32_t groupCountX;
	uint32_t groupCountY;
	uint32_t groupCountZ;
} VkDrawMeshTasksIndirectCommandEXT;

typedef struct VkRayTracingShaderGroupCreateInfoNV {
	VkStructureType                sType;
	const void                    *pNext;
	VkRayTracingShaderGroupTypeKHR type;
	uint32_t                       generalShader;
	uint32_t                       closestHitShader;
	uint32_t                       anyHitShader;
	uint32_t                       intersectionShader;
} VkRayTracingShaderGroupCreateInfoNV;

typedef struct VkRayTracingShaderGroupCreateInfoKHR {
	VkStructureType                sType;
	const void                    *pNext;
	VkRayTracingShaderGroupTypeKHR type;
	uint32_t                       generalShader;
	uint32_t                       closestHitShader;
	uint32_t                       anyHitShader;
	uint32_t                       intersectionShader;
	const void                    *pShaderGroupCaptureReplayHandle;
} VkRayTracingShaderGroupCreateInfoKHR;

typedef struct VkWriteDescriptorSetAccelerationStructureKHR {
	VkStructureType                   sType;
	const void                       *pNext;
	uint32_t                          accelerationStructureCount;
	const VkAccelerationStructureKHR *pAccelerationStructures;
} VkWriteDescriptorSetAccelerationStructureKHR;

typedef struct VkWriteDescriptorSetAccelerationStructureNV {
	VkStructureType                  sType;
	const void                      *pNext;
	uint32_t                         accelerationStructureCount;
	const VkAccelerationStructureNV *pAccelerationStructures;
} VkWriteDescriptorSetAccelerationStructureNV;

typedef struct VkAccelerationStructureMemoryRequirementsInfoNV {
	VkStructureType                                 sType;
	const void                                     *pNext;
	VkAccelerationStructureMemoryRequirementsTypeNV type;
	VkAccelerationStructureNV                       accelerationStructure;
} VkAccelerationStructureMemoryRequirementsInfoNV;

typedef struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	uint64_t        maxGeometryCount;
	uint64_t        maxInstanceCount;
	uint64_t        maxPrimitiveCount;
	uint32_t        maxPerStageDescriptorAccelerationStructures;
	uint32_t        maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
	uint32_t        maxDescriptorSetAccelerationStructures;
	uint32_t        maxDescriptorSetUpdateAfterBindAccelerationStructures;
	uint32_t        minAccelerationStructureScratchOffsetAlignment;
} VkPhysicalDeviceAccelerationStructurePropertiesKHR;

typedef struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	uint32_t        shaderGroupHandleSize;
	uint32_t        maxRayRecursionDepth;
	uint32_t        maxShaderGroupStride;
	uint32_t        shaderGroupBaseAlignment;
	uint32_t        shaderGroupHandleCaptureReplaySize;
	uint32_t        maxRayDispatchInvocationCount;
	uint32_t        shaderGroupHandleAlignment;
	uint32_t        maxRayHitAttributeSize;
} VkPhysicalDeviceRayTracingPipelinePropertiesKHR;

typedef struct VkPhysicalDeviceRayTracingPropertiesNV {
	VkStructureType sType;
	void           *pNext;
	uint32_t        shaderGroupHandleSize;
	uint32_t        maxRecursionDepth;
	uint32_t        maxShaderGroupStride;
	uint32_t        shaderGroupBaseAlignment;
	uint64_t        maxGeometryCount;
	uint64_t        maxInstanceCount;
	uint64_t        maxTriangleCount;
	uint32_t        maxDescriptorSetAccelerationStructures;
} VkPhysicalDeviceRayTracingPropertiesNV;

typedef struct VkTraceRaysIndirectCommandKHR {
	uint32_t width;
	uint32_t height;
	uint32_t depth;
} VkTraceRaysIndirectCommandKHR;

typedef struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	uint64_t        drmFormatModifier;
	VkSharingMode   sharingMode;
	uint32_t        queueFamilyIndexCount;
	const uint32_t *pQueueFamilyIndices;
} VkPhysicalDeviceImageDrmFormatModifierInfoEXT;

typedef struct VkImageDrmFormatModifierListCreateInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        drmFormatModifierCount;
	const uint64_t *pDrmFormatModifiers;
} VkImageDrmFormatModifierListCreateInfoEXT;

typedef struct VkImageDrmFormatModifierPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint64_t        drmFormatModifier;
} VkImageDrmFormatModifierPropertiesEXT;

typedef struct VkDeviceMemoryOverallocationCreateInfoAMD {
	VkStructureType                   sType;
	const void                       *pNext;
	VkMemoryOverallocationBehaviorAMD overallocationBehavior;
} VkDeviceMemoryOverallocationCreateInfoAMD;

typedef struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkExtent2D      fragmentDensityOffsetGranularity;
} VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;

typedef struct VkRenderPassFragmentDensityMapCreateInfoEXT {
	VkStructureType       sType;
	const void           *pNext;
	VkAttachmentReference fragmentDensityMapAttachment;
} VkRenderPassFragmentDensityMapCreateInfoEXT;

typedef struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM {
	VkStructureType   sType;
	const void       *pNext;
	uint32_t          fragmentDensityOffsetCount;
	const VkOffset2D *pFragmentDensityOffsets;
} VkSubpassFragmentDensityMapOffsetEndInfoQCOM;

typedef struct VkMemoryPriorityAllocateInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	float           priority;
} VkMemoryPriorityAllocateInfoEXT;

typedef struct VkBufferDeviceAddressInfo {
	VkStructureType sType;
	const void     *pNext;
	VkBuffer        buffer;
} VkBufferDeviceAddressInfo;

typedef struct VkBufferDeviceAddressInfo VkBufferDeviceAddressInfoKHR;

typedef struct VkBufferDeviceAddressInfo VkBufferDeviceAddressInfoEXT;

typedef struct VkBufferOpaqueCaptureAddressCreateInfo {
	VkStructureType sType;
	const void     *pNext;
	uint64_t        opaqueCaptureAddress;
} VkBufferOpaqueCaptureAddressCreateInfo;

typedef struct VkBufferOpaqueCaptureAddressCreateInfo VkBufferOpaqueCaptureAddressCreateInfoKHR;

typedef struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
	VkStructureType sType;
	void           *pNext;
	VkImageViewType imageViewType;
} VkPhysicalDeviceImageViewImageFormatInfoEXT;

typedef struct VkRenderPassAttachmentBeginInfo {
	VkStructureType    sType;
	const void        *pNext;
	uint32_t           attachmentCount;
	const VkImageView *pAttachments;
} VkRenderPassAttachmentBeginInfo;

typedef struct VkRenderPassAttachmentBeginInfo VkRenderPassAttachmentBeginInfoKHR;

typedef struct VkCooperativeMatrixPropertiesNV {
	VkStructureType   sType;
	void             *pNext;
	uint32_t          MSize;
	uint32_t          NSize;
	uint32_t          KSize;
	VkComponentTypeNV AType;
	VkComponentTypeNV BType;
	VkComponentTypeNV CType;
	VkComponentTypeNV DType;
	VkScopeNV         scope;
} VkCooperativeMatrixPropertiesNV;

typedef struct VkImageViewHandleInfoNVX {
	VkStructureType  sType;
	const void      *pNext;
	VkImageView      imageView;
	VkDescriptorType descriptorType;
	VkSampler        sampler;
} VkImageViewHandleInfoNVX;

#if defined(VK_USE_PLATFORM_GGP)
typedef struct VkPresentFrameTokenGGP {
	VkStructureType sType;
	const void     *pNext;
	GgpFrameToken   frameToken;
} VkPresentFrameTokenGGP;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkSurfaceFullScreenExclusiveInfoEXT {
	VkStructureType          sType;
	void                    *pNext;
	VkFullScreenExclusiveEXT fullScreenExclusive;
} VkSurfaceFullScreenExclusiveInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkSurfaceFullScreenExclusiveWin32InfoEXT {
	VkStructureType sType;
	const void     *pNext;
	HMONITOR        hmonitor;
} VkSurfaceFullScreenExclusiveWin32InfoEXT;

#endif

typedef struct VkPerformanceCounterKHR {
	VkStructureType                sType;
	void                          *pNext;
	VkPerformanceCounterUnitKHR    unit;
	VkPerformanceCounterScopeKHR   scope;
	VkPerformanceCounterStorageKHR storage;
	uint8_t                        uuid[VK_UUID_SIZE];
} VkPerformanceCounterKHR;

typedef struct VkQueryPoolPerformanceCreateInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        queueFamilyIndex;
	uint32_t        counterIndexCount;
	const uint32_t *pCounterIndices;
} VkQueryPoolPerformanceCreateInfoKHR;

typedef union VkPerformanceCounterResultKHR {
	int32_t  int32;
	int64_t  int64;
	uint32_t uint32;
	uint64_t uint64;
	float    float32;
	double   float64;
} VkPerformanceCounterResultKHR;

typedef struct VkPerformanceQuerySubmitInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        counterPassIndex;
} VkPerformanceQuerySubmitInfoKHR;

typedef struct VkInitializePerformanceApiInfoINTEL {
	VkStructureType sType;
	const void     *pNext;
	void           *pUserData;
} VkInitializePerformanceApiInfoINTEL;

typedef struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
	VkStructureType              sType;
	const void                  *pNext;
	VkQueryPoolSamplingModeINTEL performanceCountersSampling;
} VkQueryPoolPerformanceQueryCreateInfoINTEL;

typedef struct VkQueryPoolPerformanceQueryCreateInfoINTEL VkQueryPoolCreateInfoINTEL;

typedef struct VkPerformanceMarkerInfoINTEL {
	VkStructureType sType;
	const void     *pNext;
	uint64_t        marker;
} VkPerformanceMarkerInfoINTEL;

typedef struct VkPerformanceStreamMarkerInfoINTEL {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        marker;
} VkPerformanceStreamMarkerInfoINTEL;

typedef struct VkPerformanceConfigurationAcquireInfoINTEL {
	VkStructureType                     sType;
	const void                         *pNext;
	VkPerformanceConfigurationTypeINTEL type;
} VkPerformanceConfigurationAcquireInfoINTEL;

typedef struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
	VkStructureType sType;
	void           *pNext;
	uint32_t        shaderSMCount;
	uint32_t        shaderWarpsPerSM;
} VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;

typedef struct VkAttachmentReferenceStencilLayout {
	VkStructureType sType;
	void           *pNext;
	VkImageLayout   stencilLayout;
} VkAttachmentReferenceStencilLayout;

typedef struct VkAttachmentReferenceStencilLayout VkAttachmentReferenceStencilLayoutKHR;

typedef struct VkAttachmentDescriptionStencilLayout {
	VkStructureType sType;
	void           *pNext;
	VkImageLayout   stencilInitialLayout;
	VkImageLayout   stencilFinalLayout;
} VkAttachmentDescriptionStencilLayout;

typedef struct VkAttachmentDescriptionStencilLayout VkAttachmentDescriptionStencilLayoutKHR;

typedef struct VkPipelineInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	VkPipeline      pipeline;
} VkPipelineInfoKHR;

typedef struct VkPipelineInfoKHR VkPipelineInfoEXT;

typedef struct VkPipelineExecutableInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	VkPipeline      pipeline;
	uint32_t        executableIndex;
} VkPipelineExecutableInfoKHR;

typedef struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
	VkStructureType sType;
	void           *pNext;
	uint32_t        requiredSubgroupSize;
} VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;

typedef struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT;

typedef struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo VkShaderRequiredSubgroupSizeCreateInfoEXT;

typedef struct VkSubpassShadingPipelineCreateInfoHUAWEI {
	VkStructureType sType;
	void           *pNext;
	VkRenderPass    renderPass;
	uint32_t        subpass;
} VkSubpassShadingPipelineCreateInfoHUAWEI;

typedef struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxSubpassShadingWorkgroupSizeAspectRatio;
} VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;

typedef struct VkMemoryOpaqueCaptureAddressAllocateInfo {
	VkStructureType sType;
	const void     *pNext;
	uint64_t        opaqueCaptureAddress;
} VkMemoryOpaqueCaptureAddressAllocateInfo;

typedef struct VkMemoryOpaqueCaptureAddressAllocateInfo VkMemoryOpaqueCaptureAddressAllocateInfoKHR;

typedef struct VkDeviceMemoryOpaqueCaptureAddressInfo {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceMemory  memory;
} VkDeviceMemoryOpaqueCaptureAddressInfo;

typedef struct VkDeviceMemoryOpaqueCaptureAddressInfo VkDeviceMemoryOpaqueCaptureAddressInfoKHR;

typedef struct VkPhysicalDeviceLineRasterizationPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        lineSubPixelPrecisionBits;
} VkPhysicalDeviceLineRasterizationPropertiesEXT;

typedef struct VkSamplerCustomBorderColorCreateInfoEXT {
	VkStructureType   sType;
	const void       *pNext;
	VkClearColorValue customBorderColor;
	VkFormat          format;
} VkSamplerCustomBorderColorCreateInfoEXT;

typedef struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxCustomBorderColorSamplers;
} VkPhysicalDeviceCustomBorderColorPropertiesEXT;

typedef struct VkAccelerationStructureBuildRangeInfoKHR {
	uint32_t primitiveCount;
	uint32_t primitiveOffset;
	uint32_t firstVertex;
	uint32_t transformOffset;
} VkAccelerationStructureBuildRangeInfoKHR;

typedef struct VkAabbPositionsKHR {
	float minX;
	float minY;
	float minZ;
	float maxX;
	float maxY;
	float maxZ;
} VkAabbPositionsKHR;

typedef struct VkAabbPositionsKHR VkAabbPositionsNV;

typedef struct VkTransformMatrixKHR {
	float matrix[3][4];
} VkTransformMatrixKHR;

typedef struct VkTransformMatrixKHR VkTransformMatrixNV;

typedef struct VkAccelerationStructureDeviceAddressInfoKHR {
	VkStructureType            sType;
	const void                *pNext;
	VkAccelerationStructureKHR accelerationStructure;
} VkAccelerationStructureDeviceAddressInfoKHR;

typedef struct VkAccelerationStructureVersionInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	const uint8_t  *pVersionData;
} VkAccelerationStructureVersionInfoKHR;

typedef struct VkCopyAccelerationStructureInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkAccelerationStructureKHR         src;
	VkAccelerationStructureKHR         dst;
	VkCopyAccelerationStructureModeKHR mode;
} VkCopyAccelerationStructureInfoKHR;

typedef struct VkRayTracingPipelineInterfaceCreateInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        maxPipelineRayPayloadSize;
	uint32_t        maxPipelineRayHitAttributeSize;
} VkRayTracingPipelineInterfaceCreateInfoKHR;

typedef struct VkPipelineLibraryCreateInfoKHR {
	VkStructureType   sType;
	const void       *pNext;
	uint32_t          libraryCount;
	const VkPipeline *pLibraries;
} VkPipelineLibraryCreateInfoKHR;

typedef struct VkColorBlendEquationEXT {
	VkBlendFactor srcColorBlendFactor;
	VkBlendFactor dstColorBlendFactor;
	VkBlendOp     colorBlendOp;
	VkBlendFactor srcAlphaBlendFactor;
	VkBlendFactor dstAlphaBlendFactor;
	VkBlendOp     alphaBlendOp;
} VkColorBlendEquationEXT;

typedef struct VkRenderPassTransformBeginInfoQCOM {
	VkStructureType               sType;
	void                         *pNext;
	VkSurfaceTransformFlagBitsKHR transform;
} VkRenderPassTransformBeginInfoQCOM;

typedef struct VkCopyCommandTransformInfoQCOM {
	VkStructureType               sType;
	const void                   *pNext;
	VkSurfaceTransformFlagBitsKHR transform;
} VkCopyCommandTransformInfoQCOM;

typedef struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
	VkStructureType               sType;
	void                         *pNext;
	VkSurfaceTransformFlagBitsKHR transform;
	VkRect2D                      renderArea;
} VkCommandBufferInheritanceRenderPassTransformInfoQCOM;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDevicePortabilitySubsetPropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	uint32_t        minVertexInputBindingStrideAlignment;
} VkPhysicalDevicePortabilitySubsetPropertiesKHR;

#endif

typedef struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkExtent2D                         fragmentSize;
	VkFragmentShadingRateCombinerOpKHR combinerOps[2];
} VkPipelineFragmentShadingRateStateCreateInfoKHR;

typedef struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
	VkStructureType       sType;
	void                 *pNext;
	VkSampleCountFlagBits maxFragmentShadingRateInvocationCount;
} VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;

typedef struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
	VkStructureType                    sType;
	const void                        *pNext;
	VkFragmentShadingRateTypeNV        shadingRateType;
	VkFragmentShadingRateNV            shadingRate;
	VkFragmentShadingRateCombinerOpKHR combinerOps[2];
} VkPipelineFragmentShadingRateEnumStateCreateInfoNV;

typedef struct VkMutableDescriptorTypeListEXT {
	uint32_t                descriptorTypeCount;
	const VkDescriptorType *pDescriptorTypes;
} VkMutableDescriptorTypeListEXT;

typedef struct VkMutableDescriptorTypeListEXT VkMutableDescriptorTypeListVALVE;

typedef struct VkMutableDescriptorTypeCreateInfoEXT {
	VkStructureType                       sType;
	const void                           *pNext;
	uint32_t                              mutableDescriptorTypeListCount;
	const VkMutableDescriptorTypeListEXT *pMutableDescriptorTypeLists;
} VkMutableDescriptorTypeCreateInfoEXT;

typedef struct VkMutableDescriptorTypeCreateInfoEXT VkMutableDescriptorTypeCreateInfoVALVE;

typedef struct VkVertexInputBindingDescription2EXT {
	VkStructureType   sType;
	void             *pNext;
	uint32_t          binding;
	uint32_t          stride;
	VkVertexInputRate inputRate;
	uint32_t          divisor;
} VkVertexInputBindingDescription2EXT;

typedef struct VkVertexInputAttributeDescription2EXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        location;
	uint32_t        binding;
	VkFormat        format;
	uint32_t        offset;
} VkVertexInputAttributeDescription2EXT;

typedef struct VkCommandBufferSubmitInfo {
	VkStructureType sType;
	const void     *pNext;
	VkCommandBuffer commandBuffer;
	uint32_t        deviceMask;
} VkCommandBufferSubmitInfo;

typedef struct VkCommandBufferSubmitInfo VkCommandBufferSubmitInfoKHR;

typedef struct VkVideoPictureResourceInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	VkOffset2D      codedOffset;
	VkExtent2D      codedExtent;
	uint32_t        baseArrayLayer;
	VkImageView     imageViewBinding;
} VkVideoPictureResourceInfoKHR;

typedef struct VkVideoReferenceSlotInfoKHR {
	VkStructureType                      sType;
	const void                          *pNext;
	int32_t                              slotIndex;
	const VkVideoPictureResourceInfoKHR *pPictureResource;
} VkVideoReferenceSlotInfoKHR;

#ifndef VULKAN_VIDEO_CODEC_H264STD_H_
	#define VULKAN_VIDEO_CODEC_H264STD_H_ 1

	/*
** Copyright 2015-2023 The Khronos Group Inc.
**
** SPDX-License-Identifier: Apache-2.0
*/

	/*
** This header is generated from the Khronos Vulkan XML API Registry.
**
*/


	#ifdef __cplusplus
extern "C" {
	#endif



	/* vulkan_video_codec_h264std is a preprocessor guard. Do not pass it to API calls. */
	#define vulkan_video_codec_h264std 1
	#include "vulkan_video_codecs_common.h"
	#define STD_VIDEO_H264_CPB_CNT_LIST_SIZE             32
	#define STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS    6
	#define STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS 16
	#define STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS    6
	#define STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS 64
	#define STD_VIDEO_H264_MAX_NUM_LIST_REF              32
	#define STD_VIDEO_H264_MAX_CHROMA_PLANES             2
	#define STD_VIDEO_H264_NO_REFERENCE_PICTURE          0xFF

typedef enum StdVideoH264ChromaFormatIdc {
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = 0,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = 1,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = 2,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = 3,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264ChromaFormatIdc;

typedef enum StdVideoH264ProfileIdc {
	STD_VIDEO_H264_PROFILE_IDC_BASELINE = 66,
	STD_VIDEO_H264_PROFILE_IDC_MAIN = 77,
	STD_VIDEO_H264_PROFILE_IDC_HIGH = 100,
	STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = 244,
	STD_VIDEO_H264_PROFILE_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264ProfileIdc;

typedef enum StdVideoH264LevelIdc {
	STD_VIDEO_H264_LEVEL_IDC_1_0 = 0,
	STD_VIDEO_H264_LEVEL_IDC_1_1 = 1,
	STD_VIDEO_H264_LEVEL_IDC_1_2 = 2,
	STD_VIDEO_H264_LEVEL_IDC_1_3 = 3,
	STD_VIDEO_H264_LEVEL_IDC_2_0 = 4,
	STD_VIDEO_H264_LEVEL_IDC_2_1 = 5,
	STD_VIDEO_H264_LEVEL_IDC_2_2 = 6,
	STD_VIDEO_H264_LEVEL_IDC_3_0 = 7,
	STD_VIDEO_H264_LEVEL_IDC_3_1 = 8,
	STD_VIDEO_H264_LEVEL_IDC_3_2 = 9,
	STD_VIDEO_H264_LEVEL_IDC_4_0 = 10,
	STD_VIDEO_H264_LEVEL_IDC_4_1 = 11,
	STD_VIDEO_H264_LEVEL_IDC_4_2 = 12,
	STD_VIDEO_H264_LEVEL_IDC_5_0 = 13,
	STD_VIDEO_H264_LEVEL_IDC_5_1 = 14,
	STD_VIDEO_H264_LEVEL_IDC_5_2 = 15,
	STD_VIDEO_H264_LEVEL_IDC_6_0 = 16,
	STD_VIDEO_H264_LEVEL_IDC_6_1 = 17,
	STD_VIDEO_H264_LEVEL_IDC_6_2 = 18,
	STD_VIDEO_H264_LEVEL_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264LevelIdc;

typedef enum StdVideoH264PocType {
	STD_VIDEO_H264_POC_TYPE_0 = 0,
	STD_VIDEO_H264_POC_TYPE_1 = 1,
	STD_VIDEO_H264_POC_TYPE_2 = 2,
	STD_VIDEO_H264_POC_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_POC_TYPE_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264PocType;

typedef enum StdVideoH264AspectRatioIdc {
	STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = 0,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = 1,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = 2,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = 3,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = 4,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = 5,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = 6,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = 7,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = 8,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = 9,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = 10,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = 11,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = 12,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = 13,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = 14,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = 15,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = 16,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = 255,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264AspectRatioIdc;

typedef enum StdVideoH264WeightedBipredIdc {
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = 0,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = 1,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = 2,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264WeightedBipredIdc;

typedef enum StdVideoH264ModificationOfPicNumsIdc {
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = 0,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = 1,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = 2,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = 3,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264ModificationOfPicNumsIdc;

typedef enum StdVideoH264MemMgmtControlOp {
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = 0,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = 1,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = 2,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = 3,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = 4,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = 5,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = 6,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264MemMgmtControlOp;

typedef enum StdVideoH264CabacInitIdc {
	STD_VIDEO_H264_CABAC_INIT_IDC_0 = 0,
	STD_VIDEO_H264_CABAC_INIT_IDC_1 = 1,
	STD_VIDEO_H264_CABAC_INIT_IDC_2 = 2,
	STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264CabacInitIdc;

typedef enum StdVideoH264DisableDeblockingFilterIdc {
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = 0,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = 1,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = 2,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264DisableDeblockingFilterIdc;

typedef enum StdVideoH264SliceType {
	STD_VIDEO_H264_SLICE_TYPE_P = 0,
	STD_VIDEO_H264_SLICE_TYPE_B = 1,
	STD_VIDEO_H264_SLICE_TYPE_I = 2,
	STD_VIDEO_H264_SLICE_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264SliceType;

typedef enum StdVideoH264PictureType {
	STD_VIDEO_H264_PICTURE_TYPE_P = 0,
	STD_VIDEO_H264_PICTURE_TYPE_B = 1,
	STD_VIDEO_H264_PICTURE_TYPE_I = 2,
	STD_VIDEO_H264_PICTURE_TYPE_IDR = 5,
	STD_VIDEO_H264_PICTURE_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264PictureType;

typedef enum StdVideoH264NonVclNaluType {
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = 0,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = 1,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = 2,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = 3,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = 4,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = 5,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = 6,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM = 0x7FFFFFFF
} StdVideoH264NonVclNaluType;
typedef struct StdVideoH264SpsVuiFlags {
	uint32_t aspect_ratio_info_present_flag : 1;
	uint32_t overscan_info_present_flag     : 1;
	uint32_t overscan_appropriate_flag      : 1;
	uint32_t video_signal_type_present_flag : 1;
	uint32_t video_full_range_flag          : 1;
	uint32_t color_description_present_flag : 1;
	uint32_t chroma_loc_info_present_flag   : 1;
	uint32_t timing_info_present_flag       : 1;
	uint32_t fixed_frame_rate_flag          : 1;
	uint32_t bitstream_restriction_flag     : 1;
	uint32_t nal_hrd_parameters_present_flag: 1;
	uint32_t vcl_hrd_parameters_present_flag: 1;
} StdVideoH264SpsVuiFlags;

typedef struct StdVideoH264HrdParameters {
	uint8_t  cpb_cnt_minus1;
	uint8_t  bit_rate_scale;
	uint8_t  cpb_size_scale;
	uint8_t  reserved1;
	uint32_t bit_rate_value_minus1[STD_VIDEO_H264_CPB_CNT_LIST_SIZE];
	uint32_t cpb_size_value_minus1[STD_VIDEO_H264_CPB_CNT_LIST_SIZE];
	uint8_t  cbr_flag[STD_VIDEO_H264_CPB_CNT_LIST_SIZE];
	uint32_t initial_cpb_removal_delay_length_minus1;
	uint32_t cpb_removal_delay_length_minus1;
	uint32_t dpb_output_delay_length_minus1;
	uint32_t time_offset_length;
} StdVideoH264HrdParameters;

typedef struct StdVideoH264SequenceParameterSetVui {
	StdVideoH264SpsVuiFlags          flags;
	StdVideoH264AspectRatioIdc       aspect_ratio_idc;
	uint16_t                         sar_width;
	uint16_t                         sar_height;
	uint8_t                          video_format;
	uint8_t                          colour_primaries;
	uint8_t                          transfer_characteristics;
	uint8_t                          matrix_coefficients;
	uint32_t                         num_units_in_tick;
	uint32_t                         time_scale;
	uint8_t                          max_num_reorder_frames;
	uint8_t                          max_dec_frame_buffering;
	uint8_t                          chroma_sample_loc_type_top_field;
	uint8_t                          chroma_sample_loc_type_bottom_field;
	uint32_t                         reserved1;
	const StdVideoH264HrdParameters *pHrdParameters;
} StdVideoH264SequenceParameterSetVui;

typedef struct StdVideoH264SpsFlags {
	uint32_t constraint_set0_flag                : 1;
	uint32_t constraint_set1_flag                : 1;
	uint32_t constraint_set2_flag                : 1;
	uint32_t constraint_set3_flag                : 1;
	uint32_t constraint_set4_flag                : 1;
	uint32_t constraint_set5_flag                : 1;
	uint32_t direct_8x8_inference_flag           : 1;
	uint32_t mb_adaptive_frame_field_flag        : 1;
	uint32_t frame_mbs_only_flag                 : 1;
	uint32_t delta_pic_order_always_zero_flag    : 1;
	uint32_t separate_colour_plane_flag          : 1;
	uint32_t gaps_in_frame_num_value_allowed_flag: 1;
	uint32_t qpprime_y_zero_transform_bypass_flag: 1;
	uint32_t frame_cropping_flag                 : 1;
	uint32_t seq_scaling_matrix_present_flag     : 1;
	uint32_t vui_parameters_present_flag         : 1;
} StdVideoH264SpsFlags;

typedef struct StdVideoH264ScalingLists {
	uint16_t scaling_list_present_mask;
	uint16_t use_default_scaling_matrix_mask;
	uint8_t  ScalingList4x4[STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS][STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS];
	uint8_t  ScalingList8x8[STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS][STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS];
} StdVideoH264ScalingLists;

typedef struct StdVideoH264SequenceParameterSet {
	StdVideoH264SpsFlags                       flags;
	StdVideoH264ProfileIdc                     profile_idc;
	StdVideoH264LevelIdc                       level_idc;
	StdVideoH264ChromaFormatIdc                chroma_format_idc;
	uint8_t                                    seq_parameter_set_id;
	uint8_t                                    bit_depth_luma_minus8;
	uint8_t                                    bit_depth_chroma_minus8;
	uint8_t                                    log2_max_frame_num_minus4;
	StdVideoH264PocType                        pic_order_cnt_type;
	int32_t                                    offset_for_non_ref_pic;
	int32_t                                    offset_for_top_to_bottom_field;
	uint8_t                                    log2_max_pic_order_cnt_lsb_minus4;
	uint8_t                                    num_ref_frames_in_pic_order_cnt_cycle;
	uint8_t                                    max_num_ref_frames;
	uint8_t                                    reserved1;
	uint32_t                                   pic_width_in_mbs_minus1;
	uint32_t                                   pic_height_in_map_units_minus1;
	uint32_t                                   frame_crop_left_offset;
	uint32_t                                   frame_crop_right_offset;
	uint32_t                                   frame_crop_top_offset;
	uint32_t                                   frame_crop_bottom_offset;
	uint32_t                                   reserved2;
	const int32_t                             *pOffsetForRefFrame;
	const StdVideoH264ScalingLists            *pScalingLists;
	const StdVideoH264SequenceParameterSetVui *pSequenceParameterSetVui;
} StdVideoH264SequenceParameterSet;

typedef struct StdVideoH264PpsFlags {
	uint32_t transform_8x8_mode_flag                     : 1;
	uint32_t redundant_pic_cnt_present_flag              : 1;
	uint32_t constrained_intra_pred_flag                 : 1;
	uint32_t deblocking_filter_control_present_flag      : 1;
	uint32_t weighted_pred_flag                          : 1;
	uint32_t bottom_field_pic_order_in_frame_present_flag: 1;
	uint32_t entropy_coding_mode_flag                    : 1;
	uint32_t pic_scaling_matrix_present_flag             : 1;
} StdVideoH264PpsFlags;

typedef struct StdVideoH264PictureParameterSet {
	StdVideoH264PpsFlags            flags;
	uint8_t                         seq_parameter_set_id;
	uint8_t                         pic_parameter_set_id;
	uint8_t                         num_ref_idx_l0_default_active_minus1;
	uint8_t                         num_ref_idx_l1_default_active_minus1;
	StdVideoH264WeightedBipredIdc   weighted_bipred_idc;
	int8_t                          pic_init_qp_minus26;
	int8_t                          pic_init_qs_minus26;
	int8_t                          chroma_qp_index_offset;
	int8_t                          second_chroma_qp_index_offset;
	const StdVideoH264ScalingLists *pScalingLists;
} StdVideoH264PictureParameterSet;


	#ifdef __cplusplus
}
	#endif

#endif


#ifndef VULKAN_VIDEO_CODEC_H264STD_DECODE_H_
	#define VULKAN_VIDEO_CODEC_H264STD_DECODE_H_ 1

	/*
** Copyright 2015-2023 The Khronos Group Inc.
**
** SPDX-License-Identifier: Apache-2.0
*/

	/*
** This header is generated from the Khronos Vulkan XML API Registry.
**
*/


	#ifdef __cplusplus
extern "C" {
	#endif



	/* vulkan_video_codec_h264std_decode is a preprocessor guard. Do not pass it to API calls. */
	#define vulkan_video_codec_h264std_decode 1
	#include "vulkan_video_codec_h264std.h"

	#define VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0 VK_MAKE_VIDEO_STD_VERSION(1, 0, 0)

	#define VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_SPEC_VERSION   VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0
	#define VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME "VK_STD_vulkan_video_codec_h264_decode"
	#define STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE    2

typedef enum StdVideoDecodeH264FieldOrderCount {
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP = 0,
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM = 1,
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID = 0x7FFFFFFF,
	STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM = 0x7FFFFFFF
} StdVideoDecodeH264FieldOrderCount;
typedef struct StdVideoDecodeH264PictureInfoFlags {
	uint32_t field_pic_flag          : 1;
	uint32_t is_intra                : 1;
	uint32_t IdrPicFlag              : 1;
	uint32_t bottom_field_flag       : 1;
	uint32_t is_reference            : 1;
	uint32_t complementary_field_pair: 1;
} StdVideoDecodeH264PictureInfoFlags;

typedef struct StdVideoDecodeH264PictureInfo {
	StdVideoDecodeH264PictureInfoFlags flags;
	uint8_t                            seq_parameter_set_id;
	uint8_t                            pic_parameter_set_id;
	uint8_t                            reserved1;
	uint8_t                            reserved2;
	uint16_t                           frame_num;
	uint16_t                           idr_pic_id;
	int32_t                            PicOrderCnt[STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE];
} StdVideoDecodeH264PictureInfo;

typedef struct StdVideoDecodeH264ReferenceInfoFlags {
	uint32_t top_field_flag              : 1;
	uint32_t bottom_field_flag           : 1;
	uint32_t used_for_long_term_reference: 1;
	uint32_t is_non_existing             : 1;
} StdVideoDecodeH264ReferenceInfoFlags;

typedef struct StdVideoDecodeH264ReferenceInfo {
	StdVideoDecodeH264ReferenceInfoFlags flags;
	uint16_t                             FrameNum;
	uint16_t                             reserved;
	int32_t                              PicOrderCnt[STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE];
} StdVideoDecodeH264ReferenceInfo;


	#ifdef __cplusplus
}
	#endif

#endif


typedef struct VkVideoDecodeH264ProfileInfoKHR {
	VkStructureType                           sType;
	const void                               *pNext;
	StdVideoH264ProfileIdc                    stdProfileIdc;
	VkVideoDecodeH264PictureLayoutFlagBitsKHR pictureLayout;
} VkVideoDecodeH264ProfileInfoKHR;

typedef struct VkVideoDecodeH264CapabilitiesKHR {
	VkStructureType      sType;
	void                *pNext;
	StdVideoH264LevelIdc maxLevelIdc;
	VkOffset2D           fieldOffsetGranularity;
} VkVideoDecodeH264CapabilitiesKHR;



typedef struct VkVideoDecodeH264SessionParametersAddInfoKHR {
	VkStructureType                         sType;
	const void                             *pNext;
	uint32_t                                stdSPSCount;
	const StdVideoH264SequenceParameterSet *pStdSPSs;
	uint32_t                                stdPPSCount;
	const StdVideoH264PictureParameterSet  *pStdPPSs;
} VkVideoDecodeH264SessionParametersAddInfoKHR;

typedef struct VkVideoDecodeH264SessionParametersCreateInfoKHR {
	VkStructureType                                     sType;
	const void                                         *pNext;
	uint32_t                                            maxStdSPSCount;
	uint32_t                                            maxStdPPSCount;
	const VkVideoDecodeH264SessionParametersAddInfoKHR *pParametersAddInfo;
} VkVideoDecodeH264SessionParametersCreateInfoKHR;

typedef struct VkVideoDecodeH264PictureInfoKHR {
	VkStructureType                      sType;
	const void                          *pNext;
	const StdVideoDecodeH264PictureInfo *pStdPictureInfo;
	uint32_t                             sliceCount;
	const uint32_t                      *pSliceOffsets;
} VkVideoDecodeH264PictureInfoKHR;

typedef struct VkVideoDecodeH264DpbSlotInfoKHR {
	VkStructureType                        sType;
	const void                            *pNext;
	const StdVideoDecodeH264ReferenceInfo *pStdReferenceInfo;
} VkVideoDecodeH264DpbSlotInfoKHR;

#ifndef VULKAN_VIDEO_CODEC_H265STD_H_
	#define VULKAN_VIDEO_CODEC_H265STD_H_ 1

	/*
** Copyright 2015-2023 The Khronos Group Inc.
**
** SPDX-License-Identifier: Apache-2.0
*/

	/*
** This header is generated from the Khronos Vulkan XML API Registry.
**
*/


	#ifdef __cplusplus
extern "C" {
	#endif



	/* vulkan_video_codec_h265std is a preprocessor guard. Do not pass it to API calls. */
	#define vulkan_video_codec_h265std 1
	#include "vulkan_video_codecs_common.h"
	#define STD_VIDEO_H265_CPB_CNT_LIST_SIZE                        32
	#define STD_VIDEO_H265_SUBLAYERS_LIST_SIZE                      7
	#define STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS               6
	#define STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS            16
	#define STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS               6
	#define STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS            64
	#define STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS             6
	#define STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS          64
	#define STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS             2
	#define STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS          64
	#define STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE               6
	#define STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE     19
	#define STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE     21
	#define STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE   3
	#define STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE 128
	#define STD_VIDEO_H265_MAX_NUM_LIST_REF                         15
	#define STD_VIDEO_H265_MAX_CHROMA_PLANES                        2
	#define STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS              64
	#define STD_VIDEO_H265_MAX_DPB_SIZE                             16
	#define STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS               32
	#define STD_VIDEO_H265_MAX_LONG_TERM_PICS                       16
	#define STD_VIDEO_H265_MAX_DELTA_POC                            48
	#define STD_VIDEO_H265_NO_REFERENCE_PICTURE                     0xFF

typedef enum StdVideoH265ChromaFormatIdc {
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = 0,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = 1,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = 2,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = 3,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH265ChromaFormatIdc;

typedef enum StdVideoH265ProfileIdc {
	STD_VIDEO_H265_PROFILE_IDC_MAIN = 1,
	STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = 2,
	STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = 3,
	STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = 4,
	STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = 9,
	STD_VIDEO_H265_PROFILE_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH265ProfileIdc;

typedef enum StdVideoH265LevelIdc {
	STD_VIDEO_H265_LEVEL_IDC_1_0 = 0,
	STD_VIDEO_H265_LEVEL_IDC_2_0 = 1,
	STD_VIDEO_H265_LEVEL_IDC_2_1 = 2,
	STD_VIDEO_H265_LEVEL_IDC_3_0 = 3,
	STD_VIDEO_H265_LEVEL_IDC_3_1 = 4,
	STD_VIDEO_H265_LEVEL_IDC_4_0 = 5,
	STD_VIDEO_H265_LEVEL_IDC_4_1 = 6,
	STD_VIDEO_H265_LEVEL_IDC_5_0 = 7,
	STD_VIDEO_H265_LEVEL_IDC_5_1 = 8,
	STD_VIDEO_H265_LEVEL_IDC_5_2 = 9,
	STD_VIDEO_H265_LEVEL_IDC_6_0 = 10,
	STD_VIDEO_H265_LEVEL_IDC_6_1 = 11,
	STD_VIDEO_H265_LEVEL_IDC_6_2 = 12,
	STD_VIDEO_H265_LEVEL_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH265LevelIdc;

typedef enum StdVideoH265SliceType {
	STD_VIDEO_H265_SLICE_TYPE_B = 0,
	STD_VIDEO_H265_SLICE_TYPE_P = 1,
	STD_VIDEO_H265_SLICE_TYPE_I = 2,
	STD_VIDEO_H265_SLICE_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = 0x7FFFFFFF
} StdVideoH265SliceType;

typedef enum StdVideoH265PictureType {
	STD_VIDEO_H265_PICTURE_TYPE_P = 0,
	STD_VIDEO_H265_PICTURE_TYPE_B = 1,
	STD_VIDEO_H265_PICTURE_TYPE_I = 2,
	STD_VIDEO_H265_PICTURE_TYPE_IDR = 3,
	STD_VIDEO_H265_PICTURE_TYPE_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
} StdVideoH265PictureType;

typedef enum StdVideoH265AspectRatioIdc {
	STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = 0,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = 1,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = 2,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = 3,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = 4,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = 5,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = 6,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = 7,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = 8,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = 9,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = 10,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = 11,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = 12,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = 13,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = 14,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = 15,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = 16,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = 255,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = 0x7FFFFFFF,
	STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = 0x7FFFFFFF
} StdVideoH265AspectRatioIdc;
typedef struct StdVideoH265DecPicBufMgr {
	uint32_t max_latency_increase_plus1[STD_VIDEO_H265_SUBLAYERS_LIST_SIZE];
	uint8_t  max_dec_pic_buffering_minus1[STD_VIDEO_H265_SUBLAYERS_LIST_SIZE];
	uint8_t  max_num_reorder_pics[STD_VIDEO_H265_SUBLAYERS_LIST_SIZE];
} StdVideoH265DecPicBufMgr;

typedef struct StdVideoH265SubLayerHrdParameters {
	uint32_t bit_rate_value_minus1[STD_VIDEO_H265_CPB_CNT_LIST_SIZE];
	uint32_t cpb_size_value_minus1[STD_VIDEO_H265_CPB_CNT_LIST_SIZE];
	uint32_t cpb_size_du_value_minus1[STD_VIDEO_H265_CPB_CNT_LIST_SIZE];
	uint32_t bit_rate_du_value_minus1[STD_VIDEO_H265_CPB_CNT_LIST_SIZE];
	uint32_t cbr_flag;
} StdVideoH265SubLayerHrdParameters;

typedef struct StdVideoH265HrdFlags {
	uint32_t nal_hrd_parameters_present_flag          : 1;
	uint32_t vcl_hrd_parameters_present_flag          : 1;
	uint32_t sub_pic_hrd_params_present_flag          : 1;
	uint32_t sub_pic_cpb_params_in_pic_timing_sei_flag: 1;
	uint32_t fixed_pic_rate_general_flag              : 8;
	uint32_t fixed_pic_rate_within_cvs_flag           : 8;
	uint32_t low_delay_hrd_flag                       : 8;
} StdVideoH265HrdFlags;

typedef struct StdVideoH265HrdParameters {
	StdVideoH265HrdFlags                     flags;
	uint8_t                                  tick_divisor_minus2;
	uint8_t                                  du_cpb_removal_delay_increment_length_minus1;
	uint8_t                                  dpb_output_delay_du_length_minus1;
	uint8_t                                  bit_rate_scale;
	uint8_t                                  cpb_size_scale;
	uint8_t                                  cpb_size_du_scale;
	uint8_t                                  initial_cpb_removal_delay_length_minus1;
	uint8_t                                  au_cpb_removal_delay_length_minus1;
	uint8_t                                  dpb_output_delay_length_minus1;
	uint8_t                                  cpb_cnt_minus1[STD_VIDEO_H265_SUBLAYERS_LIST_SIZE];
	uint16_t                                 elemental_duration_in_tc_minus1[STD_VIDEO_H265_SUBLAYERS_LIST_SIZE];
	uint16_t                                 reserved[3];
	const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersNal;
	const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersVcl;
} StdVideoH265HrdParameters;

typedef struct StdVideoH265VpsFlags {
	uint32_t vps_temporal_id_nesting_flag            : 1;
	uint32_t vps_sub_layer_ordering_info_present_flag: 1;
	uint32_t vps_timing_info_present_flag            : 1;
	uint32_t vps_poc_proportional_to_timing_flag     : 1;
} StdVideoH265VpsFlags;

typedef struct StdVideoH265ProfileTierLevelFlags {
	uint32_t general_tier_flag                 : 1;
	uint32_t general_progressive_source_flag   : 1;
	uint32_t general_interlaced_source_flag    : 1;
	uint32_t general_non_packed_constraint_flag: 1;
	uint32_t general_frame_only_constraint_flag: 1;
} StdVideoH265ProfileTierLevelFlags;

typedef struct StdVideoH265ProfileTierLevel {
	StdVideoH265ProfileTierLevelFlags flags;
	StdVideoH265ProfileIdc            general_profile_idc;
	StdVideoH265LevelIdc              general_level_idc;
} StdVideoH265ProfileTierLevel;

typedef struct StdVideoH265VideoParameterSet {
	StdVideoH265VpsFlags                flags;
	uint8_t                             vps_video_parameter_set_id;
	uint8_t                             vps_max_sub_layers_minus1;
	uint8_t                             reserved1;
	uint8_t                             reserved2;
	uint32_t                            vps_num_units_in_tick;
	uint32_t                            vps_time_scale;
	uint32_t                            vps_num_ticks_poc_diff_one_minus1;
	uint32_t                            reserved3;
	const StdVideoH265DecPicBufMgr     *pDecPicBufMgr;
	const StdVideoH265HrdParameters    *pHrdParameters;
	const StdVideoH265ProfileTierLevel *pProfileTierLevel;
} StdVideoH265VideoParameterSet;

typedef struct StdVideoH265ScalingLists {
	uint8_t ScalingList4x4[STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS][STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS];
	uint8_t ScalingList8x8[STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS][STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS];
	uint8_t ScalingList16x16[STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS][STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS];
	uint8_t ScalingList32x32[STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS][STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS];
	uint8_t ScalingListDCCoef16x16[STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS];
	uint8_t ScalingListDCCoef32x32[STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS];
} StdVideoH265ScalingLists;

typedef struct StdVideoH265SpsVuiFlags {
	uint32_t aspect_ratio_info_present_flag         : 1;
	uint32_t overscan_info_present_flag             : 1;
	uint32_t overscan_appropriate_flag              : 1;
	uint32_t video_signal_type_present_flag         : 1;
	uint32_t video_full_range_flag                  : 1;
	uint32_t colour_description_present_flag        : 1;
	uint32_t chroma_loc_info_present_flag           : 1;
	uint32_t neutral_chroma_indication_flag         : 1;
	uint32_t field_seq_flag                         : 1;
	uint32_t frame_field_info_present_flag          : 1;
	uint32_t default_display_window_flag            : 1;
	uint32_t vui_timing_info_present_flag           : 1;
	uint32_t vui_poc_proportional_to_timing_flag    : 1;
	uint32_t vui_hrd_parameters_present_flag        : 1;
	uint32_t bitstream_restriction_flag             : 1;
	uint32_t tiles_fixed_structure_flag             : 1;
	uint32_t motion_vectors_over_pic_boundaries_flag: 1;
	uint32_t restricted_ref_pic_lists_flag          : 1;
} StdVideoH265SpsVuiFlags;

typedef struct StdVideoH265SequenceParameterSetVui {
	StdVideoH265SpsVuiFlags          flags;
	StdVideoH265AspectRatioIdc       aspect_ratio_idc;
	uint16_t                         sar_width;
	uint16_t                         sar_height;
	uint8_t                          video_format;
	uint8_t                          colour_primaries;
	uint8_t                          transfer_characteristics;
	uint8_t                          matrix_coeffs;
	uint8_t                          chroma_sample_loc_type_top_field;
	uint8_t                          chroma_sample_loc_type_bottom_field;
	uint8_t                          reserved1;
	uint8_t                          reserved2;
	uint16_t                         def_disp_win_left_offset;
	uint16_t                         def_disp_win_right_offset;
	uint16_t                         def_disp_win_top_offset;
	uint16_t                         def_disp_win_bottom_offset;
	uint32_t                         vui_num_units_in_tick;
	uint32_t                         vui_time_scale;
	uint32_t                         vui_num_ticks_poc_diff_one_minus1;
	uint16_t                         min_spatial_segmentation_idc;
	uint16_t                         reserved3;
	uint8_t                          max_bytes_per_pic_denom;
	uint8_t                          max_bits_per_min_cu_denom;
	uint8_t                          log2_max_mv_length_horizontal;
	uint8_t                          log2_max_mv_length_vertical;
	const StdVideoH265HrdParameters *pHrdParameters;
} StdVideoH265SequenceParameterSetVui;

typedef struct StdVideoH265PredictorPaletteEntries {
	uint16_t PredictorPaletteEntries[STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE][STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE];
} StdVideoH265PredictorPaletteEntries;

typedef struct StdVideoH265SpsFlags {
	uint32_t sps_temporal_id_nesting_flag                   : 1;
	uint32_t separate_colour_plane_flag                     : 1;
	uint32_t conformance_window_flag                        : 1;
	uint32_t sps_sub_layer_ordering_info_present_flag       : 1;
	uint32_t scaling_list_enabled_flag                      : 1;
	uint32_t sps_scaling_list_data_present_flag             : 1;
	uint32_t amp_enabled_flag                               : 1;
	uint32_t sample_adaptive_offset_enabled_flag            : 1;
	uint32_t pcm_enabled_flag                               : 1;
	uint32_t pcm_loop_filter_disabled_flag                  : 1;
	uint32_t long_term_ref_pics_present_flag                : 1;
	uint32_t sps_temporal_mvp_enabled_flag                  : 1;
	uint32_t strong_intra_smoothing_enabled_flag            : 1;
	uint32_t vui_parameters_present_flag                    : 1;
	uint32_t sps_extension_present_flag                     : 1;
	uint32_t sps_range_extension_flag                       : 1;
	uint32_t transform_skip_rotation_enabled_flag           : 1;
	uint32_t transform_skip_context_enabled_flag            : 1;
	uint32_t implicit_rdpcm_enabled_flag                    : 1;
	uint32_t explicit_rdpcm_enabled_flag                    : 1;
	uint32_t extended_precision_processing_flag             : 1;
	uint32_t intra_smoothing_disabled_flag                  : 1;
	uint32_t high_precision_offsets_enabled_flag            : 1;
	uint32_t persistent_rice_adaptation_enabled_flag        : 1;
	uint32_t cabac_bypass_alignment_enabled_flag            : 1;
	uint32_t sps_scc_extension_flag                         : 1;
	uint32_t sps_curr_pic_ref_enabled_flag                  : 1;
	uint32_t palette_mode_enabled_flag                      : 1;
	uint32_t sps_palette_predictor_initializers_present_flag: 1;
	uint32_t intra_boundary_filtering_disabled_flag         : 1;
} StdVideoH265SpsFlags;

typedef struct StdVideoH265ShortTermRefPicSetFlags {
	uint32_t inter_ref_pic_set_prediction_flag: 1;
	uint32_t delta_rps_sign                   : 1;
} StdVideoH265ShortTermRefPicSetFlags;

typedef struct StdVideoH265ShortTermRefPicSet {
	StdVideoH265ShortTermRefPicSetFlags flags;
	uint32_t                            delta_idx_minus1;
	uint16_t                            use_delta_flag;
	uint16_t                            abs_delta_rps_minus1;
	uint16_t                            used_by_curr_pic_flag;
	uint16_t                            used_by_curr_pic_s0_flag;
	uint16_t                            used_by_curr_pic_s1_flag;
	uint16_t                            reserved1;
	uint8_t                             reserved2;
	uint8_t                             reserved3;
	uint8_t                             num_negative_pics;
	uint8_t                             num_positive_pics;
	uint16_t                            delta_poc_s0_minus1[STD_VIDEO_H265_MAX_DPB_SIZE];
	uint16_t                            delta_poc_s1_minus1[STD_VIDEO_H265_MAX_DPB_SIZE];
} StdVideoH265ShortTermRefPicSet;

typedef struct StdVideoH265LongTermRefPicsSps {
	uint32_t used_by_curr_pic_lt_sps_flag;
	uint32_t lt_ref_pic_poc_lsb_sps[STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS];
} StdVideoH265LongTermRefPicsSps;

typedef struct StdVideoH265SequenceParameterSet {
	StdVideoH265SpsFlags                       flags;
	StdVideoH265ChromaFormatIdc                chroma_format_idc;
	uint32_t                                   pic_width_in_luma_samples;
	uint32_t                                   pic_height_in_luma_samples;
	uint8_t                                    sps_video_parameter_set_id;
	uint8_t                                    sps_max_sub_layers_minus1;
	uint8_t                                    sps_seq_parameter_set_id;
	uint8_t                                    bit_depth_luma_minus8;
	uint8_t                                    bit_depth_chroma_minus8;
	uint8_t                                    log2_max_pic_order_cnt_lsb_minus4;
	uint8_t                                    log2_min_luma_coding_block_size_minus3;
	uint8_t                                    log2_diff_max_min_luma_coding_block_size;
	uint8_t                                    log2_min_luma_transform_block_size_minus2;
	uint8_t                                    log2_diff_max_min_luma_transform_block_size;
	uint8_t                                    max_transform_hierarchy_depth_inter;
	uint8_t                                    max_transform_hierarchy_depth_intra;
	uint8_t                                    num_short_term_ref_pic_sets;
	uint8_t                                    num_long_term_ref_pics_sps;
	uint8_t                                    pcm_sample_bit_depth_luma_minus1;
	uint8_t                                    pcm_sample_bit_depth_chroma_minus1;
	uint8_t                                    log2_min_pcm_luma_coding_block_size_minus3;
	uint8_t                                    log2_diff_max_min_pcm_luma_coding_block_size;
	uint8_t                                    reserved1;
	uint8_t                                    reserved2;
	uint8_t                                    palette_max_size;
	uint8_t                                    delta_palette_max_predictor_size;
	uint8_t                                    motion_vector_resolution_control_idc;
	uint8_t                                    sps_num_palette_predictor_initializers_minus1;
	uint32_t                                   conf_win_left_offset;
	uint32_t                                   conf_win_right_offset;
	uint32_t                                   conf_win_top_offset;
	uint32_t                                   conf_win_bottom_offset;
	const StdVideoH265ProfileTierLevel        *pProfileTierLevel;
	const StdVideoH265DecPicBufMgr            *pDecPicBufMgr;
	const StdVideoH265ScalingLists            *pScalingLists;
	const StdVideoH265ShortTermRefPicSet      *pShortTermRefPicSet;
	const StdVideoH265LongTermRefPicsSps      *pLongTermRefPicsSps;
	const StdVideoH265SequenceParameterSetVui *pSequenceParameterSetVui;
	const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries;
} StdVideoH265SequenceParameterSet;

typedef struct StdVideoH265PpsFlags {
	uint32_t dependent_slice_segments_enabled_flag          : 1;
	uint32_t output_flag_present_flag                       : 1;
	uint32_t sign_data_hiding_enabled_flag                  : 1;
	uint32_t cabac_init_present_flag                        : 1;
	uint32_t constrained_intra_pred_flag                    : 1;
	uint32_t transform_skip_enabled_flag                    : 1;
	uint32_t cu_qp_delta_enabled_flag                       : 1;
	uint32_t pps_slice_chroma_qp_offsets_present_flag       : 1;
	uint32_t weighted_pred_flag                             : 1;
	uint32_t weighted_bipred_flag                           : 1;
	uint32_t transquant_bypass_enabled_flag                 : 1;
	uint32_t tiles_enabled_flag                             : 1;
	uint32_t entropy_coding_sync_enabled_flag               : 1;
	uint32_t uniform_spacing_flag                           : 1;
	uint32_t loop_filter_across_tiles_enabled_flag          : 1;
	uint32_t pps_loop_filter_across_slices_enabled_flag     : 1;
	uint32_t deblocking_filter_control_present_flag         : 1;
	uint32_t deblocking_filter_override_enabled_flag        : 1;
	uint32_t pps_deblocking_filter_disabled_flag            : 1;
	uint32_t pps_scaling_list_data_present_flag             : 1;
	uint32_t lists_modification_present_flag                : 1;
	uint32_t slice_segment_header_extension_present_flag    : 1;
	uint32_t pps_extension_present_flag                     : 1;
	uint32_t cross_component_prediction_enabled_flag        : 1;
	uint32_t chroma_qp_offset_list_enabled_flag             : 1;
	uint32_t pps_curr_pic_ref_enabled_flag                  : 1;
	uint32_t residual_adaptive_colour_transform_enabled_flag: 1;
	uint32_t pps_slice_act_qp_offsets_present_flag          : 1;
	uint32_t pps_palette_predictor_initializers_present_flag: 1;
	uint32_t monochrome_palette_flag                        : 1;
	uint32_t pps_range_extension_flag                       : 1;
} StdVideoH265PpsFlags;

typedef struct StdVideoH265PictureParameterSet {
	StdVideoH265PpsFlags                       flags;
	uint8_t                                    pps_pic_parameter_set_id;
	uint8_t                                    pps_seq_parameter_set_id;
	uint8_t                                    sps_video_parameter_set_id;
	uint8_t                                    num_extra_slice_header_bits;
	uint8_t                                    num_ref_idx_l0_default_active_minus1;
	uint8_t                                    num_ref_idx_l1_default_active_minus1;
	int8_t                                     init_qp_minus26;
	uint8_t                                    diff_cu_qp_delta_depth;
	int8_t                                     pps_cb_qp_offset;
	int8_t                                     pps_cr_qp_offset;
	int8_t                                     pps_beta_offset_div2;
	int8_t                                     pps_tc_offset_div2;
	uint8_t                                    log2_parallel_merge_level_minus2;
	uint8_t                                    log2_max_transform_skip_block_size_minus2;
	uint8_t                                    diff_cu_chroma_qp_offset_depth;
	uint8_t                                    chroma_qp_offset_list_len_minus1;
	int8_t                                     cb_qp_offset_list[STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE];
	int8_t                                     cr_qp_offset_list[STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE];
	uint8_t                                    log2_sao_offset_scale_luma;
	uint8_t                                    log2_sao_offset_scale_chroma;
	int8_t                                     pps_act_y_qp_offset_plus5;
	int8_t                                     pps_act_cb_qp_offset_plus5;
	int8_t                                     pps_act_cr_qp_offset_plus3;
	uint8_t                                    pps_num_palette_predictor_initializers;
	uint8_t                                    luma_bit_depth_entry_minus8;
	uint8_t                                    chroma_bit_depth_entry_minus8;
	uint8_t                                    num_tile_columns_minus1;
	uint8_t                                    num_tile_rows_minus1;
	uint8_t                                    reserved1;
	uint8_t                                    reserved2;
	uint16_t                                   column_width_minus1[STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE];
	uint16_t                                   row_height_minus1[STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE];
	uint32_t                                   reserved3;
	const StdVideoH265ScalingLists            *pScalingLists;
	const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries;
} StdVideoH265PictureParameterSet;


	#ifdef __cplusplus
}
	#endif

#endif



#ifndef VULKAN_VIDEO_CODEC_H265STD_DECODE_H_
	#define VULKAN_VIDEO_CODEC_H265STD_DECODE_H_ 1

	/*
** Copyright 2015-2023 The Khronos Group Inc.
**
** SPDX-License-Identifier: Apache-2.0
*/

	/*
** This header is generated from the Khronos Vulkan XML API Registry.
**
*/


	#ifdef __cplusplus
extern "C" {
	#endif



	/* vulkan_video_codec_h265std_decode is a preprocessor guard. Do not pass it to API calls. */
	#define vulkan_video_codec_h265std_decode 1
	#include "vulkan_video_codec_h265std.h"

	#define VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0 VK_MAKE_VIDEO_STD_VERSION(1, 0, 0)

	#define VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_SPEC_VERSION   VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0
	#define VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME "VK_STD_vulkan_video_codec_h265_decode"
	#define STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE          8
typedef struct StdVideoDecodeH265PictureInfoFlags {
	uint32_t IrapPicFlag                    : 1;
	uint32_t IdrPicFlag                     : 1;
	uint32_t IsReference                    : 1;
	uint32_t short_term_ref_pic_set_sps_flag: 1;
} StdVideoDecodeH265PictureInfoFlags;

typedef struct StdVideoDecodeH265PictureInfo {
	StdVideoDecodeH265PictureInfoFlags flags;
	uint8_t                            sps_video_parameter_set_id;
	uint8_t                            pps_seq_parameter_set_id;
	uint8_t                            pps_pic_parameter_set_id;
	uint8_t                            NumDeltaPocsOfRefRpsIdx;
	int32_t                            PicOrderCntVal;
	uint16_t                           NumBitsForSTRefPicSetInSlice;
	uint16_t                           reserved;
	uint8_t                            RefPicSetStCurrBefore[STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE];
	uint8_t                            RefPicSetStCurrAfter[STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE];
	uint8_t                            RefPicSetLtCurr[STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE];
} StdVideoDecodeH265PictureInfo;

typedef struct StdVideoDecodeH265ReferenceInfoFlags {
	uint32_t used_for_long_term_reference: 1;
	uint32_t unused_for_reference        : 1;
} StdVideoDecodeH265ReferenceInfoFlags;

typedef struct StdVideoDecodeH265ReferenceInfo {
	StdVideoDecodeH265ReferenceInfoFlags flags;
	int32_t                              PicOrderCntVal;
} StdVideoDecodeH265ReferenceInfo;


	#ifdef __cplusplus
}
	#endif

#endif


typedef struct VkVideoDecodeH265ProfileInfoKHR {
	VkStructureType        sType;
	const void            *pNext;
	StdVideoH265ProfileIdc stdProfileIdc;
} VkVideoDecodeH265ProfileInfoKHR;

typedef struct VkVideoDecodeH265CapabilitiesKHR {
	VkStructureType      sType;
	void                *pNext;
	StdVideoH265LevelIdc maxLevelIdc;
} VkVideoDecodeH265CapabilitiesKHR;

typedef struct VkVideoDecodeH265SessionParametersAddInfoKHR {
	VkStructureType                         sType;
	const void                             *pNext;
	uint32_t                                stdVPSCount;
	const StdVideoH265VideoParameterSet    *pStdVPSs;
	uint32_t                                stdSPSCount;
	const StdVideoH265SequenceParameterSet *pStdSPSs;
	uint32_t                                stdPPSCount;
	const StdVideoH265PictureParameterSet  *pStdPPSs;
} VkVideoDecodeH265SessionParametersAddInfoKHR;

typedef struct VkVideoDecodeH265SessionParametersCreateInfoKHR {
	VkStructureType                                     sType;
	const void                                         *pNext;
	uint32_t                                            maxStdVPSCount;
	uint32_t                                            maxStdSPSCount;
	uint32_t                                            maxStdPPSCount;
	const VkVideoDecodeH265SessionParametersAddInfoKHR *pParametersAddInfo;
} VkVideoDecodeH265SessionParametersCreateInfoKHR;

typedef struct VkVideoDecodeH265PictureInfoKHR {
	VkStructureType                      sType;
	const void                          *pNext;
	const StdVideoDecodeH265PictureInfo *pStdPictureInfo;
	uint32_t                             sliceSegmentCount;
	const uint32_t                      *pSliceSegmentOffsets;
} VkVideoDecodeH265PictureInfoKHR;

typedef struct VkVideoDecodeH265DpbSlotInfoKHR {
	VkStructureType                        sType;
	const void                            *pNext;
	const StdVideoDecodeH265ReferenceInfo *pStdReferenceInfo;
} VkVideoDecodeH265DpbSlotInfoKHR;

typedef struct VkVideoSessionParametersUpdateInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        updateSequenceCount;
} VkVideoSessionParametersUpdateInfoKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeSessionParametersGetInfoKHR {
	VkStructureType             sType;
	const void                 *pNext;
	VkVideoSessionParametersKHR videoSessionParameters;
} VkVideoEncodeSessionParametersGetInfoKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeQualityLevelInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        qualityLevel;
} VkVideoEncodeQualityLevelInfoKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeQualityLevelPropertiesKHR {
	VkStructureType                         sType;
	void                                   *pNext;
	VkVideoEncodeRateControlModeFlagBitsKHR preferredRateControlMode;
	uint32_t                                preferredRateControlLayerCount;
} VkVideoEncodeQualityLevelPropertiesKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeRateControlLayerInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	uint64_t        averageBitrate;
	uint64_t        maxBitrate;
	uint32_t        frameRateNumerator;
	uint32_t        frameRateDenominator;
} VkVideoEncodeRateControlLayerInfoKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#ifndef VULKAN_VIDEO_CODEC_H264STD_ENCODE_H_
		#define VULKAN_VIDEO_CODEC_H264STD_ENCODE_H_ 1

		/*
** Copyright 2015-2023 The Khronos Group Inc.
**
** SPDX-License-Identifier: Apache-2.0
*/

		/*
** This header is generated from the Khronos Vulkan XML API Registry.
**
*/


		#ifdef __cplusplus
extern "C" {
		#endif



		/* vulkan_video_codec_h264std_encode is a preprocessor guard. Do not pass it to API calls. */
		#define vulkan_video_codec_h264std_encode 1
		#include "vulkan_video_codec_h264std.h"
		/* Vulkan 0.9 provisional Vulkan video H.264 encode std specification version number */
		#define VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_0_9_11 VK_MAKE_VIDEO_STD_VERSION(0, 9, 11)

		#define VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_SPEC_VERSION   VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_0_9_11
		#define VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME "VK_STD_vulkan_video_codec_h264_encode"
typedef struct StdVideoEncodeH264WeightTableFlags {
	uint32_t luma_weight_l0_flag;
	uint32_t chroma_weight_l0_flag;
	uint32_t luma_weight_l1_flag;
	uint32_t chroma_weight_l1_flag;
} StdVideoEncodeH264WeightTableFlags;

typedef struct StdVideoEncodeH264WeightTable {
	StdVideoEncodeH264WeightTableFlags flags;
	uint8_t                            luma_log2_weight_denom;
	uint8_t                            chroma_log2_weight_denom;
	int8_t                             luma_weight_l0[STD_VIDEO_H264_MAX_NUM_LIST_REF];
	int8_t                             luma_offset_l0[STD_VIDEO_H264_MAX_NUM_LIST_REF];
	int8_t                             chroma_weight_l0[STD_VIDEO_H264_MAX_NUM_LIST_REF][STD_VIDEO_H264_MAX_CHROMA_PLANES];
	int8_t                             chroma_offset_l0[STD_VIDEO_H264_MAX_NUM_LIST_REF][STD_VIDEO_H264_MAX_CHROMA_PLANES];
	int8_t                             luma_weight_l1[STD_VIDEO_H264_MAX_NUM_LIST_REF];
	int8_t                             luma_offset_l1[STD_VIDEO_H264_MAX_NUM_LIST_REF];
	int8_t                             chroma_weight_l1[STD_VIDEO_H264_MAX_NUM_LIST_REF][STD_VIDEO_H264_MAX_CHROMA_PLANES];
	int8_t                             chroma_offset_l1[STD_VIDEO_H264_MAX_NUM_LIST_REF][STD_VIDEO_H264_MAX_CHROMA_PLANES];
} StdVideoEncodeH264WeightTable;

typedef struct StdVideoEncodeH264SliceHeaderFlags {
	uint32_t direct_spatial_mv_pred_flag     : 1;
	uint32_t num_ref_idx_active_override_flag: 1;
	uint32_t reserved                        : 30;
} StdVideoEncodeH264SliceHeaderFlags;

typedef struct StdVideoEncodeH264PictureInfoFlags {
	uint32_t IdrPicFlag                        : 1;
	uint32_t is_reference                      : 1;
	uint32_t no_output_of_prior_pics_flag      : 1;
	uint32_t long_term_reference_flag          : 1;
	uint32_t adaptive_ref_pic_marking_mode_flag: 1;
	uint32_t reserved                          : 27;
} StdVideoEncodeH264PictureInfoFlags;

typedef struct StdVideoEncodeH264ReferenceInfoFlags {
	uint32_t used_for_long_term_reference: 1;
	uint32_t reserved                    : 31;
} StdVideoEncodeH264ReferenceInfoFlags;

typedef struct StdVideoEncodeH264ReferenceListsInfoFlags {
	uint32_t ref_pic_list_modification_flag_l0: 1;
	uint32_t ref_pic_list_modification_flag_l1: 1;
	uint32_t reserved                         : 30;
} StdVideoEncodeH264ReferenceListsInfoFlags;

typedef struct StdVideoEncodeH264RefListModEntry {
	StdVideoH264ModificationOfPicNumsIdc modification_of_pic_nums_idc;
	uint16_t                             abs_diff_pic_num_minus1;
	uint16_t                             long_term_pic_num;
} StdVideoEncodeH264RefListModEntry;

typedef struct StdVideoEncodeH264RefPicMarkingEntry {
	StdVideoH264MemMgmtControlOp memory_management_control_operation;
	uint16_t                     difference_of_pic_nums_minus1;
	uint16_t                     long_term_pic_num;
	uint16_t                     long_term_frame_idx;
	uint16_t                     max_long_term_frame_idx_plus1;
} StdVideoEncodeH264RefPicMarkingEntry;

typedef struct StdVideoEncodeH264ReferenceListsInfo {
	StdVideoEncodeH264ReferenceListsInfoFlags   flags;
	uint8_t                                     num_ref_idx_l0_active_minus1;
	uint8_t                                     num_ref_idx_l1_active_minus1;
	uint8_t                                     RefPicList0[STD_VIDEO_H264_MAX_NUM_LIST_REF];
	uint8_t                                     RefPicList1[STD_VIDEO_H264_MAX_NUM_LIST_REF];
	uint8_t                                     refList0ModOpCount;
	uint8_t                                     refList1ModOpCount;
	uint8_t                                     refPicMarkingOpCount;
	uint8_t                                     reserved1[7];
	const StdVideoEncodeH264RefListModEntry    *pRefList0ModOperations;
	const StdVideoEncodeH264RefListModEntry    *pRefList1ModOperations;
	const StdVideoEncodeH264RefPicMarkingEntry *pRefPicMarkingOperations;
} StdVideoEncodeH264ReferenceListsInfo;

typedef struct StdVideoEncodeH264PictureInfo {
	StdVideoEncodeH264PictureInfoFlags          flags;
	uint8_t                                     seq_parameter_set_id;
	uint8_t                                     pic_parameter_set_id;
	uint16_t                                    idr_pic_id;
	StdVideoH264PictureType                     primary_pic_type;
	uint32_t                                    frame_num;
	int32_t                                     PicOrderCnt;
	uint8_t                                     temporal_id;
	uint8_t                                     reserved1[3];
	const StdVideoEncodeH264ReferenceListsInfo *pRefLists;
} StdVideoEncodeH264PictureInfo;

typedef struct StdVideoEncodeH264ReferenceInfo {
	StdVideoEncodeH264ReferenceInfoFlags flags;
	StdVideoH264PictureType              primary_pic_type;
	uint32_t                             FrameNum;
	int32_t                              PicOrderCnt;
	uint16_t                             long_term_pic_num;
	uint16_t                             long_term_frame_idx;
	uint8_t                              temporal_id;
} StdVideoEncodeH264ReferenceInfo;

typedef struct StdVideoEncodeH264SliceHeader {
	StdVideoEncodeH264SliceHeaderFlags     flags;
	uint32_t                               first_mb_in_slice;
	StdVideoH264SliceType                  slice_type;
	int8_t                                 slice_alpha_c0_offset_div2;
	int8_t                                 slice_beta_offset_div2;
	int8_t                                 slice_qp_delta;
	uint8_t                                reserved1;
	StdVideoH264CabacInitIdc               cabac_init_idc;
	StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc;
	const StdVideoEncodeH264WeightTable   *pWeightTable;
} StdVideoEncodeH264SliceHeader;


		#ifdef __cplusplus
}
		#endif

	#endif
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264SessionParametersAddInfoEXT {
	VkStructureType                         sType;
	const void                             *pNext;
	uint32_t                                stdSPSCount;
	const StdVideoH264SequenceParameterSet *pStdSPSs;
	uint32_t                                stdPPSCount;
	const StdVideoH264PictureParameterSet  *pStdPPSs;
} VkVideoEncodeH264SessionParametersAddInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264SessionParametersCreateInfoEXT {
	VkStructureType                                     sType;
	const void                                         *pNext;
	uint32_t                                            maxStdSPSCount;
	uint32_t                                            maxStdPPSCount;
	const VkVideoEncodeH264SessionParametersAddInfoEXT *pParametersAddInfo;
} VkVideoEncodeH264SessionParametersCreateInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264DpbSlotInfoEXT {
	VkStructureType                        sType;
	const void                            *pNext;
	const StdVideoEncodeH264ReferenceInfo *pStdReferenceInfo;
} VkVideoEncodeH264DpbSlotInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264ProfileInfoEXT {
	VkStructureType        sType;
	const void            *pNext;
	StdVideoH264ProfileIdc stdProfileIdc;
} VkVideoEncodeH264ProfileInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264NaluSliceInfoEXT {
	VkStructureType                      sType;
	const void                          *pNext;
	int32_t                              constantQp;
	const StdVideoEncodeH264SliceHeader *pStdSliceHeader;
} VkVideoEncodeH264NaluSliceInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264QpEXT {
	int32_t qpI;
	int32_t qpP;
	int32_t qpB;
} VkVideoEncodeH264QpEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264FrameSizeEXT {
	uint32_t frameISize;
	uint32_t framePSize;
	uint32_t frameBSize;
} VkVideoEncodeH264FrameSizeEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#ifndef VULKAN_VIDEO_CODEC_H265STD_ENCODE_H_
		#define VULKAN_VIDEO_CODEC_H265STD_ENCODE_H_ 1

		/*
** Copyright 2015-2023 The Khronos Group Inc.
**
** SPDX-License-Identifier: Apache-2.0
*/

		/*
** This header is generated from the Khronos Vulkan XML API Registry.
**
*/


		#ifdef __cplusplus
extern "C" {
		#endif



		/* vulkan_video_codec_h265std_encode is a preprocessor guard. Do not pass it to API calls. */
		#define vulkan_video_codec_h265std_encode 1
		#include "vulkan_video_codec_h265std.h"
		/* Vulkan 0.9 provisional Vulkan video H.265 encode std specification version number */
		#define VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_0_9_12 VK_MAKE_VIDEO_STD_VERSION(0, 9, 12)

		#define VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_SPEC_VERSION   VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_0_9_12
		#define VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME "VK_STD_vulkan_video_codec_h265_encode"
typedef struct StdVideoEncodeH265WeightTableFlags {
	uint16_t luma_weight_l0_flag;
	uint16_t chroma_weight_l0_flag;
	uint16_t luma_weight_l1_flag;
	uint16_t chroma_weight_l1_flag;
} StdVideoEncodeH265WeightTableFlags;

typedef struct StdVideoEncodeH265WeightTable {
	StdVideoEncodeH265WeightTableFlags flags;
	uint8_t                            luma_log2_weight_denom;
	int8_t                             delta_chroma_log2_weight_denom;
	int8_t                             delta_luma_weight_l0[STD_VIDEO_H265_MAX_NUM_LIST_REF];
	int8_t                             luma_offset_l0[STD_VIDEO_H265_MAX_NUM_LIST_REF];
	int8_t                             delta_chroma_weight_l0[STD_VIDEO_H265_MAX_NUM_LIST_REF][STD_VIDEO_H265_MAX_CHROMA_PLANES];
	int8_t                             delta_chroma_offset_l0[STD_VIDEO_H265_MAX_NUM_LIST_REF][STD_VIDEO_H265_MAX_CHROMA_PLANES];
	int8_t                             delta_luma_weight_l1[STD_VIDEO_H265_MAX_NUM_LIST_REF];
	int8_t                             luma_offset_l1[STD_VIDEO_H265_MAX_NUM_LIST_REF];
	int8_t                             delta_chroma_weight_l1[STD_VIDEO_H265_MAX_NUM_LIST_REF][STD_VIDEO_H265_MAX_CHROMA_PLANES];
	int8_t                             delta_chroma_offset_l1[STD_VIDEO_H265_MAX_NUM_LIST_REF][STD_VIDEO_H265_MAX_CHROMA_PLANES];
} StdVideoEncodeH265WeightTable;

typedef struct StdVideoEncodeH265SliceSegmentHeaderFlags {
	uint32_t first_slice_segment_in_pic_flag             : 1;
	uint32_t dependent_slice_segment_flag                : 1;
	uint32_t slice_sao_luma_flag                         : 1;
	uint32_t slice_sao_chroma_flag                       : 1;
	uint32_t num_ref_idx_active_override_flag            : 1;
	uint32_t mvd_l1_zero_flag                            : 1;
	uint32_t cabac_init_flag                             : 1;
	uint32_t cu_chroma_qp_offset_enabled_flag            : 1;
	uint32_t deblocking_filter_override_flag             : 1;
	uint32_t slice_deblocking_filter_disabled_flag       : 1;
	uint32_t collocated_from_l0_flag                     : 1;
	uint32_t slice_loop_filter_across_slices_enabled_flag: 1;
	uint32_t reserved                                    : 20;
} StdVideoEncodeH265SliceSegmentHeaderFlags;

typedef struct StdVideoEncodeH265SliceSegmentHeader {
	StdVideoEncodeH265SliceSegmentHeaderFlags flags;
	StdVideoH265SliceType                     slice_type;
	uint32_t                                  slice_segment_address;
	uint8_t                                   collocated_ref_idx;
	uint8_t                                   MaxNumMergeCand;
	int8_t                                    slice_cb_qp_offset;
	int8_t                                    slice_cr_qp_offset;
	int8_t                                    slice_beta_offset_div2;
	int8_t                                    slice_tc_offset_div2;
	int8_t                                    slice_act_y_qp_offset;
	int8_t                                    slice_act_cb_qp_offset;
	int8_t                                    slice_act_cr_qp_offset;
	int8_t                                    slice_qp_delta;
	uint16_t                                  reserved1;
	const StdVideoEncodeH265WeightTable      *pWeightTable;
} StdVideoEncodeH265SliceSegmentHeader;

typedef struct StdVideoEncodeH265ReferenceListsInfoFlags {
	uint32_t ref_pic_list_modification_flag_l0: 1;
	uint32_t ref_pic_list_modification_flag_l1: 1;
	uint32_t reserved                         : 30;
} StdVideoEncodeH265ReferenceListsInfoFlags;

typedef struct StdVideoEncodeH265ReferenceListsInfo {
	StdVideoEncodeH265ReferenceListsInfoFlags flags;
	uint8_t                                   num_ref_idx_l0_active_minus1;
	uint8_t                                   num_ref_idx_l1_active_minus1;
	uint8_t                                   RefPicList0[STD_VIDEO_H265_MAX_NUM_LIST_REF];
	uint8_t                                   RefPicList1[STD_VIDEO_H265_MAX_NUM_LIST_REF];
	uint8_t                                   list_entry_l0[STD_VIDEO_H265_MAX_NUM_LIST_REF];
	uint8_t                                   list_entry_l1[STD_VIDEO_H265_MAX_NUM_LIST_REF];
} StdVideoEncodeH265ReferenceListsInfo;

typedef struct StdVideoEncodeH265PictureInfoFlags {
	uint32_t is_reference                   : 1;
	uint32_t IrapPicFlag                    : 1;
	uint32_t used_for_long_term_reference   : 1;
	uint32_t discardable_flag               : 1;
	uint32_t cross_layer_bla_flag           : 1;
	uint32_t pic_output_flag                : 1;
	uint32_t no_output_of_prior_pics_flag   : 1;
	uint32_t short_term_ref_pic_set_sps_flag: 1;
	uint32_t slice_temporal_mvp_enabled_flag: 1;
	uint32_t reserved                       : 23;
} StdVideoEncodeH265PictureInfoFlags;

typedef struct StdVideoEncodeH265LongTermRefPics {
	uint8_t  num_long_term_sps;
	uint8_t  num_long_term_pics;
	uint8_t  lt_idx_sps[STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS];
	uint8_t  poc_lsb_lt[STD_VIDEO_H265_MAX_LONG_TERM_PICS];
	uint16_t used_by_curr_pic_lt_flag;
	uint8_t  delta_poc_msb_present_flag[STD_VIDEO_H265_MAX_DELTA_POC];
	uint8_t  delta_poc_msb_cycle_lt[STD_VIDEO_H265_MAX_DELTA_POC];
} StdVideoEncodeH265LongTermRefPics;

typedef struct StdVideoEncodeH265PictureInfo {
	StdVideoEncodeH265PictureInfoFlags          flags;
	StdVideoH265PictureType                     pic_type;
	uint8_t                                     sps_video_parameter_set_id;
	uint8_t                                     pps_seq_parameter_set_id;
	uint8_t                                     pps_pic_parameter_set_id;
	uint8_t                                     short_term_ref_pic_set_idx;
	int32_t                                     PicOrderCntVal;
	uint8_t                                     TemporalId;
	uint8_t                                     reserved1[7];
	const StdVideoEncodeH265ReferenceListsInfo *pRefLists;
	const StdVideoH265ShortTermRefPicSet       *pShortTermRefPicSet;
	const StdVideoEncodeH265LongTermRefPics    *pLongTermRefPics;
} StdVideoEncodeH265PictureInfo;

typedef struct StdVideoEncodeH265ReferenceInfoFlags {
	uint32_t used_for_long_term_reference: 1;
	uint32_t unused_for_reference        : 1;
	uint32_t reserved                    : 30;
} StdVideoEncodeH265ReferenceInfoFlags;

typedef struct StdVideoEncodeH265ReferenceInfo {
	StdVideoEncodeH265ReferenceInfoFlags flags;
	StdVideoH265PictureType              pic_type;
	int32_t                              PicOrderCntVal;
	uint8_t                              TemporalId;
} StdVideoEncodeH265ReferenceInfo;


		#ifdef __cplusplus
}
		#endif

	#endif
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265SessionParametersAddInfoEXT {
	VkStructureType                         sType;
	const void                             *pNext;
	uint32_t                                stdVPSCount;
	const StdVideoH265VideoParameterSet    *pStdVPSs;
	uint32_t                                stdSPSCount;
	const StdVideoH265SequenceParameterSet *pStdSPSs;
	uint32_t                                stdPPSCount;
	const StdVideoH265PictureParameterSet  *pStdPPSs;
} VkVideoEncodeH265SessionParametersAddInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265SessionParametersCreateInfoEXT {
	VkStructureType                                     sType;
	const void                                         *pNext;
	uint32_t                                            maxStdVPSCount;
	uint32_t                                            maxStdSPSCount;
	uint32_t                                            maxStdPPSCount;
	const VkVideoEncodeH265SessionParametersAddInfoEXT *pParametersAddInfo;
} VkVideoEncodeH265SessionParametersCreateInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265NaluSliceSegmentInfoEXT {
	VkStructureType                             sType;
	const void                                 *pNext;
	int32_t                                     constantQp;
	const StdVideoEncodeH265SliceSegmentHeader *pStdSliceSegmentHeader;
} VkVideoEncodeH265NaluSliceSegmentInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265QpEXT {
	int32_t qpI;
	int32_t qpP;
	int32_t qpB;
} VkVideoEncodeH265QpEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265FrameSizeEXT {
	uint32_t frameISize;
	uint32_t framePSize;
	uint32_t frameBSize;
} VkVideoEncodeH265FrameSizeEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265ProfileInfoEXT {
	VkStructureType        sType;
	const void            *pNext;
	StdVideoH265ProfileIdc stdProfileIdc;
} VkVideoEncodeH265ProfileInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265DpbSlotInfoEXT {
	VkStructureType                        sType;
	const void                            *pNext;
	const StdVideoEncodeH265ReferenceInfo *pStdReferenceInfo;
} VkVideoEncodeH265DpbSlotInfoEXT;

#endif

typedef struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
	VkStructureType          sType;
	const void              *pNext;
	VkProvokingVertexModeEXT provokingVertexMode;
} VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;

typedef struct VkCuModuleCreateInfoNVX {
	VkStructureType sType;
	const void     *pNext;
	size_t          dataSize;
	const void     *pData;
} VkCuModuleCreateInfoNVX;

typedef struct VkCuFunctionCreateInfoNVX {
	VkStructureType sType;
	const void     *pNext;
	VkCuModuleNVX   module;
	const char     *pName;
} VkCuFunctionCreateInfoNVX;

typedef struct VkCuLaunchInfoNVX {
	VkStructureType    sType;
	const void        *pNext;
	VkCuFunctionNVX    function;
	uint32_t           gridDimX;
	uint32_t           gridDimY;
	uint32_t           gridDimZ;
	uint32_t           blockDimX;
	uint32_t           blockDimY;
	uint32_t           blockDimZ;
	uint32_t           sharedMemBytes;
	size_t             paramCount;
	const void *const *pParams;
	size_t             extraCount;
	const void *const *pExtras;
} VkCuLaunchInfoNVX;

typedef struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	size_t          combinedImageSamplerDensityMapDescriptorSize;
} VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;

typedef struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
	VkStructureType sType;
	void           *pNext;
	VkBuffer        buffer;
} VkDescriptorBufferBindingPushDescriptorBufferHandleEXT;

typedef struct VkBufferCaptureDescriptorDataInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkBuffer        buffer;
} VkBufferCaptureDescriptorDataInfoEXT;

typedef struct VkImageCaptureDescriptorDataInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkImage         image;
} VkImageCaptureDescriptorDataInfoEXT;

typedef struct VkImageViewCaptureDescriptorDataInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkImageView     imageView;
} VkImageViewCaptureDescriptorDataInfoEXT;

typedef struct VkSamplerCaptureDescriptorDataInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkSampler       sampler;
} VkSamplerCaptureDescriptorDataInfoEXT;

typedef struct VkAccelerationStructureCaptureDescriptorDataInfoEXT {
	VkStructureType            sType;
	const void                *pNext;
	VkAccelerationStructureKHR accelerationStructure;
	VkAccelerationStructureNV  accelerationStructureNV;
} VkAccelerationStructureCaptureDescriptorDataInfoEXT;

typedef struct VkOpaqueCaptureDescriptorDataCreateInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	const void     *opaqueCaptureDescriptorData;
} VkOpaqueCaptureDescriptorDataCreateInfoEXT;

typedef enum VkAccelerationStructureMotionInstanceTypeNV {
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
} VkAccelerationStructureMotionInstanceTypeNV;
typedef struct VkSRTDataNV {
	float sx;
	float a;
	float b;
	float pvx;
	float sy;
	float c;
	float pvy;
	float sz;
	float pvz;
	float qx;
	float qy;
	float qz;
	float qw;
	float tx;
	float ty;
	float tz;
} VkSRTDataNV;

typedef void *VkRemoteAddressNV;
typedef struct VkMemoryGetRemoteAddressInfoNV {
	VkStructureType                    sType;
	const void                        *pNext;
	VkDeviceMemory                     memory;
	VkExternalMemoryHandleTypeFlagBits handleType;
} VkMemoryGetRemoteAddressInfoNV;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImportMemoryBufferCollectionFUCHSIA {
	VkStructureType           sType;
	const void               *pNext;
	VkBufferCollectionFUCHSIA collection;
	uint32_t                  index;
} VkImportMemoryBufferCollectionFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionImageCreateInfoFUCHSIA {
	VkStructureType           sType;
	const void               *pNext;
	VkBufferCollectionFUCHSIA collection;
	uint32_t                  index;
} VkBufferCollectionImageCreateInfoFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionBufferCreateInfoFUCHSIA {
	VkStructureType           sType;
	const void               *pNext;
	VkBufferCollectionFUCHSIA collection;
	uint32_t                  index;
} VkBufferCollectionBufferCreateInfoFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionCreateInfoFUCHSIA {
	VkStructureType sType;
	const void     *pNext;
	zx_handle_t     collectionToken;
} VkBufferCollectionCreateInfoFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkSysmemColorSpaceFUCHSIA {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        colorSpace;
} VkSysmemColorSpaceFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionConstraintsInfoFUCHSIA {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        minBufferCount;
	uint32_t        maxBufferCount;
	uint32_t        minBufferCountForCamping;
	uint32_t        minBufferCountForDedicatedSlack;
	uint32_t        minBufferCountForSharedSlack;
} VkBufferCollectionConstraintsInfoFUCHSIA;

#endif

typedef struct VkPipelineRenderingCreateInfo {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        viewMask;
	uint32_t        colorAttachmentCount;
	const VkFormat *pColorAttachmentFormats;
	VkFormat        depthAttachmentFormat;
	VkFormat        stencilAttachmentFormat;
} VkPipelineRenderingCreateInfo;

typedef struct VkPipelineRenderingCreateInfo VkPipelineRenderingCreateInfoKHR;

typedef struct VkRenderingAttachmentInfo {
	VkStructureType       sType;
	const void           *pNext;
	VkImageView           imageView;
	VkImageLayout         imageLayout;
	VkResolveModeFlagBits resolveMode;
	VkImageView           resolveImageView;
	VkImageLayout         resolveImageLayout;
	VkAttachmentLoadOp    loadOp;
	VkAttachmentStoreOp   storeOp;
	VkClearValue          clearValue;
} VkRenderingAttachmentInfo;

typedef struct VkRenderingAttachmentInfo VkRenderingAttachmentInfoKHR;

typedef struct VkRenderingFragmentShadingRateAttachmentInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	VkImageView     imageView;
	VkImageLayout   imageLayout;
	VkExtent2D      shadingRateAttachmentTexelSize;
} VkRenderingFragmentShadingRateAttachmentInfoKHR;

typedef struct VkRenderingFragmentDensityMapAttachmentInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkImageView     imageView;
	VkImageLayout   imageLayout;
} VkRenderingFragmentDensityMapAttachmentInfoEXT;

typedef struct VkAttachmentSampleCountInfoAMD {
	VkStructureType              sType;
	const void                  *pNext;
	uint32_t                     colorAttachmentCount;
	const VkSampleCountFlagBits *pColorAttachmentSamples;
	VkSampleCountFlagBits        depthStencilAttachmentSamples;
} VkAttachmentSampleCountInfoAMD;

typedef struct VkAttachmentSampleCountInfoAMD VkAttachmentSampleCountInfoNV;

typedef struct VkImageViewMinLodCreateInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	float           minLod;
} VkImageViewMinLodCreateInfoEXT;

typedef struct VkDescriptorSetBindingReferenceVALVE {
	VkStructureType       sType;
	const void           *pNext;
	VkDescriptorSetLayout descriptorSetLayout;
	uint32_t              binding;
} VkDescriptorSetBindingReferenceVALVE;

typedef struct VkDescriptorSetLayoutHostMappingInfoVALVE {
	VkStructureType sType;
	void           *pNext;
	size_t          descriptorOffset;
	uint32_t        descriptorSize;
} VkDescriptorSetLayoutHostMappingInfoVALVE;

typedef struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint8_t         shaderModuleIdentifierAlgorithmUUID[VK_UUID_SIZE];
} VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;

typedef struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        identifierSize;
	const uint8_t  *pIdentifier;
} VkPipelineShaderStageModuleIdentifierCreateInfoEXT;

typedef struct VkShaderModuleIdentifierEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        identifierSize;
	uint8_t         identifier[VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT];
} VkShaderModuleIdentifierEXT;

typedef struct VkRenderPassCreationFeedbackInfoEXT {
	uint32_t postMergeSubpassCount;
} VkRenderPassCreationFeedbackInfoEXT;

typedef struct VkRenderPassCreationFeedbackCreateInfoEXT {
	VkStructureType                      sType;
	const void                          *pNext;
	VkRenderPassCreationFeedbackInfoEXT *pRenderPassFeedback;
} VkRenderPassCreationFeedbackCreateInfoEXT;

typedef struct VkRenderPassSubpassFeedbackInfoEXT {
	VkSubpassMergeStatusEXT subpassMergeStatus;
	char                    description[VK_MAX_DESCRIPTION_SIZE];
	uint32_t                postMergeIndex;
} VkRenderPassSubpassFeedbackInfoEXT;

typedef struct VkRenderPassSubpassFeedbackCreateInfoEXT {
	VkStructureType                     sType;
	const void                         *pNext;
	VkRenderPassSubpassFeedbackInfoEXT *pSubpassFeedback;
} VkRenderPassSubpassFeedbackCreateInfoEXT;

typedef struct VkMicromapVersionInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	const uint8_t  *pVersionData;
} VkMicromapVersionInfoEXT;

typedef struct VkCopyMicromapInfoEXT {
	VkStructureType       sType;
	const void           *pNext;
	VkMicromapEXT         src;
	VkMicromapEXT         dst;
	VkCopyMicromapModeEXT mode;
} VkCopyMicromapInfoEXT;

typedef struct VkMicromapUsageEXT {
	uint32_t count;
	uint32_t subdivisionLevel;
	uint32_t format;
} VkMicromapUsageEXT;

typedef struct VkMicromapTriangleEXT {
	uint32_t dataOffset;
	uint16_t subdivisionLevel;
	uint16_t format;
} VkMicromapTriangleEXT;

typedef struct VkPhysicalDeviceOpacityMicromapPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxOpacity2StateSubdivisionLevel;
	uint32_t        maxOpacity4StateSubdivisionLevel;
} VkPhysicalDeviceOpacityMicromapPropertiesEXT;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceDisplacementMicromapPropertiesNV {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxDisplacementMicromapSubdivisionLevel;
} VkPhysicalDeviceDisplacementMicromapPropertiesNV;

#endif

typedef struct VkPipelinePropertiesIdentifierEXT {
	VkStructureType sType;
	void           *pNext;
	uint8_t         pipelineIdentifier[VK_UUID_SIZE];
} VkPipelinePropertiesIdentifierEXT;

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalObjectCreateInfoEXT {
	VkStructureType                    sType;
	const void                        *pNext;
	VkExportMetalObjectTypeFlagBitsEXT exportObjectType;
} VkExportMetalObjectCreateInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalObjectsInfoEXT {
	VkStructureType sType;
	const void     *pNext;
} VkExportMetalObjectsInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalDeviceInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	MTLDevice_id    mtlDevice;
} VkExportMetalDeviceInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalCommandQueueInfoEXT {
	VkStructureType    sType;
	const void        *pNext;
	VkQueue            queue;
	MTLCommandQueue_id mtlCommandQueue;
} VkExportMetalCommandQueueInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalBufferInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceMemory  memory;
	MTLBuffer_id    mtlBuffer;
} VkExportMetalBufferInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkImportMetalBufferInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	MTLBuffer_id    mtlBuffer;
} VkImportMetalBufferInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalTextureInfoEXT {
	VkStructureType       sType;
	const void           *pNext;
	VkImage               image;
	VkImageView           imageView;
	VkBufferView          bufferView;
	VkImageAspectFlagBits plane;
	MTLTexture_id         mtlTexture;
} VkExportMetalTextureInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkImportMetalTextureInfoEXT {
	VkStructureType       sType;
	const void           *pNext;
	VkImageAspectFlagBits plane;
	MTLTexture_id         mtlTexture;
} VkImportMetalTextureInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalIOSurfaceInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkImage         image;
	IOSurfaceRef    ioSurface;
} VkExportMetalIOSurfaceInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkImportMetalIOSurfaceInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	IOSurfaceRef    ioSurface;
} VkImportMetalIOSurfaceInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkExportMetalSharedEventInfoEXT {
	VkStructureType   sType;
	const void       *pNext;
	VkSemaphore       semaphore;
	VkEvent           event;
	MTLSharedEvent_id mtlSharedEvent;
} VkExportMetalSharedEventInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkImportMetalSharedEventInfoEXT {
	VkStructureType   sType;
	const void       *pNext;
	MTLSharedEvent_id mtlSharedEvent;
} VkImportMetalSharedEventInfoEXT;

#endif

typedef struct VkPipelineRobustnessCreateInfoEXT {
	VkStructureType                       sType;
	const void                           *pNext;
	VkPipelineRobustnessBufferBehaviorEXT storageBuffers;
	VkPipelineRobustnessBufferBehaviorEXT uniformBuffers;
	VkPipelineRobustnessBufferBehaviorEXT vertexInputs;
	VkPipelineRobustnessImageBehaviorEXT  images;
} VkPipelineRobustnessCreateInfoEXT;

typedef struct VkPhysicalDevicePipelineRobustnessPropertiesEXT {
	VkStructureType                       sType;
	void                                 *pNext;
	VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessStorageBuffers;
	VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessUniformBuffers;
	VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessVertexInputs;
	VkPipelineRobustnessImageBehaviorEXT  defaultRobustnessImages;
} VkPhysicalDevicePipelineRobustnessPropertiesEXT;

typedef struct VkImageViewSampleWeightCreateInfoQCOM {
	VkStructureType sType;
	const void     *pNext;
	VkOffset2D      filterCenter;
	VkExtent2D      filterSize;
	uint32_t        numPhases;
} VkImageViewSampleWeightCreateInfoQCOM;

typedef struct VkPhysicalDeviceImageProcessingPropertiesQCOM {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxWeightFilterPhases;
	VkExtent2D      maxWeightFilterDimension;
	VkExtent2D      maxBlockMatchRegion;
	VkExtent2D      maxBoxFilterBlockSize;
} VkPhysicalDeviceImageProcessingPropertiesQCOM;

typedef struct VkTilePropertiesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkExtent3D      tileSize;
	VkExtent2D      apronSize;
	VkOffset2D      origin;
} VkTilePropertiesQCOM;

typedef struct VkAmigoProfilingSubmitInfoSEC {
	VkStructureType sType;
	const void     *pNext;
	uint64_t        firstDrawTimestamp;
	uint64_t        swapBufferTimestamp;
} VkAmigoProfilingSubmitInfoSEC;

typedef struct VkOpticalFlowImageFormatPropertiesNV {
	VkStructureType sType;
	const void     *pNext;
	VkFormat        format;
} VkOpticalFlowImageFormatPropertiesNV;

typedef struct VkOpticalFlowSessionCreatePrivateDataInfoNV {
	VkStructureType sType;
	void           *pNext;
	uint32_t        id;
	uint32_t        size;
	const void     *pPrivateData;
} VkOpticalFlowSessionCreatePrivateDataInfoNV;

typedef struct VkDeviceFaultVendorInfoEXT {
	char     description[VK_MAX_DESCRIPTION_SIZE];
	uint64_t vendorFaultCode;
	uint64_t vendorFaultData;
} VkDeviceFaultVendorInfoEXT;

typedef struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
	uint32_t                                  headerSize;
	VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion;
	uint32_t                                  vendorID;
	uint32_t                                  deviceID;
	uint32_t                                  driverVersion;
	uint8_t                                   pipelineCacheUUID[VK_UUID_SIZE];
	uint32_t                                  applicationNameOffset;
	uint32_t                                  applicationVersion;
	uint32_t                                  engineNameOffset;
	uint32_t                                  engineVersion;
	uint32_t                                  apiVersion;
} VkDeviceFaultVendorBinaryHeaderVersionOneEXT;

typedef struct VkDepthBiasInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	float           depthBiasConstantFactor;
	float           depthBiasClamp;
	float           depthBiasSlopeFactor;
} VkDepthBiasInfoEXT;

typedef struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
	VkStructureType sType;
	void           *pNext;
	uint64_t        shaderCoreMask;
	uint32_t        shaderCoreCount;
	uint32_t        shaderWarpsPerCore;
} VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM;

typedef struct VkSurfacePresentModeEXT {
	VkStructureType  sType;
	void            *pNext;
	VkPresentModeKHR presentMode;
} VkSurfacePresentModeEXT;

typedef struct VkSurfacePresentModeCompatibilityEXT {
	VkStructureType   sType;
	void             *pNext;
	uint32_t          presentModeCount;
	VkPresentModeKHR *pPresentModes;
} VkSurfacePresentModeCompatibilityEXT;

typedef struct VkSwapchainPresentFenceInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        swapchainCount;
	const VkFence  *pFences;
} VkSwapchainPresentFenceInfoEXT;

typedef struct VkSwapchainPresentModesCreateInfoEXT {
	VkStructureType         sType;
	const void             *pNext;
	uint32_t                presentModeCount;
	const VkPresentModeKHR *pPresentModes;
} VkSwapchainPresentModesCreateInfoEXT;

typedef struct VkSwapchainPresentModeInfoEXT {
	VkStructureType         sType;
	const void             *pNext;
	uint32_t                swapchainCount;
	const VkPresentModeKHR *pPresentModes;
} VkSwapchainPresentModeInfoEXT;

typedef struct VkReleaseSwapchainImagesInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkSwapchainKHR  swapchain;
	uint32_t        imageIndexCount;
	const uint32_t *pImageIndices;
} VkReleaseSwapchainImagesInfoEXT;

typedef struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
	VkStructureType                     sType;
	void                               *pNext;
	VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint;
} VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV;

typedef struct VkPhysicalDeviceShaderCorePropertiesARM {
	VkStructureType sType;
	void           *pNext;
	uint32_t        pixelRate;
	uint32_t        texelRate;
	uint32_t        fmaRate;
} VkPhysicalDeviceShaderCorePropertiesARM;

typedef struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        perViewRenderAreaCount;
	const VkRect2D *pPerViewRenderAreas;
} VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;

typedef struct VkQueryLowLatencySupportNV {
	VkStructureType sType;
	const void     *pNext;
	void           *pQueriedLowLatencyData;
} VkQueryLowLatencySupportNV;

typedef struct VkPhysicalDeviceShaderObjectPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint8_t         shaderBinaryUUID[VK_UUID_SIZE];
	uint32_t        shaderBinaryVersion;
} VkPhysicalDeviceShaderObjectPropertiesEXT;

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkImportScreenBufferInfoQNX {
	VkStructureType        sType;
	const void            *pNext;
	struct _screen_buffer *buffer;
} VkImportScreenBufferInfoQNX;

#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkExternalFormatQNX {
	VkStructureType sType;
	void           *pNext;
	uint64_t        externalFormat;
} VkExternalFormatQNX;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceShaderEnqueuePropertiesAMDX {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxExecutionGraphDepth;
	uint32_t        maxExecutionGraphShaderOutputNodes;
	uint32_t        maxExecutionGraphShaderPayloadSize;
	uint32_t        maxExecutionGraphShaderPayloadCount;
	uint32_t        executionGraphDispatchAddressAlignment;
} VkPhysicalDeviceShaderEnqueuePropertiesAMDX;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPipelineShaderStageNodeCreateInfoAMDX {
	VkStructureType sType;
	const void     *pNext;
	const char     *pName;
	uint32_t        index;
} VkPipelineShaderStageNodeCreateInfoAMDX;

#endif

typedef struct VkSamplerCubicWeightsCreateInfoQCOM {
	VkStructureType          sType;
	const void              *pNext;
	VkCubicFilterWeightsQCOM cubicWeights;
} VkSamplerCubicWeightsCreateInfoQCOM;

typedef struct VkBlitImageCubicWeightsInfoQCOM {
	VkStructureType          sType;
	const void              *pNext;
	VkCubicFilterWeightsQCOM cubicWeights;
} VkBlitImageCubicWeightsInfoQCOM;

typedef struct VkPhysicalDeviceImageProcessing2PropertiesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkExtent2D      maxBlockMatchWindow;
} VkPhysicalDeviceImageProcessing2PropertiesQCOM;

typedef struct VkSamplerBlockMatchWindowCreateInfoQCOM {
	VkStructureType                   sType;
	const void                       *pNext;
	VkExtent2D                        windowExtent;
	VkBlockMatchWindowCompareModeQCOM windowCompareMode;
} VkSamplerBlockMatchWindowCreateInfoQCOM;

typedef struct VkPhysicalDeviceLayeredDriverPropertiesMSFT {
	VkStructureType                  sType;
	void                            *pNext;
	VkLayeredDriverUnderlyingApiMSFT underlyingAPI;
} VkPhysicalDeviceLayeredDriverPropertiesMSFT;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferFormatResolvePropertiesANDROID {
	VkStructureType sType;
	void           *pNext;
	VkFormat        colorAttachmentFormat;
} VkAndroidHardwareBufferFormatResolvePropertiesANDROID;

#endif

typedef struct VkLatencySleepInfoNV {
	VkStructureType sType;
	const void     *pNext;
	VkSemaphore     signalSemaphore;
	uint64_t        value;
} VkLatencySleepInfoNV;

typedef struct VkSetLatencyMarkerInfoNV {
	VkStructureType   sType;
	const void       *pNext;
	uint64_t          presentID;
	VkLatencyMarkerNV marker;
} VkSetLatencyMarkerInfoNV;

typedef struct VkLatencyTimingsFrameReportNV {
	VkStructureType sType;
	const void     *pNext;
	uint64_t        presentID;
	uint64_t        inputSampleTimeUs;
	uint64_t        simStartTimeUs;
	uint64_t        simEndTimeUs;
	uint64_t        renderSubmitStartTimeUs;
	uint64_t        renderSubmitEndTimeUs;
	uint64_t        presentStartTimeUs;
	uint64_t        presentEndTimeUs;
	uint64_t        driverStartTimeUs;
	uint64_t        driverEndTimeUs;
	uint64_t        osRenderQueueStartTimeUs;
	uint64_t        osRenderQueueEndTimeUs;
	uint64_t        gpuRenderStartTimeUs;
	uint64_t        gpuRenderEndTimeUs;
} VkLatencyTimingsFrameReportNV;

typedef struct VkOutOfBandQueueTypeInfoNV {
	VkStructureType        sType;
	const void            *pNext;
	VkOutOfBandQueueTypeNV queueType;
} VkOutOfBandQueueTypeInfoNV;

typedef struct VkLatencySubmissionPresentIdNV {
	VkStructureType sType;
	const void     *pNext;
	uint64_t        presentID;
} VkLatencySubmissionPresentIdNV;

typedef struct VkLatencySurfaceCapabilitiesNV {
	VkStructureType   sType;
	const void       *pNext;
	uint32_t          presentModeCount;
	VkPresentModeKHR *pPresentModes;
} VkLatencySurfaceCapabilitiesNV;

/* Complete version of this file */
#define VK_HEADER_VERSION_COMPLETE VK_MAKE_API_VERSION(0, 1, 3, VK_HEADER_VERSION)
typedef uint32_t VkSampleMask;
typedef uint32_t VkBool32;
typedef uint32_t VkFlags;
typedef uint64_t VkFlags64;
typedef uint64_t VkDeviceSize;
typedef uint64_t VkDeviceAddress;
typedef VkFlags  VkFramebufferCreateFlags;
typedef VkFlags  VkQueryPoolCreateFlags;
typedef VkFlags  VkRenderPassCreateFlags;
typedef VkFlags  VkSamplerCreateFlags;
typedef VkFlags  VkPipelineLayoutCreateFlags;
typedef VkFlags  VkPipelineCacheCreateFlags;
typedef VkFlags  VkPipelineDepthStencilStateCreateFlags;
typedef VkFlags  VkPipelineDynamicStateCreateFlags;
typedef VkFlags  VkPipelineColorBlendStateCreateFlags;
typedef VkFlags  VkPipelineMultisampleStateCreateFlags;
typedef VkFlags  VkPipelineRasterizationStateCreateFlags;
typedef VkFlags  VkPipelineViewportStateCreateFlags;
typedef VkFlags  VkPipelineTessellationStateCreateFlags;
typedef VkFlags  VkPipelineInputAssemblyStateCreateFlags;
typedef VkFlags  VkPipelineVertexInputStateCreateFlags;
typedef VkFlags  VkPipelineShaderStageCreateFlags;
typedef VkFlags  VkDescriptorSetLayoutCreateFlags;
typedef VkFlags  VkBufferViewCreateFlags;
typedef VkFlags  VkInstanceCreateFlags;
typedef VkFlags  VkDeviceCreateFlags;
typedef VkFlags  VkDeviceQueueCreateFlags;
typedef VkFlags  VkQueueFlags;
typedef VkFlags  VkMemoryPropertyFlags;
typedef VkFlags  VkMemoryHeapFlags;
typedef VkFlags  VkAccessFlags;
typedef VkFlags  VkBufferUsageFlags;
typedef VkFlags  VkBufferCreateFlags;
typedef VkFlags  VkShaderStageFlags;
typedef VkFlags  VkImageUsageFlags;
typedef VkFlags  VkImageCreateFlags;
typedef VkFlags  VkImageViewCreateFlags;
typedef VkFlags  VkPipelineCreateFlags;
typedef VkFlags  VkColorComponentFlags;
typedef VkFlags  VkFenceCreateFlags;
typedef VkFlags  VkSemaphoreCreateFlags;
typedef VkFlags  VkFormatFeatureFlags;
typedef VkFlags  VkQueryControlFlags;
typedef VkFlags  VkQueryResultFlags;
typedef VkFlags  VkShaderModuleCreateFlags;
typedef VkFlags  VkEventCreateFlags;
typedef VkFlags  VkCommandPoolCreateFlags;
typedef VkFlags  VkCommandPoolResetFlags;
typedef VkFlags  VkCommandBufferResetFlags;
typedef VkFlags  VkCommandBufferUsageFlags;
typedef VkFlags  VkQueryPipelineStatisticFlags;
typedef VkFlags  VkMemoryMapFlags;
typedef VkFlags  VkMemoryUnmapFlagsKHR;
typedef VkFlags  VkImageAspectFlags;
typedef VkFlags  VkSparseMemoryBindFlags;
typedef VkFlags  VkSparseImageFormatFlags;
typedef VkFlags  VkSubpassDescriptionFlags;
typedef VkFlags  VkPipelineStageFlags;
typedef VkFlags  VkSampleCountFlags;
typedef VkFlags  VkAttachmentDescriptionFlags;
typedef VkFlags  VkStencilFaceFlags;
typedef VkFlags  VkCullModeFlags;
typedef VkFlags  VkDescriptorPoolCreateFlags;
typedef VkFlags  VkDescriptorPoolResetFlags;
typedef VkFlags  VkDependencyFlags;
typedef VkFlags  VkSubgroupFeatureFlags;
typedef VkFlags  VkIndirectCommandsLayoutUsageFlagsNV;
typedef VkFlags  VkIndirectStateFlagsNV;
typedef VkFlags  VkGeometryFlagsKHR;
#define VkGeometryFlagsNV VkGeometryFlagsKHR
typedef VkFlags VkGeometryInstanceFlagsKHR;
#define VkGeometryInstanceFlagsNV VkGeometryInstanceFlagsKHR
typedef VkFlags VkBuildAccelerationStructureFlagsKHR;
#define VkBuildAccelerationStructureFlagsNV VkBuildAccelerationStructureFlagsKHR
typedef VkFlags VkPrivateDataSlotCreateFlags;
#define VkPrivateDataSlotCreateFlagsEXT VkPrivateDataSlotCreateFlags
typedef VkFlags VkAccelerationStructureCreateFlagsKHR;
typedef VkFlags VkDescriptorUpdateTemplateCreateFlags;
#define VkDescriptorUpdateTemplateCreateFlagsKHR VkDescriptorUpdateTemplateCreateFlags
typedef VkFlags VkPipelineCreationFeedbackFlags;
#define VkPipelineCreationFeedbackFlagsEXT VkPipelineCreationFeedbackFlags
typedef VkFlags VkPerformanceCounterDescriptionFlagsKHR;
typedef VkFlags VkAcquireProfilingLockFlagsKHR;
typedef VkFlags VkSemaphoreWaitFlags;
#define VkSemaphoreWaitFlagsKHR VkSemaphoreWaitFlags
typedef VkFlags   VkPipelineCompilerControlFlagsAMD;
typedef VkFlags   VkShaderCorePropertiesFlagsAMD;
typedef VkFlags   VkDeviceDiagnosticsConfigFlagsNV;
typedef VkFlags64 VkAccessFlags2;
#define VkAccessFlags2KHR VkAccessFlags2
typedef VkFlags64 VkPipelineStageFlags2;
#define VkPipelineStageFlags2KHR VkPipelineStageFlags2
typedef VkFlags   VkAccelerationStructureMotionInfoFlagsNV;
typedef VkFlags   VkAccelerationStructureMotionInstanceFlagsNV;
typedef VkFlags64 VkFormatFeatureFlags2;
#define VkFormatFeatureFlags2KHR VkFormatFeatureFlags2
typedef VkFlags   VkRenderingFlags;
typedef VkFlags64 VkMemoryDecompressionMethodFlagsNV;
#define VkRenderingFlagsKHR VkRenderingFlags
typedef VkFlags   VkBuildMicromapFlagsEXT;
typedef VkFlags   VkMicromapCreateFlagsEXT;
typedef VkFlags   VkDirectDriverLoadingFlagsLUNARG;
typedef VkFlags64 VkPipelineCreateFlags2KHR;
typedef VkFlags64 VkBufferUsageFlags2KHR;
typedef VkFlags   VkCompositeAlphaFlagsKHR;
typedef VkFlags   VkDisplayPlaneAlphaFlagsKHR;
typedef VkFlags   VkSurfaceTransformFlagsKHR;
typedef VkFlags   VkSwapchainCreateFlagsKHR;
typedef VkFlags   VkDisplayModeCreateFlagsKHR;
typedef VkFlags   VkDisplaySurfaceCreateFlagsKHR;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef VkFlags VkAndroidSurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_VI_NN)
typedef VkFlags VkViSurfaceCreateFlagsNN;
#endif

#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
typedef VkFlags VkWaylandSurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkFlags VkWin32SurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_XLIB_KHR)
typedef VkFlags VkXlibSurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)
typedef VkFlags VkXcbSurfaceCreateFlagsKHR;
#endif

#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
typedef VkFlags VkDirectFBSurfaceCreateFlagsEXT;
#endif

#if defined(VK_USE_PLATFORM_IOS_MVK)
typedef VkFlags VkIOSSurfaceCreateFlagsMVK;
#endif

#if defined(VK_USE_PLATFORM_MACOS_MVK)
typedef VkFlags VkMacOSSurfaceCreateFlagsMVK;
#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef VkFlags VkMetalSurfaceCreateFlagsEXT;
#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkFlags VkImagePipeSurfaceCreateFlagsFUCHSIA;
#endif

#if defined(VK_USE_PLATFORM_GGP)
typedef VkFlags VkStreamDescriptorSurfaceCreateFlagsGGP;
#endif

typedef VkFlags VkHeadlessSurfaceCreateFlagsEXT;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef VkFlags VkScreenSurfaceCreateFlagsQNX;
#endif

typedef VkFlags VkPeerMemoryFeatureFlags;
#define VkPeerMemoryFeatureFlagsKHR VkPeerMemoryFeatureFlags
typedef VkFlags VkMemoryAllocateFlags;
#define VkMemoryAllocateFlagsKHR VkMemoryAllocateFlags
typedef VkFlags VkDeviceGroupPresentModeFlagsKHR;
typedef VkFlags VkDebugReportFlagsEXT;
typedef VkFlags VkCommandPoolTrimFlags;
#define VkCommandPoolTrimFlagsKHR VkCommandPoolTrimFlags
typedef VkFlags VkExternalMemoryHandleTypeFlagsNV;
typedef VkFlags VkExternalMemoryFeatureFlagsNV;
typedef VkFlags VkExternalMemoryHandleTypeFlags;
#define VkExternalMemoryHandleTypeFlagsKHR VkExternalMemoryHandleTypeFlags
typedef VkFlags VkExternalMemoryFeatureFlags;
#define VkExternalMemoryFeatureFlagsKHR VkExternalMemoryFeatureFlags
typedef VkFlags VkExternalSemaphoreHandleTypeFlags;
#define VkExternalSemaphoreHandleTypeFlagsKHR VkExternalSemaphoreHandleTypeFlags
typedef VkFlags VkExternalSemaphoreFeatureFlags;
#define VkExternalSemaphoreFeatureFlagsKHR VkExternalSemaphoreFeatureFlags
typedef VkFlags VkSemaphoreImportFlags;
#define VkSemaphoreImportFlagsKHR VkSemaphoreImportFlags
typedef VkFlags VkExternalFenceHandleTypeFlags;
#define VkExternalFenceHandleTypeFlagsKHR VkExternalFenceHandleTypeFlags
typedef VkFlags VkExternalFenceFeatureFlags;
#define VkExternalFenceFeatureFlagsKHR VkExternalFenceFeatureFlags
typedef VkFlags VkFenceImportFlags;
#define VkFenceImportFlagsKHR VkFenceImportFlags
typedef VkFlags VkSurfaceCounterFlagsEXT;
typedef VkFlags VkPipelineViewportSwizzleStateCreateFlagsNV;
typedef VkFlags VkPipelineDiscardRectangleStateCreateFlagsEXT;
typedef VkFlags VkPipelineCoverageToColorStateCreateFlagsNV;
typedef VkFlags VkPipelineCoverageModulationStateCreateFlagsNV;
typedef VkFlags VkPipelineCoverageReductionStateCreateFlagsNV;
typedef VkFlags VkValidationCacheCreateFlagsEXT;
typedef VkFlags VkDebugUtilsMessageSeverityFlagsEXT;
typedef VkFlags VkDebugUtilsMessageTypeFlagsEXT;
typedef VkFlags VkDebugUtilsMessengerCreateFlagsEXT;
typedef VkFlags VkDebugUtilsMessengerCallbackDataFlagsEXT;
typedef VkFlags VkDeviceMemoryReportFlagsEXT;
typedef VkFlags VkPipelineRasterizationConservativeStateCreateFlagsEXT;
typedef VkFlags VkDescriptorBindingFlags;
#define VkDescriptorBindingFlagsEXT VkDescriptorBindingFlags
typedef VkFlags VkConditionalRenderingFlagsEXT;
typedef VkFlags VkResolveModeFlags;
#define VkResolveModeFlagsKHR VkResolveModeFlags
typedef VkFlags VkPipelineRasterizationStateStreamCreateFlagsEXT;
typedef VkFlags VkPipelineRasterizationDepthClipStateCreateFlagsEXT;
typedef VkFlags VkToolPurposeFlags;
#define VkToolPurposeFlagsEXT VkToolPurposeFlags
typedef VkFlags VkSubmitFlags;
#define VkSubmitFlagsKHR VkSubmitFlags
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkFlags VkImageFormatConstraintsFlagsFUCHSIA;
#endif

typedef VkFlags VkHostImageCopyFlagsEXT;
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkFlags VkImageConstraintsInfoFlagsFUCHSIA;
#endif

typedef VkFlags VkGraphicsPipelineLibraryFlagsEXT;
typedef VkFlags VkImageCompressionFlagsEXT;
typedef VkFlags VkImageCompressionFixedRateFlagsEXT;
#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef VkFlags VkExportMetalObjectTypeFlagsEXT;
#endif

typedef VkFlags VkDeviceAddressBindingFlagsEXT;
typedef VkFlags VkOpticalFlowGridSizeFlagsNV;
typedef VkFlags VkOpticalFlowUsageFlagsNV;
typedef VkFlags VkOpticalFlowSessionCreateFlagsNV;
typedef VkFlags VkOpticalFlowExecuteFlagsNV;
typedef VkFlags VkFrameBoundaryFlagsEXT;
typedef VkFlags VkPresentScalingFlagsEXT;
typedef VkFlags VkPresentGravityFlagsEXT;
typedef VkFlags VkShaderCreateFlagsEXT;
typedef VkFlags VkVideoCodecOperationFlagsKHR;
typedef VkFlags VkVideoCapabilityFlagsKHR;
typedef VkFlags VkVideoSessionCreateFlagsKHR;
typedef VkFlags VkVideoSessionParametersCreateFlagsKHR;
typedef VkFlags VkVideoBeginCodingFlagsKHR;
typedef VkFlags VkVideoEndCodingFlagsKHR;
typedef VkFlags VkVideoCodingControlFlagsKHR;
typedef VkFlags VkVideoDecodeUsageFlagsKHR;
typedef VkFlags VkVideoDecodeCapabilityFlagsKHR;
typedef VkFlags VkVideoDecodeFlagsKHR;
typedef VkFlags VkVideoDecodeH264PictureLayoutFlagsKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeFlagsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeUsageFlagsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeContentFlagsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeCapabilityFlagsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeFeedbackFlagsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeRateControlFlagsKHR;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeRateControlModeFlagsKHR;
#endif

typedef VkFlags VkVideoChromaSubsamplingFlagsKHR;
typedef VkFlags VkVideoComponentBitDepthFlagsKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeH264CapabilityFlagsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeH264StdFlagsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeH264RateControlFlagsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeH265CapabilityFlagsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeH265StdFlagsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeH265RateControlFlagsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeH265CtbSizeFlagsEXT;
#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkFlags VkVideoEncodeH265TransformBlockSizeFlagsEXT;
#endif

typedef VkBool32(VKAPI_PTR *PFN_vkDebugReportCallbackEXT)(VkDebugReportFlagsEXT      flags,
                                                          VkDebugReportObjectTypeEXT objectType,
                                                          uint64_t                   object,
                                                          size_t                     location,
                                                          int32_t                    messageCode,
                                                          const char                *pLayerPrefix,
                                                          const char                *pMessage,
                                                          void                      *pUserData);
typedef struct VkDeviceQueueCreateInfo {
	VkStructureType          sType;
	const void              *pNext;
	VkDeviceQueueCreateFlags flags;
	uint32_t                 queueFamilyIndex;
	uint32_t                 queueCount;
	const float             *pQueuePriorities;
} VkDeviceQueueCreateInfo;

typedef struct VkInstanceCreateInfo {
	VkStructureType          sType;
	const void              *pNext;
	VkInstanceCreateFlags    flags;
	const VkApplicationInfo *pApplicationInfo;
	uint32_t                 enabledLayerCount;
	const char *const       *ppEnabledLayerNames;
	uint32_t                 enabledExtensionCount;
	const char *const       *ppEnabledExtensionNames;
} VkInstanceCreateInfo;

typedef struct VkQueueFamilyProperties {
	VkQueueFlags queueFlags;
	uint32_t     queueCount;
	uint32_t     timestampValidBits;
	VkExtent3D   minImageTransferGranularity;
} VkQueueFamilyProperties;

typedef struct VkMemoryAllocateInfo {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceSize    allocationSize;
	uint32_t        memoryTypeIndex;
} VkMemoryAllocateInfo;

typedef struct VkMemoryRequirements {
	VkDeviceSize size;
	VkDeviceSize alignment;
	uint32_t     memoryTypeBits;
} VkMemoryRequirements;

typedef struct VkSparseImageFormatProperties {
	VkImageAspectFlags       aspectMask;
	VkExtent3D               imageGranularity;
	VkSparseImageFormatFlags flags;
} VkSparseImageFormatProperties;

typedef struct VkSparseImageMemoryRequirements {
	VkSparseImageFormatProperties formatProperties;
	uint32_t                      imageMipTailFirstLod;
	VkDeviceSize                  imageMipTailSize;
	VkDeviceSize                  imageMipTailOffset;
	VkDeviceSize                  imageMipTailStride;
} VkSparseImageMemoryRequirements;

typedef struct VkMemoryType {
	VkMemoryPropertyFlags propertyFlags;
	uint32_t              heapIndex;
} VkMemoryType;

typedef struct VkMemoryHeap {
	VkDeviceSize      size;
	VkMemoryHeapFlags flags;
} VkMemoryHeap;

typedef struct VkMappedMemoryRange {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceMemory  memory;
	VkDeviceSize    offset;
	VkDeviceSize    size;
} VkMappedMemoryRange;

typedef struct VkFormatProperties {
	VkFormatFeatureFlags linearTilingFeatures;
	VkFormatFeatureFlags optimalTilingFeatures;
	VkFormatFeatureFlags bufferFeatures;
} VkFormatProperties;

typedef struct VkImageFormatProperties {
	VkExtent3D         maxExtent;
	uint32_t           maxMipLevels;
	uint32_t           maxArrayLayers;
	VkSampleCountFlags sampleCounts;
	VkDeviceSize       maxResourceSize;
} VkImageFormatProperties;

typedef struct VkDescriptorBufferInfo {
	VkBuffer     buffer;
	VkDeviceSize offset;
	VkDeviceSize range;
} VkDescriptorBufferInfo;

typedef struct VkWriteDescriptorSet {
	VkStructureType               sType;
	const void                   *pNext;
	VkDescriptorSet               dstSet;
	uint32_t                      dstBinding;
	uint32_t                      dstArrayElement;
	uint32_t                      descriptorCount;
	VkDescriptorType              descriptorType;
	const VkDescriptorImageInfo  *pImageInfo;
	const VkDescriptorBufferInfo *pBufferInfo;
	const VkBufferView           *pTexelBufferView;
} VkWriteDescriptorSet;

typedef struct VkBufferUsageFlags2CreateInfoKHR {
	VkStructureType        sType;
	const void            *pNext;
	VkBufferUsageFlags2KHR usage;
} VkBufferUsageFlags2CreateInfoKHR;

typedef struct VkBufferCreateInfo {
	VkStructureType     sType;
	const void         *pNext;
	VkBufferCreateFlags flags;
	VkDeviceSize        size;
	VkBufferUsageFlags  usage;
	VkSharingMode       sharingMode;
	uint32_t            queueFamilyIndexCount;
	const uint32_t     *pQueueFamilyIndices;
} VkBufferCreateInfo;

typedef struct VkBufferViewCreateInfo {
	VkStructureType         sType;
	const void             *pNext;
	VkBufferViewCreateFlags flags;
	VkBuffer                buffer;
	VkFormat                format;
	VkDeviceSize            offset;
	VkDeviceSize            range;
} VkBufferViewCreateInfo;

typedef struct VkImageSubresource {
	VkImageAspectFlags aspectMask;
	uint32_t           mipLevel;
	uint32_t           arrayLayer;
} VkImageSubresource;

typedef struct VkImageSubresourceLayers {
	VkImageAspectFlags aspectMask;
	uint32_t           mipLevel;
	uint32_t           baseArrayLayer;
	uint32_t           layerCount;
} VkImageSubresourceLayers;

typedef struct VkImageSubresourceRange {
	VkImageAspectFlags aspectMask;
	uint32_t           baseMipLevel;
	uint32_t           levelCount;
	uint32_t           baseArrayLayer;
	uint32_t           layerCount;
} VkImageSubresourceRange;

typedef struct VkMemoryBarrier {
	VkStructureType sType;
	const void     *pNext;
	VkAccessFlags   srcAccessMask;
	VkAccessFlags   dstAccessMask;
} VkMemoryBarrier;

typedef struct VkBufferMemoryBarrier {
	VkStructureType sType;
	const void     *pNext;
	VkAccessFlags   srcAccessMask;
	VkAccessFlags   dstAccessMask;
	uint32_t        srcQueueFamilyIndex;
	uint32_t        dstQueueFamilyIndex;
	VkBuffer        buffer;
	VkDeviceSize    offset;
	VkDeviceSize    size;
} VkBufferMemoryBarrier;

typedef struct VkImageMemoryBarrier {
	VkStructureType         sType;
	const void             *pNext;
	VkAccessFlags           srcAccessMask;
	VkAccessFlags           dstAccessMask;
	VkImageLayout           oldLayout;
	VkImageLayout           newLayout;
	uint32_t                srcQueueFamilyIndex;
	uint32_t                dstQueueFamilyIndex;
	VkImage                 image;
	VkImageSubresourceRange subresourceRange;
} VkImageMemoryBarrier;

typedef struct VkImageCreateInfo {
	VkStructureType       sType;
	const void           *pNext;
	VkImageCreateFlags    flags;
	VkImageType           imageType;
	VkFormat              format;
	VkExtent3D            extent;
	uint32_t              mipLevels;
	uint32_t              arrayLayers;
	VkSampleCountFlagBits samples;
	VkImageTiling         tiling;
	VkImageUsageFlags     usage;
	VkSharingMode         sharingMode;
	uint32_t              queueFamilyIndexCount;
	const uint32_t       *pQueueFamilyIndices;
	VkImageLayout         initialLayout;
} VkImageCreateInfo;

typedef struct VkSubresourceLayout {
	VkDeviceSize offset;
	VkDeviceSize size;
	VkDeviceSize rowPitch;
	VkDeviceSize arrayPitch;
	VkDeviceSize depthPitch;
} VkSubresourceLayout;

typedef struct VkImageViewCreateInfo {
	VkStructureType         sType;
	const void             *pNext;
	VkImageViewCreateFlags  flags;
	VkImage                 image;
	VkImageViewType         viewType;
	VkFormat                format;
	VkComponentMapping      components;
	VkImageSubresourceRange subresourceRange;
} VkImageViewCreateInfo;

typedef struct VkBufferCopy {
	VkDeviceSize srcOffset;
	VkDeviceSize dstOffset;
	VkDeviceSize size;
} VkBufferCopy;

typedef struct VkSparseMemoryBind {
	VkDeviceSize            resourceOffset;
	VkDeviceSize            size;
	VkDeviceMemory          memory;
	VkDeviceSize            memoryOffset;
	VkSparseMemoryBindFlags flags;
} VkSparseMemoryBind;

typedef struct VkSparseImageMemoryBind {
	VkImageSubresource      subresource;
	VkOffset3D              offset;
	VkExtent3D              extent;
	VkDeviceMemory          memory;
	VkDeviceSize            memoryOffset;
	VkSparseMemoryBindFlags flags;
} VkSparseImageMemoryBind;

typedef struct VkSparseBufferMemoryBindInfo {
	VkBuffer                  buffer;
	uint32_t                  bindCount;
	const VkSparseMemoryBind *pBinds;
} VkSparseBufferMemoryBindInfo;

typedef struct VkSparseImageOpaqueMemoryBindInfo {
	VkImage                   image;
	uint32_t                  bindCount;
	const VkSparseMemoryBind *pBinds;
} VkSparseImageOpaqueMemoryBindInfo;

typedef struct VkSparseImageMemoryBindInfo {
	VkImage                        image;
	uint32_t                       bindCount;
	const VkSparseImageMemoryBind *pBinds;
} VkSparseImageMemoryBindInfo;

typedef struct VkBindSparseInfo {
	VkStructureType                          sType;
	const void                              *pNext;
	uint32_t                                 waitSemaphoreCount;
	const VkSemaphore                       *pWaitSemaphores;
	uint32_t                                 bufferBindCount;
	const VkSparseBufferMemoryBindInfo      *pBufferBinds;
	uint32_t                                 imageOpaqueBindCount;
	const VkSparseImageOpaqueMemoryBindInfo *pImageOpaqueBinds;
	uint32_t                                 imageBindCount;
	const VkSparseImageMemoryBindInfo       *pImageBinds;
	uint32_t                                 signalSemaphoreCount;
	const VkSemaphore                       *pSignalSemaphores;
} VkBindSparseInfo;

typedef struct VkImageCopy {
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D               srcOffset;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D               dstOffset;
	VkExtent3D               extent;
} VkImageCopy;

typedef struct VkImageBlit {
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D               srcOffsets[2];
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D               dstOffsets[2];
} VkImageBlit;

typedef struct VkBufferImageCopy {
	VkDeviceSize             bufferOffset;
	uint32_t                 bufferRowLength;
	uint32_t                 bufferImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D               imageOffset;
	VkExtent3D               imageExtent;
} VkBufferImageCopy;

typedef struct VkCopyMemoryIndirectCommandNV {
	VkDeviceAddress srcAddress;
	VkDeviceAddress dstAddress;
	VkDeviceSize    size;
} VkCopyMemoryIndirectCommandNV;

typedef struct VkCopyMemoryToImageIndirectCommandNV {
	VkDeviceAddress          srcAddress;
	uint32_t                 bufferRowLength;
	uint32_t                 bufferImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D               imageOffset;
	VkExtent3D               imageExtent;
} VkCopyMemoryToImageIndirectCommandNV;

typedef struct VkImageResolve {
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D               srcOffset;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D               dstOffset;
	VkExtent3D               extent;
} VkImageResolve;

typedef struct VkShaderModuleCreateInfo {
	VkStructureType           sType;
	const void               *pNext;
	VkShaderModuleCreateFlags flags;
	size_t                    codeSize;
	const uint32_t           *pCode;
} VkShaderModuleCreateInfo;

typedef struct VkDescriptorSetLayoutBinding {
	uint32_t           binding;
	VkDescriptorType   descriptorType;
	uint32_t           descriptorCount;
	VkShaderStageFlags stageFlags;
	const VkSampler   *pImmutableSamplers;
} VkDescriptorSetLayoutBinding;

typedef struct VkDescriptorSetLayoutCreateInfo {
	VkStructureType                     sType;
	const void                         *pNext;
	VkDescriptorSetLayoutCreateFlags    flags;
	uint32_t                            bindingCount;
	const VkDescriptorSetLayoutBinding *pBindings;
} VkDescriptorSetLayoutCreateInfo;

typedef struct VkDescriptorPoolCreateInfo {
	VkStructureType             sType;
	const void                 *pNext;
	VkDescriptorPoolCreateFlags flags;
	uint32_t                    maxSets;
	uint32_t                    poolSizeCount;
	const VkDescriptorPoolSize *pPoolSizes;
} VkDescriptorPoolCreateInfo;

typedef struct VkPipelineShaderStageCreateInfo {
	VkStructureType                  sType;
	const void                      *pNext;
	VkPipelineShaderStageCreateFlags flags;
	VkShaderStageFlagBits            stage;
	VkShaderModule                   module;
	const char                      *pName;
	const VkSpecializationInfo      *pSpecializationInfo;
} VkPipelineShaderStageCreateInfo;

typedef struct VkComputePipelineCreateInfo {
	VkStructureType                 sType;
	const void                     *pNext;
	VkPipelineCreateFlags           flags;
	VkPipelineShaderStageCreateInfo stage;
	VkPipelineLayout                layout;
	VkPipeline                      basePipelineHandle;
	int32_t                         basePipelineIndex;
} VkComputePipelineCreateInfo;

typedef struct VkComputePipelineIndirectBufferInfoNV {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceAddress deviceAddress;
	VkDeviceSize    size;
	VkDeviceAddress pipelineDeviceAddressCaptureReplay;
} VkComputePipelineIndirectBufferInfoNV;

typedef struct VkPipelineCreateFlags2CreateInfoKHR {
	VkStructureType           sType;
	const void               *pNext;
	VkPipelineCreateFlags2KHR flags;
} VkPipelineCreateFlags2CreateInfoKHR;

typedef struct VkPipelineVertexInputStateCreateInfo {
	VkStructureType                          sType;
	const void                              *pNext;
	VkPipelineVertexInputStateCreateFlags    flags;
	uint32_t                                 vertexBindingDescriptionCount;
	const VkVertexInputBindingDescription   *pVertexBindingDescriptions;
	uint32_t                                 vertexAttributeDescriptionCount;
	const VkVertexInputAttributeDescription *pVertexAttributeDescriptions;
} VkPipelineVertexInputStateCreateInfo;

typedef struct VkPipelineInputAssemblyStateCreateInfo {
	VkStructureType                         sType;
	const void                             *pNext;
	VkPipelineInputAssemblyStateCreateFlags flags;
	VkPrimitiveTopology                     topology;
	VkBool32                                primitiveRestartEnable;
} VkPipelineInputAssemblyStateCreateInfo;

typedef struct VkPipelineTessellationStateCreateInfo {
	VkStructureType                        sType;
	const void                            *pNext;
	VkPipelineTessellationStateCreateFlags flags;
	uint32_t                               patchControlPoints;
} VkPipelineTessellationStateCreateInfo;

typedef struct VkPipelineViewportStateCreateInfo {
	VkStructureType                    sType;
	const void                        *pNext;
	VkPipelineViewportStateCreateFlags flags;
	uint32_t                           viewportCount;
	const VkViewport                  *pViewports;
	uint32_t                           scissorCount;
	const VkRect2D                    *pScissors;
} VkPipelineViewportStateCreateInfo;

typedef struct VkPipelineRasterizationStateCreateInfo {
	VkStructureType                         sType;
	const void                             *pNext;
	VkPipelineRasterizationStateCreateFlags flags;
	VkBool32                                depthClampEnable;
	VkBool32                                rasterizerDiscardEnable;
	VkPolygonMode                           polygonMode;
	VkCullModeFlags                         cullMode;
	VkFrontFace                             frontFace;
	VkBool32                                depthBiasEnable;
	float                                   depthBiasConstantFactor;
	float                                   depthBiasClamp;
	float                                   depthBiasSlopeFactor;
	float                                   lineWidth;
} VkPipelineRasterizationStateCreateInfo;

typedef struct VkPipelineMultisampleStateCreateInfo {
	VkStructureType                       sType;
	const void                           *pNext;
	VkPipelineMultisampleStateCreateFlags flags;
	VkSampleCountFlagBits                 rasterizationSamples;
	VkBool32                              sampleShadingEnable;
	float                                 minSampleShading;
	const VkSampleMask                   *pSampleMask;
	VkBool32                              alphaToCoverageEnable;
	VkBool32                              alphaToOneEnable;
} VkPipelineMultisampleStateCreateInfo;

typedef struct VkPipelineColorBlendAttachmentState {
	VkBool32              blendEnable;
	VkBlendFactor         srcColorBlendFactor;
	VkBlendFactor         dstColorBlendFactor;
	VkBlendOp             colorBlendOp;
	VkBlendFactor         srcAlphaBlendFactor;
	VkBlendFactor         dstAlphaBlendFactor;
	VkBlendOp             alphaBlendOp;
	VkColorComponentFlags colorWriteMask;
} VkPipelineColorBlendAttachmentState;

typedef struct VkPipelineColorBlendStateCreateInfo {
	VkStructureType                            sType;
	const void                                *pNext;
	VkPipelineColorBlendStateCreateFlags       flags;
	VkBool32                                   logicOpEnable;
	VkLogicOp                                  logicOp;
	uint32_t                                   attachmentCount;
	const VkPipelineColorBlendAttachmentState *pAttachments;
	float                                      blendConstants[4];
} VkPipelineColorBlendStateCreateInfo;

typedef struct VkPipelineDynamicStateCreateInfo {
	VkStructureType                   sType;
	const void                       *pNext;
	VkPipelineDynamicStateCreateFlags flags;
	uint32_t                          dynamicStateCount;
	const VkDynamicState             *pDynamicStates;
} VkPipelineDynamicStateCreateInfo;

typedef struct VkPipelineDepthStencilStateCreateInfo {
	VkStructureType                        sType;
	const void                            *pNext;
	VkPipelineDepthStencilStateCreateFlags flags;
	VkBool32                               depthTestEnable;
	VkBool32                               depthWriteEnable;
	VkCompareOp                            depthCompareOp;
	VkBool32                               depthBoundsTestEnable;
	VkBool32                               stencilTestEnable;
	VkStencilOpState                       front;
	VkStencilOpState                       back;
	float                                  minDepthBounds;
	float                                  maxDepthBounds;
} VkPipelineDepthStencilStateCreateInfo;

typedef struct VkGraphicsPipelineCreateInfo {
	VkStructureType                               sType;
	const void                                   *pNext;
	VkPipelineCreateFlags                         flags;
	uint32_t                                      stageCount;
	const VkPipelineShaderStageCreateInfo        *pStages;
	const VkPipelineVertexInputStateCreateInfo   *pVertexInputState;
	const VkPipelineInputAssemblyStateCreateInfo *pInputAssemblyState;
	const VkPipelineTessellationStateCreateInfo  *pTessellationState;
	const VkPipelineViewportStateCreateInfo      *pViewportState;
	const VkPipelineRasterizationStateCreateInfo *pRasterizationState;
	const VkPipelineMultisampleStateCreateInfo   *pMultisampleState;
	const VkPipelineDepthStencilStateCreateInfo  *pDepthStencilState;
	const VkPipelineColorBlendStateCreateInfo    *pColorBlendState;
	const VkPipelineDynamicStateCreateInfo       *pDynamicState;
	VkPipelineLayout                              layout;
	VkRenderPass                                  renderPass;
	uint32_t                                      subpass;
	VkPipeline                                    basePipelineHandle;
	int32_t                                       basePipelineIndex;
} VkGraphicsPipelineCreateInfo;

typedef struct VkPipelineCacheCreateInfo {
	VkStructureType            sType;
	const void                *pNext;
	VkPipelineCacheCreateFlags flags;
	size_t                     initialDataSize;
	const void                *pInitialData;
} VkPipelineCacheCreateInfo;

typedef struct VkPushConstantRange {
	VkShaderStageFlags stageFlags;
	uint32_t           offset;
	uint32_t           size;
} VkPushConstantRange;

typedef struct VkPipelineLayoutCreateInfo {
	VkStructureType              sType;
	const void                  *pNext;
	VkPipelineLayoutCreateFlags  flags;
	uint32_t                     setLayoutCount;
	const VkDescriptorSetLayout *pSetLayouts;
	uint32_t                     pushConstantRangeCount;
	const VkPushConstantRange   *pPushConstantRanges;
} VkPipelineLayoutCreateInfo;

typedef struct VkSamplerCreateInfo {
	VkStructureType      sType;
	const void          *pNext;
	VkSamplerCreateFlags flags;
	VkFilter             magFilter;
	VkFilter             minFilter;
	VkSamplerMipmapMode  mipmapMode;
	VkSamplerAddressMode addressModeU;
	VkSamplerAddressMode addressModeV;
	VkSamplerAddressMode addressModeW;
	float                mipLodBias;
	VkBool32             anisotropyEnable;
	float                maxAnisotropy;
	VkBool32             compareEnable;
	VkCompareOp          compareOp;
	float                minLod;
	float                maxLod;
	VkBorderColor        borderColor;
	VkBool32             unnormalizedCoordinates;
} VkSamplerCreateInfo;

typedef struct VkCommandPoolCreateInfo {
	VkStructureType          sType;
	const void              *pNext;
	VkCommandPoolCreateFlags flags;
	uint32_t                 queueFamilyIndex;
} VkCommandPoolCreateInfo;

typedef struct VkCommandBufferInheritanceInfo {
	VkStructureType               sType;
	const void                   *pNext;
	VkRenderPass                  renderPass;
	uint32_t                      subpass;
	VkFramebuffer                 framebuffer;
	VkBool32                      occlusionQueryEnable;
	VkQueryControlFlags           queryFlags;
	VkQueryPipelineStatisticFlags pipelineStatistics;
} VkCommandBufferInheritanceInfo;

typedef struct VkCommandBufferBeginInfo {
	VkStructureType                       sType;
	const void                           *pNext;
	VkCommandBufferUsageFlags             flags;
	const VkCommandBufferInheritanceInfo *pInheritanceInfo;
} VkCommandBufferBeginInfo;

typedef struct VkRenderPassBeginInfo {
	VkStructureType     sType;
	const void         *pNext;
	VkRenderPass        renderPass;
	VkFramebuffer       framebuffer;
	VkRect2D            renderArea;
	uint32_t            clearValueCount;
	const VkClearValue *pClearValues;
} VkRenderPassBeginInfo;

typedef struct VkClearAttachment {
	VkImageAspectFlags aspectMask;
	uint32_t           colorAttachment;
	VkClearValue       clearValue;
} VkClearAttachment;

typedef struct VkAttachmentDescription {
	VkAttachmentDescriptionFlags flags;
	VkFormat                     format;
	VkSampleCountFlagBits        samples;
	VkAttachmentLoadOp           loadOp;
	VkAttachmentStoreOp          storeOp;
	VkAttachmentLoadOp           stencilLoadOp;
	VkAttachmentStoreOp          stencilStoreOp;
	VkImageLayout                initialLayout;
	VkImageLayout                finalLayout;
} VkAttachmentDescription;

typedef struct VkSubpassDescription {
	VkSubpassDescriptionFlags    flags;
	VkPipelineBindPoint          pipelineBindPoint;
	uint32_t                     inputAttachmentCount;
	const VkAttachmentReference *pInputAttachments;
	uint32_t                     colorAttachmentCount;
	const VkAttachmentReference *pColorAttachments;
	const VkAttachmentReference *pResolveAttachments;
	const VkAttachmentReference *pDepthStencilAttachment;
	uint32_t                     preserveAttachmentCount;
	const uint32_t              *pPreserveAttachments;
} VkSubpassDescription;

typedef struct VkSubpassDependency {
	uint32_t             srcSubpass;
	uint32_t             dstSubpass;
	VkPipelineStageFlags srcStageMask;
	VkPipelineStageFlags dstStageMask;
	VkAccessFlags        srcAccessMask;
	VkAccessFlags        dstAccessMask;
	VkDependencyFlags    dependencyFlags;
} VkSubpassDependency;

typedef struct VkRenderPassCreateInfo {
	VkStructureType                sType;
	const void                    *pNext;
	VkRenderPassCreateFlags        flags;
	uint32_t                       attachmentCount;
	const VkAttachmentDescription *pAttachments;
	uint32_t                       subpassCount;
	const VkSubpassDescription    *pSubpasses;
	uint32_t                       dependencyCount;
	const VkSubpassDependency     *pDependencies;
} VkRenderPassCreateInfo;

typedef struct VkEventCreateInfo {
	VkStructureType    sType;
	const void        *pNext;
	VkEventCreateFlags flags;
} VkEventCreateInfo;

typedef struct VkFenceCreateInfo {
	VkStructureType    sType;
	const void        *pNext;
	VkFenceCreateFlags flags;
} VkFenceCreateInfo;

typedef struct VkPhysicalDeviceFeatures {
	VkBool32 robustBufferAccess;
	VkBool32 fullDrawIndexUint32;
	VkBool32 imageCubeArray;
	VkBool32 independentBlend;
	VkBool32 geometryShader;
	VkBool32 tessellationShader;
	VkBool32 sampleRateShading;
	VkBool32 dualSrcBlend;
	VkBool32 logicOp;
	VkBool32 multiDrawIndirect;
	VkBool32 drawIndirectFirstInstance;
	VkBool32 depthClamp;
	VkBool32 depthBiasClamp;
	VkBool32 fillModeNonSolid;
	VkBool32 depthBounds;
	VkBool32 wideLines;
	VkBool32 largePoints;
	VkBool32 alphaToOne;
	VkBool32 multiViewport;
	VkBool32 samplerAnisotropy;
	VkBool32 textureCompressionETC2;
	VkBool32 textureCompressionASTC_LDR;
	VkBool32 textureCompressionBC;
	VkBool32 occlusionQueryPrecise;
	VkBool32 pipelineStatisticsQuery;
	VkBool32 vertexPipelineStoresAndAtomics;
	VkBool32 fragmentStoresAndAtomics;
	VkBool32 shaderTessellationAndGeometryPointSize;
	VkBool32 shaderImageGatherExtended;
	VkBool32 shaderStorageImageExtendedFormats;
	VkBool32 shaderStorageImageMultisample;
	VkBool32 shaderStorageImageReadWithoutFormat;
	VkBool32 shaderStorageImageWriteWithoutFormat;
	VkBool32 shaderUniformBufferArrayDynamicIndexing;
	VkBool32 shaderSampledImageArrayDynamicIndexing;
	VkBool32 shaderStorageBufferArrayDynamicIndexing;
	VkBool32 shaderStorageImageArrayDynamicIndexing;
	VkBool32 shaderClipDistance;
	VkBool32 shaderCullDistance;
	VkBool32 shaderFloat64;
	VkBool32 shaderInt64;
	VkBool32 shaderInt16;
	VkBool32 shaderResourceResidency;
	VkBool32 shaderResourceMinLod;
	VkBool32 sparseBinding;
	VkBool32 sparseResidencyBuffer;
	VkBool32 sparseResidencyImage2D;
	VkBool32 sparseResidencyImage3D;
	VkBool32 sparseResidency2Samples;
	VkBool32 sparseResidency4Samples;
	VkBool32 sparseResidency8Samples;
	VkBool32 sparseResidency16Samples;
	VkBool32 sparseResidencyAliased;
	VkBool32 variableMultisampleRate;
	VkBool32 inheritedQueries;
} VkPhysicalDeviceFeatures;

typedef struct VkPhysicalDeviceSparseProperties {
	VkBool32 residencyStandard2DBlockShape;
	VkBool32 residencyStandard2DMultisampleBlockShape;
	VkBool32 residencyStandard3DBlockShape;
	VkBool32 residencyAlignedMipSize;
	VkBool32 residencyNonResidentStrict;
} VkPhysicalDeviceSparseProperties;

typedef struct VkPhysicalDeviceLimits {
	uint32_t           maxImageDimension1D;
	uint32_t           maxImageDimension2D;
	uint32_t           maxImageDimension3D;
	uint32_t           maxImageDimensionCube;
	uint32_t           maxImageArrayLayers;
	uint32_t           maxTexelBufferElements;
	uint32_t           maxUniformBufferRange;
	uint32_t           maxStorageBufferRange;
	uint32_t           maxPushConstantsSize;
	uint32_t           maxMemoryAllocationCount;
	uint32_t           maxSamplerAllocationCount;
	VkDeviceSize       bufferImageGranularity;
	VkDeviceSize       sparseAddressSpaceSize;
	uint32_t           maxBoundDescriptorSets;
	uint32_t           maxPerStageDescriptorSamplers;
	uint32_t           maxPerStageDescriptorUniformBuffers;
	uint32_t           maxPerStageDescriptorStorageBuffers;
	uint32_t           maxPerStageDescriptorSampledImages;
	uint32_t           maxPerStageDescriptorStorageImages;
	uint32_t           maxPerStageDescriptorInputAttachments;
	uint32_t           maxPerStageResources;
	uint32_t           maxDescriptorSetSamplers;
	uint32_t           maxDescriptorSetUniformBuffers;
	uint32_t           maxDescriptorSetUniformBuffersDynamic;
	uint32_t           maxDescriptorSetStorageBuffers;
	uint32_t           maxDescriptorSetStorageBuffersDynamic;
	uint32_t           maxDescriptorSetSampledImages;
	uint32_t           maxDescriptorSetStorageImages;
	uint32_t           maxDescriptorSetInputAttachments;
	uint32_t           maxVertexInputAttributes;
	uint32_t           maxVertexInputBindings;
	uint32_t           maxVertexInputAttributeOffset;
	uint32_t           maxVertexInputBindingStride;
	uint32_t           maxVertexOutputComponents;
	uint32_t           maxTessellationGenerationLevel;
	uint32_t           maxTessellationPatchSize;
	uint32_t           maxTessellationControlPerVertexInputComponents;
	uint32_t           maxTessellationControlPerVertexOutputComponents;
	uint32_t           maxTessellationControlPerPatchOutputComponents;
	uint32_t           maxTessellationControlTotalOutputComponents;
	uint32_t           maxTessellationEvaluationInputComponents;
	uint32_t           maxTessellationEvaluationOutputComponents;
	uint32_t           maxGeometryShaderInvocations;
	uint32_t           maxGeometryInputComponents;
	uint32_t           maxGeometryOutputComponents;
	uint32_t           maxGeometryOutputVertices;
	uint32_t           maxGeometryTotalOutputComponents;
	uint32_t           maxFragmentInputComponents;
	uint32_t           maxFragmentOutputAttachments;
	uint32_t           maxFragmentDualSrcAttachments;
	uint32_t           maxFragmentCombinedOutputResources;
	uint32_t           maxComputeSharedMemorySize;
	uint32_t           maxComputeWorkGroupCount[3];
	uint32_t           maxComputeWorkGroupInvocations;
	uint32_t           maxComputeWorkGroupSize[3];
	uint32_t           subPixelPrecisionBits;
	uint32_t           subTexelPrecisionBits;
	uint32_t           mipmapPrecisionBits;
	uint32_t           maxDrawIndexedIndexValue;
	uint32_t           maxDrawIndirectCount;
	float              maxSamplerLodBias;
	float              maxSamplerAnisotropy;
	uint32_t           maxViewports;
	uint32_t           maxViewportDimensions[2];
	float              viewportBoundsRange[2];
	uint32_t           viewportSubPixelBits;
	size_t             minMemoryMapAlignment;
	VkDeviceSize       minTexelBufferOffsetAlignment;
	VkDeviceSize       minUniformBufferOffsetAlignment;
	VkDeviceSize       minStorageBufferOffsetAlignment;
	int32_t            minTexelOffset;
	uint32_t           maxTexelOffset;
	int32_t            minTexelGatherOffset;
	uint32_t           maxTexelGatherOffset;
	float              minInterpolationOffset;
	float              maxInterpolationOffset;
	uint32_t           subPixelInterpolationOffsetBits;
	uint32_t           maxFramebufferWidth;
	uint32_t           maxFramebufferHeight;
	uint32_t           maxFramebufferLayers;
	VkSampleCountFlags framebufferColorSampleCounts;
	VkSampleCountFlags framebufferDepthSampleCounts;
	VkSampleCountFlags framebufferStencilSampleCounts;
	VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
	uint32_t           maxColorAttachments;
	VkSampleCountFlags sampledImageColorSampleCounts;
	VkSampleCountFlags sampledImageIntegerSampleCounts;
	VkSampleCountFlags sampledImageDepthSampleCounts;
	VkSampleCountFlags sampledImageStencilSampleCounts;
	VkSampleCountFlags storageImageSampleCounts;
	uint32_t           maxSampleMaskWords;
	VkBool32           timestampComputeAndGraphics;
	float              timestampPeriod;
	uint32_t           maxClipDistances;
	uint32_t           maxCullDistances;
	uint32_t           maxCombinedClipAndCullDistances;
	uint32_t           discreteQueuePriorities;
	float              pointSizeRange[2];
	float              lineWidthRange[2];
	float              pointSizeGranularity;
	float              lineWidthGranularity;
	VkBool32           strictLines;
	VkBool32           standardSampleLocations;
	VkDeviceSize       optimalBufferCopyOffsetAlignment;
	VkDeviceSize       optimalBufferCopyRowPitchAlignment;
	VkDeviceSize       nonCoherentAtomSize;
} VkPhysicalDeviceLimits;

typedef struct VkSemaphoreCreateInfo {
	VkStructureType        sType;
	const void            *pNext;
	VkSemaphoreCreateFlags flags;
} VkSemaphoreCreateInfo;

typedef struct VkQueryPoolCreateInfo {
	VkStructureType               sType;
	const void                   *pNext;
	VkQueryPoolCreateFlags        flags;
	VkQueryType                   queryType;
	uint32_t                      queryCount;
	VkQueryPipelineStatisticFlags pipelineStatistics;
} VkQueryPoolCreateInfo;

typedef struct VkFramebufferCreateInfo {
	VkStructureType          sType;
	const void              *pNext;
	VkFramebufferCreateFlags flags;
	VkRenderPass             renderPass;
	uint32_t                 attachmentCount;
	const VkImageView       *pAttachments;
	uint32_t                 width;
	uint32_t                 height;
	uint32_t                 layers;
} VkFramebufferCreateInfo;

typedef struct VkSubmitInfo {
	VkStructureType             sType;
	const void                 *pNext;
	uint32_t                    waitSemaphoreCount;
	const VkSemaphore          *pWaitSemaphores;
	const VkPipelineStageFlags *pWaitDstStageMask;
	uint32_t                    commandBufferCount;
	const VkCommandBuffer      *pCommandBuffers;
	uint32_t                    signalSemaphoreCount;
	const VkSemaphore          *pSignalSemaphores;
} VkSubmitInfo;

typedef struct VkDisplayPropertiesKHR {
	VkDisplayKHR               display;
	const char                *displayName;
	VkExtent2D                 physicalDimensions;
	VkExtent2D                 physicalResolution;
	VkSurfaceTransformFlagsKHR supportedTransforms;
	VkBool32                   planeReorderPossible;
	VkBool32                   persistentContent;
} VkDisplayPropertiesKHR;

typedef struct VkDisplayModeCreateInfoKHR {
	VkStructureType             sType;
	const void                 *pNext;
	VkDisplayModeCreateFlagsKHR flags;
	VkDisplayModeParametersKHR  parameters;
} VkDisplayModeCreateInfoKHR;

typedef struct VkDisplayPlaneCapabilitiesKHR {
	VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
	VkOffset2D                  minSrcPosition;
	VkOffset2D                  maxSrcPosition;
	VkExtent2D                  minSrcExtent;
	VkExtent2D                  maxSrcExtent;
	VkOffset2D                  minDstPosition;
	VkOffset2D                  maxDstPosition;
	VkExtent2D                  minDstExtent;
	VkExtent2D                  maxDstExtent;
} VkDisplayPlaneCapabilitiesKHR;

typedef struct VkDisplaySurfaceCreateInfoKHR {
	VkStructureType                sType;
	const void                    *pNext;
	VkDisplaySurfaceCreateFlagsKHR flags;
	VkDisplayModeKHR               displayMode;
	uint32_t                       planeIndex;
	uint32_t                       planeStackIndex;
	VkSurfaceTransformFlagBitsKHR  transform;
	float                          globalAlpha;
	VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
	VkExtent2D                     imageExtent;
} VkDisplaySurfaceCreateInfoKHR;

typedef struct VkDisplayPresentInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	VkRect2D        srcRect;
	VkRect2D        dstRect;
	VkBool32        persistent;
} VkDisplayPresentInfoKHR;

typedef struct VkSurfaceCapabilitiesKHR {
	uint32_t                      minImageCount;
	uint32_t                      maxImageCount;
	VkExtent2D                    currentExtent;
	VkExtent2D                    minImageExtent;
	VkExtent2D                    maxImageExtent;
	uint32_t                      maxImageArrayLayers;
	VkSurfaceTransformFlagsKHR    supportedTransforms;
	VkSurfaceTransformFlagBitsKHR currentTransform;
	VkCompositeAlphaFlagsKHR      supportedCompositeAlpha;
	VkImageUsageFlags             supportedUsageFlags;
} VkSurfaceCapabilitiesKHR;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidSurfaceCreateInfoKHR {
	VkStructureType                sType;
	const void                    *pNext;
	VkAndroidSurfaceCreateFlagsKHR flags;
	struct ANativeWindow          *window;
} VkAndroidSurfaceCreateInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_VI_NN)
typedef struct VkViSurfaceCreateInfoNN {
	VkStructureType          sType;
	const void              *pNext;
	VkViSurfaceCreateFlagsNN flags;
	void                    *window;
} VkViSurfaceCreateInfoNN;

#endif

#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
typedef struct VkWaylandSurfaceCreateInfoKHR {
	VkStructureType                sType;
	const void                    *pNext;
	VkWaylandSurfaceCreateFlagsKHR flags;
	struct wl_display             *display;
	struct wl_surface             *surface;
} VkWaylandSurfaceCreateInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkWin32SurfaceCreateInfoKHR {
	VkStructureType              sType;
	const void                  *pNext;
	VkWin32SurfaceCreateFlagsKHR flags;
	HINSTANCE                    hinstance;
	HWND                         hwnd;
} VkWin32SurfaceCreateInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_XLIB_KHR)
typedef struct VkXlibSurfaceCreateInfoKHR {
	VkStructureType             sType;
	const void                 *pNext;
	VkXlibSurfaceCreateFlagsKHR flags;
	Display                    *dpy;
	Window                      window;
} VkXlibSurfaceCreateInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)
typedef struct VkXcbSurfaceCreateInfoKHR {
	VkStructureType            sType;
	const void                *pNext;
	VkXcbSurfaceCreateFlagsKHR flags;
	xcb_connection_t          *connection;
	xcb_window_t               window;
} VkXcbSurfaceCreateInfoKHR;

#endif

#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
typedef struct VkDirectFBSurfaceCreateInfoEXT {
	VkStructureType                 sType;
	const void                     *pNext;
	VkDirectFBSurfaceCreateFlagsEXT flags;
	IDirectFB                      *dfb;
	IDirectFBSurface               *surface;
} VkDirectFBSurfaceCreateInfoEXT;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImagePipeSurfaceCreateInfoFUCHSIA {
	VkStructureType                      sType;
	const void                          *pNext;
	VkImagePipeSurfaceCreateFlagsFUCHSIA flags;
	zx_handle_t                          imagePipeHandle;
} VkImagePipeSurfaceCreateInfoFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_GGP)
typedef struct VkStreamDescriptorSurfaceCreateInfoGGP {
	VkStructureType                         sType;
	const void                             *pNext;
	VkStreamDescriptorSurfaceCreateFlagsGGP flags;
	GgpStreamDescriptor                     streamDescriptor;
} VkStreamDescriptorSurfaceCreateInfoGGP;

#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkScreenSurfaceCreateInfoQNX {
	VkStructureType               sType;
	const void                   *pNext;
	VkScreenSurfaceCreateFlagsQNX flags;
	struct _screen_context       *context;
	struct _screen_window        *window;
} VkScreenSurfaceCreateInfoQNX;

#endif

typedef struct VkSwapchainCreateInfoKHR {
	VkStructureType               sType;
	const void                   *pNext;
	VkSwapchainCreateFlagsKHR     flags;
	VkSurfaceKHR                  surface;
	uint32_t                      minImageCount;
	VkFormat                      imageFormat;
	VkColorSpaceKHR               imageColorSpace;
	VkExtent2D                    imageExtent;
	uint32_t                      imageArrayLayers;
	VkImageUsageFlags             imageUsage;
	VkSharingMode                 imageSharingMode;
	uint32_t                      queueFamilyIndexCount;
	const uint32_t               *pQueueFamilyIndices;
	VkSurfaceTransformFlagBitsKHR preTransform;
	VkCompositeAlphaFlagBitsKHR   compositeAlpha;
	VkPresentModeKHR              presentMode;
	VkBool32                      clipped;
	VkSwapchainKHR                oldSwapchain;
} VkSwapchainCreateInfoKHR;

typedef struct VkDebugReportCallbackCreateInfoEXT {
	VkStructureType              sType;
	const void                  *pNext;
	VkDebugReportFlagsEXT        flags;
	PFN_vkDebugReportCallbackEXT pfnCallback;
	void                        *pUserData;
} VkDebugReportCallbackCreateInfoEXT;

typedef struct VkDedicatedAllocationImageCreateInfoNV {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        dedicatedAllocation;
} VkDedicatedAllocationImageCreateInfoNV;

typedef struct VkDedicatedAllocationBufferCreateInfoNV {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        dedicatedAllocation;
} VkDedicatedAllocationBufferCreateInfoNV;

typedef struct VkExternalImageFormatPropertiesNV {
	VkImageFormatProperties           imageFormatProperties;
	VkExternalMemoryFeatureFlagsNV    externalMemoryFeatures;
	VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
	VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
} VkExternalImageFormatPropertiesNV;

typedef struct VkExternalMemoryImageCreateInfoNV {
	VkStructureType                   sType;
	const void                       *pNext;
	VkExternalMemoryHandleTypeFlagsNV handleTypes;
} VkExternalMemoryImageCreateInfoNV;

typedef struct VkExportMemoryAllocateInfoNV {
	VkStructureType                   sType;
	const void                       *pNext;
	VkExternalMemoryHandleTypeFlagsNV handleTypes;
} VkExportMemoryAllocateInfoNV;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkImportMemoryWin32HandleInfoNV {
	VkStructureType                   sType;
	const void                       *pNext;
	VkExternalMemoryHandleTypeFlagsNV handleType;
	HANDLE                            handle;
} VkImportMemoryWin32HandleInfoNV;

#endif

typedef struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        deviceGeneratedCommands;
} VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;

typedef struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        deviceGeneratedCompute;
	VkBool32        deviceGeneratedComputePipelines;
	VkBool32        deviceGeneratedComputeCaptureReplay;
} VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;

typedef struct VkPrivateDataSlotCreateInfo {
	VkStructureType              sType;
	const void                  *pNext;
	VkPrivateDataSlotCreateFlags flags;
} VkPrivateDataSlotCreateInfo;

typedef struct VkPrivateDataSlotCreateInfo VkPrivateDataSlotCreateInfoEXT;

typedef struct VkPhysicalDevicePrivateDataFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        privateData;
} VkPhysicalDevicePrivateDataFeatures;

typedef struct VkPhysicalDevicePrivateDataFeatures VkPhysicalDevicePrivateDataFeaturesEXT;

typedef struct VkGraphicsShaderGroupCreateInfoNV {
	VkStructureType                              sType;
	const void                                  *pNext;
	uint32_t                                     stageCount;
	const VkPipelineShaderStageCreateInfo       *pStages;
	const VkPipelineVertexInputStateCreateInfo  *pVertexInputState;
	const VkPipelineTessellationStateCreateInfo *pTessellationState;
} VkGraphicsShaderGroupCreateInfoNV;

typedef struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
	VkStructureType                          sType;
	const void                              *pNext;
	uint32_t                                 groupCount;
	const VkGraphicsShaderGroupCreateInfoNV *pGroups;
	uint32_t                                 pipelineCount;
	const VkPipeline                        *pPipelines;
} VkGraphicsPipelineShaderGroupsCreateInfoNV;

typedef struct VkBindIndexBufferIndirectCommandNV {
	VkDeviceAddress bufferAddress;
	uint32_t        size;
	VkIndexType     indexType;
} VkBindIndexBufferIndirectCommandNV;

typedef struct VkBindVertexBufferIndirectCommandNV {
	VkDeviceAddress bufferAddress;
	uint32_t        size;
	uint32_t        stride;
} VkBindVertexBufferIndirectCommandNV;

typedef struct VkIndirectCommandsStreamNV {
	VkBuffer     buffer;
	VkDeviceSize offset;
} VkIndirectCommandsStreamNV;

typedef struct VkIndirectCommandsLayoutTokenNV {
	VkStructureType               sType;
	const void                   *pNext;
	VkIndirectCommandsTokenTypeNV tokenType;
	uint32_t                      stream;
	uint32_t                      offset;
	uint32_t                      vertexBindingUnit;
	VkBool32                      vertexDynamicStride;
	VkPipelineLayout              pushconstantPipelineLayout;
	VkShaderStageFlags            pushconstantShaderStageFlags;
	uint32_t                      pushconstantOffset;
	uint32_t                      pushconstantSize;
	VkIndirectStateFlagsNV        indirectStateFlags;
	uint32_t                      indexTypeCount;
	const VkIndexType            *pIndexTypes;
	const uint32_t               *pIndexTypeValues;
} VkIndirectCommandsLayoutTokenNV;

typedef struct VkIndirectCommandsLayoutCreateInfoNV {
	VkStructureType                        sType;
	const void                            *pNext;
	VkIndirectCommandsLayoutUsageFlagsNV   flags;
	VkPipelineBindPoint                    pipelineBindPoint;
	uint32_t                               tokenCount;
	const VkIndirectCommandsLayoutTokenNV *pTokens;
	uint32_t                               streamCount;
	const uint32_t                        *pStreamStrides;
} VkIndirectCommandsLayoutCreateInfoNV;

typedef struct VkGeneratedCommandsInfoNV {
	VkStructureType                   sType;
	const void                       *pNext;
	VkPipelineBindPoint               pipelineBindPoint;
	VkPipeline                        pipeline;
	VkIndirectCommandsLayoutNV        indirectCommandsLayout;
	uint32_t                          streamCount;
	const VkIndirectCommandsStreamNV *pStreams;
	uint32_t                          sequencesCount;
	VkBuffer                          preprocessBuffer;
	VkDeviceSize                      preprocessOffset;
	VkDeviceSize                      preprocessSize;
	VkBuffer                          sequencesCountBuffer;
	VkDeviceSize                      sequencesCountOffset;
	VkBuffer                          sequencesIndexBuffer;
	VkDeviceSize                      sequencesIndexOffset;
} VkGeneratedCommandsInfoNV;

typedef struct VkBindPipelineIndirectCommandNV {
	VkDeviceAddress pipelineAddress;
} VkBindPipelineIndirectCommandNV;

typedef struct VkPhysicalDeviceFeatures2 {
	VkStructureType          sType;
	void                    *pNext;
	VkPhysicalDeviceFeatures features;
} VkPhysicalDeviceFeatures2;

typedef struct VkPhysicalDeviceFeatures2 VkPhysicalDeviceFeatures2KHR;

typedef struct VkFormatProperties2 {
	VkStructureType    sType;
	void              *pNext;
	VkFormatProperties formatProperties;
} VkFormatProperties2;

typedef struct VkFormatProperties2 VkFormatProperties2KHR;

typedef struct VkImageFormatProperties2 {
	VkStructureType         sType;
	void                   *pNext;
	VkImageFormatProperties imageFormatProperties;
} VkImageFormatProperties2;

typedef struct VkImageFormatProperties2 VkImageFormatProperties2KHR;

typedef struct VkPhysicalDeviceImageFormatInfo2 {
	VkStructureType    sType;
	const void        *pNext;
	VkFormat           format;
	VkImageType        type;
	VkImageTiling      tiling;
	VkImageUsageFlags  usage;
	VkImageCreateFlags flags;
} VkPhysicalDeviceImageFormatInfo2;

typedef struct VkPhysicalDeviceImageFormatInfo2 VkPhysicalDeviceImageFormatInfo2KHR;

typedef struct VkQueueFamilyProperties2 {
	VkStructureType         sType;
	void                   *pNext;
	VkQueueFamilyProperties queueFamilyProperties;
} VkQueueFamilyProperties2;

typedef struct VkQueueFamilyProperties2 VkQueueFamilyProperties2KHR;

typedef struct VkSparseImageFormatProperties2 {
	VkStructureType               sType;
	void                         *pNext;
	VkSparseImageFormatProperties properties;
} VkSparseImageFormatProperties2;

typedef struct VkSparseImageFormatProperties2 VkSparseImageFormatProperties2KHR;

typedef struct VkPhysicalDeviceSparseImageFormatInfo2 {
	VkStructureType       sType;
	const void           *pNext;
	VkFormat              format;
	VkImageType           type;
	VkSampleCountFlagBits samples;
	VkImageUsageFlags     usage;
	VkImageTiling         tiling;
} VkPhysicalDeviceSparseImageFormatInfo2;

typedef struct VkPhysicalDeviceSparseImageFormatInfo2 VkPhysicalDeviceSparseImageFormatInfo2KHR;

typedef struct VkPresentRegionKHR {
	uint32_t              rectangleCount;
	const VkRectLayerKHR *pRectangles;
} VkPresentRegionKHR;

typedef struct VkPhysicalDeviceVariablePointersFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        variablePointersStorageBuffer;
	VkBool32        variablePointers;
} VkPhysicalDeviceVariablePointersFeatures;

typedef struct VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointersFeaturesKHR;

typedef struct VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointerFeaturesKHR;

typedef struct VkPhysicalDeviceVariablePointersFeatures VkPhysicalDeviceVariablePointerFeatures;

typedef struct VkExternalMemoryProperties {
	VkExternalMemoryFeatureFlags    externalMemoryFeatures;
	VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
	VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
} VkExternalMemoryProperties;

typedef struct VkExternalMemoryProperties VkExternalMemoryPropertiesKHR;

typedef struct VkExternalImageFormatProperties {
	VkStructureType            sType;
	void                      *pNext;
	VkExternalMemoryProperties externalMemoryProperties;
} VkExternalImageFormatProperties;

typedef struct VkExternalImageFormatProperties VkExternalImageFormatPropertiesKHR;

typedef struct VkPhysicalDeviceExternalBufferInfo {
	VkStructureType                    sType;
	const void                        *pNext;
	VkBufferCreateFlags                flags;
	VkBufferUsageFlags                 usage;
	VkExternalMemoryHandleTypeFlagBits handleType;
} VkPhysicalDeviceExternalBufferInfo;

typedef struct VkPhysicalDeviceExternalBufferInfo VkPhysicalDeviceExternalBufferInfoKHR;

typedef struct VkExternalBufferProperties {
	VkStructureType            sType;
	void                      *pNext;
	VkExternalMemoryProperties externalMemoryProperties;
} VkExternalBufferProperties;

typedef struct VkExternalBufferProperties VkExternalBufferPropertiesKHR;

typedef struct VkPhysicalDeviceIDProperties {
	VkStructureType sType;
	void           *pNext;
	uint8_t         deviceUUID[VK_UUID_SIZE];
	uint8_t         driverUUID[VK_UUID_SIZE];
	uint8_t         deviceLUID[VK_LUID_SIZE];
	uint32_t        deviceNodeMask;
	VkBool32        deviceLUIDValid;
} VkPhysicalDeviceIDProperties;

typedef struct VkPhysicalDeviceIDProperties VkPhysicalDeviceIDPropertiesKHR;

typedef struct VkExternalMemoryImageCreateInfo {
	VkStructureType                 sType;
	const void                     *pNext;
	VkExternalMemoryHandleTypeFlags handleTypes;
} VkExternalMemoryImageCreateInfo;

typedef struct VkExternalMemoryImageCreateInfo VkExternalMemoryImageCreateInfoKHR;

typedef struct VkExternalMemoryBufferCreateInfo {
	VkStructureType                 sType;
	const void                     *pNext;
	VkExternalMemoryHandleTypeFlags handleTypes;
} VkExternalMemoryBufferCreateInfo;

typedef struct VkExternalMemoryBufferCreateInfo VkExternalMemoryBufferCreateInfoKHR;

typedef struct VkExportMemoryAllocateInfo {
	VkStructureType                 sType;
	const void                     *pNext;
	VkExternalMemoryHandleTypeFlags handleTypes;
} VkExportMemoryAllocateInfo;

typedef struct VkExportMemoryAllocateInfo VkExportMemoryAllocateInfoKHR;

typedef struct VkExternalSemaphoreProperties {
	VkStructureType                    sType;
	void                              *pNext;
	VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
	VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
	VkExternalSemaphoreFeatureFlags    externalSemaphoreFeatures;
} VkExternalSemaphoreProperties;

typedef struct VkExternalSemaphoreProperties VkExternalSemaphorePropertiesKHR;

typedef struct VkExportSemaphoreCreateInfo {
	VkStructureType                    sType;
	const void                        *pNext;
	VkExternalSemaphoreHandleTypeFlags handleTypes;
} VkExportSemaphoreCreateInfo;

typedef struct VkExportSemaphoreCreateInfo VkExportSemaphoreCreateInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkImportSemaphoreWin32HandleInfoKHR {
	VkStructureType                       sType;
	const void                           *pNext;
	VkSemaphore                           semaphore;
	VkSemaphoreImportFlags                flags;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
	HANDLE                                handle;
	LPCWSTR                               name;
} VkImportSemaphoreWin32HandleInfoKHR;

#endif

typedef struct VkImportSemaphoreFdInfoKHR {
	VkStructureType                       sType;
	const void                           *pNext;
	VkSemaphore                           semaphore;
	VkSemaphoreImportFlags                flags;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
	int                                   fd;
} VkImportSemaphoreFdInfoKHR;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImportSemaphoreZirconHandleInfoFUCHSIA {
	VkStructureType                       sType;
	const void                           *pNext;
	VkSemaphore                           semaphore;
	VkSemaphoreImportFlags                flags;
	VkExternalSemaphoreHandleTypeFlagBits handleType;
	zx_handle_t                           zirconHandle;
} VkImportSemaphoreZirconHandleInfoFUCHSIA;

#endif

typedef struct VkExternalFenceProperties {
	VkStructureType                sType;
	void                          *pNext;
	VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
	VkExternalFenceHandleTypeFlags compatibleHandleTypes;
	VkExternalFenceFeatureFlags    externalFenceFeatures;
} VkExternalFenceProperties;

typedef struct VkExternalFenceProperties VkExternalFencePropertiesKHR;

typedef struct VkExportFenceCreateInfo {
	VkStructureType                sType;
	const void                    *pNext;
	VkExternalFenceHandleTypeFlags handleTypes;
} VkExportFenceCreateInfo;

typedef struct VkExportFenceCreateInfo VkExportFenceCreateInfoKHR;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkImportFenceWin32HandleInfoKHR {
	VkStructureType                   sType;
	const void                       *pNext;
	VkFence                           fence;
	VkFenceImportFlags                flags;
	VkExternalFenceHandleTypeFlagBits handleType;
	HANDLE                            handle;
	LPCWSTR                           name;
} VkImportFenceWin32HandleInfoKHR;

#endif

typedef struct VkImportFenceFdInfoKHR {
	VkStructureType                   sType;
	const void                       *pNext;
	VkFence                           fence;
	VkFenceImportFlags                flags;
	VkExternalFenceHandleTypeFlagBits handleType;
	int                               fd;
} VkImportFenceFdInfoKHR;

typedef struct VkPhysicalDeviceMultiviewFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        multiview;
	VkBool32        multiviewGeometryShader;
	VkBool32        multiviewTessellationShader;
} VkPhysicalDeviceMultiviewFeatures;

typedef struct VkPhysicalDeviceMultiviewFeatures VkPhysicalDeviceMultiviewFeaturesKHR;

typedef struct VkSurfaceCapabilities2EXT {
	VkStructureType               sType;
	void                         *pNext;
	uint32_t                      minImageCount;
	uint32_t                      maxImageCount;
	VkExtent2D                    currentExtent;
	VkExtent2D                    minImageExtent;
	VkExtent2D                    maxImageExtent;
	uint32_t                      maxImageArrayLayers;
	VkSurfaceTransformFlagsKHR    supportedTransforms;
	VkSurfaceTransformFlagBitsKHR currentTransform;
	VkCompositeAlphaFlagsKHR      supportedCompositeAlpha;
	VkImageUsageFlags             supportedUsageFlags;
	VkSurfaceCounterFlagsEXT      supportedSurfaceCounters;
} VkSurfaceCapabilities2EXT;

typedef struct VkSwapchainCounterCreateInfoEXT {
	VkStructureType          sType;
	const void              *pNext;
	VkSurfaceCounterFlagsEXT surfaceCounters;
} VkSwapchainCounterCreateInfoEXT;

typedef struct VkPhysicalDeviceGroupProperties {
	VkStructureType  sType;
	void            *pNext;
	uint32_t         physicalDeviceCount;
	VkPhysicalDevice physicalDevices[VK_MAX_DEVICE_GROUP_SIZE];
	VkBool32         subsetAllocation;
} VkPhysicalDeviceGroupProperties;

typedef struct VkPhysicalDeviceGroupProperties VkPhysicalDeviceGroupPropertiesKHR;

typedef struct VkMemoryAllocateFlagsInfo {
	VkStructureType       sType;
	const void           *pNext;
	VkMemoryAllocateFlags flags;
	uint32_t              deviceMask;
} VkMemoryAllocateFlagsInfo;

typedef struct VkMemoryAllocateFlagsInfo VkMemoryAllocateFlagsInfoKHR;

typedef struct VkBindBufferMemoryInfo {
	VkStructureType sType;
	const void     *pNext;
	VkBuffer        buffer;
	VkDeviceMemory  memory;
	VkDeviceSize    memoryOffset;
} VkBindBufferMemoryInfo;

typedef struct VkBindBufferMemoryInfo VkBindBufferMemoryInfoKHR;

typedef struct VkBindImageMemoryInfo {
	VkStructureType sType;
	const void     *pNext;
	VkImage         image;
	VkDeviceMemory  memory;
	VkDeviceSize    memoryOffset;
} VkBindImageMemoryInfo;

typedef struct VkBindImageMemoryInfo VkBindImageMemoryInfoKHR;

typedef struct VkDeviceGroupPresentCapabilitiesKHR {
	VkStructureType                  sType;
	void                            *pNext;
	uint32_t                         presentMask[VK_MAX_DEVICE_GROUP_SIZE];
	VkDeviceGroupPresentModeFlagsKHR modes;
} VkDeviceGroupPresentCapabilitiesKHR;

typedef struct VkDeviceGroupSwapchainCreateInfoKHR {
	VkStructureType                  sType;
	const void                      *pNext;
	VkDeviceGroupPresentModeFlagsKHR modes;
} VkDeviceGroupSwapchainCreateInfoKHR;

typedef struct VkDescriptorUpdateTemplateCreateInfo {
	VkStructureType                        sType;
	const void                            *pNext;
	VkDescriptorUpdateTemplateCreateFlags  flags;
	uint32_t                               descriptorUpdateEntryCount;
	const VkDescriptorUpdateTemplateEntry *pDescriptorUpdateEntries;
	VkDescriptorUpdateTemplateType         templateType;
	VkDescriptorSetLayout                  descriptorSetLayout;
	VkPipelineBindPoint                    pipelineBindPoint;
	VkPipelineLayout                       pipelineLayout;
	uint32_t                               set;
} VkDescriptorUpdateTemplateCreateInfo;

typedef struct VkDescriptorUpdateTemplateCreateInfo VkDescriptorUpdateTemplateCreateInfoKHR;

typedef struct VkPhysicalDevicePresentIdFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        presentId;
} VkPhysicalDevicePresentIdFeaturesKHR;

typedef struct VkPhysicalDevicePresentWaitFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        presentWait;
} VkPhysicalDevicePresentWaitFeaturesKHR;

typedef struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
	VkStructureType sType;
	void           *pNext;
	VkBool32        localDimmingSupport;
} VkDisplayNativeHdrSurfaceCapabilitiesAMD;

typedef struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        localDimmingEnable;
} VkSwapchainDisplayNativeHdrCreateInfoAMD;

typedef struct VkPresentTimesInfoGOOGLE {
	VkStructureType            sType;
	const void                *pNext;
	uint32_t                   swapchainCount;
	const VkPresentTimeGOOGLE *pTimes;
} VkPresentTimesInfoGOOGLE;

#if defined(VK_USE_PLATFORM_IOS_MVK)
typedef struct VkIOSSurfaceCreateInfoMVK {
	VkStructureType            sType;
	const void                *pNext;
	VkIOSSurfaceCreateFlagsMVK flags;
	const void                *pView;
} VkIOSSurfaceCreateInfoMVK;

#endif

#if defined(VK_USE_PLATFORM_MACOS_MVK)
typedef struct VkMacOSSurfaceCreateInfoMVK {
	VkStructureType              sType;
	const void                  *pNext;
	VkMacOSSurfaceCreateFlagsMVK flags;
	const void                  *pView;
} VkMacOSSurfaceCreateInfoMVK;

#endif

#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef struct VkMetalSurfaceCreateInfoEXT {
	VkStructureType              sType;
	const void                  *pNext;
	VkMetalSurfaceCreateFlagsEXT flags;
	const CAMetalLayer          *pLayer;
} VkMetalSurfaceCreateInfoEXT;

#endif

typedef struct VkPipelineViewportWScalingStateCreateInfoNV {
	VkStructureType             sType;
	const void                 *pNext;
	VkBool32                    viewportWScalingEnable;
	uint32_t                    viewportCount;
	const VkViewportWScalingNV *pViewportWScalings;
} VkPipelineViewportWScalingStateCreateInfoNV;

typedef struct VkPipelineViewportSwizzleStateCreateInfoNV {
	VkStructureType                             sType;
	const void                                 *pNext;
	VkPipelineViewportSwizzleStateCreateFlagsNV flags;
	uint32_t                                    viewportCount;
	const VkViewportSwizzleNV                  *pViewportSwizzles;
} VkPipelineViewportSwizzleStateCreateInfoNV;

typedef struct VkPipelineDiscardRectangleStateCreateInfoEXT {
	VkStructureType                               sType;
	const void                                   *pNext;
	VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
	VkDiscardRectangleModeEXT                     discardRectangleMode;
	uint32_t                                      discardRectangleCount;
	const VkRect2D                               *pDiscardRectangles;
} VkPipelineDiscardRectangleStateCreateInfoEXT;

typedef struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
	VkStructureType sType;
	void           *pNext;
	VkBool32        perViewPositionAllComponents;
} VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;

typedef struct VkInputAttachmentAspectReference {
	uint32_t           subpass;
	uint32_t           inputAttachmentIndex;
	VkImageAspectFlags aspectMask;
} VkInputAttachmentAspectReference;

typedef struct VkInputAttachmentAspectReference VkInputAttachmentAspectReferenceKHR;

typedef struct VkRenderPassInputAttachmentAspectCreateInfo {
	VkStructureType                         sType;
	const void                             *pNext;
	uint32_t                                aspectReferenceCount;
	const VkInputAttachmentAspectReference *pAspectReferences;
} VkRenderPassInputAttachmentAspectCreateInfo;

typedef struct VkRenderPassInputAttachmentAspectCreateInfo VkRenderPassInputAttachmentAspectCreateInfoKHR;

typedef struct VkSurfaceCapabilities2KHR {
	VkStructureType          sType;
	void                    *pNext;
	VkSurfaceCapabilitiesKHR surfaceCapabilities;
} VkSurfaceCapabilities2KHR;

typedef struct VkDisplayProperties2KHR {
	VkStructureType        sType;
	void                  *pNext;
	VkDisplayPropertiesKHR displayProperties;
} VkDisplayProperties2KHR;

typedef struct VkDisplayPlaneCapabilities2KHR {
	VkStructureType               sType;
	void                         *pNext;
	VkDisplayPlaneCapabilitiesKHR capabilities;
} VkDisplayPlaneCapabilities2KHR;

typedef struct VkSharedPresentSurfaceCapabilitiesKHR {
	VkStructureType   sType;
	void             *pNext;
	VkImageUsageFlags sharedPresentSupportedUsageFlags;
} VkSharedPresentSurfaceCapabilitiesKHR;

typedef struct VkPhysicalDevice16BitStorageFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        storageBuffer16BitAccess;
	VkBool32        uniformAndStorageBuffer16BitAccess;
	VkBool32        storagePushConstant16;
	VkBool32        storageInputOutput16;
} VkPhysicalDevice16BitStorageFeatures;

typedef struct VkPhysicalDevice16BitStorageFeatures VkPhysicalDevice16BitStorageFeaturesKHR;

typedef struct VkPhysicalDeviceSubgroupProperties {
	VkStructureType        sType;
	void                  *pNext;
	uint32_t               subgroupSize;
	VkShaderStageFlags     supportedStages;
	VkSubgroupFeatureFlags supportedOperations;
	VkBool32               quadOperationsInAllStages;
} VkPhysicalDeviceSubgroupProperties;

typedef struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderSubgroupExtendedTypes;
} VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

typedef struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR;

typedef struct VkDeviceBufferMemoryRequirements {
	VkStructureType           sType;
	const void               *pNext;
	const VkBufferCreateInfo *pCreateInfo;
} VkDeviceBufferMemoryRequirements;

typedef struct VkDeviceBufferMemoryRequirements VkDeviceBufferMemoryRequirementsKHR;

typedef struct VkDeviceImageMemoryRequirements {
	VkStructureType          sType;
	const void              *pNext;
	const VkImageCreateInfo *pCreateInfo;
	VkImageAspectFlagBits    planeAspect;
} VkDeviceImageMemoryRequirements;

typedef struct VkDeviceImageMemoryRequirements VkDeviceImageMemoryRequirementsKHR;

typedef struct VkMemoryRequirements2 {
	VkStructureType      sType;
	void                *pNext;
	VkMemoryRequirements memoryRequirements;
} VkMemoryRequirements2;

typedef struct VkMemoryRequirements2 VkMemoryRequirements2KHR;

typedef struct VkSparseImageMemoryRequirements2 {
	VkStructureType                 sType;
	void                           *pNext;
	VkSparseImageMemoryRequirements memoryRequirements;
} VkSparseImageMemoryRequirements2;

typedef struct VkSparseImageMemoryRequirements2 VkSparseImageMemoryRequirements2KHR;

typedef struct VkMemoryDedicatedRequirements {
	VkStructureType sType;
	void           *pNext;
	VkBool32        prefersDedicatedAllocation;
	VkBool32        requiresDedicatedAllocation;
} VkMemoryDedicatedRequirements;

typedef struct VkMemoryDedicatedRequirements VkMemoryDedicatedRequirementsKHR;

typedef struct VkImageViewUsageCreateInfo {
	VkStructureType   sType;
	const void       *pNext;
	VkImageUsageFlags usage;
} VkImageViewUsageCreateInfo;

typedef struct VkImageViewUsageCreateInfo VkImageViewUsageCreateInfoKHR;

typedef struct VkSamplerYcbcrConversionCreateInfo {
	VkStructureType               sType;
	const void                   *pNext;
	VkFormat                      format;
	VkSamplerYcbcrModelConversion ycbcrModel;
	VkSamplerYcbcrRange           ycbcrRange;
	VkComponentMapping            components;
	VkChromaLocation              xChromaOffset;
	VkChromaLocation              yChromaOffset;
	VkFilter                      chromaFilter;
	VkBool32                      forceExplicitReconstruction;
} VkSamplerYcbcrConversionCreateInfo;

typedef struct VkSamplerYcbcrConversionCreateInfo VkSamplerYcbcrConversionCreateInfoKHR;

typedef struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        samplerYcbcrConversion;
} VkPhysicalDeviceSamplerYcbcrConversionFeatures;

typedef struct VkPhysicalDeviceSamplerYcbcrConversionFeatures VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;

typedef struct VkTextureLODGatherFormatPropertiesAMD {
	VkStructureType sType;
	void           *pNext;
	VkBool32        supportsTextureGatherLODBiasAMD;
} VkTextureLODGatherFormatPropertiesAMD;

typedef struct VkConditionalRenderingBeginInfoEXT {
	VkStructureType                sType;
	const void                    *pNext;
	VkBuffer                       buffer;
	VkDeviceSize                   offset;
	VkConditionalRenderingFlagsEXT flags;
} VkConditionalRenderingBeginInfoEXT;

typedef struct VkProtectedSubmitInfo {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        protectedSubmit;
} VkProtectedSubmitInfo;

typedef struct VkPhysicalDeviceProtectedMemoryFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        protectedMemory;
} VkPhysicalDeviceProtectedMemoryFeatures;

typedef struct VkPhysicalDeviceProtectedMemoryProperties {
	VkStructureType sType;
	void           *pNext;
	VkBool32        protectedNoFault;
} VkPhysicalDeviceProtectedMemoryProperties;

typedef struct VkDeviceQueueInfo2 {
	VkStructureType          sType;
	const void              *pNext;
	VkDeviceQueueCreateFlags flags;
	uint32_t                 queueFamilyIndex;
	uint32_t                 queueIndex;
} VkDeviceQueueInfo2;

typedef struct VkPipelineCoverageToColorStateCreateInfoNV {
	VkStructureType                             sType;
	const void                                 *pNext;
	VkPipelineCoverageToColorStateCreateFlagsNV flags;
	VkBool32                                    coverageToColorEnable;
	uint32_t                                    coverageToColorLocation;
} VkPipelineCoverageToColorStateCreateInfoNV;

typedef struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
	VkStructureType sType;
	void           *pNext;
	VkBool32        filterMinmaxSingleComponentFormats;
	VkBool32        filterMinmaxImageComponentMapping;
} VkPhysicalDeviceSamplerFilterMinmaxProperties;

typedef struct VkPhysicalDeviceSamplerFilterMinmaxProperties VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;

typedef struct VkPipelineSampleLocationsStateCreateInfoEXT {
	VkStructureType          sType;
	const void              *pNext;
	VkBool32                 sampleLocationsEnable;
	VkSampleLocationsInfoEXT sampleLocationsInfo;
} VkPipelineSampleLocationsStateCreateInfoEXT;

typedef struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
	VkStructureType    sType;
	void              *pNext;
	VkSampleCountFlags sampleLocationSampleCounts;
	VkExtent2D         maxSampleLocationGridSize;
	float              sampleLocationCoordinateRange[2];
	uint32_t           sampleLocationSubPixelBits;
	VkBool32           variableSampleLocations;
} VkPhysicalDeviceSampleLocationsPropertiesEXT;

typedef struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        advancedBlendCoherentOperations;
} VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;

typedef struct VkPhysicalDeviceMultiDrawFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        multiDraw;
} VkPhysicalDeviceMultiDrawFeaturesEXT;

typedef struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        advancedBlendMaxColorAttachments;
	VkBool32        advancedBlendIndependentBlend;
	VkBool32        advancedBlendNonPremultipliedSrcColor;
	VkBool32        advancedBlendNonPremultipliedDstColor;
	VkBool32        advancedBlendCorrelatedOverlap;
	VkBool32        advancedBlendAllOperations;
} VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;

typedef struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
	VkStructureType   sType;
	const void       *pNext;
	VkBool32          srcPremultiplied;
	VkBool32          dstPremultiplied;
	VkBlendOverlapEXT blendOverlap;
} VkPipelineColorBlendAdvancedStateCreateInfoEXT;

typedef struct VkPhysicalDeviceInlineUniformBlockFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        inlineUniformBlock;
	VkBool32        descriptorBindingInlineUniformBlockUpdateAfterBind;
} VkPhysicalDeviceInlineUniformBlockFeatures;

typedef struct VkPhysicalDeviceInlineUniformBlockFeatures VkPhysicalDeviceInlineUniformBlockFeaturesEXT;

typedef struct VkPipelineCoverageModulationStateCreateInfoNV {
	VkStructureType                                sType;
	const void                                    *pNext;
	VkPipelineCoverageModulationStateCreateFlagsNV flags;
	VkCoverageModulationModeNV                     coverageModulationMode;
	VkBool32                                       coverageModulationTableEnable;
	uint32_t                                       coverageModulationTableCount;
	const float                                   *pCoverageModulationTable;
} VkPipelineCoverageModulationStateCreateInfoNV;

typedef struct VkValidationCacheCreateInfoEXT {
	VkStructureType                 sType;
	const void                     *pNext;
	VkValidationCacheCreateFlagsEXT flags;
	size_t                          initialDataSize;
	const void                     *pInitialData;
} VkValidationCacheCreateInfoEXT;

typedef struct VkPhysicalDeviceMaintenance3Properties {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxPerSetDescriptors;
	VkDeviceSize    maxMemoryAllocationSize;
} VkPhysicalDeviceMaintenance3Properties;

typedef struct VkPhysicalDeviceMaintenance3Properties VkPhysicalDeviceMaintenance3PropertiesKHR;

typedef struct VkPhysicalDeviceMaintenance4Features {
	VkStructureType sType;
	void           *pNext;
	VkBool32        maintenance4;
} VkPhysicalDeviceMaintenance4Features;

typedef struct VkPhysicalDeviceMaintenance4Features VkPhysicalDeviceMaintenance4FeaturesKHR;

typedef struct VkPhysicalDeviceMaintenance4Properties {
	VkStructureType sType;
	void           *pNext;
	VkDeviceSize    maxBufferSize;
} VkPhysicalDeviceMaintenance4Properties;

typedef struct VkPhysicalDeviceMaintenance4Properties VkPhysicalDeviceMaintenance4PropertiesKHR;

typedef struct VkPhysicalDeviceMaintenance5FeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        maintenance5;
} VkPhysicalDeviceMaintenance5FeaturesKHR;

typedef struct VkPhysicalDeviceMaintenance5PropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        earlyFragmentMultisampleCoverageAfterSampleCounting;
	VkBool32        earlyFragmentSampleMaskTestBeforeSampleCounting;
	VkBool32        depthStencilSwizzleOneSupport;
	VkBool32        polygonModePointSize;
	VkBool32        nonStrictSinglePixelWideLinesUseParallelogram;
	VkBool32        nonStrictWideLinesUseParallelogram;
} VkPhysicalDeviceMaintenance5PropertiesKHR;

typedef struct VkDescriptorSetLayoutSupport {
	VkStructureType sType;
	void           *pNext;
	VkBool32        supported;
} VkDescriptorSetLayoutSupport;

typedef struct VkDescriptorSetLayoutSupport VkDescriptorSetLayoutSupportKHR;

typedef struct VkPhysicalDeviceShaderDrawParametersFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderDrawParameters;
} VkPhysicalDeviceShaderDrawParametersFeatures;

typedef struct VkPhysicalDeviceShaderDrawParametersFeatures VkPhysicalDeviceShaderDrawParameterFeatures;

typedef struct VkPhysicalDeviceShaderFloat16Int8Features {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderFloat16;
	VkBool32        shaderInt8;
} VkPhysicalDeviceShaderFloat16Int8Features;

typedef struct VkPhysicalDeviceShaderFloat16Int8Features VkPhysicalDeviceShaderFloat16Int8FeaturesKHR;

typedef struct VkPhysicalDeviceShaderFloat16Int8Features VkPhysicalDeviceFloat16Int8FeaturesKHR;

typedef struct VkPhysicalDeviceFloatControlsProperties {
	VkStructureType                   sType;
	void                             *pNext;
	VkShaderFloatControlsIndependence denormBehaviorIndependence;
	VkShaderFloatControlsIndependence roundingModeIndependence;
	VkBool32                          shaderSignedZeroInfNanPreserveFloat16;
	VkBool32                          shaderSignedZeroInfNanPreserveFloat32;
	VkBool32                          shaderSignedZeroInfNanPreserveFloat64;
	VkBool32                          shaderDenormPreserveFloat16;
	VkBool32                          shaderDenormPreserveFloat32;
	VkBool32                          shaderDenormPreserveFloat64;
	VkBool32                          shaderDenormFlushToZeroFloat16;
	VkBool32                          shaderDenormFlushToZeroFloat32;
	VkBool32                          shaderDenormFlushToZeroFloat64;
	VkBool32                          shaderRoundingModeRTEFloat16;
	VkBool32                          shaderRoundingModeRTEFloat32;
	VkBool32                          shaderRoundingModeRTEFloat64;
	VkBool32                          shaderRoundingModeRTZFloat16;
	VkBool32                          shaderRoundingModeRTZFloat32;
	VkBool32                          shaderRoundingModeRTZFloat64;
} VkPhysicalDeviceFloatControlsProperties;

typedef struct VkPhysicalDeviceFloatControlsProperties VkPhysicalDeviceFloatControlsPropertiesKHR;

typedef struct VkPhysicalDeviceHostQueryResetFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        hostQueryReset;
} VkPhysicalDeviceHostQueryResetFeatures;

typedef struct VkPhysicalDeviceHostQueryResetFeatures VkPhysicalDeviceHostQueryResetFeaturesEXT;

typedef struct VkShaderStatisticsInfoAMD {
	VkShaderStageFlags       shaderStageMask;
	VkShaderResourceUsageAMD resourceUsage;
	uint32_t                 numPhysicalVgprs;
	uint32_t                 numPhysicalSgprs;
	uint32_t                 numAvailableVgprs;
	uint32_t                 numAvailableSgprs;
	uint32_t                 computeWorkGroupSize[3];
} VkShaderStatisticsInfoAMD;

typedef struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        globalPriorityQuery;
} VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;

typedef struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT;

typedef struct VkDebugUtilsMessengerCallbackDataEXT {
	VkStructureType                           sType;
	const void                               *pNext;
	VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
	const char                               *pMessageIdName;
	int32_t                                   messageIdNumber;
	const char                               *pMessage;
	uint32_t                                  queueLabelCount;
	const VkDebugUtilsLabelEXT               *pQueueLabels;
	uint32_t                                  cmdBufLabelCount;
	const VkDebugUtilsLabelEXT               *pCmdBufLabels;
	uint32_t                                  objectCount;
	const VkDebugUtilsObjectNameInfoEXT      *pObjects;
} VkDebugUtilsMessengerCallbackDataEXT;

typedef struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        deviceMemoryReport;
} VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;

typedef struct VkDeviceMemoryReportCallbackDataEXT {
	VkStructureType                  sType;
	void                            *pNext;
	VkDeviceMemoryReportFlagsEXT     flags;
	VkDeviceMemoryReportEventTypeEXT type;
	uint64_t                         memoryObjectId;
	VkDeviceSize                     size;
	VkObjectType                     objectType;
	uint64_t                         objectHandle;
	uint32_t                         heapIndex;
} VkDeviceMemoryReportCallbackDataEXT;

typedef struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkDeviceSize    minImportedHostPointerAlignment;
} VkPhysicalDeviceExternalMemoryHostPropertiesEXT;

typedef struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	float           primitiveOverestimationSize;
	float           maxExtraPrimitiveOverestimationSize;
	float           extraPrimitiveOverestimationSizeGranularity;
	VkBool32        primitiveUnderestimation;
	VkBool32        conservativePointAndLineRasterization;
	VkBool32        degenerateTrianglesRasterized;
	VkBool32        degenerateLinesRasterized;
	VkBool32        fullyCoveredFragmentShaderInputVariable;
	VkBool32        conservativeRasterizationPostDepthCoverage;
} VkPhysicalDeviceConservativeRasterizationPropertiesEXT;

typedef struct VkPhysicalDeviceShaderCoreProperties2AMD {
	VkStructureType                sType;
	void                          *pNext;
	VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
	uint32_t                       activeComputeUnitCount;
} VkPhysicalDeviceShaderCoreProperties2AMD;

typedef struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
	VkStructureType                                        sType;
	const void                                            *pNext;
	VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
	VkConservativeRasterizationModeEXT                     conservativeRasterizationMode;
	float                                                  extraPrimitiveOverestimationSize;
} VkPipelineRasterizationConservativeStateCreateInfoEXT;

typedef struct VkPhysicalDeviceDescriptorIndexingFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderInputAttachmentArrayDynamicIndexing;
	VkBool32        shaderUniformTexelBufferArrayDynamicIndexing;
	VkBool32        shaderStorageTexelBufferArrayDynamicIndexing;
	VkBool32        shaderUniformBufferArrayNonUniformIndexing;
	VkBool32        shaderSampledImageArrayNonUniformIndexing;
	VkBool32        shaderStorageBufferArrayNonUniformIndexing;
	VkBool32        shaderStorageImageArrayNonUniformIndexing;
	VkBool32        shaderInputAttachmentArrayNonUniformIndexing;
	VkBool32        shaderUniformTexelBufferArrayNonUniformIndexing;
	VkBool32        shaderStorageTexelBufferArrayNonUniformIndexing;
	VkBool32        descriptorBindingUniformBufferUpdateAfterBind;
	VkBool32        descriptorBindingSampledImageUpdateAfterBind;
	VkBool32        descriptorBindingStorageImageUpdateAfterBind;
	VkBool32        descriptorBindingStorageBufferUpdateAfterBind;
	VkBool32        descriptorBindingUniformTexelBufferUpdateAfterBind;
	VkBool32        descriptorBindingStorageTexelBufferUpdateAfterBind;
	VkBool32        descriptorBindingUpdateUnusedWhilePending;
	VkBool32        descriptorBindingPartiallyBound;
	VkBool32        descriptorBindingVariableDescriptorCount;
	VkBool32        runtimeDescriptorArray;
} VkPhysicalDeviceDescriptorIndexingFeatures;

typedef struct VkPhysicalDeviceDescriptorIndexingFeatures VkPhysicalDeviceDescriptorIndexingFeaturesEXT;

typedef struct VkPhysicalDeviceDescriptorIndexingProperties {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxUpdateAfterBindDescriptorsInAllPools;
	VkBool32        shaderUniformBufferArrayNonUniformIndexingNative;
	VkBool32        shaderSampledImageArrayNonUniformIndexingNative;
	VkBool32        shaderStorageBufferArrayNonUniformIndexingNative;
	VkBool32        shaderStorageImageArrayNonUniformIndexingNative;
	VkBool32        shaderInputAttachmentArrayNonUniformIndexingNative;
	VkBool32        robustBufferAccessUpdateAfterBind;
	VkBool32        quadDivergentImplicitLod;
	uint32_t        maxPerStageDescriptorUpdateAfterBindSamplers;
	uint32_t        maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	uint32_t        maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	uint32_t        maxPerStageDescriptorUpdateAfterBindSampledImages;
	uint32_t        maxPerStageDescriptorUpdateAfterBindStorageImages;
	uint32_t        maxPerStageDescriptorUpdateAfterBindInputAttachments;
	uint32_t        maxPerStageUpdateAfterBindResources;
	uint32_t        maxDescriptorSetUpdateAfterBindSamplers;
	uint32_t        maxDescriptorSetUpdateAfterBindUniformBuffers;
	uint32_t        maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	uint32_t        maxDescriptorSetUpdateAfterBindStorageBuffers;
	uint32_t        maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	uint32_t        maxDescriptorSetUpdateAfterBindSampledImages;
	uint32_t        maxDescriptorSetUpdateAfterBindStorageImages;
	uint32_t        maxDescriptorSetUpdateAfterBindInputAttachments;
} VkPhysicalDeviceDescriptorIndexingProperties;

typedef struct VkPhysicalDeviceDescriptorIndexingProperties VkPhysicalDeviceDescriptorIndexingPropertiesEXT;

typedef struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
	VkStructureType                 sType;
	const void                     *pNext;
	uint32_t                        bindingCount;
	const VkDescriptorBindingFlags *pBindingFlags;
} VkDescriptorSetLayoutBindingFlagsCreateInfo;

typedef struct VkDescriptorSetLayoutBindingFlagsCreateInfo VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;

typedef struct VkAttachmentDescription2 {
	VkStructureType              sType;
	const void                  *pNext;
	VkAttachmentDescriptionFlags flags;
	VkFormat                     format;
	VkSampleCountFlagBits        samples;
	VkAttachmentLoadOp           loadOp;
	VkAttachmentStoreOp          storeOp;
	VkAttachmentLoadOp           stencilLoadOp;
	VkAttachmentStoreOp          stencilStoreOp;
	VkImageLayout                initialLayout;
	VkImageLayout                finalLayout;
} VkAttachmentDescription2;

typedef struct VkAttachmentDescription2 VkAttachmentDescription2KHR;

typedef struct VkAttachmentReference2 {
	VkStructureType    sType;
	const void        *pNext;
	uint32_t           attachment;
	VkImageLayout      layout;
	VkImageAspectFlags aspectMask;
} VkAttachmentReference2;

typedef struct VkAttachmentReference2 VkAttachmentReference2KHR;

typedef struct VkSubpassDescription2 {
	VkStructureType               sType;
	const void                   *pNext;
	VkSubpassDescriptionFlags     flags;
	VkPipelineBindPoint           pipelineBindPoint;
	uint32_t                      viewMask;
	uint32_t                      inputAttachmentCount;
	const VkAttachmentReference2 *pInputAttachments;
	uint32_t                      colorAttachmentCount;
	const VkAttachmentReference2 *pColorAttachments;
	const VkAttachmentReference2 *pResolveAttachments;
	const VkAttachmentReference2 *pDepthStencilAttachment;
	uint32_t                      preserveAttachmentCount;
	const uint32_t               *pPreserveAttachments;
} VkSubpassDescription2;

typedef struct VkSubpassDescription2 VkSubpassDescription2KHR;

typedef struct VkSubpassDependency2 {
	VkStructureType      sType;
	const void          *pNext;
	uint32_t             srcSubpass;
	uint32_t             dstSubpass;
	VkPipelineStageFlags srcStageMask;
	VkPipelineStageFlags dstStageMask;
	VkAccessFlags        srcAccessMask;
	VkAccessFlags        dstAccessMask;
	VkDependencyFlags    dependencyFlags;
	int32_t              viewOffset;
} VkSubpassDependency2;

typedef struct VkSubpassDependency2 VkSubpassDependency2KHR;

typedef struct VkRenderPassCreateInfo2 {
	VkStructureType                 sType;
	const void                     *pNext;
	VkRenderPassCreateFlags         flags;
	uint32_t                        attachmentCount;
	const VkAttachmentDescription2 *pAttachments;
	uint32_t                        subpassCount;
	const VkSubpassDescription2    *pSubpasses;
	uint32_t                        dependencyCount;
	const VkSubpassDependency2     *pDependencies;
	uint32_t                        correlatedViewMaskCount;
	const uint32_t                 *pCorrelatedViewMasks;
} VkRenderPassCreateInfo2;

typedef struct VkRenderPassCreateInfo2 VkRenderPassCreateInfo2KHR;

typedef struct VkPhysicalDeviceTimelineSemaphoreFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        timelineSemaphore;
} VkPhysicalDeviceTimelineSemaphoreFeatures;

typedef struct VkPhysicalDeviceTimelineSemaphoreFeatures VkPhysicalDeviceTimelineSemaphoreFeaturesKHR;

typedef struct VkSemaphoreWaitInfo {
	VkStructureType      sType;
	const void          *pNext;
	VkSemaphoreWaitFlags flags;
	uint32_t             semaphoreCount;
	const VkSemaphore   *pSemaphores;
	const uint64_t      *pValues;
} VkSemaphoreWaitInfo;

typedef struct VkSemaphoreWaitInfo VkSemaphoreWaitInfoKHR;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferPropertiesANDROID {
	VkStructureType sType;
	void           *pNext;
	VkDeviceSize    allocationSize;
	uint32_t        memoryTypeBits;
} VkAndroidHardwareBufferPropertiesANDROID;

#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferFormatPropertiesANDROID {
	VkStructureType               sType;
	void                         *pNext;
	VkFormat                      format;
	uint64_t                      externalFormat;
	VkFormatFeatureFlags          formatFeatures;
	VkComponentMapping            samplerYcbcrConversionComponents;
	VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	VkSamplerYcbcrRange           suggestedYcbcrRange;
	VkChromaLocation              suggestedXChromaOffset;
	VkChromaLocation              suggestedYChromaOffset;
} VkAndroidHardwareBufferFormatPropertiesANDROID;

#endif

typedef struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        conditionalRenderingEnable;
} VkCommandBufferInheritanceConditionalRenderingInfoEXT;

typedef struct VkPhysicalDevice8BitStorageFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        storageBuffer8BitAccess;
	VkBool32        uniformAndStorageBuffer8BitAccess;
	VkBool32        storagePushConstant8;
} VkPhysicalDevice8BitStorageFeatures;

typedef struct VkPhysicalDevice8BitStorageFeatures VkPhysicalDevice8BitStorageFeaturesKHR;

typedef struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        conditionalRendering;
	VkBool32        inheritedConditionalRendering;
} VkPhysicalDeviceConditionalRenderingFeaturesEXT;

typedef struct VkPhysicalDeviceVulkanMemoryModelFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        vulkanMemoryModel;
	VkBool32        vulkanMemoryModelDeviceScope;
	VkBool32        vulkanMemoryModelAvailabilityVisibilityChains;
} VkPhysicalDeviceVulkanMemoryModelFeatures;

typedef struct VkPhysicalDeviceVulkanMemoryModelFeatures VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;

typedef struct VkPhysicalDeviceShaderAtomicInt64Features {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderBufferInt64Atomics;
	VkBool32        shaderSharedInt64Atomics;
} VkPhysicalDeviceShaderAtomicInt64Features;

typedef struct VkPhysicalDeviceShaderAtomicInt64Features VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;

typedef struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderBufferFloat32Atomics;
	VkBool32        shaderBufferFloat32AtomicAdd;
	VkBool32        shaderBufferFloat64Atomics;
	VkBool32        shaderBufferFloat64AtomicAdd;
	VkBool32        shaderSharedFloat32Atomics;
	VkBool32        shaderSharedFloat32AtomicAdd;
	VkBool32        shaderSharedFloat64Atomics;
	VkBool32        shaderSharedFloat64AtomicAdd;
	VkBool32        shaderImageFloat32Atomics;
	VkBool32        shaderImageFloat32AtomicAdd;
	VkBool32        sparseImageFloat32Atomics;
	VkBool32        sparseImageFloat32AtomicAdd;
} VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;

typedef struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderBufferFloat16Atomics;
	VkBool32        shaderBufferFloat16AtomicAdd;
	VkBool32        shaderBufferFloat16AtomicMinMax;
	VkBool32        shaderBufferFloat32AtomicMinMax;
	VkBool32        shaderBufferFloat64AtomicMinMax;
	VkBool32        shaderSharedFloat16Atomics;
	VkBool32        shaderSharedFloat16AtomicAdd;
	VkBool32        shaderSharedFloat16AtomicMinMax;
	VkBool32        shaderSharedFloat32AtomicMinMax;
	VkBool32        shaderSharedFloat64AtomicMinMax;
	VkBool32        shaderImageFloat32AtomicMinMax;
	VkBool32        sparseImageFloat32AtomicMinMax;
} VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;

typedef struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        vertexAttributeInstanceRateDivisor;
	VkBool32        vertexAttributeInstanceRateZeroDivisor;
} VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;

typedef struct VkQueueFamilyCheckpointPropertiesNV {
	VkStructureType      sType;
	void                *pNext;
	VkPipelineStageFlags checkpointExecutionStageMask;
} VkQueueFamilyCheckpointPropertiesNV;

typedef struct VkPhysicalDeviceDepthStencilResolveProperties {
	VkStructureType    sType;
	void              *pNext;
	VkResolveModeFlags supportedDepthResolveModes;
	VkResolveModeFlags supportedStencilResolveModes;
	VkBool32           independentResolveNone;
	VkBool32           independentResolve;
} VkPhysicalDeviceDepthStencilResolveProperties;

typedef struct VkPhysicalDeviceDepthStencilResolveProperties VkPhysicalDeviceDepthStencilResolvePropertiesKHR;

typedef struct VkSubpassDescriptionDepthStencilResolve {
	VkStructureType               sType;
	const void                   *pNext;
	VkResolveModeFlagBits         depthResolveMode;
	VkResolveModeFlagBits         stencilResolveMode;
	const VkAttachmentReference2 *pDepthStencilResolveAttachment;
} VkSubpassDescriptionDepthStencilResolve;

typedef struct VkSubpassDescriptionDepthStencilResolve VkSubpassDescriptionDepthStencilResolveKHR;

typedef struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        decodeModeSharedExponent;
} VkPhysicalDeviceASTCDecodeFeaturesEXT;

typedef struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        transformFeedback;
	VkBool32        geometryStreams;
} VkPhysicalDeviceTransformFeedbackFeaturesEXT;

typedef struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxTransformFeedbackStreams;
	uint32_t        maxTransformFeedbackBuffers;
	VkDeviceSize    maxTransformFeedbackBufferSize;
	uint32_t        maxTransformFeedbackStreamDataSize;
	uint32_t        maxTransformFeedbackBufferDataSize;
	uint32_t        maxTransformFeedbackBufferDataStride;
	VkBool32        transformFeedbackQueries;
	VkBool32        transformFeedbackStreamsLinesTriangles;
	VkBool32        transformFeedbackRasterizationStreamSelect;
	VkBool32        transformFeedbackDraw;
} VkPhysicalDeviceTransformFeedbackPropertiesEXT;

typedef struct VkPipelineRasterizationStateStreamCreateInfoEXT {
	VkStructureType                                  sType;
	const void                                      *pNext;
	VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
	uint32_t                                         rasterizationStream;
} VkPipelineRasterizationStateStreamCreateInfoEXT;

typedef struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        representativeFragmentTest;
} VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;

typedef struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        representativeFragmentTestEnable;
} VkPipelineRepresentativeFragmentTestStateCreateInfoNV;

typedef struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        exclusiveScissor;
} VkPhysicalDeviceExclusiveScissorFeaturesNV;

typedef struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        cornerSampledImage;
} VkPhysicalDeviceCornerSampledImageFeaturesNV;

typedef struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        computeDerivativeGroupQuads;
	VkBool32        computeDerivativeGroupLinear;
} VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;

typedef struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        imageFootprint;
} VkPhysicalDeviceShaderImageFootprintFeaturesNV;

typedef struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        dedicatedAllocationImageAliasing;
} VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;

typedef struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        indirectCopy;
} VkPhysicalDeviceCopyMemoryIndirectFeaturesNV;

typedef struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
	VkStructureType sType;
	void           *pNext;
	VkQueueFlags    supportedQueues;
} VkPhysicalDeviceCopyMemoryIndirectPropertiesNV;

typedef struct VkPhysicalDeviceMemoryDecompressionFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        memoryDecompression;
} VkPhysicalDeviceMemoryDecompressionFeaturesNV;

typedef struct VkPhysicalDeviceMemoryDecompressionPropertiesNV {
	VkStructureType                    sType;
	void                              *pNext;
	VkMemoryDecompressionMethodFlagsNV decompressionMethods;
	uint64_t                           maxDecompressionIndirectCount;
} VkPhysicalDeviceMemoryDecompressionPropertiesNV;

typedef struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
	VkStructureType               sType;
	const void                   *pNext;
	VkBool32                      shadingRateImageEnable;
	uint32_t                      viewportCount;
	const VkShadingRatePaletteNV *pShadingRatePalettes;
} VkPipelineViewportShadingRateImageStateCreateInfoNV;

typedef struct VkPhysicalDeviceShadingRateImageFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shadingRateImage;
	VkBool32        shadingRateCoarseSampleOrder;
} VkPhysicalDeviceShadingRateImageFeaturesNV;

typedef struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
	VkStructureType sType;
	void           *pNext;
	VkBool32        invocationMask;
} VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;

typedef struct VkPhysicalDeviceMeshShaderFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        taskShader;
	VkBool32        meshShader;
} VkPhysicalDeviceMeshShaderFeaturesNV;

typedef struct VkPhysicalDeviceMeshShaderFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        taskShader;
	VkBool32        meshShader;
	VkBool32        multiviewMeshShader;
	VkBool32        primitiveFragmentShadingRateMeshShader;
	VkBool32        meshShaderQueries;
} VkPhysicalDeviceMeshShaderFeaturesEXT;

typedef struct VkPhysicalDeviceMeshShaderPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxTaskWorkGroupTotalCount;
	uint32_t        maxTaskWorkGroupCount[3];
	uint32_t        maxTaskWorkGroupInvocations;
	uint32_t        maxTaskWorkGroupSize[3];
	uint32_t        maxTaskPayloadSize;
	uint32_t        maxTaskSharedMemorySize;
	uint32_t        maxTaskPayloadAndSharedMemorySize;
	uint32_t        maxMeshWorkGroupTotalCount;
	uint32_t        maxMeshWorkGroupCount[3];
	uint32_t        maxMeshWorkGroupInvocations;
	uint32_t        maxMeshWorkGroupSize[3];
	uint32_t        maxMeshSharedMemorySize;
	uint32_t        maxMeshPayloadAndSharedMemorySize;
	uint32_t        maxMeshOutputMemorySize;
	uint32_t        maxMeshPayloadAndOutputMemorySize;
	uint32_t        maxMeshOutputComponents;
	uint32_t        maxMeshOutputVertices;
	uint32_t        maxMeshOutputPrimitives;
	uint32_t        maxMeshOutputLayers;
	uint32_t        maxMeshMultiviewViewCount;
	uint32_t        meshOutputPerVertexGranularity;
	uint32_t        meshOutputPerPrimitiveGranularity;
	uint32_t        maxPreferredTaskWorkGroupInvocations;
	uint32_t        maxPreferredMeshWorkGroupInvocations;
	VkBool32        prefersLocalInvocationVertexOutput;
	VkBool32        prefersLocalInvocationPrimitiveOutput;
	VkBool32        prefersCompactVertexOutput;
	VkBool32        prefersCompactPrimitiveOutput;
} VkPhysicalDeviceMeshShaderPropertiesEXT;

typedef struct VkRayTracingPipelineCreateInfoNV {
	VkStructureType                            sType;
	const void                                *pNext;
	VkPipelineCreateFlags                      flags;
	uint32_t                                   stageCount;
	const VkPipelineShaderStageCreateInfo     *pStages;
	uint32_t                                   groupCount;
	const VkRayTracingShaderGroupCreateInfoNV *pGroups;
	uint32_t                                   maxRecursionDepth;
	VkPipelineLayout                           layout;
	VkPipeline                                 basePipelineHandle;
	int32_t                                    basePipelineIndex;
} VkRayTracingPipelineCreateInfoNV;

typedef struct VkRayTracingPipelineCreateInfoKHR {
	VkStructureType                                   sType;
	const void                                       *pNext;
	VkPipelineCreateFlags                             flags;
	uint32_t                                          stageCount;
	const VkPipelineShaderStageCreateInfo            *pStages;
	uint32_t                                          groupCount;
	const VkRayTracingShaderGroupCreateInfoKHR       *pGroups;
	uint32_t                                          maxPipelineRayRecursionDepth;
	const VkPipelineLibraryCreateInfoKHR             *pLibraryInfo;
	const VkRayTracingPipelineInterfaceCreateInfoKHR *pLibraryInterface;
	const VkPipelineDynamicStateCreateInfo           *pDynamicState;
	VkPipelineLayout                                  layout;
	VkPipeline                                        basePipelineHandle;
	int32_t                                           basePipelineIndex;
} VkRayTracingPipelineCreateInfoKHR;

typedef struct VkGeometryTrianglesNV {
	VkStructureType sType;
	const void     *pNext;
	VkBuffer        vertexData;
	VkDeviceSize    vertexOffset;
	uint32_t        vertexCount;
	VkDeviceSize    vertexStride;
	VkFormat        vertexFormat;
	VkBuffer        indexData;
	VkDeviceSize    indexOffset;
	uint32_t        indexCount;
	VkIndexType     indexType;
	VkBuffer        transformData;
	VkDeviceSize    transformOffset;
} VkGeometryTrianglesNV;

typedef struct VkGeometryAABBNV {
	VkStructureType sType;
	const void     *pNext;
	VkBuffer        aabbData;
	uint32_t        numAABBs;
	uint32_t        stride;
	VkDeviceSize    offset;
} VkGeometryAABBNV;

typedef struct VkGeometryDataNV {
	VkGeometryTrianglesNV triangles;
	VkGeometryAABBNV      aabbs;
} VkGeometryDataNV;

typedef struct VkGeometryNV {
	VkStructureType    sType;
	const void        *pNext;
	VkGeometryTypeKHR  geometryType;
	VkGeometryDataNV   geometry;
	VkGeometryFlagsKHR flags;
} VkGeometryNV;

typedef struct VkAccelerationStructureInfoNV {
	VkStructureType                     sType;
	const void                         *pNext;
	VkAccelerationStructureTypeNV       type;
	VkBuildAccelerationStructureFlagsNV flags;
	uint32_t                            instanceCount;
	uint32_t                            geometryCount;
	const VkGeometryNV                 *pGeometries;
} VkAccelerationStructureInfoNV;

typedef struct VkAccelerationStructureCreateInfoNV {
	VkStructureType               sType;
	const void                   *pNext;
	VkDeviceSize                  compactedSize;
	VkAccelerationStructureInfoNV info;
} VkAccelerationStructureCreateInfoNV;

typedef struct VkBindAccelerationStructureMemoryInfoNV {
	VkStructureType           sType;
	const void               *pNext;
	VkAccelerationStructureNV accelerationStructure;
	VkDeviceMemory            memory;
	VkDeviceSize              memoryOffset;
	uint32_t                  deviceIndexCount;
	const uint32_t           *pDeviceIndices;
} VkBindAccelerationStructureMemoryInfoNV;

typedef struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        accelerationStructure;
	VkBool32        accelerationStructureCaptureReplay;
	VkBool32        accelerationStructureIndirectBuild;
	VkBool32        accelerationStructureHostCommands;
	VkBool32        descriptorBindingAccelerationStructureUpdateAfterBind;
} VkPhysicalDeviceAccelerationStructureFeaturesKHR;

typedef struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        rayTracingPipeline;
	VkBool32        rayTracingPipelineShaderGroupHandleCaptureReplay;
	VkBool32        rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
	VkBool32        rayTracingPipelineTraceRaysIndirect;
	VkBool32        rayTraversalPrimitiveCulling;
} VkPhysicalDeviceRayTracingPipelineFeaturesKHR;

typedef struct VkPhysicalDeviceRayQueryFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        rayQuery;
} VkPhysicalDeviceRayQueryFeaturesKHR;

typedef struct VkStridedDeviceAddressRegionKHR {
	VkDeviceAddress deviceAddress;
	VkDeviceSize    stride;
	VkDeviceSize    size;
} VkStridedDeviceAddressRegionKHR;

typedef struct VkTraceRaysIndirectCommand2KHR {
	VkDeviceAddress raygenShaderRecordAddress;
	VkDeviceSize    raygenShaderRecordSize;
	VkDeviceAddress missShaderBindingTableAddress;
	VkDeviceSize    missShaderBindingTableSize;
	VkDeviceSize    missShaderBindingTableStride;
	VkDeviceAddress hitShaderBindingTableAddress;
	VkDeviceSize    hitShaderBindingTableSize;
	VkDeviceSize    hitShaderBindingTableStride;
	VkDeviceAddress callableShaderBindingTableAddress;
	VkDeviceSize    callableShaderBindingTableSize;
	VkDeviceSize    callableShaderBindingTableStride;
	uint32_t        width;
	uint32_t        height;
	uint32_t        depth;
} VkTraceRaysIndirectCommand2KHR;

typedef struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        rayTracingMaintenance1;
	VkBool32        rayTracingPipelineTraceRaysIndirect2;
} VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;

typedef struct VkDrmFormatModifierPropertiesEXT {
	uint64_t             drmFormatModifier;
	uint32_t             drmFormatModifierPlaneCount;
	VkFormatFeatureFlags drmFormatModifierTilingFeatures;
} VkDrmFormatModifierPropertiesEXT;

typedef struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
	VkStructureType            sType;
	const void                *pNext;
	uint64_t                   drmFormatModifier;
	uint32_t                   drmFormatModifierPlaneCount;
	const VkSubresourceLayout *pPlaneLayouts;
} VkImageDrmFormatModifierExplicitCreateInfoEXT;

typedef struct VkImageStencilUsageCreateInfo {
	VkStructureType   sType;
	const void       *pNext;
	VkImageUsageFlags stencilUsage;
} VkImageStencilUsageCreateInfo;

typedef struct VkImageStencilUsageCreateInfo VkImageStencilUsageCreateInfoEXT;

typedef struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        fragmentDensityMap;
	VkBool32        fragmentDensityMapDynamic;
	VkBool32        fragmentDensityMapNonSubsampledImages;
} VkPhysicalDeviceFragmentDensityMapFeaturesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        fragmentDensityMapDeferred;
} VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        fragmentDensityMapOffset;
} VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;

typedef struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkExtent2D      minFragmentDensityTexelSize;
	VkExtent2D      maxFragmentDensityTexelSize;
	VkBool32        fragmentDensityInvocations;
} VkPhysicalDeviceFragmentDensityMapPropertiesEXT;

typedef struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        subsampledLoads;
	VkBool32        subsampledCoarseReconstructionEarlyAccess;
	uint32_t        maxSubsampledArrayLayers;
	uint32_t        maxDescriptorSetSubsampledSamplers;
} VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;

typedef struct VkPhysicalDeviceScalarBlockLayoutFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        scalarBlockLayout;
} VkPhysicalDeviceScalarBlockLayoutFeatures;

typedef struct VkPhysicalDeviceScalarBlockLayoutFeatures VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;

typedef struct VkSurfaceProtectedCapabilitiesKHR {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        supportsProtected;
} VkSurfaceProtectedCapabilitiesKHR;

typedef struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        uniformBufferStandardLayout;
} VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

typedef struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR;

typedef struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        depthClipEnable;
} VkPhysicalDeviceDepthClipEnableFeaturesEXT;

typedef struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
	VkStructureType                                     sType;
	const void                                         *pNext;
	VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
	VkBool32                                            depthClipEnable;
} VkPipelineRasterizationDepthClipStateCreateInfoEXT;

typedef struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkDeviceSize    heapBudget[VK_MAX_MEMORY_HEAPS];
	VkDeviceSize    heapUsage[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryBudgetPropertiesEXT;

typedef struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        memoryPriority;
} VkPhysicalDeviceMemoryPriorityFeaturesEXT;

typedef struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        pageableDeviceLocalMemory;
} VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;

typedef struct VkPhysicalDeviceBufferDeviceAddressFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        bufferDeviceAddress;
	VkBool32        bufferDeviceAddressCaptureReplay;
	VkBool32        bufferDeviceAddressMultiDevice;
} VkPhysicalDeviceBufferDeviceAddressFeatures;

typedef struct VkPhysicalDeviceBufferDeviceAddressFeatures VkPhysicalDeviceBufferDeviceAddressFeaturesKHR;

typedef struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        bufferDeviceAddress;
	VkBool32        bufferDeviceAddressCaptureReplay;
	VkBool32        bufferDeviceAddressMultiDevice;
} VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

typedef struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT VkPhysicalDeviceBufferAddressFeaturesEXT;

typedef struct VkBufferDeviceAddressCreateInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceAddress deviceAddress;
} VkBufferDeviceAddressCreateInfoEXT;

typedef struct VkFilterCubicImageViewImageFormatPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        filterCubic;
	VkBool32        filterCubicMinmax;
} VkFilterCubicImageViewImageFormatPropertiesEXT;

typedef struct VkPhysicalDeviceImagelessFramebufferFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        imagelessFramebuffer;
} VkPhysicalDeviceImagelessFramebufferFeatures;

typedef struct VkPhysicalDeviceImagelessFramebufferFeatures VkPhysicalDeviceImagelessFramebufferFeaturesKHR;

typedef struct VkFramebufferAttachmentImageInfo {
	VkStructureType    sType;
	const void        *pNext;
	VkImageCreateFlags flags;
	VkImageUsageFlags  usage;
	uint32_t           width;
	uint32_t           height;
	uint32_t           layerCount;
	uint32_t           viewFormatCount;
	const VkFormat    *pViewFormats;
} VkFramebufferAttachmentImageInfo;

typedef struct VkFramebufferAttachmentImageInfo VkFramebufferAttachmentImageInfoKHR;

typedef struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        textureCompressionASTC_HDR;
} VkPhysicalDeviceTextureCompressionASTCHDRFeatures;

typedef struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT;

typedef struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        cooperativeMatrix;
	VkBool32        cooperativeMatrixRobustBufferAccess;
} VkPhysicalDeviceCooperativeMatrixFeaturesNV;

typedef struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
	VkStructureType    sType;
	void              *pNext;
	VkShaderStageFlags cooperativeMatrixSupportedStages;
} VkPhysicalDeviceCooperativeMatrixPropertiesNV;

typedef struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        ycbcrImageArrays;
} VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;

typedef struct VkImageViewAddressPropertiesNVX {
	VkStructureType sType;
	void           *pNext;
	VkDeviceAddress deviceAddress;
	VkDeviceSize    size;
} VkImageViewAddressPropertiesNVX;

typedef struct VkPipelineCreationFeedback {
	VkPipelineCreationFeedbackFlags flags;
	uint64_t                        duration;
} VkPipelineCreationFeedback;

typedef struct VkPipelineCreationFeedback VkPipelineCreationFeedbackEXT;

typedef struct VkPipelineCreationFeedbackCreateInfo {
	VkStructureType             sType;
	const void                 *pNext;
	VkPipelineCreationFeedback *pPipelineCreationFeedback;
	uint32_t                    pipelineStageCreationFeedbackCount;
	VkPipelineCreationFeedback *pPipelineStageCreationFeedbacks;
} VkPipelineCreationFeedbackCreateInfo;

typedef struct VkPipelineCreationFeedbackCreateInfo VkPipelineCreationFeedbackCreateInfoEXT;

#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef struct VkSurfaceCapabilitiesFullScreenExclusiveEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        fullScreenExclusiveSupported;
} VkSurfaceCapabilitiesFullScreenExclusiveEXT;

#endif

typedef struct VkPhysicalDevicePresentBarrierFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        presentBarrier;
} VkPhysicalDevicePresentBarrierFeaturesNV;

typedef struct VkSurfaceCapabilitiesPresentBarrierNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        presentBarrierSupported;
} VkSurfaceCapabilitiesPresentBarrierNV;

typedef struct VkSwapchainPresentBarrierCreateInfoNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        presentBarrierEnable;
} VkSwapchainPresentBarrierCreateInfoNV;

typedef struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        performanceCounterQueryPools;
	VkBool32        performanceCounterMultipleQueryPools;
} VkPhysicalDevicePerformanceQueryFeaturesKHR;

typedef struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        allowCommandBufferQueryCopies;
} VkPhysicalDevicePerformanceQueryPropertiesKHR;

typedef struct VkPerformanceCounterDescriptionKHR {
	VkStructureType                         sType;
	void                                   *pNext;
	VkPerformanceCounterDescriptionFlagsKHR flags;
	char                                    name[VK_MAX_DESCRIPTION_SIZE];
	char                                    category[VK_MAX_DESCRIPTION_SIZE];
	char                                    description[VK_MAX_DESCRIPTION_SIZE];
} VkPerformanceCounterDescriptionKHR;

typedef struct VkAcquireProfilingLockInfoKHR {
	VkStructureType                sType;
	const void                    *pNext;
	VkAcquireProfilingLockFlagsKHR flags;
	uint64_t                       timeout;
} VkAcquireProfilingLockInfoKHR;

typedef struct VkHeadlessSurfaceCreateInfoEXT {
	VkStructureType                 sType;
	const void                     *pNext;
	VkHeadlessSurfaceCreateFlagsEXT flags;
} VkHeadlessSurfaceCreateInfoEXT;

typedef struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        coverageReductionMode;
} VkPhysicalDeviceCoverageReductionModeFeaturesNV;

typedef struct VkPipelineCoverageReductionStateCreateInfoNV {
	VkStructureType                               sType;
	const void                                   *pNext;
	VkPipelineCoverageReductionStateCreateFlagsNV flags;
	VkCoverageReductionModeNV                     coverageReductionMode;
} VkPipelineCoverageReductionStateCreateInfoNV;

typedef struct VkFramebufferMixedSamplesCombinationNV {
	VkStructureType           sType;
	void                     *pNext;
	VkCoverageReductionModeNV coverageReductionMode;
	VkSampleCountFlagBits     rasterizationSamples;
	VkSampleCountFlags        depthStencilSamples;
	VkSampleCountFlags        colorSamples;
} VkFramebufferMixedSamplesCombinationNV;

typedef struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderIntegerFunctions2;
} VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;

typedef union VkPerformanceValueDataINTEL {
	uint32_t    value32;
	uint64_t    value64;
	float       valueFloat;
	VkBool32    valueBool;
	const char *valueString;
} VkPerformanceValueDataINTEL;

typedef struct VkPerformanceValueINTEL {
	VkPerformanceValueTypeINTEL type;
	VkPerformanceValueDataINTEL data;
} VkPerformanceValueINTEL;

typedef struct VkPerformanceOverrideInfoINTEL {
	VkStructureType                sType;
	const void                    *pNext;
	VkPerformanceOverrideTypeINTEL type;
	VkBool32                       enable;
	uint64_t                       parameter;
} VkPerformanceOverrideInfoINTEL;

typedef struct VkPhysicalDeviceShaderClockFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderSubgroupClock;
	VkBool32        shaderDeviceClock;
} VkPhysicalDeviceShaderClockFeaturesKHR;

typedef struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        indexTypeUint8;
} VkPhysicalDeviceIndexTypeUint8FeaturesEXT;

typedef struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderSMBuiltins;
} VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;

typedef struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        fragmentShaderSampleInterlock;
	VkBool32        fragmentShaderPixelInterlock;
	VkBool32        fragmentShaderShadingRateInterlock;
} VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;

typedef struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        separateDepthStencilLayouts;
} VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

typedef struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR;

typedef struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        primitiveTopologyListRestart;
	VkBool32        primitiveTopologyPatchListRestart;
} VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;

typedef struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        pipelineExecutableInfo;
} VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

typedef struct VkPipelineExecutablePropertiesKHR {
	VkStructureType    sType;
	void              *pNext;
	VkShaderStageFlags stages;
	char               name[VK_MAX_DESCRIPTION_SIZE];
	char               description[VK_MAX_DESCRIPTION_SIZE];
	uint32_t           subgroupSize;
} VkPipelineExecutablePropertiesKHR;

typedef union VkPipelineExecutableStatisticValueKHR {
	VkBool32 b32;
	int64_t  i64;
	uint64_t u64;
	double   f64;
} VkPipelineExecutableStatisticValueKHR;

typedef struct VkPipelineExecutableStatisticKHR {
	VkStructureType                        sType;
	void                                  *pNext;
	char                                   name[VK_MAX_DESCRIPTION_SIZE];
	char                                   description[VK_MAX_DESCRIPTION_SIZE];
	VkPipelineExecutableStatisticFormatKHR format;
	VkPipelineExecutableStatisticValueKHR  value;
} VkPipelineExecutableStatisticKHR;

typedef struct VkPipelineExecutableInternalRepresentationKHR {
	VkStructureType sType;
	void           *pNext;
	char            name[VK_MAX_DESCRIPTION_SIZE];
	char            description[VK_MAX_DESCRIPTION_SIZE];
	VkBool32        isText;
	size_t          dataSize;
	void           *pData;
} VkPipelineExecutableInternalRepresentationKHR;

typedef struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderDemoteToHelperInvocation;
} VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;

typedef struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT;

typedef struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        texelBufferAlignment;
} VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;

typedef struct VkPhysicalDeviceTexelBufferAlignmentProperties {
	VkStructureType sType;
	void           *pNext;
	VkDeviceSize    storageTexelBufferOffsetAlignmentBytes;
	VkBool32        storageTexelBufferOffsetSingleTexelAlignment;
	VkDeviceSize    uniformTexelBufferOffsetAlignmentBytes;
	VkBool32        uniformTexelBufferOffsetSingleTexelAlignment;
} VkPhysicalDeviceTexelBufferAlignmentProperties;

typedef struct VkPhysicalDeviceTexelBufferAlignmentProperties VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT;

typedef struct VkPhysicalDeviceSubgroupSizeControlFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        subgroupSizeControl;
	VkBool32        computeFullSubgroups;
} VkPhysicalDeviceSubgroupSizeControlFeatures;

typedef struct VkPhysicalDeviceSubgroupSizeControlFeatures VkPhysicalDeviceSubgroupSizeControlFeaturesEXT;

typedef struct VkPhysicalDeviceSubgroupSizeControlProperties {
	VkStructureType    sType;
	void              *pNext;
	uint32_t           minSubgroupSize;
	uint32_t           maxSubgroupSize;
	uint32_t           maxComputeWorkgroupSubgroups;
	VkShaderStageFlags requiredSubgroupSizeStages;
} VkPhysicalDeviceSubgroupSizeControlProperties;

typedef struct VkPhysicalDeviceSubgroupSizeControlProperties VkPhysicalDeviceSubgroupSizeControlPropertiesEXT;

typedef struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
	VkStructureType sType;
	void           *pNext;
	uint32_t        maxWorkGroupCount[3];
	uint32_t        maxWorkGroupSize[3];
	uint32_t        maxOutputClusterCount;
	VkDeviceSize    indirectBufferOffsetAlignment;
} VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI;

typedef struct VkPhysicalDeviceLineRasterizationFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        rectangularLines;
	VkBool32        bresenhamLines;
	VkBool32        smoothLines;
	VkBool32        stippledRectangularLines;
	VkBool32        stippledBresenhamLines;
	VkBool32        stippledSmoothLines;
} VkPhysicalDeviceLineRasterizationFeaturesEXT;

typedef struct VkPipelineRasterizationLineStateCreateInfoEXT {
	VkStructureType            sType;
	const void                *pNext;
	VkLineRasterizationModeEXT lineRasterizationMode;
	VkBool32                   stippledLineEnable;
	uint32_t                   lineStippleFactor;
	uint16_t                   lineStipplePattern;
} VkPipelineRasterizationLineStateCreateInfoEXT;

typedef struct VkPhysicalDevicePipelineCreationCacheControlFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        pipelineCreationCacheControl;
} VkPhysicalDevicePipelineCreationCacheControlFeatures;

typedef struct VkPhysicalDevicePipelineCreationCacheControlFeatures VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT;

typedef struct VkPhysicalDeviceVulkan11Features {
	VkStructureType sType;
	void           *pNext;
	VkBool32        storageBuffer16BitAccess;
	VkBool32        uniformAndStorageBuffer16BitAccess;
	VkBool32        storagePushConstant16;
	VkBool32        storageInputOutput16;
	VkBool32        multiview;
	VkBool32        multiviewGeometryShader;
	VkBool32        multiviewTessellationShader;
	VkBool32        variablePointersStorageBuffer;
	VkBool32        variablePointers;
	VkBool32        protectedMemory;
	VkBool32        samplerYcbcrConversion;
	VkBool32        shaderDrawParameters;
} VkPhysicalDeviceVulkan11Features;

typedef struct VkPhysicalDeviceVulkan11Properties {
	VkStructureType         sType;
	void                   *pNext;
	uint8_t                 deviceUUID[VK_UUID_SIZE];
	uint8_t                 driverUUID[VK_UUID_SIZE];
	uint8_t                 deviceLUID[VK_LUID_SIZE];
	uint32_t                deviceNodeMask;
	VkBool32                deviceLUIDValid;
	uint32_t                subgroupSize;
	VkShaderStageFlags      subgroupSupportedStages;
	VkSubgroupFeatureFlags  subgroupSupportedOperations;
	VkBool32                subgroupQuadOperationsInAllStages;
	VkPointClippingBehavior pointClippingBehavior;
	uint32_t                maxMultiviewViewCount;
	uint32_t                maxMultiviewInstanceIndex;
	VkBool32                protectedNoFault;
	uint32_t                maxPerSetDescriptors;
	VkDeviceSize            maxMemoryAllocationSize;
} VkPhysicalDeviceVulkan11Properties;

typedef struct VkPhysicalDeviceVulkan12Features {
	VkStructureType sType;
	void           *pNext;
	VkBool32        samplerMirrorClampToEdge;
	VkBool32        drawIndirectCount;
	VkBool32        storageBuffer8BitAccess;
	VkBool32        uniformAndStorageBuffer8BitAccess;
	VkBool32        storagePushConstant8;
	VkBool32        shaderBufferInt64Atomics;
	VkBool32        shaderSharedInt64Atomics;
	VkBool32        shaderFloat16;
	VkBool32        shaderInt8;
	VkBool32        descriptorIndexing;
	VkBool32        shaderInputAttachmentArrayDynamicIndexing;
	VkBool32        shaderUniformTexelBufferArrayDynamicIndexing;
	VkBool32        shaderStorageTexelBufferArrayDynamicIndexing;
	VkBool32        shaderUniformBufferArrayNonUniformIndexing;
	VkBool32        shaderSampledImageArrayNonUniformIndexing;
	VkBool32        shaderStorageBufferArrayNonUniformIndexing;
	VkBool32        shaderStorageImageArrayNonUniformIndexing;
	VkBool32        shaderInputAttachmentArrayNonUniformIndexing;
	VkBool32        shaderUniformTexelBufferArrayNonUniformIndexing;
	VkBool32        shaderStorageTexelBufferArrayNonUniformIndexing;
	VkBool32        descriptorBindingUniformBufferUpdateAfterBind;
	VkBool32        descriptorBindingSampledImageUpdateAfterBind;
	VkBool32        descriptorBindingStorageImageUpdateAfterBind;
	VkBool32        descriptorBindingStorageBufferUpdateAfterBind;
	VkBool32        descriptorBindingUniformTexelBufferUpdateAfterBind;
	VkBool32        descriptorBindingStorageTexelBufferUpdateAfterBind;
	VkBool32        descriptorBindingUpdateUnusedWhilePending;
	VkBool32        descriptorBindingPartiallyBound;
	VkBool32        descriptorBindingVariableDescriptorCount;
	VkBool32        runtimeDescriptorArray;
	VkBool32        samplerFilterMinmax;
	VkBool32        scalarBlockLayout;
	VkBool32        imagelessFramebuffer;
	VkBool32        uniformBufferStandardLayout;
	VkBool32        shaderSubgroupExtendedTypes;
	VkBool32        separateDepthStencilLayouts;
	VkBool32        hostQueryReset;
	VkBool32        timelineSemaphore;
	VkBool32        bufferDeviceAddress;
	VkBool32        bufferDeviceAddressCaptureReplay;
	VkBool32        bufferDeviceAddressMultiDevice;
	VkBool32        vulkanMemoryModel;
	VkBool32        vulkanMemoryModelDeviceScope;
	VkBool32        vulkanMemoryModelAvailabilityVisibilityChains;
	VkBool32        shaderOutputViewportIndex;
	VkBool32        shaderOutputLayer;
	VkBool32        subgroupBroadcastDynamicId;
} VkPhysicalDeviceVulkan12Features;

typedef struct VkPhysicalDeviceVulkan12Properties {
	VkStructureType                   sType;
	void                             *pNext;
	VkDriverId                        driverID;
	char                              driverName[VK_MAX_DRIVER_NAME_SIZE];
	char                              driverInfo[VK_MAX_DRIVER_INFO_SIZE];
	VkConformanceVersion              conformanceVersion;
	VkShaderFloatControlsIndependence denormBehaviorIndependence;
	VkShaderFloatControlsIndependence roundingModeIndependence;
	VkBool32                          shaderSignedZeroInfNanPreserveFloat16;
	VkBool32                          shaderSignedZeroInfNanPreserveFloat32;
	VkBool32                          shaderSignedZeroInfNanPreserveFloat64;
	VkBool32                          shaderDenormPreserveFloat16;
	VkBool32                          shaderDenormPreserveFloat32;
	VkBool32                          shaderDenormPreserveFloat64;
	VkBool32                          shaderDenormFlushToZeroFloat16;
	VkBool32                          shaderDenormFlushToZeroFloat32;
	VkBool32                          shaderDenormFlushToZeroFloat64;
	VkBool32                          shaderRoundingModeRTEFloat16;
	VkBool32                          shaderRoundingModeRTEFloat32;
	VkBool32                          shaderRoundingModeRTEFloat64;
	VkBool32                          shaderRoundingModeRTZFloat16;
	VkBool32                          shaderRoundingModeRTZFloat32;
	VkBool32                          shaderRoundingModeRTZFloat64;
	uint32_t                          maxUpdateAfterBindDescriptorsInAllPools;
	VkBool32                          shaderUniformBufferArrayNonUniformIndexingNative;
	VkBool32                          shaderSampledImageArrayNonUniformIndexingNative;
	VkBool32                          shaderStorageBufferArrayNonUniformIndexingNative;
	VkBool32                          shaderStorageImageArrayNonUniformIndexingNative;
	VkBool32                          shaderInputAttachmentArrayNonUniformIndexingNative;
	VkBool32                          robustBufferAccessUpdateAfterBind;
	VkBool32                          quadDivergentImplicitLod;
	uint32_t                          maxPerStageDescriptorUpdateAfterBindSamplers;
	uint32_t                          maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	uint32_t                          maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	uint32_t                          maxPerStageDescriptorUpdateAfterBindSampledImages;
	uint32_t                          maxPerStageDescriptorUpdateAfterBindStorageImages;
	uint32_t                          maxPerStageDescriptorUpdateAfterBindInputAttachments;
	uint32_t                          maxPerStageUpdateAfterBindResources;
	uint32_t                          maxDescriptorSetUpdateAfterBindSamplers;
	uint32_t                          maxDescriptorSetUpdateAfterBindUniformBuffers;
	uint32_t                          maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	uint32_t                          maxDescriptorSetUpdateAfterBindStorageBuffers;
	uint32_t                          maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	uint32_t                          maxDescriptorSetUpdateAfterBindSampledImages;
	uint32_t                          maxDescriptorSetUpdateAfterBindStorageImages;
	uint32_t                          maxDescriptorSetUpdateAfterBindInputAttachments;
	VkResolveModeFlags                supportedDepthResolveModes;
	VkResolveModeFlags                supportedStencilResolveModes;
	VkBool32                          independentResolveNone;
	VkBool32                          independentResolve;
	VkBool32                          filterMinmaxSingleComponentFormats;
	VkBool32                          filterMinmaxImageComponentMapping;
	uint64_t                          maxTimelineSemaphoreValueDifference;
	VkSampleCountFlags                framebufferIntegerColorSampleCounts;
} VkPhysicalDeviceVulkan12Properties;

typedef struct VkPhysicalDeviceVulkan13Features {
	VkStructureType sType;
	void           *pNext;
	VkBool32        robustImageAccess;
	VkBool32        inlineUniformBlock;
	VkBool32        descriptorBindingInlineUniformBlockUpdateAfterBind;
	VkBool32        pipelineCreationCacheControl;
	VkBool32        privateData;
	VkBool32        shaderDemoteToHelperInvocation;
	VkBool32        shaderTerminateInvocation;
	VkBool32        subgroupSizeControl;
	VkBool32        computeFullSubgroups;
	VkBool32        synchronization2;
	VkBool32        textureCompressionASTC_HDR;
	VkBool32        shaderZeroInitializeWorkgroupMemory;
	VkBool32        dynamicRendering;
	VkBool32        shaderIntegerDotProduct;
	VkBool32        maintenance4;
} VkPhysicalDeviceVulkan13Features;

typedef struct VkPhysicalDeviceVulkan13Properties {
	VkStructureType    sType;
	void              *pNext;
	uint32_t           minSubgroupSize;
	uint32_t           maxSubgroupSize;
	uint32_t           maxComputeWorkgroupSubgroups;
	VkShaderStageFlags requiredSubgroupSizeStages;
	uint32_t           maxInlineUniformBlockSize;
	uint32_t           maxPerStageDescriptorInlineUniformBlocks;
	uint32_t           maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	uint32_t           maxDescriptorSetInlineUniformBlocks;
	uint32_t           maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	uint32_t           maxInlineUniformTotalSize;
	VkBool32           integerDotProduct8BitUnsignedAccelerated;
	VkBool32           integerDotProduct8BitSignedAccelerated;
	VkBool32           integerDotProduct8BitMixedSignednessAccelerated;
	VkBool32           integerDotProduct4x8BitPackedUnsignedAccelerated;
	VkBool32           integerDotProduct4x8BitPackedSignedAccelerated;
	VkBool32           integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	VkBool32           integerDotProduct16BitUnsignedAccelerated;
	VkBool32           integerDotProduct16BitSignedAccelerated;
	VkBool32           integerDotProduct16BitMixedSignednessAccelerated;
	VkBool32           integerDotProduct32BitUnsignedAccelerated;
	VkBool32           integerDotProduct32BitSignedAccelerated;
	VkBool32           integerDotProduct32BitMixedSignednessAccelerated;
	VkBool32           integerDotProduct64BitUnsignedAccelerated;
	VkBool32           integerDotProduct64BitSignedAccelerated;
	VkBool32           integerDotProduct64BitMixedSignednessAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	VkBool32           integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
	VkDeviceSize       storageTexelBufferOffsetAlignmentBytes;
	VkBool32           storageTexelBufferOffsetSingleTexelAlignment;
	VkDeviceSize       uniformTexelBufferOffsetAlignmentBytes;
	VkBool32           uniformTexelBufferOffsetSingleTexelAlignment;
	VkDeviceSize       maxBufferSize;
} VkPhysicalDeviceVulkan13Properties;

typedef struct VkPipelineCompilerControlCreateInfoAMD {
	VkStructureType                   sType;
	const void                       *pNext;
	VkPipelineCompilerControlFlagsAMD compilerControlFlags;
} VkPipelineCompilerControlCreateInfoAMD;

typedef struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
	VkStructureType sType;
	void           *pNext;
	VkBool32        deviceCoherentMemory;
} VkPhysicalDeviceCoherentMemoryFeaturesAMD;

typedef struct VkPhysicalDeviceToolProperties {
	VkStructureType    sType;
	void              *pNext;
	char               name[VK_MAX_EXTENSION_NAME_SIZE];
	char               version[VK_MAX_EXTENSION_NAME_SIZE];
	VkToolPurposeFlags purposes;
	char               description[VK_MAX_DESCRIPTION_SIZE];
	char               layer[VK_MAX_EXTENSION_NAME_SIZE];
} VkPhysicalDeviceToolProperties;

typedef struct VkPhysicalDeviceToolProperties VkPhysicalDeviceToolPropertiesEXT;

typedef struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        customBorderColors;
	VkBool32        customBorderColorWithoutFormat;
} VkPhysicalDeviceCustomBorderColorFeaturesEXT;

typedef struct VkSamplerBorderColorComponentMappingCreateInfoEXT {
	VkStructureType    sType;
	const void        *pNext;
	VkComponentMapping components;
	VkBool32           srgb;
} VkSamplerBorderColorComponentMappingCreateInfoEXT;

typedef struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        borderColorSwizzle;
	VkBool32        borderColorSwizzleFromImage;
} VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;

typedef union VkDeviceOrHostAddressKHR {
	VkDeviceAddress deviceAddress;
	void           *hostAddress;
} VkDeviceOrHostAddressKHR;

typedef union VkDeviceOrHostAddressConstKHR {
	VkDeviceAddress deviceAddress;
	const void     *hostAddress;
} VkDeviceOrHostAddressConstKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef union VkDeviceOrHostAddressConstAMDX {
	VkDeviceAddress deviceAddress;
	const void     *hostAddress;
} VkDeviceOrHostAddressConstAMDX;

#endif

typedef struct VkAccelerationStructureGeometryTrianglesDataKHR {
	VkStructureType               sType;
	const void                   *pNext;
	VkFormat                      vertexFormat;
	VkDeviceOrHostAddressConstKHR vertexData;
	VkDeviceSize                  vertexStride;
	uint32_t                      maxVertex;
	VkIndexType                   indexType;
	VkDeviceOrHostAddressConstKHR indexData;
	VkDeviceOrHostAddressConstKHR transformData;
} VkAccelerationStructureGeometryTrianglesDataKHR;

typedef struct VkAccelerationStructureGeometryAabbsDataKHR {
	VkStructureType               sType;
	const void                   *pNext;
	VkDeviceOrHostAddressConstKHR data;
	VkDeviceSize                  stride;
} VkAccelerationStructureGeometryAabbsDataKHR;

typedef struct VkAccelerationStructureGeometryInstancesDataKHR {
	VkStructureType               sType;
	const void                   *pNext;
	VkBool32                      arrayOfPointers;
	VkDeviceOrHostAddressConstKHR data;
} VkAccelerationStructureGeometryInstancesDataKHR;

typedef union VkAccelerationStructureGeometryDataKHR {
	VkAccelerationStructureGeometryTrianglesDataKHR triangles;
	VkAccelerationStructureGeometryAabbsDataKHR     aabbs;
	VkAccelerationStructureGeometryInstancesDataKHR instances;
} VkAccelerationStructureGeometryDataKHR;

typedef struct VkAccelerationStructureGeometryKHR {
	VkStructureType                        sType;
	const void                            *pNext;
	VkGeometryTypeKHR                      geometryType;
	VkAccelerationStructureGeometryDataKHR geometry;
	VkGeometryFlagsKHR                     flags;
} VkAccelerationStructureGeometryKHR;

typedef struct VkAccelerationStructureBuildGeometryInfoKHR {
	VkStructureType                                  sType;
	const void                                      *pNext;
	VkAccelerationStructureTypeKHR                   type;
	VkBuildAccelerationStructureFlagsKHR             flags;
	VkBuildAccelerationStructureModeKHR              mode;
	VkAccelerationStructureKHR                       srcAccelerationStructure;
	VkAccelerationStructureKHR                       dstAccelerationStructure;
	uint32_t                                         geometryCount;
	const VkAccelerationStructureGeometryKHR        *pGeometries;
	const VkAccelerationStructureGeometryKHR *const *ppGeometries;
	VkDeviceOrHostAddressKHR                         scratchData;
} VkAccelerationStructureBuildGeometryInfoKHR;

typedef struct VkAccelerationStructureCreateInfoKHR {
	VkStructureType                       sType;
	const void                           *pNext;
	VkAccelerationStructureCreateFlagsKHR createFlags;
	VkBuffer                              buffer;
	VkDeviceSize                          offset;
	VkDeviceSize                          size;
	VkAccelerationStructureTypeKHR        type;
	VkDeviceAddress                       deviceAddress;
} VkAccelerationStructureCreateInfoKHR;

typedef struct VkAccelerationStructureInstanceKHR {
	VkTransformMatrixKHR       transform;
	uint32_t                   instanceCustomIndex                   : 24;
	uint32_t                   mask                                  : 8;
	uint32_t                   instanceShaderBindingTableRecordOffset: 24;
	VkGeometryInstanceFlagsKHR flags                                 : 8;
	uint64_t                   accelerationStructureReference;
} VkAccelerationStructureInstanceKHR;

typedef struct VkAccelerationStructureInstanceKHR VkAccelerationStructureInstanceNV;

typedef struct VkCopyAccelerationStructureToMemoryInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkAccelerationStructureKHR         src;
	VkDeviceOrHostAddressKHR           dst;
	VkCopyAccelerationStructureModeKHR mode;
} VkCopyAccelerationStructureToMemoryInfoKHR;

typedef struct VkCopyMemoryToAccelerationStructureInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkDeviceOrHostAddressConstKHR      src;
	VkAccelerationStructureKHR         dst;
	VkCopyAccelerationStructureModeKHR mode;
} VkCopyMemoryToAccelerationStructureInfoKHR;

typedef struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        extendedDynamicState;
} VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;

typedef struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        extendedDynamicState2;
	VkBool32        extendedDynamicState2LogicOp;
	VkBool32        extendedDynamicState2PatchControlPoints;
} VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;

typedef struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        extendedDynamicState3TessellationDomainOrigin;
	VkBool32        extendedDynamicState3DepthClampEnable;
	VkBool32        extendedDynamicState3PolygonMode;
	VkBool32        extendedDynamicState3RasterizationSamples;
	VkBool32        extendedDynamicState3SampleMask;
	VkBool32        extendedDynamicState3AlphaToCoverageEnable;
	VkBool32        extendedDynamicState3AlphaToOneEnable;
	VkBool32        extendedDynamicState3LogicOpEnable;
	VkBool32        extendedDynamicState3ColorBlendEnable;
	VkBool32        extendedDynamicState3ColorBlendEquation;
	VkBool32        extendedDynamicState3ColorWriteMask;
	VkBool32        extendedDynamicState3RasterizationStream;
	VkBool32        extendedDynamicState3ConservativeRasterizationMode;
	VkBool32        extendedDynamicState3ExtraPrimitiveOverestimationSize;
	VkBool32        extendedDynamicState3DepthClipEnable;
	VkBool32        extendedDynamicState3SampleLocationsEnable;
	VkBool32        extendedDynamicState3ColorBlendAdvanced;
	VkBool32        extendedDynamicState3ProvokingVertexMode;
	VkBool32        extendedDynamicState3LineRasterizationMode;
	VkBool32        extendedDynamicState3LineStippleEnable;
	VkBool32        extendedDynamicState3DepthClipNegativeOneToOne;
	VkBool32        extendedDynamicState3ViewportWScalingEnable;
	VkBool32        extendedDynamicState3ViewportSwizzle;
	VkBool32        extendedDynamicState3CoverageToColorEnable;
	VkBool32        extendedDynamicState3CoverageToColorLocation;
	VkBool32        extendedDynamicState3CoverageModulationMode;
	VkBool32        extendedDynamicState3CoverageModulationTableEnable;
	VkBool32        extendedDynamicState3CoverageModulationTable;
	VkBool32        extendedDynamicState3CoverageReductionMode;
	VkBool32        extendedDynamicState3RepresentativeFragmentTestEnable;
	VkBool32        extendedDynamicState3ShadingRateImageEnable;
} VkPhysicalDeviceExtendedDynamicState3FeaturesEXT;

typedef struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        dynamicPrimitiveTopologyUnrestricted;
} VkPhysicalDeviceExtendedDynamicState3PropertiesEXT;

typedef struct VkColorBlendAdvancedEXT {
	VkBlendOp         advancedBlendOp;
	VkBool32          srcPremultiplied;
	VkBool32          dstPremultiplied;
	VkBlendOverlapEXT blendOverlap;
	VkBool32          clampResults;
} VkColorBlendAdvancedEXT;

typedef struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        diagnosticsConfig;
} VkPhysicalDeviceDiagnosticsConfigFeaturesNV;

typedef struct VkDeviceDiagnosticsConfigCreateInfoNV {
	VkStructureType                  sType;
	const void                      *pNext;
	VkDeviceDiagnosticsConfigFlagsNV flags;
} VkDeviceDiagnosticsConfigCreateInfoNV;

typedef struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderZeroInitializeWorkgroupMemory;
} VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

typedef struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR;

typedef struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderSubgroupUniformControlFlow;
} VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;

typedef struct VkPhysicalDeviceRobustness2FeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        robustBufferAccess2;
	VkBool32        robustImageAccess2;
	VkBool32        nullDescriptor;
} VkPhysicalDeviceRobustness2FeaturesEXT;

typedef struct VkPhysicalDeviceRobustness2PropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkDeviceSize    robustStorageBufferAccessSizeAlignment;
	VkDeviceSize    robustUniformBufferAccessSizeAlignment;
} VkPhysicalDeviceRobustness2PropertiesEXT;

typedef struct VkPhysicalDeviceImageRobustnessFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        robustImageAccess;
} VkPhysicalDeviceImageRobustnessFeatures;

typedef struct VkPhysicalDeviceImageRobustnessFeatures VkPhysicalDeviceImageRobustnessFeaturesEXT;

typedef struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        workgroupMemoryExplicitLayout;
	VkBool32        workgroupMemoryExplicitLayoutScalarBlockLayout;
	VkBool32        workgroupMemoryExplicitLayout8BitAccess;
	VkBool32        workgroupMemoryExplicitLayout16BitAccess;
} VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDevicePortabilitySubsetFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        constantAlphaColorBlendFactors;
	VkBool32        events;
	VkBool32        imageViewFormatReinterpretation;
	VkBool32        imageViewFormatSwizzle;
	VkBool32        imageView2DOn3DImage;
	VkBool32        multisampleArrayImage;
	VkBool32        mutableComparisonSamplers;
	VkBool32        pointPolygons;
	VkBool32        samplerMipLodBias;
	VkBool32        separateStencilMaskRef;
	VkBool32        shaderSampleRateInterpolationFunctions;
	VkBool32        tessellationIsolines;
	VkBool32        tessellationPointMode;
	VkBool32        triangleFans;
	VkBool32        vertexAttributeAccessBeyondStride;
} VkPhysicalDevicePortabilitySubsetFeaturesKHR;

#endif

typedef struct VkPhysicalDevice4444FormatsFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        formatA4R4G4B4;
	VkBool32        formatA4B4G4R4;
} VkPhysicalDevice4444FormatsFeaturesEXT;

typedef struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
	VkStructureType sType;
	void           *pNext;
	VkBool32        subpassShading;
} VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;

typedef struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
	VkStructureType sType;
	void           *pNext;
	VkBool32        clustercullingShader;
	VkBool32        multiviewClusterCullingShader;
} VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI;

typedef struct VkBufferCopy2 {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceSize    srcOffset;
	VkDeviceSize    dstOffset;
	VkDeviceSize    size;
} VkBufferCopy2;

typedef struct VkBufferCopy2 VkBufferCopy2KHR;

typedef struct VkImageCopy2 {
	VkStructureType          sType;
	const void              *pNext;
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D               srcOffset;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D               dstOffset;
	VkExtent3D               extent;
} VkImageCopy2;

typedef struct VkImageCopy2 VkImageCopy2KHR;

typedef struct VkImageBlit2 {
	VkStructureType          sType;
	const void              *pNext;
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D               srcOffsets[2];
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D               dstOffsets[2];
} VkImageBlit2;

typedef struct VkImageBlit2 VkImageBlit2KHR;

typedef struct VkBufferImageCopy2 {
	VkStructureType          sType;
	const void              *pNext;
	VkDeviceSize             bufferOffset;
	uint32_t                 bufferRowLength;
	uint32_t                 bufferImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D               imageOffset;
	VkExtent3D               imageExtent;
} VkBufferImageCopy2;

typedef struct VkBufferImageCopy2 VkBufferImageCopy2KHR;

typedef struct VkImageResolve2 {
	VkStructureType          sType;
	const void              *pNext;
	VkImageSubresourceLayers srcSubresource;
	VkOffset3D               srcOffset;
	VkImageSubresourceLayers dstSubresource;
	VkOffset3D               dstOffset;
	VkExtent3D               extent;
} VkImageResolve2;

typedef struct VkImageResolve2 VkImageResolve2KHR;

typedef struct VkCopyBufferInfo2 {
	VkStructureType      sType;
	const void          *pNext;
	VkBuffer             srcBuffer;
	VkBuffer             dstBuffer;
	uint32_t             regionCount;
	const VkBufferCopy2 *pRegions;
} VkCopyBufferInfo2;

typedef struct VkCopyBufferInfo2 VkCopyBufferInfo2KHR;

typedef struct VkCopyImageInfo2 {
	VkStructureType     sType;
	const void         *pNext;
	VkImage             srcImage;
	VkImageLayout       srcImageLayout;
	VkImage             dstImage;
	VkImageLayout       dstImageLayout;
	uint32_t            regionCount;
	const VkImageCopy2 *pRegions;
} VkCopyImageInfo2;

typedef struct VkCopyImageInfo2 VkCopyImageInfo2KHR;

typedef struct VkBlitImageInfo2 {
	VkStructureType     sType;
	const void         *pNext;
	VkImage             srcImage;
	VkImageLayout       srcImageLayout;
	VkImage             dstImage;
	VkImageLayout       dstImageLayout;
	uint32_t            regionCount;
	const VkImageBlit2 *pRegions;
	VkFilter            filter;
} VkBlitImageInfo2;

typedef struct VkBlitImageInfo2 VkBlitImageInfo2KHR;

typedef struct VkCopyBufferToImageInfo2 {
	VkStructureType           sType;
	const void               *pNext;
	VkBuffer                  srcBuffer;
	VkImage                   dstImage;
	VkImageLayout             dstImageLayout;
	uint32_t                  regionCount;
	const VkBufferImageCopy2 *pRegions;
} VkCopyBufferToImageInfo2;

typedef struct VkCopyBufferToImageInfo2 VkCopyBufferToImageInfo2KHR;

typedef struct VkCopyImageToBufferInfo2 {
	VkStructureType           sType;
	const void               *pNext;
	VkImage                   srcImage;
	VkImageLayout             srcImageLayout;
	VkBuffer                  dstBuffer;
	uint32_t                  regionCount;
	const VkBufferImageCopy2 *pRegions;
} VkCopyImageToBufferInfo2;

typedef struct VkCopyImageToBufferInfo2 VkCopyImageToBufferInfo2KHR;

typedef struct VkResolveImageInfo2 {
	VkStructureType        sType;
	const void            *pNext;
	VkImage                srcImage;
	VkImageLayout          srcImageLayout;
	VkImage                dstImage;
	VkImageLayout          dstImageLayout;
	uint32_t               regionCount;
	const VkImageResolve2 *pRegions;
} VkResolveImageInfo2;

typedef struct VkResolveImageInfo2 VkResolveImageInfo2KHR;

typedef struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderImageInt64Atomics;
	VkBool32        sparseImageInt64Atomics;
} VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;

typedef struct VkFragmentShadingRateAttachmentInfoKHR {
	VkStructureType               sType;
	const void                   *pNext;
	const VkAttachmentReference2 *pFragmentShadingRateAttachment;
	VkExtent2D                    shadingRateAttachmentTexelSize;
} VkFragmentShadingRateAttachmentInfoKHR;

typedef struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        pipelineFragmentShadingRate;
	VkBool32        primitiveFragmentShadingRate;
	VkBool32        attachmentFragmentShadingRate;
} VkPhysicalDeviceFragmentShadingRateFeaturesKHR;

typedef struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
	VkStructureType       sType;
	void                 *pNext;
	VkExtent2D            minFragmentShadingRateAttachmentTexelSize;
	VkExtent2D            maxFragmentShadingRateAttachmentTexelSize;
	uint32_t              maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
	VkBool32              primitiveFragmentShadingRateWithMultipleViewports;
	VkBool32              layeredShadingRateAttachments;
	VkBool32              fragmentShadingRateNonTrivialCombinerOps;
	VkExtent2D            maxFragmentSize;
	uint32_t              maxFragmentSizeAspectRatio;
	uint32_t              maxFragmentShadingRateCoverageSamples;
	VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
	VkBool32              fragmentShadingRateWithShaderDepthStencilWrites;
	VkBool32              fragmentShadingRateWithSampleMask;
	VkBool32              fragmentShadingRateWithShaderSampleMask;
	VkBool32              fragmentShadingRateWithConservativeRasterization;
	VkBool32              fragmentShadingRateWithFragmentShaderInterlock;
	VkBool32              fragmentShadingRateWithCustomSampleLocations;
	VkBool32              fragmentShadingRateStrictMultiplyCombiner;
} VkPhysicalDeviceFragmentShadingRatePropertiesKHR;

typedef struct VkPhysicalDeviceFragmentShadingRateKHR {
	VkStructureType    sType;
	void              *pNext;
	VkSampleCountFlags sampleCounts;
	VkExtent2D         fragmentSize;
} VkPhysicalDeviceFragmentShadingRateKHR;

typedef struct VkPhysicalDeviceShaderTerminateInvocationFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderTerminateInvocation;
} VkPhysicalDeviceShaderTerminateInvocationFeatures;

typedef struct VkPhysicalDeviceShaderTerminateInvocationFeatures VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR;

typedef struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        fragmentShadingRateEnums;
	VkBool32        supersampleFragmentShadingRates;
	VkBool32        noInvocationFragmentShadingRates;
} VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;

typedef struct VkAccelerationStructureBuildSizesInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceSize    accelerationStructureSize;
	VkDeviceSize    updateScratchSize;
	VkDeviceSize    buildScratchSize;
} VkAccelerationStructureBuildSizesInfoKHR;

typedef struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        image2DViewOf3D;
	VkBool32        sampler2DViewOf3D;
} VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;

typedef struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        imageSlicedViewOf3D;
} VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT;

typedef struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        attachmentFeedbackLoopDynamicState;
} VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;

typedef struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        mutableDescriptorType;
} VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;

typedef struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE;

typedef struct VkPhysicalDeviceDepthClipControlFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        depthClipControl;
} VkPhysicalDeviceDepthClipControlFeaturesEXT;

typedef struct VkPipelineViewportDepthClipControlCreateInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        negativeOneToOne;
} VkPipelineViewportDepthClipControlCreateInfoEXT;

typedef struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        vertexInputDynamicState;
} VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;

typedef struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        externalMemoryRDMA;
} VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;

typedef struct VkPhysicalDeviceColorWriteEnableFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        colorWriteEnable;
} VkPhysicalDeviceColorWriteEnableFeaturesEXT;

typedef struct VkPipelineColorWriteCreateInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        attachmentCount;
	const VkBool32 *pColorWriteEnables;
} VkPipelineColorWriteCreateInfoEXT;

typedef struct VkMemoryBarrier2 {
	VkStructureType       sType;
	const void           *pNext;
	VkPipelineStageFlags2 srcStageMask;
	VkAccessFlags2        srcAccessMask;
	VkPipelineStageFlags2 dstStageMask;
	VkAccessFlags2        dstAccessMask;
} VkMemoryBarrier2;

typedef struct VkMemoryBarrier2 VkMemoryBarrier2KHR;

typedef struct VkImageMemoryBarrier2 {
	VkStructureType         sType;
	const void             *pNext;
	VkPipelineStageFlags2   srcStageMask;
	VkAccessFlags2          srcAccessMask;
	VkPipelineStageFlags2   dstStageMask;
	VkAccessFlags2          dstAccessMask;
	VkImageLayout           oldLayout;
	VkImageLayout           newLayout;
	uint32_t                srcQueueFamilyIndex;
	uint32_t                dstQueueFamilyIndex;
	VkImage                 image;
	VkImageSubresourceRange subresourceRange;
} VkImageMemoryBarrier2;

typedef struct VkImageMemoryBarrier2 VkImageMemoryBarrier2KHR;

typedef struct VkBufferMemoryBarrier2 {
	VkStructureType       sType;
	const void           *pNext;
	VkPipelineStageFlags2 srcStageMask;
	VkAccessFlags2        srcAccessMask;
	VkPipelineStageFlags2 dstStageMask;
	VkAccessFlags2        dstAccessMask;
	uint32_t              srcQueueFamilyIndex;
	uint32_t              dstQueueFamilyIndex;
	VkBuffer              buffer;
	VkDeviceSize          offset;
	VkDeviceSize          size;
} VkBufferMemoryBarrier2;

typedef struct VkBufferMemoryBarrier2 VkBufferMemoryBarrier2KHR;

typedef struct VkDependencyInfo {
	VkStructureType               sType;
	const void                   *pNext;
	VkDependencyFlags             dependencyFlags;
	uint32_t                      memoryBarrierCount;
	const VkMemoryBarrier2       *pMemoryBarriers;
	uint32_t                      bufferMemoryBarrierCount;
	const VkBufferMemoryBarrier2 *pBufferMemoryBarriers;
	uint32_t                      imageMemoryBarrierCount;
	const VkImageMemoryBarrier2  *pImageMemoryBarriers;
} VkDependencyInfo;

typedef struct VkDependencyInfo VkDependencyInfoKHR;

typedef struct VkSemaphoreSubmitInfo {
	VkStructureType       sType;
	const void           *pNext;
	VkSemaphore           semaphore;
	uint64_t              value;
	VkPipelineStageFlags2 stageMask;
	uint32_t              deviceIndex;
} VkSemaphoreSubmitInfo;

typedef struct VkSemaphoreSubmitInfo VkSemaphoreSubmitInfoKHR;

typedef struct VkSubmitInfo2 {
	VkStructureType                  sType;
	const void                      *pNext;
	VkSubmitFlags                    flags;
	uint32_t                         waitSemaphoreInfoCount;
	const VkSemaphoreSubmitInfo     *pWaitSemaphoreInfos;
	uint32_t                         commandBufferInfoCount;
	const VkCommandBufferSubmitInfo *pCommandBufferInfos;
	uint32_t                         signalSemaphoreInfoCount;
	const VkSemaphoreSubmitInfo     *pSignalSemaphoreInfos;
} VkSubmitInfo2;

typedef struct VkSubmitInfo2 VkSubmitInfo2KHR;

typedef struct VkQueueFamilyCheckpointProperties2NV {
	VkStructureType       sType;
	void                 *pNext;
	VkPipelineStageFlags2 checkpointExecutionStageMask;
} VkQueueFamilyCheckpointProperties2NV;

typedef struct VkCheckpointData2NV {
	VkStructureType       sType;
	void                 *pNext;
	VkPipelineStageFlags2 stage;
	void                 *pCheckpointMarker;
} VkCheckpointData2NV;

typedef struct VkPhysicalDeviceSynchronization2Features {
	VkStructureType sType;
	void           *pNext;
	VkBool32        synchronization2;
} VkPhysicalDeviceSynchronization2Features;

typedef struct VkPhysicalDeviceSynchronization2Features VkPhysicalDeviceSynchronization2FeaturesKHR;

typedef struct VkPhysicalDeviceHostImageCopyFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        hostImageCopy;
} VkPhysicalDeviceHostImageCopyFeaturesEXT;

typedef struct VkPhysicalDeviceHostImageCopyPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        copySrcLayoutCount;
	VkImageLayout  *pCopySrcLayouts;
	uint32_t        copyDstLayoutCount;
	VkImageLayout  *pCopyDstLayouts;
	uint8_t         optimalTilingLayoutUUID[VK_UUID_SIZE];
	VkBool32        identicalMemoryTypeRequirements;
} VkPhysicalDeviceHostImageCopyPropertiesEXT;

typedef struct VkMemoryToImageCopyEXT {
	VkStructureType          sType;
	const void              *pNext;
	const void              *pHostPointer;
	uint32_t                 memoryRowLength;
	uint32_t                 memoryImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D               imageOffset;
	VkExtent3D               imageExtent;
} VkMemoryToImageCopyEXT;

typedef struct VkImageToMemoryCopyEXT {
	VkStructureType          sType;
	const void              *pNext;
	void                    *pHostPointer;
	uint32_t                 memoryRowLength;
	uint32_t                 memoryImageHeight;
	VkImageSubresourceLayers imageSubresource;
	VkOffset3D               imageOffset;
	VkExtent3D               imageExtent;
} VkImageToMemoryCopyEXT;

typedef struct VkCopyMemoryToImageInfoEXT {
	VkStructureType               sType;
	const void                   *pNext;
	VkHostImageCopyFlagsEXT       flags;
	VkImage                       dstImage;
	VkImageLayout                 dstImageLayout;
	uint32_t                      regionCount;
	const VkMemoryToImageCopyEXT *pRegions;
} VkCopyMemoryToImageInfoEXT;

typedef struct VkCopyImageToMemoryInfoEXT {
	VkStructureType               sType;
	const void                   *pNext;
	VkHostImageCopyFlagsEXT       flags;
	VkImage                       srcImage;
	VkImageLayout                 srcImageLayout;
	uint32_t                      regionCount;
	const VkImageToMemoryCopyEXT *pRegions;
} VkCopyImageToMemoryInfoEXT;

typedef struct VkCopyImageToImageInfoEXT {
	VkStructureType         sType;
	const void             *pNext;
	VkHostImageCopyFlagsEXT flags;
	VkImage                 srcImage;
	VkImageLayout           srcImageLayout;
	VkImage                 dstImage;
	VkImageLayout           dstImageLayout;
	uint32_t                regionCount;
	const VkImageCopy2     *pRegions;
} VkCopyImageToImageInfoEXT;

typedef struct VkHostImageLayoutTransitionInfoEXT {
	VkStructureType         sType;
	const void             *pNext;
	VkImage                 image;
	VkImageLayout           oldLayout;
	VkImageLayout           newLayout;
	VkImageSubresourceRange subresourceRange;
} VkHostImageLayoutTransitionInfoEXT;

typedef struct VkSubresourceHostMemcpySizeEXT {
	VkStructureType sType;
	void           *pNext;
	VkDeviceSize    size;
} VkSubresourceHostMemcpySizeEXT;

typedef struct VkHostImageCopyDevicePerformanceQueryEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        optimalDeviceAccess;
	VkBool32        identicalMemoryLayout;
} VkHostImageCopyDevicePerformanceQueryEXT;

typedef struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        primitivesGeneratedQuery;
	VkBool32        primitivesGeneratedQueryWithRasterizerDiscard;
	VkBool32        primitivesGeneratedQueryWithNonZeroStreams;
} VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;

typedef struct VkPhysicalDeviceLegacyDitheringFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        legacyDithering;
} VkPhysicalDeviceLegacyDitheringFeaturesEXT;

typedef struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        multisampledRenderToSingleSampled;
} VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;

typedef struct VkSubpassResolvePerformanceQueryEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        optimal;
} VkSubpassResolvePerformanceQueryEXT;

typedef struct VkMultisampledRenderToSingleSampledInfoEXT {
	VkStructureType       sType;
	const void           *pNext;
	VkBool32              multisampledRenderToSingleSampledEnable;
	VkSampleCountFlagBits rasterizationSamples;
} VkMultisampledRenderToSingleSampledInfoEXT;

typedef struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        pipelineProtectedAccess;
} VkPhysicalDevicePipelineProtectedAccessFeaturesEXT;

typedef struct VkQueueFamilyVideoPropertiesKHR {
	VkStructureType               sType;
	void                         *pNext;
	VkVideoCodecOperationFlagsKHR videoCodecOperations;
} VkQueueFamilyVideoPropertiesKHR;

typedef struct VkQueueFamilyQueryResultStatusPropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        queryResultStatusSupport;
} VkQueueFamilyQueryResultStatusPropertiesKHR;

typedef struct VkPhysicalDeviceVideoFormatInfoKHR {
	VkStructureType   sType;
	const void       *pNext;
	VkImageUsageFlags imageUsage;
} VkPhysicalDeviceVideoFormatInfoKHR;

typedef struct VkVideoFormatPropertiesKHR {
	VkStructureType    sType;
	void              *pNext;
	VkFormat           format;
	VkComponentMapping componentMapping;
	VkImageCreateFlags imageCreateFlags;
	VkImageType        imageType;
	VkImageTiling      imageTiling;
	VkImageUsageFlags  imageUsageFlags;
} VkVideoFormatPropertiesKHR;

typedef struct VkVideoProfileInfoKHR {
	VkStructureType                  sType;
	const void                      *pNext;
	VkVideoCodecOperationFlagBitsKHR videoCodecOperation;
	VkVideoChromaSubsamplingFlagsKHR chromaSubsampling;
	VkVideoComponentBitDepthFlagsKHR lumaBitDepth;
	VkVideoComponentBitDepthFlagsKHR chromaBitDepth;
} VkVideoProfileInfoKHR;

typedef struct VkVideoCapabilitiesKHR {
	VkStructureType           sType;
	void                     *pNext;
	VkVideoCapabilityFlagsKHR flags;
	VkDeviceSize              minBitstreamBufferOffsetAlignment;
	VkDeviceSize              minBitstreamBufferSizeAlignment;
	VkExtent2D                pictureAccessGranularity;
	VkExtent2D                minCodedExtent;
	VkExtent2D                maxCodedExtent;
	uint32_t                  maxDpbSlots;
	uint32_t                  maxActiveReferencePictures;
	VkExtensionProperties     stdHeaderVersion;
} VkVideoCapabilitiesKHR;

typedef struct VkVideoSessionMemoryRequirementsKHR {
	VkStructureType      sType;
	void                *pNext;
	uint32_t             memoryBindIndex;
	VkMemoryRequirements memoryRequirements;
} VkVideoSessionMemoryRequirementsKHR;

typedef struct VkBindVideoSessionMemoryInfoKHR {
	VkStructureType sType;
	const void     *pNext;
	uint32_t        memoryBindIndex;
	VkDeviceMemory  memory;
	VkDeviceSize    memoryOffset;
	VkDeviceSize    memorySize;
} VkBindVideoSessionMemoryInfoKHR;

typedef struct VkVideoDecodeCapabilitiesKHR {
	VkStructureType                 sType;
	void                           *pNext;
	VkVideoDecodeCapabilityFlagsKHR flags;
} VkVideoDecodeCapabilitiesKHR;

typedef struct VkVideoDecodeUsageInfoKHR {
	VkStructureType            sType;
	const void                *pNext;
	VkVideoDecodeUsageFlagsKHR videoUsageHints;
} VkVideoDecodeUsageInfoKHR;

typedef struct VkVideoDecodeInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkVideoDecodeFlagsKHR              flags;
	VkBuffer                           srcBuffer;
	VkDeviceSize                       srcBufferOffset;
	VkDeviceSize                       srcBufferRange;
	VkVideoPictureResourceInfoKHR      dstPictureResource;
	const VkVideoReferenceSlotInfoKHR *pSetupReferenceSlot;
	uint32_t                           referenceSlotCount;
	const VkVideoReferenceSlotInfoKHR *pReferenceSlots;
} VkVideoDecodeInfoKHR;

typedef struct VkVideoSessionCreateInfoKHR {
	VkStructureType              sType;
	const void                  *pNext;
	uint32_t                     queueFamilyIndex;
	VkVideoSessionCreateFlagsKHR flags;
	const VkVideoProfileInfoKHR *pVideoProfile;
	VkFormat                     pictureFormat;
	VkExtent2D                   maxCodedExtent;
	VkFormat                     referencePictureFormat;
	uint32_t                     maxDpbSlots;
	uint32_t                     maxActiveReferencePictures;
	const VkExtensionProperties *pStdHeaderVersion;
} VkVideoSessionCreateInfoKHR;

typedef struct VkVideoSessionParametersCreateInfoKHR {
	VkStructureType                        sType;
	const void                            *pNext;
	VkVideoSessionParametersCreateFlagsKHR flags;
	VkVideoSessionParametersKHR            videoSessionParametersTemplate;
	VkVideoSessionKHR                      videoSession;
} VkVideoSessionParametersCreateInfoKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeSessionParametersFeedbackInfoKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        hasOverrides;
} VkVideoEncodeSessionParametersFeedbackInfoKHR;

#endif

typedef struct VkVideoBeginCodingInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkVideoBeginCodingFlagsKHR         flags;
	VkVideoSessionKHR                  videoSession;
	VkVideoSessionParametersKHR        videoSessionParameters;
	uint32_t                           referenceSlotCount;
	const VkVideoReferenceSlotInfoKHR *pReferenceSlots;
} VkVideoBeginCodingInfoKHR;

typedef struct VkVideoEndCodingInfoKHR {
	VkStructureType          sType;
	const void              *pNext;
	VkVideoEndCodingFlagsKHR flags;
} VkVideoEndCodingInfoKHR;

typedef struct VkVideoCodingControlInfoKHR {
	VkStructureType              sType;
	const void                  *pNext;
	VkVideoCodingControlFlagsKHR flags;
} VkVideoCodingControlInfoKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeUsageInfoKHR {
	VkStructureType              sType;
	const void                  *pNext;
	VkVideoEncodeUsageFlagsKHR   videoUsageHints;
	VkVideoEncodeContentFlagsKHR videoContentHints;
	VkVideoEncodeTuningModeKHR   tuningMode;
} VkVideoEncodeUsageInfoKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeInfoKHR {
	VkStructureType                    sType;
	const void                        *pNext;
	VkVideoEncodeFlagsKHR              flags;
	VkBuffer                           dstBuffer;
	VkDeviceSize                       dstBufferOffset;
	VkDeviceSize                       dstBufferRange;
	VkVideoPictureResourceInfoKHR      srcPictureResource;
	const VkVideoReferenceSlotInfoKHR *pSetupReferenceSlot;
	uint32_t                           referenceSlotCount;
	const VkVideoReferenceSlotInfoKHR *pReferenceSlots;
	uint32_t                           precedingExternallyEncodedBytes;
} VkVideoEncodeInfoKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR {
	VkStructureType               sType;
	const void                   *pNext;
	VkVideoEncodeFeedbackFlagsKHR encodeFeedbackFlags;
} VkQueryPoolVideoEncodeFeedbackCreateInfoKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR {
	VkStructureType              sType;
	const void                  *pNext;
	const VkVideoProfileInfoKHR *pVideoProfile;
	uint32_t                     qualityLevel;
} VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeRateControlInfoKHR {
	VkStructureType                             sType;
	const void                                 *pNext;
	VkVideoEncodeRateControlFlagsKHR            flags;
	VkVideoEncodeRateControlModeFlagBitsKHR     rateControlMode;
	uint32_t                                    layerCount;
	const VkVideoEncodeRateControlLayerInfoKHR *pLayers;
	uint32_t                                    virtualBufferSizeInMs;
	uint32_t                                    initialVirtualBufferSizeInMs;
} VkVideoEncodeRateControlInfoKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeCapabilitiesKHR {
	VkStructureType                      sType;
	void                                *pNext;
	VkVideoEncodeCapabilityFlagsKHR      flags;
	VkVideoEncodeRateControlModeFlagsKHR rateControlModes;
	uint32_t                             maxRateControlLayers;
	uint64_t                             maxBitrate;
	uint32_t                             maxQualityLevels;
	VkExtent2D                           encodeInputPictureGranularity;
	VkVideoEncodeFeedbackFlagsKHR        supportedEncodeFeedbackFlags;
} VkVideoEncodeCapabilitiesKHR;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264CapabilitiesEXT {
	VkStructureType                     sType;
	void                               *pNext;
	VkVideoEncodeH264CapabilityFlagsEXT flags;
	StdVideoH264LevelIdc                maxLevelIdc;
	uint32_t                            maxSliceCount;
	uint32_t                            maxPPictureL0ReferenceCount;
	uint32_t                            maxBPictureL0ReferenceCount;
	uint32_t                            maxL1ReferenceCount;
	uint32_t                            maxTemporalLayerCount;
	VkBool32                            expectDyadicTemporalLayerPattern;
	int32_t                             minQp;
	int32_t                             maxQp;
	VkBool32                            prefersGopRemainingFrames;
	VkBool32                            requiresGopRemainingFrames;
	VkVideoEncodeH264StdFlagsEXT        stdSyntaxFlags;
} VkVideoEncodeH264CapabilitiesEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264QualityLevelPropertiesEXT {
	VkStructureType                      sType;
	void                                *pNext;
	VkVideoEncodeH264RateControlFlagsEXT preferredRateControlFlags;
	uint32_t                             preferredGopFrameCount;
	uint32_t                             preferredIdrPeriod;
	uint32_t                             preferredConsecutiveBFrameCount;
	uint32_t                             preferredTemporalLayerCount;
	VkVideoEncodeH264QpEXT               preferredConstantQp;
	uint32_t                             preferredMaxL0ReferenceCount;
	uint32_t                             preferredMaxL1ReferenceCount;
	VkBool32                             preferredStdEntropyCodingModeFlag;
} VkVideoEncodeH264QualityLevelPropertiesEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264SessionCreateInfoEXT {
	VkStructureType      sType;
	const void          *pNext;
	VkBool32             useMaxLevelIdc;
	StdVideoH264LevelIdc maxLevelIdc;
} VkVideoEncodeH264SessionCreateInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264SessionParametersGetInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        writeStdSPS;
	VkBool32        writeStdPPS;
	uint32_t        stdSPSId;
	uint32_t        stdPPSId;
} VkVideoEncodeH264SessionParametersGetInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264SessionParametersFeedbackInfoEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        hasStdSPSOverrides;
	VkBool32        hasStdPPSOverrides;
} VkVideoEncodeH264SessionParametersFeedbackInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264PictureInfoEXT {
	VkStructureType                          sType;
	const void                              *pNext;
	uint32_t                                 naluSliceEntryCount;
	const VkVideoEncodeH264NaluSliceInfoEXT *pNaluSliceEntries;
	const StdVideoEncodeH264PictureInfo     *pStdPictureInfo;
	VkBool32                                 generatePrefixNalu;
} VkVideoEncodeH264PictureInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264RateControlInfoEXT {
	VkStructureType                      sType;
	const void                          *pNext;
	VkVideoEncodeH264RateControlFlagsEXT flags;
	uint32_t                             gopFrameCount;
	uint32_t                             idrPeriod;
	uint32_t                             consecutiveBFrameCount;
	uint32_t                             temporalLayerCount;
} VkVideoEncodeH264RateControlInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264GopRemainingFrameInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        useGopRemainingFrames;
	uint32_t        gopRemainingI;
	uint32_t        gopRemainingP;
	uint32_t        gopRemainingB;
} VkVideoEncodeH264GopRemainingFrameInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH264RateControlLayerInfoEXT {
	VkStructureType               sType;
	const void                   *pNext;
	VkBool32                      useMinQp;
	VkVideoEncodeH264QpEXT        minQp;
	VkBool32                      useMaxQp;
	VkVideoEncodeH264QpEXT        maxQp;
	VkBool32                      useMaxFrameSize;
	VkVideoEncodeH264FrameSizeEXT maxFrameSize;
} VkVideoEncodeH264RateControlLayerInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265CapabilitiesEXT {
	VkStructureType                             sType;
	void                                       *pNext;
	VkVideoEncodeH265CapabilityFlagsEXT         flags;
	StdVideoH265LevelIdc                        maxLevelIdc;
	uint32_t                                    maxSliceSegmentCount;
	VkExtent2D                                  maxTiles;
	VkVideoEncodeH265CtbSizeFlagsEXT            ctbSizes;
	VkVideoEncodeH265TransformBlockSizeFlagsEXT transformBlockSizes;
	uint32_t                                    maxPPictureL0ReferenceCount;
	uint32_t                                    maxBPictureL0ReferenceCount;
	uint32_t                                    maxL1ReferenceCount;
	uint32_t                                    maxSubLayerCount;
	VkBool32                                    expectDyadicTemporalSubLayerPattern;
	int32_t                                     minQp;
	int32_t                                     maxQp;
	VkBool32                                    prefersGopRemainingFrames;
	VkBool32                                    requiresGopRemainingFrames;
	VkVideoEncodeH265StdFlagsEXT                stdSyntaxFlags;
} VkVideoEncodeH265CapabilitiesEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265QualityLevelPropertiesEXT {
	VkStructureType                      sType;
	void                                *pNext;
	VkVideoEncodeH265RateControlFlagsEXT preferredRateControlFlags;
	uint32_t                             preferredGopFrameCount;
	uint32_t                             preferredIdrPeriod;
	uint32_t                             preferredConsecutiveBFrameCount;
	uint32_t                             preferredSubLayerCount;
	VkVideoEncodeH265QpEXT               preferredConstantQp;
	uint32_t                             preferredMaxL0ReferenceCount;
	uint32_t                             preferredMaxL1ReferenceCount;
} VkVideoEncodeH265QualityLevelPropertiesEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265SessionCreateInfoEXT {
	VkStructureType      sType;
	const void          *pNext;
	VkBool32             useMaxLevelIdc;
	StdVideoH265LevelIdc maxLevelIdc;
} VkVideoEncodeH265SessionCreateInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265SessionParametersGetInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        writeStdVPS;
	VkBool32        writeStdSPS;
	VkBool32        writeStdPPS;
	uint32_t        stdVPSId;
	uint32_t        stdSPSId;
	uint32_t        stdPPSId;
} VkVideoEncodeH265SessionParametersGetInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265SessionParametersFeedbackInfoEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        hasStdVPSOverrides;
	VkBool32        hasStdSPSOverrides;
	VkBool32        hasStdPPSOverrides;
} VkVideoEncodeH265SessionParametersFeedbackInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265PictureInfoEXT {
	VkStructureType                                 sType;
	const void                                     *pNext;
	uint32_t                                        naluSliceSegmentEntryCount;
	const VkVideoEncodeH265NaluSliceSegmentInfoEXT *pNaluSliceSegmentEntries;
	const StdVideoEncodeH265PictureInfo            *pStdPictureInfo;
} VkVideoEncodeH265PictureInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265RateControlInfoEXT {
	VkStructureType                      sType;
	const void                          *pNext;
	VkVideoEncodeH265RateControlFlagsEXT flags;
	uint32_t                             gopFrameCount;
	uint32_t                             idrPeriod;
	uint32_t                             consecutiveBFrameCount;
	uint32_t                             subLayerCount;
} VkVideoEncodeH265RateControlInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265GopRemainingFrameInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        useGopRemainingFrames;
	uint32_t        gopRemainingI;
	uint32_t        gopRemainingP;
	uint32_t        gopRemainingB;
} VkVideoEncodeH265GopRemainingFrameInfoEXT;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkVideoEncodeH265RateControlLayerInfoEXT {
	VkStructureType               sType;
	const void                   *pNext;
	VkBool32                      useMinQp;
	VkVideoEncodeH265QpEXT        minQp;
	VkBool32                      useMaxQp;
	VkVideoEncodeH265QpEXT        maxQp;
	VkBool32                      useMaxFrameSize;
	VkVideoEncodeH265FrameSizeEXT maxFrameSize;
} VkVideoEncodeH265RateControlLayerInfoEXT;

#endif

typedef struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        inheritedViewportScissor2D;
} VkPhysicalDeviceInheritedViewportScissorFeaturesNV;

typedef struct VkCommandBufferInheritanceViewportScissorInfoNV {
	VkStructureType   sType;
	const void       *pNext;
	VkBool32          viewportScissor2D;
	uint32_t          viewportDepthCount;
	const VkViewport *pViewportDepths;
} VkCommandBufferInheritanceViewportScissorInfoNV;

typedef struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        ycbcr2plane444Formats;
} VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;

typedef struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        provokingVertexLast;
	VkBool32        transformFeedbackPreservesProvokingVertex;
} VkPhysicalDeviceProvokingVertexFeaturesEXT;

typedef struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        provokingVertexModePerPipeline;
	VkBool32        transformFeedbackPreservesTriangleFanProvokingVertex;
} VkPhysicalDeviceProvokingVertexPropertiesEXT;

typedef struct VkPhysicalDeviceDescriptorBufferFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        descriptorBuffer;
	VkBool32        descriptorBufferCaptureReplay;
	VkBool32        descriptorBufferImageLayoutIgnored;
	VkBool32        descriptorBufferPushDescriptors;
} VkPhysicalDeviceDescriptorBufferFeaturesEXT;

typedef struct VkPhysicalDeviceDescriptorBufferPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        combinedImageSamplerDescriptorSingleArray;
	VkBool32        bufferlessPushDescriptors;
	VkBool32        allowSamplerImageViewPostSubmitCreation;
	VkDeviceSize    descriptorBufferOffsetAlignment;
	uint32_t        maxDescriptorBufferBindings;
	uint32_t        maxResourceDescriptorBufferBindings;
	uint32_t        maxSamplerDescriptorBufferBindings;
	uint32_t        maxEmbeddedImmutableSamplerBindings;
	uint32_t        maxEmbeddedImmutableSamplers;
	size_t          bufferCaptureReplayDescriptorDataSize;
	size_t          imageCaptureReplayDescriptorDataSize;
	size_t          imageViewCaptureReplayDescriptorDataSize;
	size_t          samplerCaptureReplayDescriptorDataSize;
	size_t          accelerationStructureCaptureReplayDescriptorDataSize;
	size_t          samplerDescriptorSize;
	size_t          combinedImageSamplerDescriptorSize;
	size_t          sampledImageDescriptorSize;
	size_t          storageImageDescriptorSize;
	size_t          uniformTexelBufferDescriptorSize;
	size_t          robustUniformTexelBufferDescriptorSize;
	size_t          storageTexelBufferDescriptorSize;
	size_t          robustStorageTexelBufferDescriptorSize;
	size_t          uniformBufferDescriptorSize;
	size_t          robustUniformBufferDescriptorSize;
	size_t          storageBufferDescriptorSize;
	size_t          robustStorageBufferDescriptorSize;
	size_t          inputAttachmentDescriptorSize;
	size_t          accelerationStructureDescriptorSize;
	VkDeviceSize    maxSamplerDescriptorBufferRange;
	VkDeviceSize    maxResourceDescriptorBufferRange;
	VkDeviceSize    samplerDescriptorBufferAddressSpaceSize;
	VkDeviceSize    resourceDescriptorBufferAddressSpaceSize;
	VkDeviceSize    descriptorBufferAddressSpaceSize;
} VkPhysicalDeviceDescriptorBufferPropertiesEXT;

typedef struct VkDescriptorAddressInfoEXT {
	VkStructureType sType;
	void           *pNext;
	VkDeviceAddress address;
	VkDeviceSize    range;
	VkFormat        format;
} VkDescriptorAddressInfoEXT;

typedef struct VkDescriptorBufferBindingInfoEXT {
	VkStructureType    sType;
	void              *pNext;
	VkDeviceAddress    address;
	VkBufferUsageFlags usage;
} VkDescriptorBufferBindingInfoEXT;

typedef union VkDescriptorDataEXT {
	const VkSampler                  *pSampler;
	const VkDescriptorImageInfo      *pCombinedImageSampler;
	const VkDescriptorImageInfo      *pInputAttachmentImage;
	const VkDescriptorImageInfo      *pSampledImage;
	const VkDescriptorImageInfo      *pStorageImage;
	const VkDescriptorAddressInfoEXT *pUniformTexelBuffer;
	const VkDescriptorAddressInfoEXT *pStorageTexelBuffer;
	const VkDescriptorAddressInfoEXT *pUniformBuffer;
	const VkDescriptorAddressInfoEXT *pStorageBuffer;
	VkDeviceAddress                   accelerationStructure;
} VkDescriptorDataEXT;

typedef struct VkDescriptorGetInfoEXT {
	VkStructureType     sType;
	const void         *pNext;
	VkDescriptorType    type;
	VkDescriptorDataEXT data;
} VkDescriptorGetInfoEXT;

typedef struct VkPhysicalDeviceShaderIntegerDotProductFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderIntegerDotProduct;
} VkPhysicalDeviceShaderIntegerDotProductFeatures;

typedef struct VkPhysicalDeviceShaderIntegerDotProductFeatures VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR;

typedef struct VkPhysicalDeviceShaderIntegerDotProductProperties {
	VkStructureType sType;
	void           *pNext;
	VkBool32        integerDotProduct8BitUnsignedAccelerated;
	VkBool32        integerDotProduct8BitSignedAccelerated;
	VkBool32        integerDotProduct8BitMixedSignednessAccelerated;
	VkBool32        integerDotProduct4x8BitPackedUnsignedAccelerated;
	VkBool32        integerDotProduct4x8BitPackedSignedAccelerated;
	VkBool32        integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	VkBool32        integerDotProduct16BitUnsignedAccelerated;
	VkBool32        integerDotProduct16BitSignedAccelerated;
	VkBool32        integerDotProduct16BitMixedSignednessAccelerated;
	VkBool32        integerDotProduct32BitUnsignedAccelerated;
	VkBool32        integerDotProduct32BitSignedAccelerated;
	VkBool32        integerDotProduct32BitMixedSignednessAccelerated;
	VkBool32        integerDotProduct64BitUnsignedAccelerated;
	VkBool32        integerDotProduct64BitSignedAccelerated;
	VkBool32        integerDotProduct64BitMixedSignednessAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	VkBool32        integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
} VkPhysicalDeviceShaderIntegerDotProductProperties;

typedef struct VkPhysicalDeviceShaderIntegerDotProductProperties VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR;

typedef struct VkPhysicalDeviceDrmPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        hasPrimary;
	VkBool32        hasRender;
	int64_t         primaryMajor;
	int64_t         primaryMinor;
	int64_t         renderMajor;
	int64_t         renderMinor;
} VkPhysicalDeviceDrmPropertiesEXT;

typedef struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        fragmentShaderBarycentric;
} VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;

typedef struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        triStripVertexOrderIndependentOfProvokingVertex;
} VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;

typedef struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        rayTracingMotionBlur;
	VkBool32        rayTracingMotionBlurPipelineTraceRaysIndirect;
} VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;

typedef struct VkAccelerationStructureGeometryMotionTrianglesDataNV {
	VkStructureType               sType;
	const void                   *pNext;
	VkDeviceOrHostAddressConstKHR vertexData;
} VkAccelerationStructureGeometryMotionTrianglesDataNV;

typedef struct VkAccelerationStructureMotionInfoNV {
	VkStructureType                          sType;
	const void                              *pNext;
	uint32_t                                 maxInstances;
	VkAccelerationStructureMotionInfoFlagsNV flags;
} VkAccelerationStructureMotionInfoNV;

typedef struct VkAccelerationStructureSRTMotionInstanceNV {
	VkSRTDataNV                transformT0;
	VkSRTDataNV                transformT1;
	uint32_t                   instanceCustomIndex                   : 24;
	uint32_t                   mask                                  : 8;
	uint32_t                   instanceShaderBindingTableRecordOffset: 24;
	VkGeometryInstanceFlagsKHR flags                                 : 8;
	uint64_t                   accelerationStructureReference;
} VkAccelerationStructureSRTMotionInstanceNV;

typedef struct VkAccelerationStructureMatrixMotionInstanceNV {
	VkTransformMatrixKHR       transformT0;
	VkTransformMatrixKHR       transformT1;
	uint32_t                   instanceCustomIndex                   : 24;
	uint32_t                   mask                                  : 8;
	uint32_t                   instanceShaderBindingTableRecordOffset: 24;
	VkGeometryInstanceFlagsKHR flags                                 : 8;
	uint64_t                   accelerationStructureReference;
} VkAccelerationStructureMatrixMotionInstanceNV;

typedef union VkAccelerationStructureMotionInstanceDataNV {
	VkAccelerationStructureInstanceKHR            staticInstance;
	VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
	VkAccelerationStructureSRTMotionInstanceNV    srtMotionInstance;
} VkAccelerationStructureMotionInstanceDataNV;

typedef struct VkAccelerationStructureMotionInstanceNV {
	VkAccelerationStructureMotionInstanceTypeNV  type;
	VkAccelerationStructureMotionInstanceFlagsNV flags;
	VkAccelerationStructureMotionInstanceDataNV  data;
} VkAccelerationStructureMotionInstanceNV;

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferCollectionPropertiesFUCHSIA {
	VkStructureType               sType;
	void                         *pNext;
	uint32_t                      memoryTypeBits;
	uint32_t                      bufferCount;
	uint32_t                      createInfoIndex;
	uint64_t                      sysmemPixelFormat;
	VkFormatFeatureFlags          formatFeatures;
	VkSysmemColorSpaceFUCHSIA     sysmemColorSpaceIndex;
	VkComponentMapping            samplerYcbcrConversionComponents;
	VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	VkSamplerYcbcrRange           suggestedYcbcrRange;
	VkChromaLocation              suggestedXChromaOffset;
	VkChromaLocation              suggestedYChromaOffset;
} VkBufferCollectionPropertiesFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkBufferConstraintsInfoFUCHSIA {
	VkStructureType                          sType;
	const void                              *pNext;
	VkBufferCreateInfo                       createInfo;
	VkFormatFeatureFlags                     requiredFormatFeatures;
	VkBufferCollectionConstraintsInfoFUCHSIA bufferCollectionConstraints;
} VkBufferConstraintsInfoFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImageFormatConstraintsInfoFUCHSIA {
	VkStructureType                      sType;
	const void                          *pNext;
	VkImageCreateInfo                    imageCreateInfo;
	VkFormatFeatureFlags                 requiredFormatFeatures;
	VkImageFormatConstraintsFlagsFUCHSIA flags;
	uint64_t                             sysmemPixelFormat;
	uint32_t                             colorSpaceCount;
	const VkSysmemColorSpaceFUCHSIA     *pColorSpaces;
} VkImageFormatConstraintsInfoFUCHSIA;

#endif

#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef struct VkImageConstraintsInfoFUCHSIA {
	VkStructureType                            sType;
	const void                                *pNext;
	uint32_t                                   formatConstraintsCount;
	const VkImageFormatConstraintsInfoFUCHSIA *pFormatConstraints;
	VkBufferCollectionConstraintsInfoFUCHSIA   bufferCollectionConstraints;
	VkImageConstraintsInfoFlagsFUCHSIA         flags;
} VkImageConstraintsInfoFUCHSIA;

#endif

typedef struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        formatRgba10x6WithoutYCbCrSampler;
} VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;

typedef struct VkFormatProperties3 {
	VkStructureType       sType;
	void                 *pNext;
	VkFormatFeatureFlags2 linearTilingFeatures;
	VkFormatFeatureFlags2 optimalTilingFeatures;
	VkFormatFeatureFlags2 bufferFeatures;
} VkFormatProperties3;

typedef struct VkFormatProperties3 VkFormatProperties3KHR;

typedef struct VkDrmFormatModifierProperties2EXT {
	uint64_t              drmFormatModifier;
	uint32_t              drmFormatModifierPlaneCount;
	VkFormatFeatureFlags2 drmFormatModifierTilingFeatures;
} VkDrmFormatModifierProperties2EXT;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkAndroidHardwareBufferFormatProperties2ANDROID {
	VkStructureType               sType;
	void                         *pNext;
	VkFormat                      format;
	uint64_t                      externalFormat;
	VkFormatFeatureFlags2         formatFeatures;
	VkComponentMapping            samplerYcbcrConversionComponents;
	VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	VkSamplerYcbcrRange           suggestedYcbcrRange;
	VkChromaLocation              suggestedXChromaOffset;
	VkChromaLocation              suggestedYChromaOffset;
} VkAndroidHardwareBufferFormatProperties2ANDROID;

#endif

typedef struct VkRenderingInfo {
	VkStructureType                  sType;
	const void                      *pNext;
	VkRenderingFlags                 flags;
	VkRect2D                         renderArea;
	uint32_t                         layerCount;
	uint32_t                         viewMask;
	uint32_t                         colorAttachmentCount;
	const VkRenderingAttachmentInfo *pColorAttachments;
	const VkRenderingAttachmentInfo *pDepthAttachment;
	const VkRenderingAttachmentInfo *pStencilAttachment;
} VkRenderingInfo;

typedef struct VkRenderingInfo VkRenderingInfoKHR;

typedef struct VkPhysicalDeviceDynamicRenderingFeatures {
	VkStructureType sType;
	void           *pNext;
	VkBool32        dynamicRendering;
} VkPhysicalDeviceDynamicRenderingFeatures;

typedef struct VkPhysicalDeviceDynamicRenderingFeatures VkPhysicalDeviceDynamicRenderingFeaturesKHR;

typedef struct VkCommandBufferInheritanceRenderingInfo {
	VkStructureType       sType;
	const void           *pNext;
	VkRenderingFlags      flags;
	uint32_t              viewMask;
	uint32_t              colorAttachmentCount;
	const VkFormat       *pColorAttachmentFormats;
	VkFormat              depthAttachmentFormat;
	VkFormat              stencilAttachmentFormat;
	VkSampleCountFlagBits rasterizationSamples;
} VkCommandBufferInheritanceRenderingInfo;

typedef struct VkCommandBufferInheritanceRenderingInfo VkCommandBufferInheritanceRenderingInfoKHR;

typedef struct VkMultiviewPerViewAttributesInfoNVX {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        perViewAttributes;
	VkBool32        perViewAttributesPositionXOnly;
} VkMultiviewPerViewAttributesInfoNVX;

typedef struct VkPhysicalDeviceImageViewMinLodFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        minLod;
} VkPhysicalDeviceImageViewMinLodFeaturesEXT;

typedef struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        rasterizationOrderColorAttachmentAccess;
	VkBool32        rasterizationOrderDepthAttachmentAccess;
	VkBool32        rasterizationOrderStencilAttachmentAccess;
} VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;

typedef struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM;

typedef struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        linearColorAttachment;
} VkPhysicalDeviceLinearColorAttachmentFeaturesNV;

typedef struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        graphicsPipelineLibrary;
} VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;

typedef struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        graphicsPipelineLibraryFastLinking;
	VkBool32        graphicsPipelineLibraryIndependentInterpolationDecoration;
} VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;

typedef struct VkGraphicsPipelineLibraryCreateInfoEXT {
	VkStructureType                   sType;
	const void                       *pNext;
	VkGraphicsPipelineLibraryFlagsEXT flags;
} VkGraphicsPipelineLibraryCreateInfoEXT;

typedef struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
	VkStructureType sType;
	void           *pNext;
	VkBool32        descriptorSetHostMapping;
} VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;

typedef struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderModuleIdentifier;
} VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;

typedef struct VkImageCompressionControlEXT {
	VkStructureType                      sType;
	const void                          *pNext;
	VkImageCompressionFlagsEXT           flags;
	uint32_t                             compressionControlPlaneCount;
	VkImageCompressionFixedRateFlagsEXT *pFixedRateFlags;
} VkImageCompressionControlEXT;

typedef struct VkPhysicalDeviceImageCompressionControlFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        imageCompressionControl;
} VkPhysicalDeviceImageCompressionControlFeaturesEXT;

typedef struct VkImageCompressionPropertiesEXT {
	VkStructureType                     sType;
	void                               *pNext;
	VkImageCompressionFlagsEXT          imageCompressionFlags;
	VkImageCompressionFixedRateFlagsEXT imageCompressionFixedRateFlags;
} VkImageCompressionPropertiesEXT;

typedef struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        imageCompressionControlSwapchain;
} VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;

typedef struct VkImageSubresource2KHR {
	VkStructureType    sType;
	void              *pNext;
	VkImageSubresource imageSubresource;
} VkImageSubresource2KHR;

typedef struct VkImageSubresource2KHR VkImageSubresource2EXT;

typedef struct VkSubresourceLayout2KHR {
	VkStructureType     sType;
	void               *pNext;
	VkSubresourceLayout subresourceLayout;
} VkSubresourceLayout2KHR;

typedef struct VkSubresourceLayout2KHR VkSubresourceLayout2EXT;

typedef struct VkRenderPassCreationControlEXT {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        disallowMerging;
} VkRenderPassCreationControlEXT;

typedef struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        subpassMergeFeedback;
} VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;

typedef struct VkMicromapBuildInfoEXT {
	VkStructureType                  sType;
	const void                      *pNext;
	VkMicromapTypeEXT                type;
	VkBuildMicromapFlagsEXT          flags;
	VkBuildMicromapModeEXT           mode;
	VkMicromapEXT                    dstMicromap;
	uint32_t                         usageCountsCount;
	const VkMicromapUsageEXT        *pUsageCounts;
	const VkMicromapUsageEXT *const *ppUsageCounts;
	VkDeviceOrHostAddressConstKHR    data;
	VkDeviceOrHostAddressKHR         scratchData;
	VkDeviceOrHostAddressConstKHR    triangleArray;
	VkDeviceSize                     triangleArrayStride;
} VkMicromapBuildInfoEXT;

typedef struct VkMicromapCreateInfoEXT {
	VkStructureType          sType;
	const void              *pNext;
	VkMicromapCreateFlagsEXT createFlags;
	VkBuffer                 buffer;
	VkDeviceSize             offset;
	VkDeviceSize             size;
	VkMicromapTypeEXT        type;
	VkDeviceAddress          deviceAddress;
} VkMicromapCreateInfoEXT;

typedef struct VkCopyMicromapToMemoryInfoEXT {
	VkStructureType          sType;
	const void              *pNext;
	VkMicromapEXT            src;
	VkDeviceOrHostAddressKHR dst;
	VkCopyMicromapModeEXT    mode;
} VkCopyMicromapToMemoryInfoEXT;

typedef struct VkCopyMemoryToMicromapInfoEXT {
	VkStructureType               sType;
	const void                   *pNext;
	VkDeviceOrHostAddressConstKHR src;
	VkMicromapEXT                 dst;
	VkCopyMicromapModeEXT         mode;
} VkCopyMemoryToMicromapInfoEXT;

typedef struct VkMicromapBuildSizesInfoEXT {
	VkStructureType sType;
	const void     *pNext;
	VkDeviceSize    micromapSize;
	VkDeviceSize    buildScratchSize;
	VkBool32        discardable;
} VkMicromapBuildSizesInfoEXT;

typedef struct VkPhysicalDeviceOpacityMicromapFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        micromap;
	VkBool32        micromapCaptureReplay;
	VkBool32        micromapHostCommands;
} VkPhysicalDeviceOpacityMicromapFeaturesEXT;

typedef struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
	VkStructureType                  sType;
	void                            *pNext;
	VkIndexType                      indexType;
	VkDeviceOrHostAddressConstKHR    indexBuffer;
	VkDeviceSize                     indexStride;
	uint32_t                         baseTriangle;
	uint32_t                         usageCountsCount;
	const VkMicromapUsageEXT        *pUsageCounts;
	const VkMicromapUsageEXT *const *ppUsageCounts;
	VkMicromapEXT                    micromap;
} VkAccelerationStructureTrianglesOpacityMicromapEXT;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceDisplacementMicromapFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        displacementMicromap;
} VkPhysicalDeviceDisplacementMicromapFeaturesNV;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkAccelerationStructureTrianglesDisplacementMicromapNV {
	VkStructureType                  sType;
	void                            *pNext;
	VkFormat                         displacementBiasAndScaleFormat;
	VkFormat                         displacementVectorFormat;
	VkDeviceOrHostAddressConstKHR    displacementBiasAndScaleBuffer;
	VkDeviceSize                     displacementBiasAndScaleStride;
	VkDeviceOrHostAddressConstKHR    displacementVectorBuffer;
	VkDeviceSize                     displacementVectorStride;
	VkDeviceOrHostAddressConstKHR    displacedMicromapPrimitiveFlags;
	VkDeviceSize                     displacedMicromapPrimitiveFlagsStride;
	VkIndexType                      indexType;
	VkDeviceOrHostAddressConstKHR    indexBuffer;
	VkDeviceSize                     indexStride;
	uint32_t                         baseTriangle;
	uint32_t                         usageCountsCount;
	const VkMicromapUsageEXT        *pUsageCounts;
	const VkMicromapUsageEXT *const *ppUsageCounts;
	VkMicromapEXT                    micromap;
} VkAccelerationStructureTrianglesDisplacementMicromapNV;

#endif

typedef struct VkPhysicalDevicePipelinePropertiesFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        pipelinePropertiesIdentifier;
} VkPhysicalDevicePipelinePropertiesFeaturesEXT;

typedef struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderEarlyAndLateFragmentTests;
} VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;

typedef struct VkExternalMemoryAcquireUnmodifiedEXT {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        acquireUnmodifiedMemory;
} VkExternalMemoryAcquireUnmodifiedEXT;

typedef struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        nonSeamlessCubeMap;
} VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;

typedef struct VkPhysicalDevicePipelineRobustnessFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        pipelineRobustness;
} VkPhysicalDevicePipelineRobustnessFeaturesEXT;

typedef struct VkPhysicalDeviceImageProcessingFeaturesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        textureSampleWeighted;
	VkBool32        textureBoxFilter;
	VkBool32        textureBlockMatch;
} VkPhysicalDeviceImageProcessingFeaturesQCOM;

typedef struct VkPhysicalDeviceTilePropertiesFeaturesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        tileProperties;
} VkPhysicalDeviceTilePropertiesFeaturesQCOM;

typedef struct VkPhysicalDeviceAmigoProfilingFeaturesSEC {
	VkStructureType sType;
	void           *pNext;
	VkBool32        amigoProfiling;
} VkPhysicalDeviceAmigoProfilingFeaturesSEC;

typedef struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        attachmentFeedbackLoopLayout;
} VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;

typedef struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        depthClampZeroOne;
} VkPhysicalDeviceDepthClampZeroOneFeaturesEXT;

typedef struct VkPhysicalDeviceAddressBindingReportFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        reportAddressBinding;
} VkPhysicalDeviceAddressBindingReportFeaturesEXT;

typedef struct VkDeviceAddressBindingCallbackDataEXT {
	VkStructureType                sType;
	void                          *pNext;
	VkDeviceAddressBindingFlagsEXT flags;
	VkDeviceAddress                baseAddress;
	VkDeviceSize                   size;
	VkDeviceAddressBindingTypeEXT  bindingType;
} VkDeviceAddressBindingCallbackDataEXT;

typedef struct VkPhysicalDeviceOpticalFlowFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        opticalFlow;
} VkPhysicalDeviceOpticalFlowFeaturesNV;

typedef struct VkPhysicalDeviceOpticalFlowPropertiesNV {
	VkStructureType              sType;
	void                        *pNext;
	VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
	VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
	VkBool32                     hintSupported;
	VkBool32                     costSupported;
	VkBool32                     bidirectionalFlowSupported;
	VkBool32                     globalFlowSupported;
	uint32_t                     minWidth;
	uint32_t                     minHeight;
	uint32_t                     maxWidth;
	uint32_t                     maxHeight;
	uint32_t                     maxNumRegionsOfInterest;
} VkPhysicalDeviceOpticalFlowPropertiesNV;

typedef struct VkOpticalFlowImageFormatInfoNV {
	VkStructureType           sType;
	const void               *pNext;
	VkOpticalFlowUsageFlagsNV usage;
} VkOpticalFlowImageFormatInfoNV;

typedef struct VkOpticalFlowSessionCreateInfoNV {
	VkStructureType                   sType;
	void                             *pNext;
	uint32_t                          width;
	uint32_t                          height;
	VkFormat                          imageFormat;
	VkFormat                          flowVectorFormat;
	VkFormat                          costFormat;
	VkOpticalFlowGridSizeFlagsNV      outputGridSize;
	VkOpticalFlowGridSizeFlagsNV      hintGridSize;
	VkOpticalFlowPerformanceLevelNV   performanceLevel;
	VkOpticalFlowSessionCreateFlagsNV flags;
} VkOpticalFlowSessionCreateInfoNV;

typedef struct VkOpticalFlowExecuteInfoNV {
	VkStructureType             sType;
	void                       *pNext;
	VkOpticalFlowExecuteFlagsNV flags;
	uint32_t                    regionCount;
	const VkRect2D             *pRegions;
} VkOpticalFlowExecuteInfoNV;

typedef struct VkPhysicalDeviceFaultFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        deviceFault;
	VkBool32        deviceFaultVendorBinary;
} VkPhysicalDeviceFaultFeaturesEXT;

typedef struct VkDeviceFaultAddressInfoEXT {
	VkDeviceFaultAddressTypeEXT addressType;
	VkDeviceAddress             reportedAddress;
	VkDeviceSize                addressPrecision;
} VkDeviceFaultAddressInfoEXT;

typedef struct VkDeviceFaultCountsEXT {
	VkStructureType sType;
	void           *pNext;
	uint32_t        addressInfoCount;
	uint32_t        vendorInfoCount;
	VkDeviceSize    vendorBinarySize;
} VkDeviceFaultCountsEXT;

typedef struct VkDeviceFaultInfoEXT {
	VkStructureType              sType;
	void                        *pNext;
	char                         description[VK_MAX_DESCRIPTION_SIZE];
	VkDeviceFaultAddressInfoEXT *pAddressInfos;
	VkDeviceFaultVendorInfoEXT  *pVendorInfos;
	void                        *pVendorBinaryData;
} VkDeviceFaultInfoEXT;

typedef struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        pipelineLibraryGroupHandles;
} VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;

typedef struct VkDepthBiasRepresentationInfoEXT {
	VkStructureType              sType;
	const void                  *pNext;
	VkDepthBiasRepresentationEXT depthBiasRepresentation;
	VkBool32                     depthBiasExact;
} VkDepthBiasRepresentationInfoEXT;

typedef struct VkDecompressMemoryRegionNV {
	VkDeviceAddress                    srcAddress;
	VkDeviceAddress                    dstAddress;
	VkDeviceSize                       compressedSize;
	VkDeviceSize                       decompressedSize;
	VkMemoryDecompressionMethodFlagsNV decompressionMethod;
} VkDecompressMemoryRegionNV;

typedef struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderCoreBuiltins;
} VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM;

typedef struct VkFrameBoundaryEXT {
	VkStructureType         sType;
	const void             *pNext;
	VkFrameBoundaryFlagsEXT flags;
	uint64_t                frameID;
	uint32_t                imageCount;
	const VkImage          *pImages;
	uint32_t                bufferCount;
	const VkBuffer         *pBuffers;
	uint64_t                tagName;
	size_t                  tagSize;
	const void             *pTag;
} VkFrameBoundaryEXT;

typedef struct VkPhysicalDeviceFrameBoundaryFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        frameBoundary;
} VkPhysicalDeviceFrameBoundaryFeaturesEXT;

typedef struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        dynamicRenderingUnusedAttachments;
} VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;

typedef struct VkSurfacePresentScalingCapabilitiesEXT {
	VkStructureType          sType;
	void                    *pNext;
	VkPresentScalingFlagsEXT supportedPresentScaling;
	VkPresentGravityFlagsEXT supportedPresentGravityX;
	VkPresentGravityFlagsEXT supportedPresentGravityY;
	VkExtent2D               minScaledImageExtent;
	VkExtent2D               maxScaledImageExtent;
} VkSurfacePresentScalingCapabilitiesEXT;

typedef struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        swapchainMaintenance1;
} VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT;

typedef struct VkSwapchainPresentScalingCreateInfoEXT {
	VkStructureType          sType;
	const void              *pNext;
	VkPresentScalingFlagsEXT scalingBehavior;
	VkPresentGravityFlagsEXT presentGravityX;
	VkPresentGravityFlagsEXT presentGravityY;
} VkSwapchainPresentScalingCreateInfoEXT;

typedef struct VkPhysicalDeviceDepthBiasControlFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        depthBiasControl;
	VkBool32        leastRepresentableValueForceUnormRepresentation;
	VkBool32        floatRepresentation;
	VkBool32        depthBiasExact;
} VkPhysicalDeviceDepthBiasControlFeaturesEXT;

typedef struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        rayTracingInvocationReorder;
} VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV;

typedef struct VkDirectDriverLoadingInfoLUNARG {
	VkStructureType                  sType;
	void                            *pNext;
	VkDirectDriverLoadingFlagsLUNARG flags;
	PFN_vkGetInstanceProcAddrLUNARG  pfnGetInstanceProcAddr;
} VkDirectDriverLoadingInfoLUNARG;

typedef struct VkDirectDriverLoadingListLUNARG {
	VkStructureType                        sType;
	void                                  *pNext;
	VkDirectDriverLoadingModeLUNARG        mode;
	uint32_t                               driverCount;
	const VkDirectDriverLoadingInfoLUNARG *pDrivers;
} VkDirectDriverLoadingListLUNARG;

typedef struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        multiviewPerViewViewports;
} VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;

typedef struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        rayTracingPositionFetch;
} VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR;

typedef struct VkDeviceImageSubresourceInfoKHR {
	VkStructureType               sType;
	const void                   *pNext;
	const VkImageCreateInfo      *pCreateInfo;
	const VkImageSubresource2KHR *pSubresource;
} VkDeviceImageSubresourceInfoKHR;

typedef struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        multiviewPerViewRenderAreas;
} VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;

typedef struct VkMemoryMapInfoKHR {
	VkStructureType  sType;
	const void      *pNext;
	VkMemoryMapFlags flags;
	VkDeviceMemory   memory;
	VkDeviceSize     offset;
	VkDeviceSize     size;
} VkMemoryMapInfoKHR;

typedef struct VkMemoryUnmapInfoKHR {
	VkStructureType       sType;
	const void           *pNext;
	VkMemoryUnmapFlagsKHR flags;
	VkDeviceMemory        memory;
} VkMemoryUnmapInfoKHR;

typedef struct VkPhysicalDeviceShaderObjectFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderObject;
} VkPhysicalDeviceShaderObjectFeaturesEXT;

typedef struct VkShaderCreateInfoEXT {
	VkStructureType              sType;
	const void                  *pNext;
	VkShaderCreateFlagsEXT       flags;
	VkShaderStageFlagBits        stage;
	VkShaderStageFlags           nextStage;
	VkShaderCodeTypeEXT          codeType;
	size_t                       codeSize;
	const void                  *pCode;
	const char                  *pName;
	uint32_t                     setLayoutCount;
	const VkDescriptorSetLayout *pSetLayouts;
	uint32_t                     pushConstantRangeCount;
	const VkPushConstantRange   *pPushConstantRanges;
	const VkSpecializationInfo  *pSpecializationInfo;
} VkShaderCreateInfoEXT;

typedef struct VkPhysicalDeviceShaderTileImageFeaturesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderTileImageColorReadAccess;
	VkBool32        shaderTileImageDepthReadAccess;
	VkBool32        shaderTileImageStencilReadAccess;
} VkPhysicalDeviceShaderTileImageFeaturesEXT;

typedef struct VkPhysicalDeviceShaderTileImagePropertiesEXT {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderTileImageCoherentReadAccelerated;
	VkBool32        shaderTileImageReadSampleFromPixelRateInvocation;
	VkBool32        shaderTileImageReadFromHelperInvocation;
} VkPhysicalDeviceShaderTileImagePropertiesEXT;

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkScreenBufferPropertiesQNX {
	VkStructureType sType;
	void           *pNext;
	VkDeviceSize    allocationSize;
	uint32_t        memoryTypeBits;
} VkScreenBufferPropertiesQNX;

#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkScreenBufferFormatPropertiesQNX {
	VkStructureType               sType;
	void                         *pNext;
	VkFormat                      format;
	uint64_t                      externalFormat;
	uint64_t                      screenUsage;
	VkFormatFeatureFlags          formatFeatures;
	VkComponentMapping            samplerYcbcrConversionComponents;
	VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	VkSamplerYcbcrRange           suggestedYcbcrRange;
	VkChromaLocation              suggestedXChromaOffset;
	VkChromaLocation              suggestedYChromaOffset;
} VkScreenBufferFormatPropertiesQNX;

#endif

#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef struct VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX {
	VkStructureType sType;
	void           *pNext;
	VkBool32        screenBufferImport;
} VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX;

#endif

typedef struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR {
	VkStructureType sType;
	void           *pNext;
	VkBool32        cooperativeMatrix;
	VkBool32        cooperativeMatrixRobustBufferAccess;
} VkPhysicalDeviceCooperativeMatrixFeaturesKHR;

typedef struct VkCooperativeMatrixPropertiesKHR {
	VkStructureType    sType;
	void              *pNext;
	uint32_t           MSize;
	uint32_t           NSize;
	uint32_t           KSize;
	VkComponentTypeKHR AType;
	VkComponentTypeKHR BType;
	VkComponentTypeKHR CType;
	VkComponentTypeKHR ResultType;
	VkBool32           saturatingAccumulation;
	VkScopeKHR         scope;
} VkCooperativeMatrixPropertiesKHR;

typedef struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR {
	VkStructureType    sType;
	void              *pNext;
	VkShaderStageFlags cooperativeMatrixSupportedStages;
} VkPhysicalDeviceCooperativeMatrixPropertiesKHR;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkPhysicalDeviceShaderEnqueueFeaturesAMDX {
	VkStructureType sType;
	void           *pNext;
	VkBool32        shaderEnqueue;
} VkPhysicalDeviceShaderEnqueueFeaturesAMDX;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkExecutionGraphPipelineCreateInfoAMDX {
	VkStructureType                        sType;
	const void                            *pNext;
	VkPipelineCreateFlags                  flags;
	uint32_t                               stageCount;
	const VkPipelineShaderStageCreateInfo *pStages;
	const VkPipelineLibraryCreateInfoKHR  *pLibraryInfo;
	VkPipelineLayout                       layout;
	VkPipeline                             basePipelineHandle;
	int32_t                                basePipelineIndex;
} VkExecutionGraphPipelineCreateInfoAMDX;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkExecutionGraphPipelineScratchSizeAMDX {
	VkStructureType sType;
	void           *pNext;
	VkDeviceSize    size;
} VkExecutionGraphPipelineScratchSizeAMDX;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkDispatchGraphInfoAMDX {
	uint32_t                       nodeIndex;
	uint32_t                       payloadCount;
	VkDeviceOrHostAddressConstAMDX payloads;
	uint64_t                       payloadStride;
} VkDispatchGraphInfoAMDX;

#endif

#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef struct VkDispatchGraphCountInfoAMDX {
	uint32_t                       count;
	VkDeviceOrHostAddressConstAMDX infos;
	uint64_t                       stride;
} VkDispatchGraphCountInfoAMDX;

#endif

typedef struct VkPhysicalDeviceCubicClampFeaturesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        cubicRangeClamp;
} VkPhysicalDeviceCubicClampFeaturesQCOM;

typedef struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        ycbcrDegamma;
} VkPhysicalDeviceYcbcrDegammaFeaturesQCOM;

typedef struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        enableYDegamma;
	VkBool32        enableCbCrDegamma;
} VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;

typedef struct VkPhysicalDeviceCubicWeightsFeaturesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        selectableCubicWeights;
} VkPhysicalDeviceCubicWeightsFeaturesQCOM;

typedef struct VkPhysicalDeviceImageProcessing2FeaturesQCOM {
	VkStructureType sType;
	void           *pNext;
	VkBool32        textureBlockMatch2;
} VkPhysicalDeviceImageProcessing2FeaturesQCOM;

typedef struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
	VkStructureType sType;
	void           *pNext;
	VkBool32        descriptorPoolOverallocation;
} VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV;

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkPhysicalDeviceExternalFormatResolveFeaturesANDROID {
	VkStructureType sType;
	void           *pNext;
	VkBool32        externalFormatResolve;
} VkPhysicalDeviceExternalFormatResolveFeaturesANDROID;

#endif

#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef struct VkPhysicalDeviceExternalFormatResolvePropertiesANDROID {
	VkStructureType  sType;
	void            *pNext;
	VkBool32         nullColorAttachmentWithExternalFormatResolve;
	VkChromaLocation externalFormatResolveChromaOffsetX;
	VkChromaLocation externalFormatResolveChromaOffsetY;
} VkPhysicalDeviceExternalFormatResolvePropertiesANDROID;

#endif

typedef struct VkLatencySleepModeInfoNV {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        lowLatencyMode;
	VkBool32        lowLatencyBoost;
	uint32_t        minimumIntervalUs;
} VkLatencySleepModeInfoNV;

typedef struct VkGetLatencyMarkerInfoNV {
	VkStructureType                sType;
	const void                    *pNext;
	VkLatencyTimingsFrameReportNV *pTimings;
} VkGetLatencyMarkerInfoNV;

typedef struct VkSwapchainLatencyCreateInfoNV {
	VkStructureType sType;
	const void     *pNext;
	VkBool32        latencyModeEnable;
} VkSwapchainLatencyCreateInfoNV;

typedef VkBool32(VKAPI_PTR *PFN_vkDebugUtilsMessengerCallbackEXT)(VkDebugUtilsMessageSeverityFlagBitsEXT      messageSeverity,
                                                                  VkDebugUtilsMessageTypeFlagsEXT             messageTypes,
                                                                  const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
                                                                  void                                       *pUserData);
typedef void(VKAPI_PTR *PFN_vkDeviceMemoryReportCallbackEXT)(const VkDeviceMemoryReportCallbackDataEXT *pCallbackData, void *pUserData);
typedef struct VkPhysicalDeviceProperties {
	uint32_t                         apiVersion;
	uint32_t                         driverVersion;
	uint32_t                         vendorID;
	uint32_t                         deviceID;
	VkPhysicalDeviceType             deviceType;
	char                             deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];
	uint8_t                          pipelineCacheUUID[VK_UUID_SIZE];
	VkPhysicalDeviceLimits           limits;
	VkPhysicalDeviceSparseProperties sparseProperties;
} VkPhysicalDeviceProperties;

typedef struct VkDeviceCreateInfo {
	VkStructureType                 sType;
	const void                     *pNext;
	VkDeviceCreateFlags             flags;
	uint32_t                        queueCreateInfoCount;
	const VkDeviceQueueCreateInfo  *pQueueCreateInfos;
	uint32_t                        enabledLayerCount;
	const char *const              *ppEnabledLayerNames;
	uint32_t                        enabledExtensionCount;
	const char *const              *ppEnabledExtensionNames;
	const VkPhysicalDeviceFeatures *pEnabledFeatures;
} VkDeviceCreateInfo;

typedef struct VkPhysicalDeviceMemoryProperties {
	uint32_t     memoryTypeCount;
	VkMemoryType memoryTypes[VK_MAX_MEMORY_TYPES];
	uint32_t     memoryHeapCount;
	VkMemoryHeap memoryHeaps[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryProperties;

typedef struct VkPhysicalDeviceProperties2 {
	VkStructureType            sType;
	void                      *pNext;
	VkPhysicalDeviceProperties properties;
} VkPhysicalDeviceProperties2;

typedef struct VkPhysicalDeviceProperties2 VkPhysicalDeviceProperties2KHR;

typedef struct VkPhysicalDeviceMemoryProperties2 {
	VkStructureType                  sType;
	void                            *pNext;
	VkPhysicalDeviceMemoryProperties memoryProperties;
} VkPhysicalDeviceMemoryProperties2;

typedef struct VkPhysicalDeviceMemoryProperties2 VkPhysicalDeviceMemoryProperties2KHR;

typedef struct VkPresentRegionsKHR {
	VkStructureType           sType;
	const void               *pNext;
	uint32_t                  swapchainCount;
	const VkPresentRegionKHR *pRegions;
} VkPresentRegionsKHR;

typedef struct VkDebugUtilsMessengerCreateInfoEXT {
	VkStructureType                      sType;
	const void                          *pNext;
	VkDebugUtilsMessengerCreateFlagsEXT  flags;
	VkDebugUtilsMessageSeverityFlagsEXT  messageSeverity;
	VkDebugUtilsMessageTypeFlagsEXT      messageType;
	PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback;
	void                                *pUserData;
} VkDebugUtilsMessengerCreateInfoEXT;

typedef struct VkDeviceDeviceMemoryReportCreateInfoEXT {
	VkStructureType                     sType;
	const void                         *pNext;
	VkDeviceMemoryReportFlagsEXT        flags;
	PFN_vkDeviceMemoryReportCallbackEXT pfnUserCallback;
	void                               *pUserData;
} VkDeviceDeviceMemoryReportCreateInfoEXT;

typedef struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;

typedef struct VkDrmFormatModifierPropertiesListEXT {
	VkStructureType                   sType;
	void                             *pNext;
	uint32_t                          drmFormatModifierCount;
	VkDrmFormatModifierPropertiesEXT *pDrmFormatModifierProperties;
} VkDrmFormatModifierPropertiesListEXT;

typedef struct VkFramebufferAttachmentsCreateInfo {
	VkStructureType                         sType;
	const void                             *pNext;
	uint32_t                                attachmentImageInfoCount;
	const VkFramebufferAttachmentImageInfo *pAttachmentImageInfos;
} VkFramebufferAttachmentsCreateInfo;

typedef struct VkFramebufferAttachmentsCreateInfo VkFramebufferAttachmentsCreateInfoKHR;

typedef struct VkVideoProfileListInfoKHR {
	VkStructureType              sType;
	const void                  *pNext;
	uint32_t                     profileCount;
	const VkVideoProfileInfoKHR *pProfiles;
} VkVideoProfileListInfoKHR;

typedef struct VkDrmFormatModifierPropertiesList2EXT {
	VkStructureType                    sType;
	void                              *pNext;
	uint32_t                           drmFormatModifierCount;
	VkDrmFormatModifierProperties2EXT *pDrmFormatModifierProperties;
} VkDrmFormatModifierPropertiesList2EXT;



#define VK_VERSION_1_0 1
GLAD_API_CALL int GLAD_VK_VERSION_1_0;
#define VK_VERSION_1_1 1
GLAD_API_CALL int GLAD_VK_VERSION_1_1;
#define VK_VERSION_1_2 1
GLAD_API_CALL int GLAD_VK_VERSION_1_2;
#define VK_VERSION_1_3 1
GLAD_API_CALL int GLAD_VK_VERSION_1_3;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_AMDX_shader_enqueue 1
GLAD_API_CALL int GLAD_VK_AMDX_shader_enqueue;

#endif
#define VK_AMD_buffer_marker 1
GLAD_API_CALL int GLAD_VK_AMD_buffer_marker;
#define VK_AMD_device_coherent_memory 1
GLAD_API_CALL int GLAD_VK_AMD_device_coherent_memory;
#define VK_AMD_display_native_hdr 1
GLAD_API_CALL int GLAD_VK_AMD_display_native_hdr;
#define VK_AMD_draw_indirect_count 1
GLAD_API_CALL int GLAD_VK_AMD_draw_indirect_count;
#define VK_AMD_gcn_shader 1
GLAD_API_CALL int GLAD_VK_AMD_gcn_shader;
#define VK_AMD_gpu_shader_half_float 1
GLAD_API_CALL int GLAD_VK_AMD_gpu_shader_half_float;
#define VK_AMD_gpu_shader_int16 1
GLAD_API_CALL int GLAD_VK_AMD_gpu_shader_int16;
#define VK_AMD_memory_overallocation_behavior 1
GLAD_API_CALL int GLAD_VK_AMD_memory_overallocation_behavior;
#define VK_AMD_mixed_attachment_samples 1
GLAD_API_CALL int GLAD_VK_AMD_mixed_attachment_samples;
#define VK_AMD_negative_viewport_height 1
GLAD_API_CALL int GLAD_VK_AMD_negative_viewport_height;
#define VK_AMD_pipeline_compiler_control 1
GLAD_API_CALL int GLAD_VK_AMD_pipeline_compiler_control;
#define VK_AMD_rasterization_order 1
GLAD_API_CALL int GLAD_VK_AMD_rasterization_order;
#define VK_AMD_shader_ballot 1
GLAD_API_CALL int GLAD_VK_AMD_shader_ballot;
#define VK_AMD_shader_core_properties 1
GLAD_API_CALL int GLAD_VK_AMD_shader_core_properties;
#define VK_AMD_shader_core_properties2 1
GLAD_API_CALL int GLAD_VK_AMD_shader_core_properties2;
#define VK_AMD_shader_early_and_late_fragment_tests 1
GLAD_API_CALL int GLAD_VK_AMD_shader_early_and_late_fragment_tests;
#define VK_AMD_shader_explicit_vertex_parameter 1
GLAD_API_CALL int GLAD_VK_AMD_shader_explicit_vertex_parameter;
#define VK_AMD_shader_fragment_mask 1
GLAD_API_CALL int GLAD_VK_AMD_shader_fragment_mask;
#define VK_AMD_shader_image_load_store_lod 1
GLAD_API_CALL int GLAD_VK_AMD_shader_image_load_store_lod;
#define VK_AMD_shader_info 1
GLAD_API_CALL int GLAD_VK_AMD_shader_info;
#define VK_AMD_shader_trinary_minmax 1
GLAD_API_CALL int GLAD_VK_AMD_shader_trinary_minmax;
#define VK_AMD_texture_gather_bias_lod 1
GLAD_API_CALL int GLAD_VK_AMD_texture_gather_bias_lod;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	#define VK_ANDROID_external_format_resolve 1
GLAD_API_CALL int GLAD_VK_ANDROID_external_format_resolve;

#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	#define VK_ANDROID_external_memory_android_hardware_buffer 1
GLAD_API_CALL int GLAD_VK_ANDROID_external_memory_android_hardware_buffer;

#endif
#define VK_ARM_rasterization_order_attachment_access 1
GLAD_API_CALL int GLAD_VK_ARM_rasterization_order_attachment_access;
#define VK_ARM_shader_core_builtins 1
GLAD_API_CALL int GLAD_VK_ARM_shader_core_builtins;
#define VK_ARM_shader_core_properties 1
GLAD_API_CALL int GLAD_VK_ARM_shader_core_properties;
#define VK_EXT_4444_formats 1
GLAD_API_CALL int GLAD_VK_EXT_4444_formats;
#define VK_EXT_acquire_drm_display 1
GLAD_API_CALL int GLAD_VK_EXT_acquire_drm_display;
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	#define VK_EXT_acquire_xlib_display 1
GLAD_API_CALL int GLAD_VK_EXT_acquire_xlib_display;

#endif
#define VK_EXT_astc_decode_mode 1
GLAD_API_CALL int GLAD_VK_EXT_astc_decode_mode;
#define VK_EXT_attachment_feedback_loop_dynamic_state 1
GLAD_API_CALL int GLAD_VK_EXT_attachment_feedback_loop_dynamic_state;
#define VK_EXT_attachment_feedback_loop_layout 1
GLAD_API_CALL int GLAD_VK_EXT_attachment_feedback_loop_layout;
#define VK_EXT_blend_operation_advanced 1
GLAD_API_CALL int GLAD_VK_EXT_blend_operation_advanced;
#define VK_EXT_border_color_swizzle 1
GLAD_API_CALL int GLAD_VK_EXT_border_color_swizzle;
#define VK_EXT_buffer_device_address 1
GLAD_API_CALL int GLAD_VK_EXT_buffer_device_address;
#define VK_EXT_calibrated_timestamps 1
GLAD_API_CALL int GLAD_VK_EXT_calibrated_timestamps;
#define VK_EXT_color_write_enable 1
GLAD_API_CALL int GLAD_VK_EXT_color_write_enable;
#define VK_EXT_conditional_rendering 1
GLAD_API_CALL int GLAD_VK_EXT_conditional_rendering;
#define VK_EXT_conservative_rasterization 1
GLAD_API_CALL int GLAD_VK_EXT_conservative_rasterization;
#define VK_EXT_custom_border_color 1
GLAD_API_CALL int GLAD_VK_EXT_custom_border_color;
#define VK_EXT_debug_marker 1
GLAD_API_CALL int GLAD_VK_EXT_debug_marker;
#define VK_EXT_debug_report 1
GLAD_API_CALL int GLAD_VK_EXT_debug_report;
#define VK_EXT_debug_utils 1
GLAD_API_CALL int GLAD_VK_EXT_debug_utils;
#define VK_EXT_depth_bias_control 1
GLAD_API_CALL int GLAD_VK_EXT_depth_bias_control;
#define VK_EXT_depth_clamp_zero_one 1
GLAD_API_CALL int GLAD_VK_EXT_depth_clamp_zero_one;
#define VK_EXT_depth_clip_control 1
GLAD_API_CALL int GLAD_VK_EXT_depth_clip_control;
#define VK_EXT_depth_clip_enable 1
GLAD_API_CALL int GLAD_VK_EXT_depth_clip_enable;
#define VK_EXT_depth_range_unrestricted 1
GLAD_API_CALL int GLAD_VK_EXT_depth_range_unrestricted;
#define VK_EXT_descriptor_buffer 1
GLAD_API_CALL int GLAD_VK_EXT_descriptor_buffer;
#define VK_EXT_descriptor_indexing 1
GLAD_API_CALL int GLAD_VK_EXT_descriptor_indexing;
#define VK_EXT_device_address_binding_report 1
GLAD_API_CALL int GLAD_VK_EXT_device_address_binding_report;
#define VK_EXT_device_fault 1
GLAD_API_CALL int GLAD_VK_EXT_device_fault;
#define VK_EXT_device_memory_report 1
GLAD_API_CALL int GLAD_VK_EXT_device_memory_report;
#define VK_EXT_direct_mode_display 1
GLAD_API_CALL int GLAD_VK_EXT_direct_mode_display;
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	#define VK_EXT_directfb_surface 1
GLAD_API_CALL int GLAD_VK_EXT_directfb_surface;

#endif
#define VK_EXT_discard_rectangles 1
GLAD_API_CALL int GLAD_VK_EXT_discard_rectangles;
#define VK_EXT_display_control 1
GLAD_API_CALL int GLAD_VK_EXT_display_control;
#define VK_EXT_display_surface_counter 1
GLAD_API_CALL int GLAD_VK_EXT_display_surface_counter;
#define VK_EXT_dynamic_rendering_unused_attachments 1
GLAD_API_CALL int GLAD_VK_EXT_dynamic_rendering_unused_attachments;
#define VK_EXT_extended_dynamic_state 1
GLAD_API_CALL int GLAD_VK_EXT_extended_dynamic_state;
#define VK_EXT_extended_dynamic_state2 1
GLAD_API_CALL int GLAD_VK_EXT_extended_dynamic_state2;
#define VK_EXT_extended_dynamic_state3 1
GLAD_API_CALL int GLAD_VK_EXT_extended_dynamic_state3;
#define VK_EXT_external_memory_acquire_unmodified 1
GLAD_API_CALL int GLAD_VK_EXT_external_memory_acquire_unmodified;
#define VK_EXT_external_memory_dma_buf 1
GLAD_API_CALL int GLAD_VK_EXT_external_memory_dma_buf;
#define VK_EXT_external_memory_host 1
GLAD_API_CALL int GLAD_VK_EXT_external_memory_host;
#define VK_EXT_filter_cubic 1
GLAD_API_CALL int GLAD_VK_EXT_filter_cubic;
#define VK_EXT_fragment_density_map 1
GLAD_API_CALL int GLAD_VK_EXT_fragment_density_map;
#define VK_EXT_fragment_density_map2 1
GLAD_API_CALL int GLAD_VK_EXT_fragment_density_map2;
#define VK_EXT_fragment_shader_interlock 1
GLAD_API_CALL int GLAD_VK_EXT_fragment_shader_interlock;
#define VK_EXT_frame_boundary 1
GLAD_API_CALL int GLAD_VK_EXT_frame_boundary;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_EXT_full_screen_exclusive 1
GLAD_API_CALL int GLAD_VK_EXT_full_screen_exclusive;

#endif
#define VK_EXT_global_priority 1
GLAD_API_CALL int GLAD_VK_EXT_global_priority;
#define VK_EXT_global_priority_query 1
GLAD_API_CALL int GLAD_VK_EXT_global_priority_query;
#define VK_EXT_graphics_pipeline_library 1
GLAD_API_CALL int GLAD_VK_EXT_graphics_pipeline_library;
#define VK_EXT_hdr_metadata 1
GLAD_API_CALL int GLAD_VK_EXT_hdr_metadata;
#define VK_EXT_headless_surface 1
GLAD_API_CALL int GLAD_VK_EXT_headless_surface;
#define VK_EXT_host_image_copy 1
GLAD_API_CALL int GLAD_VK_EXT_host_image_copy;
#define VK_EXT_host_query_reset 1
GLAD_API_CALL int GLAD_VK_EXT_host_query_reset;
#define VK_EXT_image_2d_view_of_3d 1
GLAD_API_CALL int GLAD_VK_EXT_image_2d_view_of_3d;
#define VK_EXT_image_compression_control 1
GLAD_API_CALL int GLAD_VK_EXT_image_compression_control;
#define VK_EXT_image_compression_control_swapchain 1
GLAD_API_CALL int GLAD_VK_EXT_image_compression_control_swapchain;
#define VK_EXT_image_drm_format_modifier 1
GLAD_API_CALL int GLAD_VK_EXT_image_drm_format_modifier;
#define VK_EXT_image_robustness 1
GLAD_API_CALL int GLAD_VK_EXT_image_robustness;
#define VK_EXT_image_sliced_view_of_3d 1
GLAD_API_CALL int GLAD_VK_EXT_image_sliced_view_of_3d;
#define VK_EXT_image_view_min_lod 1
GLAD_API_CALL int GLAD_VK_EXT_image_view_min_lod;
#define VK_EXT_index_type_uint8 1
GLAD_API_CALL int GLAD_VK_EXT_index_type_uint8;
#define VK_EXT_inline_uniform_block 1
GLAD_API_CALL int GLAD_VK_EXT_inline_uniform_block;
#define VK_EXT_legacy_dithering 1
GLAD_API_CALL int GLAD_VK_EXT_legacy_dithering;
#define VK_EXT_line_rasterization 1
GLAD_API_CALL int GLAD_VK_EXT_line_rasterization;
#define VK_EXT_load_store_op_none 1
GLAD_API_CALL int GLAD_VK_EXT_load_store_op_none;
#define VK_EXT_memory_budget 1
GLAD_API_CALL int GLAD_VK_EXT_memory_budget;
#define VK_EXT_memory_priority 1
GLAD_API_CALL int GLAD_VK_EXT_memory_priority;
#define VK_EXT_mesh_shader 1
GLAD_API_CALL int GLAD_VK_EXT_mesh_shader;
#if defined(VK_USE_PLATFORM_METAL_EXT)
	#define VK_EXT_metal_objects 1
GLAD_API_CALL int GLAD_VK_EXT_metal_objects;

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
	#define VK_EXT_metal_surface 1
GLAD_API_CALL int GLAD_VK_EXT_metal_surface;

#endif
#define VK_EXT_multi_draw 1
GLAD_API_CALL int GLAD_VK_EXT_multi_draw;
#define VK_EXT_multisampled_render_to_single_sampled 1
GLAD_API_CALL int GLAD_VK_EXT_multisampled_render_to_single_sampled;
#define VK_EXT_mutable_descriptor_type 1
GLAD_API_CALL int GLAD_VK_EXT_mutable_descriptor_type;
#define VK_EXT_non_seamless_cube_map 1
GLAD_API_CALL int GLAD_VK_EXT_non_seamless_cube_map;
#define VK_EXT_opacity_micromap 1
GLAD_API_CALL int GLAD_VK_EXT_opacity_micromap;
#define VK_EXT_pageable_device_local_memory 1
GLAD_API_CALL int GLAD_VK_EXT_pageable_device_local_memory;
#define VK_EXT_pci_bus_info 1
GLAD_API_CALL int GLAD_VK_EXT_pci_bus_info;
#define VK_EXT_physical_device_drm 1
GLAD_API_CALL int GLAD_VK_EXT_physical_device_drm;
#define VK_EXT_pipeline_creation_cache_control 1
GLAD_API_CALL int GLAD_VK_EXT_pipeline_creation_cache_control;
#define VK_EXT_pipeline_creation_feedback 1
GLAD_API_CALL int GLAD_VK_EXT_pipeline_creation_feedback;
#define VK_EXT_pipeline_library_group_handles 1
GLAD_API_CALL int GLAD_VK_EXT_pipeline_library_group_handles;
#define VK_EXT_pipeline_properties 1
GLAD_API_CALL int GLAD_VK_EXT_pipeline_properties;
#define VK_EXT_pipeline_protected_access 1
GLAD_API_CALL int GLAD_VK_EXT_pipeline_protected_access;
#define VK_EXT_pipeline_robustness 1
GLAD_API_CALL int GLAD_VK_EXT_pipeline_robustness;
#define VK_EXT_post_depth_coverage 1
GLAD_API_CALL int GLAD_VK_EXT_post_depth_coverage;
#define VK_EXT_primitive_topology_list_restart 1
GLAD_API_CALL int GLAD_VK_EXT_primitive_topology_list_restart;
#define VK_EXT_primitives_generated_query 1
GLAD_API_CALL int GLAD_VK_EXT_primitives_generated_query;
#define VK_EXT_private_data 1
GLAD_API_CALL int GLAD_VK_EXT_private_data;
#define VK_EXT_provoking_vertex 1
GLAD_API_CALL int GLAD_VK_EXT_provoking_vertex;
#define VK_EXT_queue_family_foreign 1
GLAD_API_CALL int GLAD_VK_EXT_queue_family_foreign;
#define VK_EXT_rasterization_order_attachment_access 1
GLAD_API_CALL int GLAD_VK_EXT_rasterization_order_attachment_access;
#define VK_EXT_rgba10x6_formats 1
GLAD_API_CALL int GLAD_VK_EXT_rgba10x6_formats;
#define VK_EXT_robustness2 1
GLAD_API_CALL int GLAD_VK_EXT_robustness2;
#define VK_EXT_sample_locations 1
GLAD_API_CALL int GLAD_VK_EXT_sample_locations;
#define VK_EXT_sampler_filter_minmax 1
GLAD_API_CALL int GLAD_VK_EXT_sampler_filter_minmax;
#define VK_EXT_scalar_block_layout 1
GLAD_API_CALL int GLAD_VK_EXT_scalar_block_layout;
#define VK_EXT_separate_stencil_usage 1
GLAD_API_CALL int GLAD_VK_EXT_separate_stencil_usage;
#define VK_EXT_shader_atomic_float 1
GLAD_API_CALL int GLAD_VK_EXT_shader_atomic_float;
#define VK_EXT_shader_atomic_float2 1
GLAD_API_CALL int GLAD_VK_EXT_shader_atomic_float2;
#define VK_EXT_shader_demote_to_helper_invocation 1
GLAD_API_CALL int GLAD_VK_EXT_shader_demote_to_helper_invocation;
#define VK_EXT_shader_image_atomic_int64 1
GLAD_API_CALL int GLAD_VK_EXT_shader_image_atomic_int64;
#define VK_EXT_shader_module_identifier 1
GLAD_API_CALL int GLAD_VK_EXT_shader_module_identifier;
#define VK_EXT_shader_object 1
GLAD_API_CALL int GLAD_VK_EXT_shader_object;
#define VK_EXT_shader_stencil_export 1
GLAD_API_CALL int GLAD_VK_EXT_shader_stencil_export;
#define VK_EXT_shader_subgroup_ballot 1
GLAD_API_CALL int GLAD_VK_EXT_shader_subgroup_ballot;
#define VK_EXT_shader_subgroup_vote 1
GLAD_API_CALL int GLAD_VK_EXT_shader_subgroup_vote;
#define VK_EXT_shader_tile_image 1
GLAD_API_CALL int GLAD_VK_EXT_shader_tile_image;
#define VK_EXT_shader_viewport_index_layer 1
GLAD_API_CALL int GLAD_VK_EXT_shader_viewport_index_layer;
#define VK_EXT_subgroup_size_control 1
GLAD_API_CALL int GLAD_VK_EXT_subgroup_size_control;
#define VK_EXT_subpass_merge_feedback 1
GLAD_API_CALL int GLAD_VK_EXT_subpass_merge_feedback;
#define VK_EXT_surface_maintenance1 1
GLAD_API_CALL int GLAD_VK_EXT_surface_maintenance1;
#define VK_EXT_swapchain_colorspace 1
GLAD_API_CALL int GLAD_VK_EXT_swapchain_colorspace;
#define VK_EXT_swapchain_maintenance1 1
GLAD_API_CALL int GLAD_VK_EXT_swapchain_maintenance1;
#define VK_EXT_texel_buffer_alignment 1
GLAD_API_CALL int GLAD_VK_EXT_texel_buffer_alignment;
#define VK_EXT_texture_compression_astc_hdr 1
GLAD_API_CALL int GLAD_VK_EXT_texture_compression_astc_hdr;
#define VK_EXT_tooling_info 1
GLAD_API_CALL int GLAD_VK_EXT_tooling_info;
#define VK_EXT_transform_feedback 1
GLAD_API_CALL int GLAD_VK_EXT_transform_feedback;
#define VK_EXT_validation_cache 1
GLAD_API_CALL int GLAD_VK_EXT_validation_cache;
#define VK_EXT_validation_features 1
GLAD_API_CALL int GLAD_VK_EXT_validation_features;
#define VK_EXT_validation_flags 1
GLAD_API_CALL int GLAD_VK_EXT_validation_flags;
#define VK_EXT_vertex_attribute_divisor 1
GLAD_API_CALL int GLAD_VK_EXT_vertex_attribute_divisor;
#define VK_EXT_vertex_input_dynamic_state 1
GLAD_API_CALL int GLAD_VK_EXT_vertex_input_dynamic_state;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_EXT_video_encode_h264 1
GLAD_API_CALL int GLAD_VK_EXT_video_encode_h264;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_EXT_video_encode_h265 1
GLAD_API_CALL int GLAD_VK_EXT_video_encode_h265;

#endif
#define VK_EXT_ycbcr_2plane_444_formats 1
GLAD_API_CALL int GLAD_VK_EXT_ycbcr_2plane_444_formats;
#define VK_EXT_ycbcr_image_arrays 1
GLAD_API_CALL int GLAD_VK_EXT_ycbcr_image_arrays;
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_buffer_collection 1
GLAD_API_CALL int GLAD_VK_FUCHSIA_buffer_collection;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_external_memory 1
GLAD_API_CALL int GLAD_VK_FUCHSIA_external_memory;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_external_semaphore 1
GLAD_API_CALL int GLAD_VK_FUCHSIA_external_semaphore;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	#define VK_FUCHSIA_imagepipe_surface 1
GLAD_API_CALL int GLAD_VK_FUCHSIA_imagepipe_surface;

#endif
#if defined(VK_USE_PLATFORM_GGP)
	#define VK_GGP_frame_token 1
GLAD_API_CALL int GLAD_VK_GGP_frame_token;

#endif
#if defined(VK_USE_PLATFORM_GGP)
	#define VK_GGP_stream_descriptor_surface 1
GLAD_API_CALL int GLAD_VK_GGP_stream_descriptor_surface;

#endif
#define VK_GOOGLE_decorate_string 1
GLAD_API_CALL int GLAD_VK_GOOGLE_decorate_string;
#define VK_GOOGLE_display_timing 1
GLAD_API_CALL int GLAD_VK_GOOGLE_display_timing;
#define VK_GOOGLE_hlsl_functionality1 1
GLAD_API_CALL int GLAD_VK_GOOGLE_hlsl_functionality1;
#define VK_GOOGLE_surfaceless_query 1
GLAD_API_CALL int GLAD_VK_GOOGLE_surfaceless_query;
#define VK_GOOGLE_user_type 1
GLAD_API_CALL int GLAD_VK_GOOGLE_user_type;
#define VK_HUAWEI_cluster_culling_shader 1
GLAD_API_CALL int GLAD_VK_HUAWEI_cluster_culling_shader;
#define VK_HUAWEI_invocation_mask 1
GLAD_API_CALL int GLAD_VK_HUAWEI_invocation_mask;
#define VK_HUAWEI_subpass_shading 1
GLAD_API_CALL int GLAD_VK_HUAWEI_subpass_shading;
#define VK_IMG_filter_cubic 1
GLAD_API_CALL int GLAD_VK_IMG_filter_cubic;
#define VK_IMG_format_pvrtc 1
GLAD_API_CALL int GLAD_VK_IMG_format_pvrtc;
#define VK_INTEL_performance_query 1
GLAD_API_CALL int GLAD_VK_INTEL_performance_query;
#define VK_INTEL_shader_integer_functions2 1
GLAD_API_CALL int GLAD_VK_INTEL_shader_integer_functions2;
#define VK_KHR_16bit_storage 1
GLAD_API_CALL int GLAD_VK_KHR_16bit_storage;
#define VK_KHR_8bit_storage 1
GLAD_API_CALL int GLAD_VK_KHR_8bit_storage;
#define VK_KHR_acceleration_structure 1
GLAD_API_CALL int GLAD_VK_KHR_acceleration_structure;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	#define VK_KHR_android_surface 1
GLAD_API_CALL int GLAD_VK_KHR_android_surface;

#endif
#define VK_KHR_bind_memory2 1
GLAD_API_CALL int GLAD_VK_KHR_bind_memory2;
#define VK_KHR_buffer_device_address 1
GLAD_API_CALL int GLAD_VK_KHR_buffer_device_address;
#define VK_KHR_cooperative_matrix 1
GLAD_API_CALL int GLAD_VK_KHR_cooperative_matrix;
#define VK_KHR_copy_commands2 1
GLAD_API_CALL int GLAD_VK_KHR_copy_commands2;
#define VK_KHR_create_renderpass2 1
GLAD_API_CALL int GLAD_VK_KHR_create_renderpass2;
#define VK_KHR_dedicated_allocation 1
GLAD_API_CALL int GLAD_VK_KHR_dedicated_allocation;
#define VK_KHR_deferred_host_operations 1
GLAD_API_CALL int GLAD_VK_KHR_deferred_host_operations;
#define VK_KHR_depth_stencil_resolve 1
GLAD_API_CALL int GLAD_VK_KHR_depth_stencil_resolve;
#define VK_KHR_descriptor_update_template 1
GLAD_API_CALL int GLAD_VK_KHR_descriptor_update_template;
#define VK_KHR_device_group 1
GLAD_API_CALL int GLAD_VK_KHR_device_group;
#define VK_KHR_device_group_creation 1
GLAD_API_CALL int GLAD_VK_KHR_device_group_creation;
#define VK_KHR_display 1
GLAD_API_CALL int GLAD_VK_KHR_display;
#define VK_KHR_display_swapchain 1
GLAD_API_CALL int GLAD_VK_KHR_display_swapchain;
#define VK_KHR_draw_indirect_count 1
GLAD_API_CALL int GLAD_VK_KHR_draw_indirect_count;
#define VK_KHR_driver_properties 1
GLAD_API_CALL int GLAD_VK_KHR_driver_properties;
#define VK_KHR_dynamic_rendering 1
GLAD_API_CALL int GLAD_VK_KHR_dynamic_rendering;
#define VK_KHR_external_fence 1
GLAD_API_CALL int GLAD_VK_KHR_external_fence;
#define VK_KHR_external_fence_capabilities 1
GLAD_API_CALL int GLAD_VK_KHR_external_fence_capabilities;
#define VK_KHR_external_fence_fd 1
GLAD_API_CALL int GLAD_VK_KHR_external_fence_fd;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_external_fence_win32 1
GLAD_API_CALL int GLAD_VK_KHR_external_fence_win32;

#endif
#define VK_KHR_external_memory 1
GLAD_API_CALL int GLAD_VK_KHR_external_memory;
#define VK_KHR_external_memory_capabilities 1
GLAD_API_CALL int GLAD_VK_KHR_external_memory_capabilities;
#define VK_KHR_external_memory_fd 1
GLAD_API_CALL int GLAD_VK_KHR_external_memory_fd;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_external_memory_win32 1
GLAD_API_CALL int GLAD_VK_KHR_external_memory_win32;

#endif
#define VK_KHR_external_semaphore 1
GLAD_API_CALL int GLAD_VK_KHR_external_semaphore;
#define VK_KHR_external_semaphore_capabilities 1
GLAD_API_CALL int GLAD_VK_KHR_external_semaphore_capabilities;
#define VK_KHR_external_semaphore_fd 1
GLAD_API_CALL int GLAD_VK_KHR_external_semaphore_fd;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_external_semaphore_win32 1
GLAD_API_CALL int GLAD_VK_KHR_external_semaphore_win32;

#endif
#define VK_KHR_format_feature_flags2 1
GLAD_API_CALL int GLAD_VK_KHR_format_feature_flags2;
#define VK_KHR_fragment_shader_barycentric 1
GLAD_API_CALL int GLAD_VK_KHR_fragment_shader_barycentric;
#define VK_KHR_fragment_shading_rate 1
GLAD_API_CALL int GLAD_VK_KHR_fragment_shading_rate;
#define VK_KHR_get_display_properties2 1
GLAD_API_CALL int GLAD_VK_KHR_get_display_properties2;
#define VK_KHR_get_memory_requirements2 1
GLAD_API_CALL int GLAD_VK_KHR_get_memory_requirements2;
#define VK_KHR_get_physical_device_properties2 1
GLAD_API_CALL int GLAD_VK_KHR_get_physical_device_properties2;
#define VK_KHR_get_surface_capabilities2 1
GLAD_API_CALL int GLAD_VK_KHR_get_surface_capabilities2;
#define VK_KHR_global_priority 1
GLAD_API_CALL int GLAD_VK_KHR_global_priority;
#define VK_KHR_image_format_list 1
GLAD_API_CALL int GLAD_VK_KHR_image_format_list;
#define VK_KHR_imageless_framebuffer 1
GLAD_API_CALL int GLAD_VK_KHR_imageless_framebuffer;
#define VK_KHR_incremental_present 1
GLAD_API_CALL int GLAD_VK_KHR_incremental_present;
#define VK_KHR_maintenance1 1
GLAD_API_CALL int GLAD_VK_KHR_maintenance1;
#define VK_KHR_maintenance2 1
GLAD_API_CALL int GLAD_VK_KHR_maintenance2;
#define VK_KHR_maintenance3 1
GLAD_API_CALL int GLAD_VK_KHR_maintenance3;
#define VK_KHR_maintenance4 1
GLAD_API_CALL int GLAD_VK_KHR_maintenance4;
#define VK_KHR_maintenance5 1
GLAD_API_CALL int GLAD_VK_KHR_maintenance5;
#define VK_KHR_map_memory2 1
GLAD_API_CALL int GLAD_VK_KHR_map_memory2;
#define VK_KHR_multiview 1
GLAD_API_CALL int GLAD_VK_KHR_multiview;
#define VK_KHR_performance_query 1
GLAD_API_CALL int GLAD_VK_KHR_performance_query;
#define VK_KHR_pipeline_executable_properties 1
GLAD_API_CALL int GLAD_VK_KHR_pipeline_executable_properties;
#define VK_KHR_pipeline_library 1
GLAD_API_CALL int GLAD_VK_KHR_pipeline_library;
#define VK_KHR_portability_enumeration 1
GLAD_API_CALL int GLAD_VK_KHR_portability_enumeration;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_KHR_portability_subset 1
GLAD_API_CALL int GLAD_VK_KHR_portability_subset;

#endif
#define VK_KHR_present_id 1
GLAD_API_CALL int GLAD_VK_KHR_present_id;
#define VK_KHR_present_wait 1
GLAD_API_CALL int GLAD_VK_KHR_present_wait;
#define VK_KHR_push_descriptor 1
GLAD_API_CALL int GLAD_VK_KHR_push_descriptor;
#define VK_KHR_ray_query 1
GLAD_API_CALL int GLAD_VK_KHR_ray_query;
#define VK_KHR_ray_tracing_maintenance1 1
GLAD_API_CALL int GLAD_VK_KHR_ray_tracing_maintenance1;
#define VK_KHR_ray_tracing_pipeline 1
GLAD_API_CALL int GLAD_VK_KHR_ray_tracing_pipeline;
#define VK_KHR_ray_tracing_position_fetch 1
GLAD_API_CALL int GLAD_VK_KHR_ray_tracing_position_fetch;
#define VK_KHR_relaxed_block_layout 1
GLAD_API_CALL int GLAD_VK_KHR_relaxed_block_layout;
#define VK_KHR_sampler_mirror_clamp_to_edge 1
GLAD_API_CALL int GLAD_VK_KHR_sampler_mirror_clamp_to_edge;
#define VK_KHR_sampler_ycbcr_conversion 1
GLAD_API_CALL int GLAD_VK_KHR_sampler_ycbcr_conversion;
#define VK_KHR_separate_depth_stencil_layouts 1
GLAD_API_CALL int GLAD_VK_KHR_separate_depth_stencil_layouts;
#define VK_KHR_shader_atomic_int64 1
GLAD_API_CALL int GLAD_VK_KHR_shader_atomic_int64;
#define VK_KHR_shader_clock 1
GLAD_API_CALL int GLAD_VK_KHR_shader_clock;
#define VK_KHR_shader_draw_parameters 1
GLAD_API_CALL int GLAD_VK_KHR_shader_draw_parameters;
#define VK_KHR_shader_float16_int8 1
GLAD_API_CALL int GLAD_VK_KHR_shader_float16_int8;
#define VK_KHR_shader_float_controls 1
GLAD_API_CALL int GLAD_VK_KHR_shader_float_controls;
#define VK_KHR_shader_integer_dot_product 1
GLAD_API_CALL int GLAD_VK_KHR_shader_integer_dot_product;
#define VK_KHR_shader_non_semantic_info 1
GLAD_API_CALL int GLAD_VK_KHR_shader_non_semantic_info;
#define VK_KHR_shader_subgroup_extended_types 1
GLAD_API_CALL int GLAD_VK_KHR_shader_subgroup_extended_types;
#define VK_KHR_shader_subgroup_uniform_control_flow 1
GLAD_API_CALL int GLAD_VK_KHR_shader_subgroup_uniform_control_flow;
#define VK_KHR_shader_terminate_invocation 1
GLAD_API_CALL int GLAD_VK_KHR_shader_terminate_invocation;
#define VK_KHR_shared_presentable_image 1
GLAD_API_CALL int GLAD_VK_KHR_shared_presentable_image;
#define VK_KHR_spirv_1_4 1
GLAD_API_CALL int GLAD_VK_KHR_spirv_1_4;
#define VK_KHR_storage_buffer_storage_class 1
GLAD_API_CALL int GLAD_VK_KHR_storage_buffer_storage_class;
#define VK_KHR_surface 1
GLAD_API_CALL int GLAD_VK_KHR_surface;
#define VK_KHR_surface_protected_capabilities 1
GLAD_API_CALL int GLAD_VK_KHR_surface_protected_capabilities;
#define VK_KHR_swapchain 1
GLAD_API_CALL int GLAD_VK_KHR_swapchain;
#define VK_KHR_swapchain_mutable_format 1
GLAD_API_CALL int GLAD_VK_KHR_swapchain_mutable_format;
#define VK_KHR_synchronization2 1
GLAD_API_CALL int GLAD_VK_KHR_synchronization2;
#define VK_KHR_timeline_semaphore 1
GLAD_API_CALL int GLAD_VK_KHR_timeline_semaphore;
#define VK_KHR_uniform_buffer_standard_layout 1
GLAD_API_CALL int GLAD_VK_KHR_uniform_buffer_standard_layout;
#define VK_KHR_variable_pointers 1
GLAD_API_CALL int GLAD_VK_KHR_variable_pointers;
#define VK_KHR_video_decode_h264 1
GLAD_API_CALL int GLAD_VK_KHR_video_decode_h264;
#define VK_KHR_video_decode_h265 1
GLAD_API_CALL int GLAD_VK_KHR_video_decode_h265;
#define VK_KHR_video_decode_queue 1
GLAD_API_CALL int GLAD_VK_KHR_video_decode_queue;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_KHR_video_encode_queue 1
GLAD_API_CALL int GLAD_VK_KHR_video_encode_queue;

#endif
#define VK_KHR_video_queue 1
GLAD_API_CALL int GLAD_VK_KHR_video_queue;
#define VK_KHR_vulkan_memory_model 1
GLAD_API_CALL int GLAD_VK_KHR_vulkan_memory_model;
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	#define VK_KHR_wayland_surface 1
GLAD_API_CALL int GLAD_VK_KHR_wayland_surface;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_win32_keyed_mutex 1
GLAD_API_CALL int GLAD_VK_KHR_win32_keyed_mutex;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_KHR_win32_surface 1
GLAD_API_CALL int GLAD_VK_KHR_win32_surface;

#endif
#define VK_KHR_workgroup_memory_explicit_layout 1
GLAD_API_CALL int GLAD_VK_KHR_workgroup_memory_explicit_layout;
#if defined(VK_USE_PLATFORM_XCB_KHR)
	#define VK_KHR_xcb_surface 1
GLAD_API_CALL int GLAD_VK_KHR_xcb_surface;

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
	#define VK_KHR_xlib_surface 1
GLAD_API_CALL int GLAD_VK_KHR_xlib_surface;

#endif
#define VK_KHR_zero_initialize_workgroup_memory 1
GLAD_API_CALL int GLAD_VK_KHR_zero_initialize_workgroup_memory;
#define VK_LUNARG_direct_driver_loading 1
GLAD_API_CALL int GLAD_VK_LUNARG_direct_driver_loading;
#define VK_MSFT_layered_driver 1
GLAD_API_CALL int GLAD_VK_MSFT_layered_driver;
#if defined(VK_USE_PLATFORM_IOS_MVK)
	#define VK_MVK_ios_surface 1
GLAD_API_CALL int GLAD_VK_MVK_ios_surface;

#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
	#define VK_MVK_macos_surface 1
GLAD_API_CALL int GLAD_VK_MVK_macos_surface;

#endif
#if defined(VK_USE_PLATFORM_VI_NN)
	#define VK_NN_vi_surface 1
GLAD_API_CALL int GLAD_VK_NN_vi_surface;

#endif
#define VK_NVX_binary_import 1
GLAD_API_CALL int GLAD_VK_NVX_binary_import;
#define VK_NVX_image_view_handle 1
GLAD_API_CALL int GLAD_VK_NVX_image_view_handle;
#define VK_NVX_multiview_per_view_attributes 1
GLAD_API_CALL int GLAD_VK_NVX_multiview_per_view_attributes;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_NV_acquire_winrt_display 1
GLAD_API_CALL int GLAD_VK_NV_acquire_winrt_display;

#endif
#define VK_NV_clip_space_w_scaling 1
GLAD_API_CALL int GLAD_VK_NV_clip_space_w_scaling;
#define VK_NV_compute_shader_derivatives 1
GLAD_API_CALL int GLAD_VK_NV_compute_shader_derivatives;
#define VK_NV_cooperative_matrix 1
GLAD_API_CALL int GLAD_VK_NV_cooperative_matrix;
#define VK_NV_copy_memory_indirect 1
GLAD_API_CALL int GLAD_VK_NV_copy_memory_indirect;
#define VK_NV_corner_sampled_image 1
GLAD_API_CALL int GLAD_VK_NV_corner_sampled_image;
#define VK_NV_coverage_reduction_mode 1
GLAD_API_CALL int GLAD_VK_NV_coverage_reduction_mode;
#define VK_NV_dedicated_allocation 1
GLAD_API_CALL int GLAD_VK_NV_dedicated_allocation;
#define VK_NV_dedicated_allocation_image_aliasing 1
GLAD_API_CALL int GLAD_VK_NV_dedicated_allocation_image_aliasing;
#define VK_NV_descriptor_pool_overallocation 1
GLAD_API_CALL int GLAD_VK_NV_descriptor_pool_overallocation;
#define VK_NV_device_diagnostic_checkpoints 1
GLAD_API_CALL int GLAD_VK_NV_device_diagnostic_checkpoints;
#define VK_NV_device_diagnostics_config 1
GLAD_API_CALL int GLAD_VK_NV_device_diagnostics_config;
#define VK_NV_device_generated_commands 1
GLAD_API_CALL int GLAD_VK_NV_device_generated_commands;
#define VK_NV_device_generated_commands_compute 1
GLAD_API_CALL int GLAD_VK_NV_device_generated_commands_compute;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	#define VK_NV_displacement_micromap 1
GLAD_API_CALL int GLAD_VK_NV_displacement_micromap;

#endif
#define VK_NV_external_memory 1
GLAD_API_CALL int GLAD_VK_NV_external_memory;
#define VK_NV_external_memory_capabilities 1
GLAD_API_CALL int GLAD_VK_NV_external_memory_capabilities;
#define VK_NV_external_memory_rdma 1
GLAD_API_CALL int GLAD_VK_NV_external_memory_rdma;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_NV_external_memory_win32 1
GLAD_API_CALL int GLAD_VK_NV_external_memory_win32;

#endif
#define VK_NV_fill_rectangle 1
GLAD_API_CALL int GLAD_VK_NV_fill_rectangle;
#define VK_NV_fragment_coverage_to_color 1
GLAD_API_CALL int GLAD_VK_NV_fragment_coverage_to_color;
#define VK_NV_fragment_shader_barycentric 1
GLAD_API_CALL int GLAD_VK_NV_fragment_shader_barycentric;
#define VK_NV_fragment_shading_rate_enums 1
GLAD_API_CALL int GLAD_VK_NV_fragment_shading_rate_enums;
#define VK_NV_framebuffer_mixed_samples 1
GLAD_API_CALL int GLAD_VK_NV_framebuffer_mixed_samples;
#define VK_NV_geometry_shader_passthrough 1
GLAD_API_CALL int GLAD_VK_NV_geometry_shader_passthrough;
#define VK_NV_glsl_shader 1
GLAD_API_CALL int GLAD_VK_NV_glsl_shader;
#define VK_NV_inherited_viewport_scissor 1
GLAD_API_CALL int GLAD_VK_NV_inherited_viewport_scissor;
#define VK_NV_linear_color_attachment 1
GLAD_API_CALL int GLAD_VK_NV_linear_color_attachment;
#define VK_NV_low_latency 1
GLAD_API_CALL int GLAD_VK_NV_low_latency;
#define VK_NV_low_latency2 1
GLAD_API_CALL int GLAD_VK_NV_low_latency2;
#define VK_NV_memory_decompression 1
GLAD_API_CALL int GLAD_VK_NV_memory_decompression;
#define VK_NV_mesh_shader 1
GLAD_API_CALL int GLAD_VK_NV_mesh_shader;
#define VK_NV_optical_flow 1
GLAD_API_CALL int GLAD_VK_NV_optical_flow;
#define VK_NV_present_barrier 1
GLAD_API_CALL int GLAD_VK_NV_present_barrier;
#define VK_NV_ray_tracing 1
GLAD_API_CALL int GLAD_VK_NV_ray_tracing;
#define VK_NV_ray_tracing_invocation_reorder 1
GLAD_API_CALL int GLAD_VK_NV_ray_tracing_invocation_reorder;
#define VK_NV_ray_tracing_motion_blur 1
GLAD_API_CALL int GLAD_VK_NV_ray_tracing_motion_blur;
#define VK_NV_representative_fragment_test 1
GLAD_API_CALL int GLAD_VK_NV_representative_fragment_test;
#define VK_NV_sample_mask_override_coverage 1
GLAD_API_CALL int GLAD_VK_NV_sample_mask_override_coverage;
#define VK_NV_scissor_exclusive 1
GLAD_API_CALL int GLAD_VK_NV_scissor_exclusive;
#define VK_NV_shader_image_footprint 1
GLAD_API_CALL int GLAD_VK_NV_shader_image_footprint;
#define VK_NV_shader_sm_builtins 1
GLAD_API_CALL int GLAD_VK_NV_shader_sm_builtins;
#define VK_NV_shader_subgroup_partitioned 1
GLAD_API_CALL int GLAD_VK_NV_shader_subgroup_partitioned;
#define VK_NV_shading_rate_image 1
GLAD_API_CALL int GLAD_VK_NV_shading_rate_image;
#define VK_NV_viewport_array2 1
GLAD_API_CALL int GLAD_VK_NV_viewport_array2;
#define VK_NV_viewport_swizzle 1
GLAD_API_CALL int GLAD_VK_NV_viewport_swizzle;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	#define VK_NV_win32_keyed_mutex 1
GLAD_API_CALL int GLAD_VK_NV_win32_keyed_mutex;

#endif
#define VK_QCOM_filter_cubic_clamp 1
GLAD_API_CALL int GLAD_VK_QCOM_filter_cubic_clamp;
#define VK_QCOM_filter_cubic_weights 1
GLAD_API_CALL int GLAD_VK_QCOM_filter_cubic_weights;
#define VK_QCOM_fragment_density_map_offset 1
GLAD_API_CALL int GLAD_VK_QCOM_fragment_density_map_offset;
#define VK_QCOM_image_processing 1
GLAD_API_CALL int GLAD_VK_QCOM_image_processing;
#define VK_QCOM_image_processing2 1
GLAD_API_CALL int GLAD_VK_QCOM_image_processing2;
#define VK_QCOM_multiview_per_view_render_areas 1
GLAD_API_CALL int GLAD_VK_QCOM_multiview_per_view_render_areas;
#define VK_QCOM_multiview_per_view_viewports 1
GLAD_API_CALL int GLAD_VK_QCOM_multiview_per_view_viewports;
#define VK_QCOM_render_pass_shader_resolve 1
GLAD_API_CALL int GLAD_VK_QCOM_render_pass_shader_resolve;
#define VK_QCOM_render_pass_store_ops 1
GLAD_API_CALL int GLAD_VK_QCOM_render_pass_store_ops;
#define VK_QCOM_render_pass_transform 1
GLAD_API_CALL int GLAD_VK_QCOM_render_pass_transform;
#define VK_QCOM_rotated_copy_commands 1
GLAD_API_CALL int GLAD_VK_QCOM_rotated_copy_commands;
#define VK_QCOM_tile_properties 1
GLAD_API_CALL int GLAD_VK_QCOM_tile_properties;
#define VK_QCOM_ycbcr_degamma 1
GLAD_API_CALL int GLAD_VK_QCOM_ycbcr_degamma;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	#define VK_QNX_external_memory_screen_buffer 1
GLAD_API_CALL int GLAD_VK_QNX_external_memory_screen_buffer;

#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	#define VK_QNX_screen_surface 1
GLAD_API_CALL int GLAD_VK_QNX_screen_surface;

#endif
#define VK_SEC_amigo_profiling 1
GLAD_API_CALL int GLAD_VK_SEC_amigo_profiling;
#define VK_VALVE_descriptor_set_host_mapping 1
GLAD_API_CALL int GLAD_VK_VALVE_descriptor_set_host_mapping;
#define VK_VALVE_mutable_descriptor_type 1
GLAD_API_CALL int GLAD_VK_VALVE_mutable_descriptor_type;


typedef VkResult(GLAD_API_PTR *PFN_vkAcquireDrmDisplayEXT)(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkAcquireFullScreenExclusiveModeEXT)(VkDevice device, VkSwapchainKHR swapchain);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkAcquireNextImage2KHR)(VkDevice device, const VkAcquireNextImageInfoKHR *pAcquireInfo, uint32_t *pImageIndex);
typedef VkResult(GLAD_API_PTR *PFN_vkAcquireNextImageKHR)(VkDevice       device,
                                                          VkSwapchainKHR swapchain,
                                                          uint64_t       timeout,
                                                          VkSemaphore    semaphore,
                                                          VkFence        fence,
                                                          uint32_t      *pImageIndex);
typedef VkResult(GLAD_API_PTR *PFN_vkAcquirePerformanceConfigurationINTEL)(VkDevice                                          device,
                                                                           const VkPerformanceConfigurationAcquireInfoINTEL *pAcquireInfo,
                                                                           VkPerformanceConfigurationINTEL                  *pConfiguration);
typedef VkResult(GLAD_API_PTR *PFN_vkAcquireProfilingLockKHR)(VkDevice device, const VkAcquireProfilingLockInfoKHR *pInfo);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkAcquireWinrtDisplayNV)(VkPhysicalDevice physicalDevice, VkDisplayKHR display);

#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
typedef VkResult(GLAD_API_PTR *PFN_vkAcquireXlibDisplayEXT)(VkPhysicalDevice physicalDevice, Display *dpy, VkDisplayKHR display);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkAllocateCommandBuffers)(VkDevice                           device,
                                                             const VkCommandBufferAllocateInfo *pAllocateInfo,
                                                             VkCommandBuffer                   *pCommandBuffers);
typedef VkResult(GLAD_API_PTR *PFN_vkAllocateDescriptorSets)(VkDevice                           device,
                                                             const VkDescriptorSetAllocateInfo *pAllocateInfo,
                                                             VkDescriptorSet                   *pDescriptorSets);
typedef VkResult(GLAD_API_PTR *PFN_vkAllocateMemory)(VkDevice                     device,
                                                     const VkMemoryAllocateInfo  *pAllocateInfo,
                                                     const VkAllocationCallbacks *pAllocator,
                                                     VkDeviceMemory              *pMemory);
typedef VkResult(GLAD_API_PTR *PFN_vkBeginCommandBuffer)(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo *pBeginInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkBindAccelerationStructureMemoryNV)(VkDevice                                       device,
                                                                        uint32_t                                       bindInfoCount,
                                                                        const VkBindAccelerationStructureMemoryInfoNV *pBindInfos);
typedef VkResult(GLAD_API_PTR *PFN_vkBindBufferMemory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
typedef VkResult(GLAD_API_PTR *PFN_vkBindBufferMemory2)(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos);
typedef VkResult(GLAD_API_PTR *PFN_vkBindBufferMemory2KHR)(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos);
typedef VkResult(GLAD_API_PTR *PFN_vkBindImageMemory)(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
typedef VkResult(GLAD_API_PTR *PFN_vkBindImageMemory2)(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos);
typedef VkResult(GLAD_API_PTR *PFN_vkBindImageMemory2KHR)(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos);
typedef VkResult(GLAD_API_PTR *PFN_vkBindOpticalFlowSessionImageNV)(VkDevice                           device,
                                                                    VkOpticalFlowSessionNV             session,
                                                                    VkOpticalFlowSessionBindingPointNV bindingPoint,
                                                                    VkImageView                        view,
                                                                    VkImageLayout                      layout);
typedef VkResult(GLAD_API_PTR *PFN_vkBindVideoSessionMemoryKHR)(VkDevice                               device,
                                                                VkVideoSessionKHR                      videoSession,
                                                                uint32_t                               bindSessionMemoryInfoCount,
                                                                const VkBindVideoSessionMemoryInfoKHR *pBindSessionMemoryInfos);
typedef VkResult(GLAD_API_PTR *PFN_vkBuildAccelerationStructuresKHR)(VkDevice                                               device,
                                                                     VkDeferredOperationKHR                                 deferredOperation,
                                                                     uint32_t                                               infoCount,
                                                                     const VkAccelerationStructureBuildGeometryInfoKHR     *pInfos,
                                                                     const VkAccelerationStructureBuildRangeInfoKHR *const *ppBuildRangeInfos);
typedef VkResult(GLAD_API_PTR *PFN_vkBuildMicromapsEXT)(VkDevice                      device,
                                                        VkDeferredOperationKHR        deferredOperation,
                                                        uint32_t                      infoCount,
                                                        const VkMicromapBuildInfoEXT *pInfos);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginConditionalRenderingEXT)(VkCommandBuffer                           commandBuffer,
                                                                  const VkConditionalRenderingBeginInfoEXT *pConditionalRenderingBegin);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginQueryIndexedEXT)(VkCommandBuffer     commandBuffer,
                                                          VkQueryPool         queryPool,
                                                          uint32_t            query,
                                                          VkQueryControlFlags flags,
                                                          uint32_t            index);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginRenderPass)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, VkSubpassContents contents);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginRenderPass2)(VkCommandBuffer              commandBuffer,
                                                      const VkRenderPassBeginInfo *pRenderPassBegin,
                                                      const VkSubpassBeginInfo    *pSubpassBeginInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginRenderPass2KHR)(VkCommandBuffer              commandBuffer,
                                                         const VkRenderPassBeginInfo *pRenderPassBegin,
                                                         const VkSubpassBeginInfo    *pSubpassBeginInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginRendering)(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginRenderingKHR)(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginTransformFeedbackEXT)(VkCommandBuffer     commandBuffer,
                                                               uint32_t            firstCounterBuffer,
                                                               uint32_t            counterBufferCount,
                                                               const VkBuffer     *pCounterBuffers,
                                                               const VkDeviceSize *pCounterBufferOffsets);
typedef void(GLAD_API_PTR *PFN_vkCmdBeginVideoCodingKHR)(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR *pBeginInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)(VkCommandBuffer     commandBuffer,
                                                                             VkPipelineBindPoint pipelineBindPoint,
                                                                             VkPipelineLayout    layout,
                                                                             uint32_t            set);
typedef void(GLAD_API_PTR *PFN_vkCmdBindDescriptorBuffersEXT)(VkCommandBuffer                         commandBuffer,
                                                              uint32_t                                bufferCount,
                                                              const VkDescriptorBufferBindingInfoEXT *pBindingInfos);
typedef void(GLAD_API_PTR *PFN_vkCmdBindDescriptorSets)(VkCommandBuffer        commandBuffer,
                                                        VkPipelineBindPoint    pipelineBindPoint,
                                                        VkPipelineLayout       layout,
                                                        uint32_t               firstSet,
                                                        uint32_t               descriptorSetCount,
                                                        const VkDescriptorSet *pDescriptorSets,
                                                        uint32_t               dynamicOffsetCount,
                                                        const uint32_t        *pDynamicOffsets);
typedef void(GLAD_API_PTR *PFN_vkCmdBindIndexBuffer)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
typedef void(GLAD_API_PTR *PFN_vkCmdBindIndexBuffer2KHR)(VkCommandBuffer commandBuffer,
                                                         VkBuffer        buffer,
                                                         VkDeviceSize    offset,
                                                         VkDeviceSize    size,
                                                         VkIndexType     indexType);
typedef void(GLAD_API_PTR *PFN_vkCmdBindInvocationMaskHUAWEI)(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
typedef void(GLAD_API_PTR *PFN_vkCmdBindPipeline)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
typedef void(GLAD_API_PTR *PFN_vkCmdBindPipelineShaderGroupNV)(VkCommandBuffer     commandBuffer,
                                                               VkPipelineBindPoint pipelineBindPoint,
                                                               VkPipeline          pipeline,
                                                               uint32_t            groupIndex);
typedef void(GLAD_API_PTR *PFN_vkCmdBindShadersEXT)(VkCommandBuffer              commandBuffer,
                                                    uint32_t                     stageCount,
                                                    const VkShaderStageFlagBits *pStages,
                                                    const VkShaderEXT           *pShaders);
typedef void(GLAD_API_PTR *PFN_vkCmdBindShadingRateImageNV)(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
typedef void(GLAD_API_PTR *PFN_vkCmdBindTransformFeedbackBuffersEXT)(VkCommandBuffer     commandBuffer,
                                                                     uint32_t            firstBinding,
                                                                     uint32_t            bindingCount,
                                                                     const VkBuffer     *pBuffers,
                                                                     const VkDeviceSize *pOffsets,
                                                                     const VkDeviceSize *pSizes);
typedef void(GLAD_API_PTR *PFN_vkCmdBindVertexBuffers)(VkCommandBuffer     commandBuffer,
                                                       uint32_t            firstBinding,
                                                       uint32_t            bindingCount,
                                                       const VkBuffer     *pBuffers,
                                                       const VkDeviceSize *pOffsets);
typedef void(GLAD_API_PTR *PFN_vkCmdBindVertexBuffers2)(VkCommandBuffer     commandBuffer,
                                                        uint32_t            firstBinding,
                                                        uint32_t            bindingCount,
                                                        const VkBuffer     *pBuffers,
                                                        const VkDeviceSize *pOffsets,
                                                        const VkDeviceSize *pSizes,
                                                        const VkDeviceSize *pStrides);
typedef void(GLAD_API_PTR *PFN_vkCmdBindVertexBuffers2EXT)(VkCommandBuffer     commandBuffer,
                                                           uint32_t            firstBinding,
                                                           uint32_t            bindingCount,
                                                           const VkBuffer     *pBuffers,
                                                           const VkDeviceSize *pOffsets,
                                                           const VkDeviceSize *pSizes,
                                                           const VkDeviceSize *pStrides);
typedef void(GLAD_API_PTR *PFN_vkCmdBlitImage)(VkCommandBuffer    commandBuffer,
                                               VkImage            srcImage,
                                               VkImageLayout      srcImageLayout,
                                               VkImage            dstImage,
                                               VkImageLayout      dstImageLayout,
                                               uint32_t           regionCount,
                                               const VkImageBlit *pRegions,
                                               VkFilter           filter);
typedef void(GLAD_API_PTR *PFN_vkCmdBlitImage2)(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdBlitImage2KHR)(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdBuildAccelerationStructureNV)(VkCommandBuffer                      commandBuffer,
                                                                  const VkAccelerationStructureInfoNV *pInfo,
                                                                  VkBuffer                             instanceData,
                                                                  VkDeviceSize                         instanceOffset,
                                                                  VkBool32                             update,
                                                                  VkAccelerationStructureNV            dst,
                                                                  VkAccelerationStructureNV            src,
                                                                  VkBuffer                             scratch,
                                                                  VkDeviceSize                         scratchOffset);
typedef void(GLAD_API_PTR *PFN_vkCmdBuildAccelerationStructuresIndirectKHR)(VkCommandBuffer                                    commandBuffer,
                                                                            uint32_t                                           infoCount,
                                                                            const VkAccelerationStructureBuildGeometryInfoKHR *pInfos,
                                                                            const VkDeviceAddress                             *pIndirectDeviceAddresses,
                                                                            const uint32_t                                    *pIndirectStrides,
                                                                            const uint32_t *const                             *ppMaxPrimitiveCounts);
typedef void(GLAD_API_PTR *PFN_vkCmdBuildAccelerationStructuresKHR)(VkCommandBuffer                                        commandBuffer,
                                                                    uint32_t                                               infoCount,
                                                                    const VkAccelerationStructureBuildGeometryInfoKHR     *pInfos,
                                                                    const VkAccelerationStructureBuildRangeInfoKHR *const *ppBuildRangeInfos);
typedef void(GLAD_API_PTR *PFN_vkCmdBuildMicromapsEXT)(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT *pInfos);
typedef void(GLAD_API_PTR *PFN_vkCmdClearAttachments)(VkCommandBuffer          commandBuffer,
                                                      uint32_t                 attachmentCount,
                                                      const VkClearAttachment *pAttachments,
                                                      uint32_t                 rectCount,
                                                      const VkClearRect       *pRects);
typedef void(GLAD_API_PTR *PFN_vkCmdClearColorImage)(VkCommandBuffer                commandBuffer,
                                                     VkImage                        image,
                                                     VkImageLayout                  imageLayout,
                                                     const VkClearColorValue       *pColor,
                                                     uint32_t                       rangeCount,
                                                     const VkImageSubresourceRange *pRanges);
typedef void(GLAD_API_PTR *PFN_vkCmdClearDepthStencilImage)(VkCommandBuffer                 commandBuffer,
                                                            VkImage                         image,
                                                            VkImageLayout                   imageLayout,
                                                            const VkClearDepthStencilValue *pDepthStencil,
                                                            uint32_t                        rangeCount,
                                                            const VkImageSubresourceRange  *pRanges);
typedef void(GLAD_API_PTR *PFN_vkCmdControlVideoCodingKHR)(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR *pCodingControlInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyAccelerationStructureKHR)(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR *pInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyAccelerationStructureNV)(VkCommandBuffer                    commandBuffer,
                                                                 VkAccelerationStructureNV          dst,
                                                                 VkAccelerationStructureNV          src,
                                                                 VkCopyAccelerationStructureModeKHR mode);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyAccelerationStructureToMemoryKHR)(VkCommandBuffer                                   commandBuffer,
                                                                          const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyBuffer)(VkCommandBuffer     commandBuffer,
                                                VkBuffer            srcBuffer,
                                                VkBuffer            dstBuffer,
                                                uint32_t            regionCount,
                                                const VkBufferCopy *pRegions);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyBuffer2)(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyBuffer2KHR)(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyBufferToImage)(VkCommandBuffer          commandBuffer,
                                                       VkBuffer                 srcBuffer,
                                                       VkImage                  dstImage,
                                                       VkImageLayout            dstImageLayout,
                                                       uint32_t                 regionCount,
                                                       const VkBufferImageCopy *pRegions);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyBufferToImage2)(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyBufferToImage2KHR)(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyImage)(VkCommandBuffer    commandBuffer,
                                               VkImage            srcImage,
                                               VkImageLayout      srcImageLayout,
                                               VkImage            dstImage,
                                               VkImageLayout      dstImageLayout,
                                               uint32_t           regionCount,
                                               const VkImageCopy *pRegions);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyImage2)(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyImage2KHR)(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyImageToBuffer)(VkCommandBuffer          commandBuffer,
                                                       VkImage                  srcImage,
                                                       VkImageLayout            srcImageLayout,
                                                       VkBuffer                 dstBuffer,
                                                       uint32_t                 regionCount,
                                                       const VkBufferImageCopy *pRegions);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyImageToBuffer2)(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyImageToBuffer2KHR)(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyMemoryIndirectNV)(VkCommandBuffer commandBuffer,
                                                          VkDeviceAddress copyBufferAddress,
                                                          uint32_t        copyCount,
                                                          uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyMemoryToAccelerationStructureKHR)(VkCommandBuffer                                   commandBuffer,
                                                                          const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyMemoryToImageIndirectNV)(VkCommandBuffer                 commandBuffer,
                                                                 VkDeviceAddress                 copyBufferAddress,
                                                                 uint32_t                        copyCount,
                                                                 uint32_t                        stride,
                                                                 VkImage                         dstImage,
                                                                 VkImageLayout                   dstImageLayout,
                                                                 const VkImageSubresourceLayers *pImageSubresources);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyMemoryToMicromapEXT)(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT *pInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyMicromapEXT)(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT *pInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyMicromapToMemoryEXT)(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT *pInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdCopyQueryPoolResults)(VkCommandBuffer    commandBuffer,
                                                          VkQueryPool        queryPool,
                                                          uint32_t           firstQuery,
                                                          uint32_t           queryCount,
                                                          VkBuffer           dstBuffer,
                                                          VkDeviceSize       dstOffset,
                                                          VkDeviceSize       stride,
                                                          VkQueryResultFlags flags);
typedef void(GLAD_API_PTR *PFN_vkCmdCuLaunchKernelNVX)(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX *pLaunchInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdDebugMarkerBeginEXT)(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdDebugMarkerEndEXT)(VkCommandBuffer commandBuffer);
typedef void(GLAD_API_PTR *PFN_vkCmdDebugMarkerInsertEXT)(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdDecodeVideoKHR)(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR *pDecodeInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdDecompressMemoryIndirectCountNV)(VkCommandBuffer commandBuffer,
                                                                     VkDeviceAddress indirectCommandsAddress,
                                                                     VkDeviceAddress indirectCommandsCountAddress,
                                                                     uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDecompressMemoryNV)(VkCommandBuffer                   commandBuffer,
                                                        uint32_t                          decompressRegionCount,
                                                        const VkDecompressMemoryRegionNV *pDecompressMemoryRegions);
typedef void(GLAD_API_PTR *PFN_vkCmdDispatch)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef void(GLAD_API_PTR *PFN_vkCmdDispatchBase)(VkCommandBuffer commandBuffer,
                                                  uint32_t        baseGroupX,
                                                  uint32_t        baseGroupY,
                                                  uint32_t        baseGroupZ,
                                                  uint32_t        groupCountX,
                                                  uint32_t        groupCountY,
                                                  uint32_t        groupCountZ);
typedef void(GLAD_API_PTR *PFN_vkCmdDispatchBaseKHR)(VkCommandBuffer commandBuffer,
                                                     uint32_t        baseGroupX,
                                                     uint32_t        baseGroupY,
                                                     uint32_t        baseGroupZ,
                                                     uint32_t        groupCountX,
                                                     uint32_t        groupCountY,
                                                     uint32_t        groupCountZ);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void(GLAD_API_PTR *PFN_vkCmdDispatchGraphAMDX)(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, const VkDispatchGraphCountInfoAMDX *pCountInfo);

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void(GLAD_API_PTR *PFN_vkCmdDispatchGraphIndirectAMDX)(VkCommandBuffer                     commandBuffer,
                                                               VkDeviceAddress                     scratch,
                                                               const VkDispatchGraphCountInfoAMDX *pCountInfo);

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void(GLAD_API_PTR *PFN_vkCmdDispatchGraphIndirectCountAMDX)(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceAddress countInfo);

#endif
typedef void(GLAD_API_PTR *PFN_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
typedef void(GLAD_API_PTR *PFN_vkCmdDraw)(VkCommandBuffer commandBuffer,
                                          uint32_t        vertexCount,
                                          uint32_t        instanceCount,
                                          uint32_t        firstVertex,
                                          uint32_t        firstInstance);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawClusterHUAWEI)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawClusterIndirectHUAWEI)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndexed)(VkCommandBuffer commandBuffer,
                                                 uint32_t        indexCount,
                                                 uint32_t        instanceCount,
                                                 uint32_t        firstIndex,
                                                 int32_t         vertexOffset,
                                                 uint32_t        firstInstance);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer,
                                                         VkBuffer        buffer,
                                                         VkDeviceSize    offset,
                                                         uint32_t        drawCount,
                                                         uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndexedIndirectCount)(VkCommandBuffer commandBuffer,
                                                              VkBuffer        buffer,
                                                              VkDeviceSize    offset,
                                                              VkBuffer        countBuffer,
                                                              VkDeviceSize    countBufferOffset,
                                                              uint32_t        maxDrawCount,
                                                              uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndexedIndirectCountAMD)(VkCommandBuffer commandBuffer,
                                                                 VkBuffer        buffer,
                                                                 VkDeviceSize    offset,
                                                                 VkBuffer        countBuffer,
                                                                 VkDeviceSize    countBufferOffset,
                                                                 uint32_t        maxDrawCount,
                                                                 uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndexedIndirectCountKHR)(VkCommandBuffer commandBuffer,
                                                                 VkBuffer        buffer,
                                                                 VkDeviceSize    offset,
                                                                 VkBuffer        countBuffer,
                                                                 VkDeviceSize    countBufferOffset,
                                                                 uint32_t        maxDrawCount,
                                                                 uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndirectByteCountEXT)(VkCommandBuffer commandBuffer,
                                                              uint32_t        instanceCount,
                                                              uint32_t        firstInstance,
                                                              VkBuffer        counterBuffer,
                                                              VkDeviceSize    counterBufferOffset,
                                                              uint32_t        counterOffset,
                                                              uint32_t        vertexStride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndirectCount)(VkCommandBuffer commandBuffer,
                                                       VkBuffer        buffer,
                                                       VkDeviceSize    offset,
                                                       VkBuffer        countBuffer,
                                                       VkDeviceSize    countBufferOffset,
                                                       uint32_t        maxDrawCount,
                                                       uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndirectCountAMD)(VkCommandBuffer commandBuffer,
                                                          VkBuffer        buffer,
                                                          VkDeviceSize    offset,
                                                          VkBuffer        countBuffer,
                                                          VkDeviceSize    countBufferOffset,
                                                          uint32_t        maxDrawCount,
                                                          uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawIndirectCountKHR)(VkCommandBuffer commandBuffer,
                                                          VkBuffer        buffer,
                                                          VkDeviceSize    offset,
                                                          VkBuffer        countBuffer,
                                                          VkDeviceSize    countBufferOffset,
                                                          uint32_t        maxDrawCount,
                                                          uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawMeshTasksEXT)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawMeshTasksIndirectCountEXT)(VkCommandBuffer commandBuffer,
                                                                   VkBuffer        buffer,
                                                                   VkDeviceSize    offset,
                                                                   VkBuffer        countBuffer,
                                                                   VkDeviceSize    countBufferOffset,
                                                                   uint32_t        maxDrawCount,
                                                                   uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawMeshTasksIndirectCountNV)(VkCommandBuffer commandBuffer,
                                                                  VkBuffer        buffer,
                                                                  VkDeviceSize    offset,
                                                                  VkBuffer        countBuffer,
                                                                  VkDeviceSize    countBufferOffset,
                                                                  uint32_t        maxDrawCount,
                                                                  uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawMeshTasksIndirectEXT)(VkCommandBuffer commandBuffer,
                                                              VkBuffer        buffer,
                                                              VkDeviceSize    offset,
                                                              uint32_t        drawCount,
                                                              uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawMeshTasksIndirectNV)(VkCommandBuffer commandBuffer,
                                                             VkBuffer        buffer,
                                                             VkDeviceSize    offset,
                                                             uint32_t        drawCount,
                                                             uint32_t        stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawMeshTasksNV)(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawMultiEXT)(VkCommandBuffer           commandBuffer,
                                                  uint32_t                  drawCount,
                                                  const VkMultiDrawInfoEXT *pVertexInfo,
                                                  uint32_t                  instanceCount,
                                                  uint32_t                  firstInstance,
                                                  uint32_t                  stride);
typedef void(GLAD_API_PTR *PFN_vkCmdDrawMultiIndexedEXT)(VkCommandBuffer                  commandBuffer,
                                                         uint32_t                         drawCount,
                                                         const VkMultiDrawIndexedInfoEXT *pIndexInfo,
                                                         uint32_t                         instanceCount,
                                                         uint32_t                         firstInstance,
                                                         uint32_t                         stride,
                                                         const int32_t                   *pVertexOffset);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void(GLAD_API_PTR *PFN_vkCmdEncodeVideoKHR)(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR *pEncodeInfo);

#endif
typedef void(GLAD_API_PTR *PFN_vkCmdEndConditionalRenderingEXT)(VkCommandBuffer commandBuffer);
typedef void(GLAD_API_PTR *PFN_vkCmdEndDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer);
typedef void(GLAD_API_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);
typedef void(GLAD_API_PTR *PFN_vkCmdEndQueryIndexedEXT)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index);
typedef void(GLAD_API_PTR *PFN_vkCmdEndRenderPass)(VkCommandBuffer commandBuffer);
typedef void(GLAD_API_PTR *PFN_vkCmdEndRenderPass2)(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdEndRenderPass2KHR)(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdEndRendering)(VkCommandBuffer commandBuffer);
typedef void(GLAD_API_PTR *PFN_vkCmdEndRenderingKHR)(VkCommandBuffer commandBuffer);
typedef void(GLAD_API_PTR *PFN_vkCmdEndTransformFeedbackEXT)(VkCommandBuffer     commandBuffer,
                                                             uint32_t            firstCounterBuffer,
                                                             uint32_t            counterBufferCount,
                                                             const VkBuffer     *pCounterBuffers,
                                                             const VkDeviceSize *pCounterBufferOffsets);
typedef void(GLAD_API_PTR *PFN_vkCmdEndVideoCodingKHR)(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR *pEndCodingInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdExecuteCommands)(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers);
typedef void(GLAD_API_PTR *PFN_vkCmdExecuteGeneratedCommandsNV)(VkCommandBuffer                  commandBuffer,
                                                                VkBool32                         isPreprocessed,
                                                                const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdFillBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef void(GLAD_API_PTR *PFN_vkCmdInitializeGraphScratchMemoryAMDX)(VkCommandBuffer commandBuffer, VkDeviceAddress scratch);

#endif
typedef void(GLAD_API_PTR *PFN_vkCmdInsertDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdNextSubpass)(VkCommandBuffer commandBuffer, VkSubpassContents contents);
typedef void(GLAD_API_PTR *PFN_vkCmdNextSubpass2)(VkCommandBuffer           commandBuffer,
                                                  const VkSubpassBeginInfo *pSubpassBeginInfo,
                                                  const VkSubpassEndInfo   *pSubpassEndInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdNextSubpass2KHR)(VkCommandBuffer           commandBuffer,
                                                     const VkSubpassBeginInfo *pSubpassBeginInfo,
                                                     const VkSubpassEndInfo   *pSubpassEndInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdOpticalFlowExecuteNV)(VkCommandBuffer                   commandBuffer,
                                                          VkOpticalFlowSessionNV            session,
                                                          const VkOpticalFlowExecuteInfoNV *pExecuteInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer              commandBuffer,
                                                     VkPipelineStageFlags         srcStageMask,
                                                     VkPipelineStageFlags         dstStageMask,
                                                     VkDependencyFlags            dependencyFlags,
                                                     uint32_t                     memoryBarrierCount,
                                                     const VkMemoryBarrier       *pMemoryBarriers,
                                                     uint32_t                     bufferMemoryBarrierCount,
                                                     const VkBufferMemoryBarrier *pBufferMemoryBarriers,
                                                     uint32_t                     imageMemoryBarrierCount,
                                                     const VkImageMemoryBarrier  *pImageMemoryBarriers);
typedef void(GLAD_API_PTR *PFN_vkCmdPipelineBarrier2)(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdPipelineBarrier2KHR)(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdPreprocessGeneratedCommandsNV)(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdPushConstants)(VkCommandBuffer    commandBuffer,
                                                   VkPipelineLayout   layout,
                                                   VkShaderStageFlags stageFlags,
                                                   uint32_t           offset,
                                                   uint32_t           size,
                                                   const void        *pValues);
typedef void(GLAD_API_PTR *PFN_vkCmdPushDescriptorSetKHR)(VkCommandBuffer             commandBuffer,
                                                          VkPipelineBindPoint         pipelineBindPoint,
                                                          VkPipelineLayout            layout,
                                                          uint32_t                    set,
                                                          uint32_t                    descriptorWriteCount,
                                                          const VkWriteDescriptorSet *pDescriptorWrites);
typedef void(GLAD_API_PTR *PFN_vkCmdPushDescriptorSetWithTemplateKHR)(VkCommandBuffer            commandBuffer,
                                                                      VkDescriptorUpdateTemplate descriptorUpdateTemplate,
                                                                      VkPipelineLayout           layout,
                                                                      uint32_t                   set,
                                                                      const void                *pData);
typedef void(GLAD_API_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
typedef void(GLAD_API_PTR *PFN_vkCmdResetEvent2)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
typedef void(GLAD_API_PTR *PFN_vkCmdResetEvent2KHR)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
typedef void(GLAD_API_PTR *PFN_vkCmdResetQueryPool)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
typedef void(GLAD_API_PTR *PFN_vkCmdResolveImage)(VkCommandBuffer       commandBuffer,
                                                  VkImage               srcImage,
                                                  VkImageLayout         srcImageLayout,
                                                  VkImage               dstImage,
                                                  VkImageLayout         dstImageLayout,
                                                  uint32_t              regionCount,
                                                  const VkImageResolve *pRegions);
typedef void(GLAD_API_PTR *PFN_vkCmdResolveImage2)(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdResolveImage2KHR)(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdSetAlphaToCoverageEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetAlphaToOneEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask);
typedef void(GLAD_API_PTR *PFN_vkCmdSetBlendConstants)(VkCommandBuffer commandBuffer, const float blendConstants[4]);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCheckpointNV)(VkCommandBuffer commandBuffer, const void *pCheckpointMarker);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCoarseSampleOrderNV)(VkCommandBuffer                    commandBuffer,
                                                            VkCoarseSampleOrderTypeNV          sampleOrderType,
                                                            uint32_t                           customSampleOrderCount,
                                                            const VkCoarseSampleOrderCustomNV *pCustomSampleOrders);
typedef void(GLAD_API_PTR *PFN_vkCmdSetColorBlendAdvancedEXT)(VkCommandBuffer                commandBuffer,
                                                              uint32_t                       firstAttachment,
                                                              uint32_t                       attachmentCount,
                                                              const VkColorBlendAdvancedEXT *pColorBlendAdvanced);
typedef void(GLAD_API_PTR *PFN_vkCmdSetColorBlendEnableEXT)(VkCommandBuffer commandBuffer,
                                                            uint32_t        firstAttachment,
                                                            uint32_t        attachmentCount,
                                                            const VkBool32 *pColorBlendEnables);
typedef void(GLAD_API_PTR *PFN_vkCmdSetColorBlendEquationEXT)(VkCommandBuffer                commandBuffer,
                                                              uint32_t                       firstAttachment,
                                                              uint32_t                       attachmentCount,
                                                              const VkColorBlendEquationEXT *pColorBlendEquations);
typedef void(GLAD_API_PTR *PFN_vkCmdSetColorWriteEnableEXT)(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32 *pColorWriteEnables);
typedef void(GLAD_API_PTR *PFN_vkCmdSetColorWriteMaskEXT)(VkCommandBuffer              commandBuffer,
                                                          uint32_t                     firstAttachment,
                                                          uint32_t                     attachmentCount,
                                                          const VkColorComponentFlags *pColorWriteMasks);
typedef void(GLAD_API_PTR *PFN_vkCmdSetConservativeRasterizationModeEXT)(VkCommandBuffer                    commandBuffer,
                                                                         VkConservativeRasterizationModeEXT conservativeRasterizationMode);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCoverageModulationModeNV)(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCoverageModulationTableEnableNV)(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCoverageModulationTableNV)(VkCommandBuffer commandBuffer,
                                                                  uint32_t        coverageModulationTableCount,
                                                                  const float    *pCoverageModulationTable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCoverageReductionModeNV)(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCoverageToColorEnableNV)(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCoverageToColorLocationNV)(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCullMode)(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
typedef void(GLAD_API_PTR *PFN_vkCmdSetCullModeEXT)(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthBias)(VkCommandBuffer commandBuffer,
                                                  float           depthBiasConstantFactor,
                                                  float           depthBiasClamp,
                                                  float           depthBiasSlopeFactor);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthBias2EXT)(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT *pDepthBiasInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthBiasEnable)(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthBiasEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthBounds)(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthBoundsTestEnable)(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthBoundsTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthClampEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthClipEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthClipNegativeOneToOneEXT)(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthCompareOp)(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthCompareOpEXT)(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthTestEnable)(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthWriteEnable)(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDepthWriteEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDescriptorBufferOffsetsEXT)(VkCommandBuffer     commandBuffer,
                                                                   VkPipelineBindPoint pipelineBindPoint,
                                                                   VkPipelineLayout    layout,
                                                                   uint32_t            firstSet,
                                                                   uint32_t            setCount,
                                                                   const uint32_t     *pBufferIndices,
                                                                   const VkDeviceSize *pOffsets);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDeviceMask)(VkCommandBuffer commandBuffer, uint32_t deviceMask);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDeviceMaskKHR)(VkCommandBuffer commandBuffer, uint32_t deviceMask);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDiscardRectangleEXT)(VkCommandBuffer commandBuffer,
                                                            uint32_t        firstDiscardRectangle,
                                                            uint32_t        discardRectangleCount,
                                                            const VkRect2D *pDiscardRectangles);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDiscardRectangleEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetDiscardRectangleModeEXT)(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode);
typedef void(GLAD_API_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
typedef void(GLAD_API_PTR *PFN_vkCmdSetEvent2)(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdSetEvent2KHR)(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdSetExclusiveScissorEnableNV)(VkCommandBuffer commandBuffer,
                                                                 uint32_t        firstExclusiveScissor,
                                                                 uint32_t        exclusiveScissorCount,
                                                                 const VkBool32 *pExclusiveScissorEnables);
typedef void(GLAD_API_PTR *PFN_vkCmdSetExclusiveScissorNV)(VkCommandBuffer commandBuffer,
                                                           uint32_t        firstExclusiveScissor,
                                                           uint32_t        exclusiveScissorCount,
                                                           const VkRect2D *pExclusiveScissors);
typedef void(GLAD_API_PTR *PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize);
typedef void(GLAD_API_PTR *PFN_vkCmdSetFragmentShadingRateEnumNV)(VkCommandBuffer                          commandBuffer,
                                                                  VkFragmentShadingRateNV                  shadingRate,
                                                                  const VkFragmentShadingRateCombinerOpKHR combinerOps[2]);
typedef void(GLAD_API_PTR *PFN_vkCmdSetFragmentShadingRateKHR)(VkCommandBuffer                          commandBuffer,
                                                               const VkExtent2D                        *pFragmentSize,
                                                               const VkFragmentShadingRateCombinerOpKHR combinerOps[2]);
typedef void(GLAD_API_PTR *PFN_vkCmdSetFrontFace)(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
typedef void(GLAD_API_PTR *PFN_vkCmdSetFrontFaceEXT)(VkCommandBuffer commandBuffer, VkFrontFace frontFace);
typedef void(GLAD_API_PTR *PFN_vkCmdSetLineRasterizationModeEXT)(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode);
typedef void(GLAD_API_PTR *PFN_vkCmdSetLineStippleEXT)(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern);
typedef void(GLAD_API_PTR *PFN_vkCmdSetLineStippleEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetLineWidth)(VkCommandBuffer commandBuffer, float lineWidth);
typedef void(GLAD_API_PTR *PFN_vkCmdSetLogicOpEXT)(VkCommandBuffer commandBuffer, VkLogicOp logicOp);
typedef void(GLAD_API_PTR *PFN_vkCmdSetLogicOpEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetPatchControlPointsEXT)(VkCommandBuffer commandBuffer, uint32_t patchControlPoints);
typedef VkResult(GLAD_API_PTR *PFN_vkCmdSetPerformanceMarkerINTEL)(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL *pMarkerInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCmdSetPerformanceOverrideINTEL)(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL *pOverrideInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCmdSetPerformanceStreamMarkerINTEL)(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL *pMarkerInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdSetPolygonModeEXT)(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode);
typedef void(GLAD_API_PTR *PFN_vkCmdSetPrimitiveRestartEnable)(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetPrimitiveRestartEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetPrimitiveTopology)(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
typedef void(GLAD_API_PTR *PFN_vkCmdSetPrimitiveTopologyEXT)(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
typedef void(GLAD_API_PTR *PFN_vkCmdSetProvokingVertexModeEXT)(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode);
typedef void(GLAD_API_PTR *PFN_vkCmdSetRasterizationSamplesEXT)(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples);
typedef void(GLAD_API_PTR *PFN_vkCmdSetRasterizationStreamEXT)(VkCommandBuffer commandBuffer, uint32_t rasterizationStream);
typedef void(GLAD_API_PTR *PFN_vkCmdSetRasterizerDiscardEnable)(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetRasterizerDiscardEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetRayTracingPipelineStackSizeKHR)(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize);
typedef void(GLAD_API_PTR *PFN_vkCmdSetRepresentativeFragmentTestEnableNV)(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetSampleLocationsEXT)(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT *pSampleLocationsInfo);
typedef void(GLAD_API_PTR *PFN_vkCmdSetSampleLocationsEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetSampleMaskEXT)(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask *pSampleMask);
typedef void(GLAD_API_PTR *PFN_vkCmdSetScissor)(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D *pScissors);
typedef void(GLAD_API_PTR *PFN_vkCmdSetScissorWithCount)(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors);
typedef void(GLAD_API_PTR *PFN_vkCmdSetScissorWithCountEXT)(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors);
typedef void(GLAD_API_PTR *PFN_vkCmdSetShadingRateImageEnableNV)(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetStencilCompareMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
typedef void(GLAD_API_PTR *PFN_vkCmdSetStencilOp)(VkCommandBuffer    commandBuffer,
                                                  VkStencilFaceFlags faceMask,
                                                  VkStencilOp        failOp,
                                                  VkStencilOp        passOp,
                                                  VkStencilOp        depthFailOp,
                                                  VkCompareOp        compareOp);
typedef void(GLAD_API_PTR *PFN_vkCmdSetStencilOpEXT)(VkCommandBuffer    commandBuffer,
                                                     VkStencilFaceFlags faceMask,
                                                     VkStencilOp        failOp,
                                                     VkStencilOp        passOp,
                                                     VkStencilOp        depthFailOp,
                                                     VkCompareOp        compareOp);
typedef void(GLAD_API_PTR *PFN_vkCmdSetStencilReference)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
typedef void(GLAD_API_PTR *PFN_vkCmdSetStencilTestEnable)(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetStencilTestEnableEXT)(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetStencilWriteMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
typedef void(GLAD_API_PTR *PFN_vkCmdSetTessellationDomainOriginEXT)(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin);
typedef void(GLAD_API_PTR *PFN_vkCmdSetVertexInputEXT)(VkCommandBuffer                              commandBuffer,
                                                       uint32_t                                     vertexBindingDescriptionCount,
                                                       const VkVertexInputBindingDescription2EXT   *pVertexBindingDescriptions,
                                                       uint32_t                                     vertexAttributeDescriptionCount,
                                                       const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions);
typedef void(GLAD_API_PTR *PFN_vkCmdSetViewport)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport *pViewports);
typedef void(GLAD_API_PTR *PFN_vkCmdSetViewportShadingRatePaletteNV)(VkCommandBuffer               commandBuffer,
                                                                     uint32_t                      firstViewport,
                                                                     uint32_t                      viewportCount,
                                                                     const VkShadingRatePaletteNV *pShadingRatePalettes);
typedef void(GLAD_API_PTR *PFN_vkCmdSetViewportSwizzleNV)(VkCommandBuffer            commandBuffer,
                                                          uint32_t                   firstViewport,
                                                          uint32_t                   viewportCount,
                                                          const VkViewportSwizzleNV *pViewportSwizzles);
typedef void(GLAD_API_PTR *PFN_vkCmdSetViewportWScalingEnableNV)(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable);
typedef void(GLAD_API_PTR *PFN_vkCmdSetViewportWScalingNV)(VkCommandBuffer             commandBuffer,
                                                           uint32_t                    firstViewport,
                                                           uint32_t                    viewportCount,
                                                           const VkViewportWScalingNV *pViewportWScalings);
typedef void(GLAD_API_PTR *PFN_vkCmdSetViewportWithCount)(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports);
typedef void(GLAD_API_PTR *PFN_vkCmdSetViewportWithCountEXT)(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports);
typedef void(GLAD_API_PTR *PFN_vkCmdSubpassShadingHUAWEI)(VkCommandBuffer commandBuffer);
typedef void(GLAD_API_PTR *PFN_vkCmdTraceRaysIndirect2KHR)(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress);
typedef void(GLAD_API_PTR *PFN_vkCmdTraceRaysIndirectKHR)(VkCommandBuffer                        commandBuffer,
                                                          const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable,
                                                          const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable,
                                                          const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable,
                                                          const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable,
                                                          VkDeviceAddress                        indirectDeviceAddress);
typedef void(GLAD_API_PTR *PFN_vkCmdTraceRaysKHR)(VkCommandBuffer                        commandBuffer,
                                                  const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable,
                                                  const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable,
                                                  const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable,
                                                  const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable,
                                                  uint32_t                               width,
                                                  uint32_t                               height,
                                                  uint32_t                               depth);
typedef void(GLAD_API_PTR *PFN_vkCmdTraceRaysNV)(VkCommandBuffer commandBuffer,
                                                 VkBuffer        raygenShaderBindingTableBuffer,
                                                 VkDeviceSize    raygenShaderBindingOffset,
                                                 VkBuffer        missShaderBindingTableBuffer,
                                                 VkDeviceSize    missShaderBindingOffset,
                                                 VkDeviceSize    missShaderBindingStride,
                                                 VkBuffer        hitShaderBindingTableBuffer,
                                                 VkDeviceSize    hitShaderBindingOffset,
                                                 VkDeviceSize    hitShaderBindingStride,
                                                 VkBuffer        callableShaderBindingTableBuffer,
                                                 VkDeviceSize    callableShaderBindingOffset,
                                                 VkDeviceSize    callableShaderBindingStride,
                                                 uint32_t        width,
                                                 uint32_t        height,
                                                 uint32_t        depth);
typedef void(GLAD_API_PTR *PFN_vkCmdUpdateBuffer)(VkCommandBuffer commandBuffer,
                                                  VkBuffer        dstBuffer,
                                                  VkDeviceSize    dstOffset,
                                                  VkDeviceSize    dataSize,
                                                  const void     *pData);
typedef void(GLAD_API_PTR *PFN_vkCmdUpdatePipelineIndirectBufferNV)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
typedef void(GLAD_API_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer              commandBuffer,
                                                uint32_t                     eventCount,
                                                const VkEvent               *pEvents,
                                                VkPipelineStageFlags         srcStageMask,
                                                VkPipelineStageFlags         dstStageMask,
                                                uint32_t                     memoryBarrierCount,
                                                const VkMemoryBarrier       *pMemoryBarriers,
                                                uint32_t                     bufferMemoryBarrierCount,
                                                const VkBufferMemoryBarrier *pBufferMemoryBarriers,
                                                uint32_t                     imageMemoryBarrierCount,
                                                const VkImageMemoryBarrier  *pImageMemoryBarriers);
typedef void(GLAD_API_PTR *PFN_vkCmdWaitEvents2)(VkCommandBuffer         commandBuffer,
                                                 uint32_t                eventCount,
                                                 const VkEvent          *pEvents,
                                                 const VkDependencyInfo *pDependencyInfos);
typedef void(GLAD_API_PTR *PFN_vkCmdWaitEvents2KHR)(VkCommandBuffer         commandBuffer,
                                                    uint32_t                eventCount,
                                                    const VkEvent          *pEvents,
                                                    const VkDependencyInfo *pDependencyInfos);
typedef void(GLAD_API_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)(VkCommandBuffer                   commandBuffer,
                                                                              uint32_t                          accelerationStructureCount,
                                                                              const VkAccelerationStructureKHR *pAccelerationStructures,
                                                                              VkQueryType                       queryType,
                                                                              VkQueryPool                       queryPool,
                                                                              uint32_t                          firstQuery);
typedef void(GLAD_API_PTR *PFN_vkCmdWriteAccelerationStructuresPropertiesNV)(VkCommandBuffer                  commandBuffer,
                                                                             uint32_t                         accelerationStructureCount,
                                                                             const VkAccelerationStructureNV *pAccelerationStructures,
                                                                             VkQueryType                      queryType,
                                                                             VkQueryPool                      queryPool,
                                                                             uint32_t                         firstQuery);
typedef void(GLAD_API_PTR *PFN_vkCmdWriteBufferMarker2AMD)(VkCommandBuffer       commandBuffer,
                                                           VkPipelineStageFlags2 stage,
                                                           VkBuffer              dstBuffer,
                                                           VkDeviceSize          dstOffset,
                                                           uint32_t              marker);
typedef void(GLAD_API_PTR *PFN_vkCmdWriteBufferMarkerAMD)(VkCommandBuffer         commandBuffer,
                                                          VkPipelineStageFlagBits pipelineStage,
                                                          VkBuffer                dstBuffer,
                                                          VkDeviceSize            dstOffset,
                                                          uint32_t                marker);
typedef void(GLAD_API_PTR *PFN_vkCmdWriteMicromapsPropertiesEXT)(VkCommandBuffer      commandBuffer,
                                                                 uint32_t             micromapCount,
                                                                 const VkMicromapEXT *pMicromaps,
                                                                 VkQueryType          queryType,
                                                                 VkQueryPool          queryPool,
                                                                 uint32_t             firstQuery);
typedef void(GLAD_API_PTR *PFN_vkCmdWriteTimestamp)(VkCommandBuffer         commandBuffer,
                                                    VkPipelineStageFlagBits pipelineStage,
                                                    VkQueryPool             queryPool,
                                                    uint32_t                query);
typedef void(GLAD_API_PTR *PFN_vkCmdWriteTimestamp2)(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
typedef void(GLAD_API_PTR *PFN_vkCmdWriteTimestamp2KHR)(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query);
typedef VkResult(GLAD_API_PTR *PFN_vkCompileDeferredNV)(VkDevice device, VkPipeline pipeline, uint32_t shader);
typedef VkResult(GLAD_API_PTR *PFN_vkCopyAccelerationStructureKHR)(VkDevice                                  device,
                                                                   VkDeferredOperationKHR                    deferredOperation,
                                                                   const VkCopyAccelerationStructureInfoKHR *pInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCopyAccelerationStructureToMemoryKHR)(VkDevice                                          device,
                                                                           VkDeferredOperationKHR                            deferredOperation,
                                                                           const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCopyImageToImageEXT)(VkDevice device, const VkCopyImageToImageInfoEXT *pCopyImageToImageInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCopyImageToMemoryEXT)(VkDevice device, const VkCopyImageToMemoryInfoEXT *pCopyImageToMemoryInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCopyMemoryToAccelerationStructureKHR)(VkDevice                                          device,
                                                                           VkDeferredOperationKHR                            deferredOperation,
                                                                           const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCopyMemoryToImageEXT)(VkDevice device, const VkCopyMemoryToImageInfoEXT *pCopyMemoryToImageInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCopyMemoryToMicromapEXT)(VkDevice                             device,
                                                              VkDeferredOperationKHR               deferredOperation,
                                                              const VkCopyMemoryToMicromapInfoEXT *pInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCopyMicromapEXT)(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT *pInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCopyMicromapToMemoryEXT)(VkDevice                             device,
                                                              VkDeferredOperationKHR               deferredOperation,
                                                              const VkCopyMicromapToMemoryInfoEXT *pInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateAccelerationStructureKHR)(VkDevice                                    device,
                                                                     const VkAccelerationStructureCreateInfoKHR *pCreateInfo,
                                                                     const VkAllocationCallbacks                *pAllocator,
                                                                     VkAccelerationStructureKHR                 *pAccelerationStructure);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateAccelerationStructureNV)(VkDevice                                   device,
                                                                    const VkAccelerationStructureCreateInfoNV *pCreateInfo,
                                                                    const VkAllocationCallbacks               *pAllocator,
                                                                    VkAccelerationStructureNV                 *pAccelerationStructure);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateAndroidSurfaceKHR)(VkInstance                           instance,
                                                              const VkAndroidSurfaceCreateInfoKHR *pCreateInfo,
                                                              const VkAllocationCallbacks         *pAllocator,
                                                              VkSurfaceKHR                        *pSurface);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateBuffer)(VkDevice                     device,
                                                   const VkBufferCreateInfo    *pCreateInfo,
                                                   const VkAllocationCallbacks *pAllocator,
                                                   VkBuffer                    *pBuffer);
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateBufferCollectionFUCHSIA)(VkDevice                                   device,
                                                                    const VkBufferCollectionCreateInfoFUCHSIA *pCreateInfo,
                                                                    const VkAllocationCallbacks               *pAllocator,
                                                                    VkBufferCollectionFUCHSIA                 *pCollection);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateBufferView)(VkDevice                      device,
                                                       const VkBufferViewCreateInfo *pCreateInfo,
                                                       const VkAllocationCallbacks  *pAllocator,
                                                       VkBufferView                 *pView);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateCommandPool)(VkDevice                       device,
                                                        const VkCommandPoolCreateInfo *pCreateInfo,
                                                        const VkAllocationCallbacks   *pAllocator,
                                                        VkCommandPool                 *pCommandPool);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateComputePipelines)(VkDevice                           device,
                                                             VkPipelineCache                    pipelineCache,
                                                             uint32_t                           createInfoCount,
                                                             const VkComputePipelineCreateInfo *pCreateInfos,
                                                             const VkAllocationCallbacks       *pAllocator,
                                                             VkPipeline                        *pPipelines);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateCuFunctionNVX)(VkDevice                         device,
                                                          const VkCuFunctionCreateInfoNVX *pCreateInfo,
                                                          const VkAllocationCallbacks     *pAllocator,
                                                          VkCuFunctionNVX                 *pFunction);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateCuModuleNVX)(VkDevice                       device,
                                                        const VkCuModuleCreateInfoNVX *pCreateInfo,
                                                        const VkAllocationCallbacks   *pAllocator,
                                                        VkCuModuleNVX                 *pModule);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDebugReportCallbackEXT)(VkInstance                                instance,
                                                                   const VkDebugReportCallbackCreateInfoEXT *pCreateInfo,
                                                                   const VkAllocationCallbacks              *pAllocator,
                                                                   VkDebugReportCallbackEXT                 *pCallback);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDebugUtilsMessengerEXT)(VkInstance                                instance,
                                                                   const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo,
                                                                   const VkAllocationCallbacks              *pAllocator,
                                                                   VkDebugUtilsMessengerEXT                 *pMessenger);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDeferredOperationKHR)(VkDevice                     device,
                                                                 const VkAllocationCallbacks *pAllocator,
                                                                 VkDeferredOperationKHR      *pDeferredOperation);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDescriptorPool)(VkDevice                          device,
                                                           const VkDescriptorPoolCreateInfo *pCreateInfo,
                                                           const VkAllocationCallbacks      *pAllocator,
                                                           VkDescriptorPool                 *pDescriptorPool);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDescriptorSetLayout)(VkDevice                               device,
                                                                const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
                                                                const VkAllocationCallbacks           *pAllocator,
                                                                VkDescriptorSetLayout                 *pSetLayout);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDescriptorUpdateTemplate)(VkDevice                                    device,
                                                                     const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo,
                                                                     const VkAllocationCallbacks                *pAllocator,
                                                                     VkDescriptorUpdateTemplate                 *pDescriptorUpdateTemplate);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDescriptorUpdateTemplateKHR)(VkDevice                                    device,
                                                                        const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo,
                                                                        const VkAllocationCallbacks                *pAllocator,
                                                                        VkDescriptorUpdateTemplate                 *pDescriptorUpdateTemplate);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDevice)(VkPhysicalDevice             physicalDevice,
                                                   const VkDeviceCreateInfo    *pCreateInfo,
                                                   const VkAllocationCallbacks *pAllocator,
                                                   VkDevice                    *pDevice);
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDirectFBSurfaceEXT)(VkInstance                            instance,
                                                               const VkDirectFBSurfaceCreateInfoEXT *pCreateInfo,
                                                               const VkAllocationCallbacks          *pAllocator,
                                                               VkSurfaceKHR                         *pSurface);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDisplayModeKHR)(VkPhysicalDevice                  physicalDevice,
                                                           VkDisplayKHR                      display,
                                                           const VkDisplayModeCreateInfoKHR *pCreateInfo,
                                                           const VkAllocationCallbacks      *pAllocator,
                                                           VkDisplayModeKHR                 *pMode);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateDisplayPlaneSurfaceKHR)(VkInstance                           instance,
                                                                   const VkDisplaySurfaceCreateInfoKHR *pCreateInfo,
                                                                   const VkAllocationCallbacks         *pAllocator,
                                                                   VkSurfaceKHR                        *pSurface);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateEvent)(VkDevice                     device,
                                                  const VkEventCreateInfo     *pCreateInfo,
                                                  const VkAllocationCallbacks *pAllocator,
                                                  VkEvent                     *pEvent);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateExecutionGraphPipelinesAMDX)(VkDevice                                      device,
                                                                        VkPipelineCache                               pipelineCache,
                                                                        uint32_t                                      createInfoCount,
                                                                        const VkExecutionGraphPipelineCreateInfoAMDX *pCreateInfos,
                                                                        const VkAllocationCallbacks                  *pAllocator,
                                                                        VkPipeline                                   *pPipelines);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateFence)(VkDevice                     device,
                                                  const VkFenceCreateInfo     *pCreateInfo,
                                                  const VkAllocationCallbacks *pAllocator,
                                                  VkFence                     *pFence);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateFramebuffer)(VkDevice                       device,
                                                        const VkFramebufferCreateInfo *pCreateInfo,
                                                        const VkAllocationCallbacks   *pAllocator,
                                                        VkFramebuffer                 *pFramebuffer);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateGraphicsPipelines)(VkDevice                            device,
                                                              VkPipelineCache                     pipelineCache,
                                                              uint32_t                            createInfoCount,
                                                              const VkGraphicsPipelineCreateInfo *pCreateInfos,
                                                              const VkAllocationCallbacks        *pAllocator,
                                                              VkPipeline                         *pPipelines);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateHeadlessSurfaceEXT)(VkInstance                            instance,
                                                               const VkHeadlessSurfaceCreateInfoEXT *pCreateInfo,
                                                               const VkAllocationCallbacks          *pAllocator,
                                                               VkSurfaceKHR                         *pSurface);
#if defined(VK_USE_PLATFORM_IOS_MVK)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateIOSSurfaceMVK)(VkInstance                       instance,
                                                          const VkIOSSurfaceCreateInfoMVK *pCreateInfo,
                                                          const VkAllocationCallbacks     *pAllocator,
                                                          VkSurfaceKHR                    *pSurface);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateImage)(VkDevice                     device,
                                                  const VkImageCreateInfo     *pCreateInfo,
                                                  const VkAllocationCallbacks *pAllocator,
                                                  VkImage                     *pImage);
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateImagePipeSurfaceFUCHSIA)(VkInstance                                 instance,
                                                                    const VkImagePipeSurfaceCreateInfoFUCHSIA *pCreateInfo,
                                                                    const VkAllocationCallbacks               *pAllocator,
                                                                    VkSurfaceKHR                              *pSurface);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateImageView)(VkDevice                     device,
                                                      const VkImageViewCreateInfo *pCreateInfo,
                                                      const VkAllocationCallbacks *pAllocator,
                                                      VkImageView                 *pView);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateIndirectCommandsLayoutNV)(VkDevice                                    device,
                                                                     const VkIndirectCommandsLayoutCreateInfoNV *pCreateInfo,
                                                                     const VkAllocationCallbacks                *pAllocator,
                                                                     VkIndirectCommandsLayoutNV                 *pIndirectCommandsLayout);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateInstance)(const VkInstanceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkInstance *pInstance);
#if defined(VK_USE_PLATFORM_MACOS_MVK)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateMacOSSurfaceMVK)(VkInstance                         instance,
                                                            const VkMacOSSurfaceCreateInfoMVK *pCreateInfo,
                                                            const VkAllocationCallbacks       *pAllocator,
                                                            VkSurfaceKHR                      *pSurface);

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateMetalSurfaceEXT)(VkInstance                         instance,
                                                            const VkMetalSurfaceCreateInfoEXT *pCreateInfo,
                                                            const VkAllocationCallbacks       *pAllocator,
                                                            VkSurfaceKHR                      *pSurface);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateMicromapEXT)(VkDevice                       device,
                                                        const VkMicromapCreateInfoEXT *pCreateInfo,
                                                        const VkAllocationCallbacks   *pAllocator,
                                                        VkMicromapEXT                 *pMicromap);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateOpticalFlowSessionNV)(VkDevice                                device,
                                                                 const VkOpticalFlowSessionCreateInfoNV *pCreateInfo,
                                                                 const VkAllocationCallbacks            *pAllocator,
                                                                 VkOpticalFlowSessionNV                 *pSession);
typedef VkResult(GLAD_API_PTR *PFN_vkCreatePipelineCache)(VkDevice                         device,
                                                          const VkPipelineCacheCreateInfo *pCreateInfo,
                                                          const VkAllocationCallbacks     *pAllocator,
                                                          VkPipelineCache                 *pPipelineCache);
typedef VkResult(GLAD_API_PTR *PFN_vkCreatePipelineLayout)(VkDevice                          device,
                                                           const VkPipelineLayoutCreateInfo *pCreateInfo,
                                                           const VkAllocationCallbacks      *pAllocator,
                                                           VkPipelineLayout                 *pPipelineLayout);
typedef VkResult(GLAD_API_PTR *PFN_vkCreatePrivateDataSlot)(VkDevice                           device,
                                                            const VkPrivateDataSlotCreateInfo *pCreateInfo,
                                                            const VkAllocationCallbacks       *pAllocator,
                                                            VkPrivateDataSlot                 *pPrivateDataSlot);
typedef VkResult(GLAD_API_PTR *PFN_vkCreatePrivateDataSlotEXT)(VkDevice                           device,
                                                               const VkPrivateDataSlotCreateInfo *pCreateInfo,
                                                               const VkAllocationCallbacks       *pAllocator,
                                                               VkPrivateDataSlot                 *pPrivateDataSlot);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateQueryPool)(VkDevice                     device,
                                                      const VkQueryPoolCreateInfo *pCreateInfo,
                                                      const VkAllocationCallbacks *pAllocator,
                                                      VkQueryPool                 *pQueryPool);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateRayTracingPipelinesKHR)(VkDevice                                 device,
                                                                   VkDeferredOperationKHR                   deferredOperation,
                                                                   VkPipelineCache                          pipelineCache,
                                                                   uint32_t                                 createInfoCount,
                                                                   const VkRayTracingPipelineCreateInfoKHR *pCreateInfos,
                                                                   const VkAllocationCallbacks             *pAllocator,
                                                                   VkPipeline                              *pPipelines);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateRayTracingPipelinesNV)(VkDevice                                device,
                                                                  VkPipelineCache                         pipelineCache,
                                                                  uint32_t                                createInfoCount,
                                                                  const VkRayTracingPipelineCreateInfoNV *pCreateInfos,
                                                                  const VkAllocationCallbacks            *pAllocator,
                                                                  VkPipeline                             *pPipelines);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateRenderPass)(VkDevice                      device,
                                                       const VkRenderPassCreateInfo *pCreateInfo,
                                                       const VkAllocationCallbacks  *pAllocator,
                                                       VkRenderPass                 *pRenderPass);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateRenderPass2)(VkDevice                       device,
                                                        const VkRenderPassCreateInfo2 *pCreateInfo,
                                                        const VkAllocationCallbacks   *pAllocator,
                                                        VkRenderPass                  *pRenderPass);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateRenderPass2KHR)(VkDevice                       device,
                                                           const VkRenderPassCreateInfo2 *pCreateInfo,
                                                           const VkAllocationCallbacks   *pAllocator,
                                                           VkRenderPass                  *pRenderPass);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateSampler)(VkDevice                     device,
                                                    const VkSamplerCreateInfo   *pCreateInfo,
                                                    const VkAllocationCallbacks *pAllocator,
                                                    VkSampler                   *pSampler);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateSamplerYcbcrConversion)(VkDevice                                  device,
                                                                   const VkSamplerYcbcrConversionCreateInfo *pCreateInfo,
                                                                   const VkAllocationCallbacks              *pAllocator,
                                                                   VkSamplerYcbcrConversion                 *pYcbcrConversion);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateSamplerYcbcrConversionKHR)(VkDevice                                  device,
                                                                      const VkSamplerYcbcrConversionCreateInfo *pCreateInfo,
                                                                      const VkAllocationCallbacks              *pAllocator,
                                                                      VkSamplerYcbcrConversion                 *pYcbcrConversion);
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateScreenSurfaceQNX)(VkInstance                          instance,
                                                             const VkScreenSurfaceCreateInfoQNX *pCreateInfo,
                                                             const VkAllocationCallbacks        *pAllocator,
                                                             VkSurfaceKHR                       *pSurface);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateSemaphore)(VkDevice                     device,
                                                      const VkSemaphoreCreateInfo *pCreateInfo,
                                                      const VkAllocationCallbacks *pAllocator,
                                                      VkSemaphore                 *pSemaphore);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateShaderModule)(VkDevice                        device,
                                                         const VkShaderModuleCreateInfo *pCreateInfo,
                                                         const VkAllocationCallbacks    *pAllocator,
                                                         VkShaderModule                 *pShaderModule);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateShadersEXT)(VkDevice                     device,
                                                       uint32_t                     createInfoCount,
                                                       const VkShaderCreateInfoEXT *pCreateInfos,
                                                       const VkAllocationCallbacks *pAllocator,
                                                       VkShaderEXT                 *pShaders);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateSharedSwapchainsKHR)(VkDevice                        device,
                                                                uint32_t                        swapchainCount,
                                                                const VkSwapchainCreateInfoKHR *pCreateInfos,
                                                                const VkAllocationCallbacks    *pAllocator,
                                                                VkSwapchainKHR                 *pSwapchains);
#if defined(VK_USE_PLATFORM_GGP)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateStreamDescriptorSurfaceGGP)(VkInstance                                    instance,
                                                                       const VkStreamDescriptorSurfaceCreateInfoGGP *pCreateInfo,
                                                                       const VkAllocationCallbacks                  *pAllocator,
                                                                       VkSurfaceKHR                                 *pSurface);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateSwapchainKHR)(VkDevice                        device,
                                                         const VkSwapchainCreateInfoKHR *pCreateInfo,
                                                         const VkAllocationCallbacks    *pAllocator,
                                                         VkSwapchainKHR                 *pSwapchain);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateValidationCacheEXT)(VkDevice                              device,
                                                               const VkValidationCacheCreateInfoEXT *pCreateInfo,
                                                               const VkAllocationCallbacks          *pAllocator,
                                                               VkValidationCacheEXT                 *pValidationCache);
#if defined(VK_USE_PLATFORM_VI_NN)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateViSurfaceNN)(VkInstance                     instance,
                                                        const VkViSurfaceCreateInfoNN *pCreateInfo,
                                                        const VkAllocationCallbacks   *pAllocator,
                                                        VkSurfaceKHR                  *pSurface);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkCreateVideoSessionKHR)(VkDevice                           device,
                                                            const VkVideoSessionCreateInfoKHR *pCreateInfo,
                                                            const VkAllocationCallbacks       *pAllocator,
                                                            VkVideoSessionKHR                 *pVideoSession);
typedef VkResult(GLAD_API_PTR *PFN_vkCreateVideoSessionParametersKHR)(VkDevice                                     device,
                                                                      const VkVideoSessionParametersCreateInfoKHR *pCreateInfo,
                                                                      const VkAllocationCallbacks                 *pAllocator,
                                                                      VkVideoSessionParametersKHR                 *pVideoSessionParameters);
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateWaylandSurfaceKHR)(VkInstance                           instance,
                                                              const VkWaylandSurfaceCreateInfoKHR *pCreateInfo,
                                                              const VkAllocationCallbacks         *pAllocator,
                                                              VkSurfaceKHR                        *pSurface);

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateWin32SurfaceKHR)(VkInstance                         instance,
                                                            const VkWin32SurfaceCreateInfoKHR *pCreateInfo,
                                                            const VkAllocationCallbacks       *pAllocator,
                                                            VkSurfaceKHR                      *pSurface);

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateXcbSurfaceKHR)(VkInstance                       instance,
                                                          const VkXcbSurfaceCreateInfoKHR *pCreateInfo,
                                                          const VkAllocationCallbacks     *pAllocator,
                                                          VkSurfaceKHR                    *pSurface);

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkCreateXlibSurfaceKHR)(VkInstance                        instance,
                                                           const VkXlibSurfaceCreateInfoKHR *pCreateInfo,
                                                           const VkAllocationCallbacks      *pAllocator,
                                                           VkSurfaceKHR                     *pSurface);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkDebugMarkerSetObjectNameEXT)(VkDevice device, const VkDebugMarkerObjectNameInfoEXT *pNameInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkDebugMarkerSetObjectTagEXT)(VkDevice device, const VkDebugMarkerObjectTagInfoEXT *pTagInfo);
typedef void(GLAD_API_PTR *PFN_vkDebugReportMessageEXT)(VkInstance                 instance,
                                                        VkDebugReportFlagsEXT      flags,
                                                        VkDebugReportObjectTypeEXT objectType,
                                                        uint64_t                   object,
                                                        size_t                     location,
                                                        int32_t                    messageCode,
                                                        const char                *pLayerPrefix,
                                                        const char                *pMessage);
typedef VkResult(GLAD_API_PTR *PFN_vkDeferredOperationJoinKHR)(VkDevice device, VkDeferredOperationKHR operation);
typedef void(GLAD_API_PTR *PFN_vkDestroyAccelerationStructureKHR)(VkDevice                     device,
                                                                  VkAccelerationStructureKHR   accelerationStructure,
                                                                  const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyAccelerationStructureNV)(VkDevice                     device,
                                                                 VkAccelerationStructureNV    accelerationStructure,
                                                                 const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyBuffer)(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks *pAllocator);
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef void(GLAD_API_PTR *PFN_vkDestroyBufferCollectionFUCHSIA)(VkDevice                     device,
                                                                 VkBufferCollectionFUCHSIA    collection,
                                                                 const VkAllocationCallbacks *pAllocator);

#endif
typedef void(GLAD_API_PTR *PFN_vkDestroyBufferView)(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyCommandPool)(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyCuFunctionNVX)(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyCuModuleNVX)(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyDebugReportCallbackEXT)(VkInstance                   instance,
                                                                VkDebugReportCallbackEXT     callback,
                                                                const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyDebugUtilsMessengerEXT)(VkInstance                   instance,
                                                                VkDebugUtilsMessengerEXT     messenger,
                                                                const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyDeferredOperationKHR)(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyDescriptorSetLayout)(VkDevice                     device,
                                                             VkDescriptorSetLayout        descriptorSetLayout,
                                                             const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyDescriptorUpdateTemplate)(VkDevice                     device,
                                                                  VkDescriptorUpdateTemplate   descriptorUpdateTemplate,
                                                                  const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyDescriptorUpdateTemplateKHR)(VkDevice                     device,
                                                                     VkDescriptorUpdateTemplate   descriptorUpdateTemplate,
                                                                     const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyDevice)(VkDevice device, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyEvent)(VkDevice device, VkEvent event, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyFence)(VkDevice device, VkFence fence, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyFramebuffer)(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyImage)(VkDevice device, VkImage image, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyImageView)(VkDevice device, VkImageView imageView, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyIndirectCommandsLayoutNV)(VkDevice                     device,
                                                                  VkIndirectCommandsLayoutNV   indirectCommandsLayout,
                                                                  const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyInstance)(VkInstance instance, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyMicromapEXT)(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyOpticalFlowSessionNV)(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyPipeline)(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyPipelineCache)(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyPipelineLayout)(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyPrivateDataSlot)(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyPrivateDataSlotEXT)(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyQueryPool)(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyRenderPass)(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroySampler)(VkDevice device, VkSampler sampler, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroySamplerYcbcrConversion)(VkDevice                     device,
                                                                VkSamplerYcbcrConversion     ycbcrConversion,
                                                                const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroySamplerYcbcrConversionKHR)(VkDevice                     device,
                                                                   VkSamplerYcbcrConversion     ycbcrConversion,
                                                                   const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroySemaphore)(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyShaderEXT)(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyShaderModule)(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroySurfaceKHR)(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroySwapchainKHR)(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyValidationCacheEXT)(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyVideoSessionKHR)(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkDestroyVideoSessionParametersKHR)(VkDevice                     device,
                                                                   VkVideoSessionParametersKHR  videoSessionParameters,
                                                                   const VkAllocationCallbacks *pAllocator);
typedef VkResult(GLAD_API_PTR *PFN_vkDeviceWaitIdle)(VkDevice device);
typedef VkResult(GLAD_API_PTR *PFN_vkDisplayPowerControlEXT)(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT *pDisplayPowerInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkEndCommandBuffer)(VkCommandBuffer commandBuffer);
typedef VkResult(GLAD_API_PTR *PFN_vkEnumerateDeviceExtensionProperties)(VkPhysicalDevice       physicalDevice,
                                                                         const char            *pLayerName,
                                                                         uint32_t              *pPropertyCount,
                                                                         VkExtensionProperties *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkEnumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkLayerProperties *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkEnumerateInstanceExtensionProperties)(const char            *pLayerName,
                                                                           uint32_t              *pPropertyCount,
                                                                           VkExtensionProperties *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkEnumerateInstanceLayerProperties)(uint32_t *pPropertyCount, VkLayerProperties *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkEnumerateInstanceVersion)(uint32_t *pApiVersion);
typedef VkResult(GLAD_API_PTR *PFN_vkEnumeratePhysicalDeviceGroups)(VkInstance                       instance,
                                                                    uint32_t                        *pPhysicalDeviceGroupCount,
                                                                    VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkEnumeratePhysicalDeviceGroupsKHR)(VkInstance                       instance,
                                                                       uint32_t                        *pPhysicalDeviceGroupCount,
                                                                       VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)(VkPhysicalDevice                    physicalDevice,
                                                                                                    uint32_t                            queueFamilyIndex,
                                                                                                    uint32_t                           *pCounterCount,
                                                                                                    VkPerformanceCounterKHR            *pCounters,
                                                                                                    VkPerformanceCounterDescriptionKHR *pCounterDescriptions);
typedef VkResult(GLAD_API_PTR *PFN_vkEnumeratePhysicalDevices)(VkInstance instance, uint32_t *pPhysicalDeviceCount, VkPhysicalDevice *pPhysicalDevices);
#if defined(VK_USE_PLATFORM_METAL_EXT)
typedef void(GLAD_API_PTR *PFN_vkExportMetalObjectsEXT)(VkDevice device, VkExportMetalObjectsInfoEXT *pMetalObjectsInfo);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkFlushMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges);
typedef void(GLAD_API_PTR *PFN_vkFreeCommandBuffers)(VkDevice               device,
                                                     VkCommandPool          commandPool,
                                                     uint32_t               commandBufferCount,
                                                     const VkCommandBuffer *pCommandBuffers);
typedef VkResult(GLAD_API_PTR *PFN_vkFreeDescriptorSets)(VkDevice               device,
                                                         VkDescriptorPool       descriptorPool,
                                                         uint32_t               descriptorSetCount,
                                                         const VkDescriptorSet *pDescriptorSets);
typedef void(GLAD_API_PTR *PFN_vkFreeMemory)(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks *pAllocator);
typedef void(GLAD_API_PTR *PFN_vkGetAccelerationStructureBuildSizesKHR)(VkDevice                                           device,
                                                                        VkAccelerationStructureBuildTypeKHR                buildType,
                                                                        const VkAccelerationStructureBuildGeometryInfoKHR *pBuildInfo,
                                                                        const uint32_t                                    *pMaxPrimitiveCounts,
                                                                        VkAccelerationStructureBuildSizesInfoKHR          *pSizeInfo);
typedef VkDeviceAddress(GLAD_API_PTR *PFN_vkGetAccelerationStructureDeviceAddressKHR)(VkDevice                                           device,
                                                                                      const VkAccelerationStructureDeviceAddressInfoKHR *pInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkGetAccelerationStructureHandleNV)(VkDevice                  device,
                                                                       VkAccelerationStructureNV accelerationStructure,
                                                                       size_t                    dataSize,
                                                                       void                     *pData);
typedef void(GLAD_API_PTR *PFN_vkGetAccelerationStructureMemoryRequirementsNV)(VkDevice                                               device,
                                                                               const VkAccelerationStructureMemoryRequirementsInfoNV *pInfo,
                                                                               VkMemoryRequirements2KHR                              *pMemoryRequirements);
typedef VkResult(GLAD_API_PTR *PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)(VkDevice                                                   device,
                                                                                             const VkAccelerationStructureCaptureDescriptorDataInfoEXT *pInfo,
                                                                                             void                                                      *pData);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetAndroidHardwareBufferPropertiesANDROID)(VkDevice                                  device,
                                                                                const struct AHardwareBuffer             *buffer,
                                                                                VkAndroidHardwareBufferPropertiesANDROID *pProperties);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult(GLAD_API_PTR *PFN_vkGetBufferCollectionPropertiesFUCHSIA)(VkDevice                             device,
                                                                           VkBufferCollectionFUCHSIA            collection,
                                                                           VkBufferCollectionPropertiesFUCHSIA *pProperties);

#endif
typedef VkDeviceAddress(GLAD_API_PTR *PFN_vkGetBufferDeviceAddress)(VkDevice device, const VkBufferDeviceAddressInfo *pInfo);
typedef VkDeviceAddress(GLAD_API_PTR *PFN_vkGetBufferDeviceAddressEXT)(VkDevice device, const VkBufferDeviceAddressInfo *pInfo);
typedef VkDeviceAddress(GLAD_API_PTR *PFN_vkGetBufferDeviceAddressKHR)(VkDevice device, const VkBufferDeviceAddressInfo *pInfo);
typedef void(GLAD_API_PTR *PFN_vkGetBufferMemoryRequirements)(VkDevice device, VkBuffer buffer, VkMemoryRequirements *pMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetBufferMemoryRequirements2)(VkDevice                               device,
                                                               const VkBufferMemoryRequirementsInfo2 *pInfo,
                                                               VkMemoryRequirements2                 *pMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetBufferMemoryRequirements2KHR)(VkDevice                               device,
                                                                  const VkBufferMemoryRequirementsInfo2 *pInfo,
                                                                  VkMemoryRequirements2                 *pMemoryRequirements);
typedef uint64_t(GLAD_API_PTR *PFN_vkGetBufferOpaqueCaptureAddress)(VkDevice device, const VkBufferDeviceAddressInfo *pInfo);
typedef uint64_t(GLAD_API_PTR *PFN_vkGetBufferOpaqueCaptureAddressKHR)(VkDevice device, const VkBufferDeviceAddressInfo *pInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT *pInfo, void *pData);
typedef VkResult(GLAD_API_PTR *PFN_vkGetCalibratedTimestampsEXT)(VkDevice                            device,
                                                                 uint32_t                            timestampCount,
                                                                 const VkCalibratedTimestampInfoEXT *pTimestampInfos,
                                                                 uint64_t                           *pTimestamps,
                                                                 uint64_t                           *pMaxDeviation);
typedef uint32_t(GLAD_API_PTR *PFN_vkGetDeferredOperationMaxConcurrencyKHR)(VkDevice device, VkDeferredOperationKHR operation);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDeferredOperationResultKHR)(VkDevice device, VkDeferredOperationKHR operation);
typedef void(GLAD_API_PTR *PFN_vkGetDescriptorEXT)(VkDevice device, const VkDescriptorGetInfoEXT *pDescriptorInfo, size_t dataSize, void *pDescriptor);
typedef void(GLAD_API_PTR *PFN_vkGetDescriptorSetHostMappingVALVE)(VkDevice device, VkDescriptorSet descriptorSet, void **ppData);
typedef void(GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)(VkDevice              device,
                                                                         VkDescriptorSetLayout layout,
                                                                         uint32_t              binding,
                                                                         VkDeviceSize         *pOffset);
typedef void(GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)(VkDevice                                    device,
                                                                             const VkDescriptorSetBindingReferenceVALVE *pBindingReference,
                                                                             VkDescriptorSetLayoutHostMappingInfoVALVE  *pHostMapping);
typedef void(GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutSizeEXT)(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize *pLayoutSizeInBytes);
typedef void(GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutSupport)(VkDevice                               device,
                                                                const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
                                                                VkDescriptorSetLayoutSupport          *pSupport);
typedef void(GLAD_API_PTR *PFN_vkGetDescriptorSetLayoutSupportKHR)(VkDevice                               device,
                                                                   const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
                                                                   VkDescriptorSetLayoutSupport          *pSupport);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)(VkDevice                                     device,
                                                                                 const VkAccelerationStructureVersionInfoKHR *pVersionInfo,
                                                                                 VkAccelerationStructureCompatibilityKHR     *pCompatibility);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceBufferMemoryRequirements)(VkDevice                                device,
                                                                    const VkDeviceBufferMemoryRequirements *pInfo,
                                                                    VkMemoryRequirements2                  *pMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceBufferMemoryRequirementsKHR)(VkDevice                                device,
                                                                       const VkDeviceBufferMemoryRequirements *pInfo,
                                                                       VkMemoryRequirements2                  *pMemoryRequirements);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDeviceFaultInfoEXT)(VkDevice device, VkDeviceFaultCountsEXT *pFaultCounts, VkDeviceFaultInfoEXT *pFaultInfo);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceGroupPeerMemoryFeatures)(VkDevice                  device,
                                                                   uint32_t                  heapIndex,
                                                                   uint32_t                  localDeviceIndex,
                                                                   uint32_t                  remoteDeviceIndex,
                                                                   VkPeerMemoryFeatureFlags *pPeerMemoryFeatures);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)(VkDevice                  device,
                                                                      uint32_t                  heapIndex,
                                                                      uint32_t                  localDeviceIndex,
                                                                      uint32_t                  remoteDeviceIndex,
                                                                      VkPeerMemoryFeatureFlags *pPeerMemoryFeatures);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDeviceGroupPresentCapabilitiesKHR)(VkDevice                             device,
                                                                           VkDeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetDeviceGroupSurfacePresentModes2EXT)(VkDevice                               device,
                                                                            const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                            VkDeviceGroupPresentModeFlagsKHR      *pModes);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetDeviceGroupSurfacePresentModesKHR)(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR *pModes);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceImageMemoryRequirements)(VkDevice                               device,
                                                                   const VkDeviceImageMemoryRequirements *pInfo,
                                                                   VkMemoryRequirements2                 *pMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceImageMemoryRequirementsKHR)(VkDevice                               device,
                                                                      const VkDeviceImageMemoryRequirements *pInfo,
                                                                      VkMemoryRequirements2                 *pMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceImageSparseMemoryRequirements)(VkDevice                               device,
                                                                         const VkDeviceImageMemoryRequirements *pInfo,
                                                                         uint32_t                              *pSparseMemoryRequirementCount,
                                                                         VkSparseImageMemoryRequirements2      *pSparseMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)(VkDevice                               device,
                                                                            const VkDeviceImageMemoryRequirements *pInfo,
                                                                            uint32_t                              *pSparseMemoryRequirementCount,
                                                                            VkSparseImageMemoryRequirements2      *pSparseMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceImageSubresourceLayoutKHR)(VkDevice                               device,
                                                                     const VkDeviceImageSubresourceInfoKHR *pInfo,
                                                                     VkSubresourceLayout2KHR               *pLayout);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceMemoryCommitment)(VkDevice device, VkDeviceMemory memory, VkDeviceSize *pCommittedMemoryInBytes);
typedef uint64_t(GLAD_API_PTR *PFN_vkGetDeviceMemoryOpaqueCaptureAddress)(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo);
typedef uint64_t(GLAD_API_PTR *PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceMicromapCompatibilityEXT)(VkDevice                                 device,
                                                                    const VkMicromapVersionInfoEXT          *pVersionInfo,
                                                                    VkAccelerationStructureCompatibilityKHR *pCompatibility);
typedef PFN_vkVoidFunction(GLAD_API_PTR *PFN_vkGetDeviceProcAddr)(VkDevice device, const char *pName);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceQueue)(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue *pQueue);
typedef void(GLAD_API_PTR *PFN_vkGetDeviceQueue2)(VkDevice device, const VkDeviceQueueInfo2 *pQueueInfo, VkQueue *pQueue);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)(VkDevice device, VkRenderPass renderpass, VkExtent2D *pMaxWorkgroupSize);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDisplayModeProperties2KHR)(VkPhysicalDevice             physicalDevice,
                                                                   VkDisplayKHR                 display,
                                                                   uint32_t                    *pPropertyCount,
                                                                   VkDisplayModeProperties2KHR *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDisplayModePropertiesKHR)(VkPhysicalDevice            physicalDevice,
                                                                  VkDisplayKHR                display,
                                                                  uint32_t                   *pPropertyCount,
                                                                  VkDisplayModePropertiesKHR *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDisplayPlaneCapabilities2KHR)(VkPhysicalDevice                physicalDevice,
                                                                      const VkDisplayPlaneInfo2KHR   *pDisplayPlaneInfo,
                                                                      VkDisplayPlaneCapabilities2KHR *pCapabilities);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDisplayPlaneCapabilitiesKHR)(VkPhysicalDevice               physicalDevice,
                                                                     VkDisplayModeKHR               mode,
                                                                     uint32_t                       planeIndex,
                                                                     VkDisplayPlaneCapabilitiesKHR *pCapabilities);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDisplayPlaneSupportedDisplaysKHR)(VkPhysicalDevice physicalDevice,
                                                                          uint32_t         planeIndex,
                                                                          uint32_t        *pDisplayCount,
                                                                          VkDisplayKHR    *pDisplays);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDrmDisplayEXT)(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR *display);
typedef VkResult(GLAD_API_PTR *PFN_vkGetDynamicRenderingTilePropertiesQCOM)(VkDevice               device,
                                                                            const VkRenderingInfo *pRenderingInfo,
                                                                            VkTilePropertiesQCOM  *pProperties);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult(GLAD_API_PTR *PFN_vkGetEncodedVideoSessionParametersKHR)(VkDevice                                        device,
                                                                          const VkVideoEncodeSessionParametersGetInfoKHR *pVideoSessionParametersInfo,
                                                                          VkVideoEncodeSessionParametersFeedbackInfoKHR  *pFeedbackInfo,
                                                                          size_t                                         *pDataSize,
                                                                          void                                           *pData);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetEventStatus)(VkDevice device, VkEvent event);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult(GLAD_API_PTR *PFN_vkGetExecutionGraphPipelineNodeIndexAMDX)(VkDevice                                       device,
                                                                             VkPipeline                                     executionGraph,
                                                                             const VkPipelineShaderStageNodeCreateInfoAMDX *pNodeInfo,
                                                                             uint32_t                                      *pNodeIndex);

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult(GLAD_API_PTR *PFN_vkGetExecutionGraphPipelineScratchSizeAMDX)(VkDevice                                 device,
                                                                               VkPipeline                               executionGraph,
                                                                               VkExecutionGraphPipelineScratchSizeAMDX *pSizeInfo);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetFenceFdKHR)(VkDevice device, const VkFenceGetFdInfoKHR *pGetFdInfo, int *pFd);
typedef VkResult(GLAD_API_PTR *PFN_vkGetFenceStatus)(VkDevice device, VkFence fence);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetFenceWin32HandleKHR)(VkDevice device, const VkFenceGetWin32HandleInfoKHR *pGetWin32HandleInfo, HANDLE *pHandle);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetFramebufferTilePropertiesQCOM)(VkDevice              device,
                                                                       VkFramebuffer         framebuffer,
                                                                       uint32_t             *pPropertiesCount,
                                                                       VkTilePropertiesQCOM *pProperties);
typedef void(GLAD_API_PTR *PFN_vkGetGeneratedCommandsMemoryRequirementsNV)(VkDevice                                           device,
                                                                           const VkGeneratedCommandsMemoryRequirementsInfoNV *pInfo,
                                                                           VkMemoryRequirements2                             *pMemoryRequirements);
typedef VkResult(GLAD_API_PTR *PFN_vkGetImageDrmFormatModifierPropertiesEXT)(VkDevice                               device,
                                                                             VkImage                                image,
                                                                             VkImageDrmFormatModifierPropertiesEXT *pProperties);
typedef void(GLAD_API_PTR *PFN_vkGetImageMemoryRequirements)(VkDevice device, VkImage image, VkMemoryRequirements *pMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetImageMemoryRequirements2)(VkDevice                              device,
                                                              const VkImageMemoryRequirementsInfo2 *pInfo,
                                                              VkMemoryRequirements2                *pMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetImageMemoryRequirements2KHR)(VkDevice                              device,
                                                                 const VkImageMemoryRequirementsInfo2 *pInfo,
                                                                 VkMemoryRequirements2                *pMemoryRequirements);
typedef VkResult(GLAD_API_PTR *PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT *pInfo, void *pData);
typedef void(GLAD_API_PTR *PFN_vkGetImageSparseMemoryRequirements)(VkDevice                         device,
                                                                   VkImage                          image,
                                                                   uint32_t                        *pSparseMemoryRequirementCount,
                                                                   VkSparseImageMemoryRequirements *pSparseMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetImageSparseMemoryRequirements2)(VkDevice                                    device,
                                                                    const VkImageSparseMemoryRequirementsInfo2 *pInfo,
                                                                    uint32_t                                   *pSparseMemoryRequirementCount,
                                                                    VkSparseImageMemoryRequirements2           *pSparseMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetImageSparseMemoryRequirements2KHR)(VkDevice                                    device,
                                                                       const VkImageSparseMemoryRequirementsInfo2 *pInfo,
                                                                       uint32_t                                   *pSparseMemoryRequirementCount,
                                                                       VkSparseImageMemoryRequirements2           *pSparseMemoryRequirements);
typedef void(GLAD_API_PTR *PFN_vkGetImageSubresourceLayout)(VkDevice                  device,
                                                            VkImage                   image,
                                                            const VkImageSubresource *pSubresource,
                                                            VkSubresourceLayout      *pLayout);
typedef void(GLAD_API_PTR *PFN_vkGetImageSubresourceLayout2EXT)(VkDevice                      device,
                                                                VkImage                       image,
                                                                const VkImageSubresource2KHR *pSubresource,
                                                                VkSubresourceLayout2KHR      *pLayout);
typedef void(GLAD_API_PTR *PFN_vkGetImageSubresourceLayout2KHR)(VkDevice                      device,
                                                                VkImage                       image,
                                                                const VkImageSubresource2KHR *pSubresource,
                                                                VkSubresourceLayout2KHR      *pLayout);
typedef VkResult(GLAD_API_PTR *PFN_vkGetImageViewAddressNVX)(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX *pProperties);
typedef uint32_t(GLAD_API_PTR *PFN_vkGetImageViewHandleNVX)(VkDevice device, const VkImageViewHandleInfoNVX *pInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)(VkDevice                                       device,
                                                                                 const VkImageViewCaptureDescriptorDataInfoEXT *pInfo,
                                                                                 void                                          *pData);
typedef PFN_vkVoidFunction(GLAD_API_PTR *PFN_vkGetInstanceProcAddr)(VkInstance instance, const char *pName);
typedef void(GLAD_API_PTR *PFN_vkGetLatencyTimingsNV)(VkDevice                  device,
                                                      VkSwapchainKHR            swapchain,
                                                      uint32_t                 *pTimingCount,
                                                      VkGetLatencyMarkerInfoNV *pLatencyMarkerInfo);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryAndroidHardwareBufferANDROID)(VkDevice                                           device,
                                                                            const VkMemoryGetAndroidHardwareBufferInfoANDROID *pInfo,
                                                                            struct AHardwareBuffer                           **pBuffer);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryFdKHR)(VkDevice device, const VkMemoryGetFdInfoKHR *pGetFdInfo, int *pFd);
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryFdPropertiesKHR)(VkDevice                           device,
                                                               VkExternalMemoryHandleTypeFlagBits handleType,
                                                               int                                fd,
                                                               VkMemoryFdPropertiesKHR           *pMemoryFdProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryHostPointerPropertiesEXT)(VkDevice                           device,
                                                                        VkExternalMemoryHandleTypeFlagBits handleType,
                                                                        const void                        *pHostPointer,
                                                                        VkMemoryHostPointerPropertiesEXT  *pMemoryHostPointerProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryRemoteAddressNV)(VkDevice                              device,
                                                               const VkMemoryGetRemoteAddressInfoNV *pMemoryGetRemoteAddressInfo,
                                                               VkRemoteAddressNV                    *pAddress);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryWin32HandleKHR)(VkDevice device, const VkMemoryGetWin32HandleInfoKHR *pGetWin32HandleInfo, HANDLE *pHandle);

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryWin32HandleNV)(VkDevice                          device,
                                                             VkDeviceMemory                    memory,
                                                             VkExternalMemoryHandleTypeFlagsNV handleType,
                                                             HANDLE                           *pHandle);

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryWin32HandlePropertiesKHR)(VkDevice                           device,
                                                                        VkExternalMemoryHandleTypeFlagBits handleType,
                                                                        HANDLE                             handle,
                                                                        VkMemoryWin32HandlePropertiesKHR  *pMemoryWin32HandleProperties);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryZirconHandleFUCHSIA)(VkDevice                                  device,
                                                                   const VkMemoryGetZirconHandleInfoFUCHSIA *pGetZirconHandleInfo,
                                                                   zx_handle_t                              *pZirconHandle);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult(GLAD_API_PTR *PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA)(VkDevice                               device,
                                                                             VkExternalMemoryHandleTypeFlagBits     handleType,
                                                                             zx_handle_t                            zirconHandle,
                                                                             VkMemoryZirconHandlePropertiesFUCHSIA *pMemoryZirconHandleProperties);

#endif
typedef void(GLAD_API_PTR *PFN_vkGetMicromapBuildSizesEXT)(VkDevice                            device,
                                                           VkAccelerationStructureBuildTypeKHR buildType,
                                                           const VkMicromapBuildInfoEXT       *pBuildInfo,
                                                           VkMicromapBuildSizesInfoEXT        *pSizeInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPastPresentationTimingGOOGLE)(VkDevice                        device,
                                                                      VkSwapchainKHR                  swapchain,
                                                                      uint32_t                       *pPresentationTimingCount,
                                                                      VkPastPresentationTimingGOOGLE *pPresentationTimings);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPerformanceParameterINTEL)(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL *pValue);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)(VkPhysicalDevice physicalDevice,
                                                                                   uint32_t        *pTimeDomainCount,
                                                                                   VkTimeDomainEXT *pTimeDomains);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)(VkPhysicalDevice                  physicalDevice,
                                                                                      uint32_t                         *pPropertyCount,
                                                                                      VkCooperativeMatrixPropertiesKHR *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)(VkPhysicalDevice                 physicalDevice,
                                                                                     uint32_t                        *pPropertyCount,
                                                                                     VkCooperativeMatrixPropertiesNV *pProperties);
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
typedef VkBool32(GLAD_API_PTR *PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT)(VkPhysicalDevice physicalDevice,
                                                                                      uint32_t         queueFamilyIndex,
                                                                                      IDirectFB       *dfb);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)(VkPhysicalDevice              physicalDevice,
                                                                                  uint32_t                     *pPropertyCount,
                                                                                  VkDisplayPlaneProperties2KHR *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)(VkPhysicalDevice             physicalDevice,
                                                                                 uint32_t                    *pPropertyCount,
                                                                                 VkDisplayPlanePropertiesKHR *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceDisplayProperties2KHR)(VkPhysicalDevice         physicalDevice,
                                                                             uint32_t                *pPropertyCount,
                                                                             VkDisplayProperties2KHR *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)(VkPhysicalDevice        physicalDevice,
                                                                            uint32_t               *pPropertyCount,
                                                                            VkDisplayPropertiesKHR *pProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalBufferProperties)(VkPhysicalDevice                          physicalDevice,
                                                                            const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo,
                                                                            VkExternalBufferProperties               *pExternalBufferProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)(VkPhysicalDevice                          physicalDevice,
                                                                               const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo,
                                                                               VkExternalBufferProperties               *pExternalBufferProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalFenceProperties)(VkPhysicalDevice                         physicalDevice,
                                                                           const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo,
                                                                           VkExternalFenceProperties               *pExternalFenceProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)(VkPhysicalDevice                         physicalDevice,
                                                                              const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo,
                                                                              VkExternalFenceProperties               *pExternalFenceProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)(VkPhysicalDevice                   physicalDevice,
                                                                                       VkFormat                           format,
                                                                                       VkImageType                        type,
                                                                                       VkImageTiling                      tiling,
                                                                                       VkImageUsageFlags                  usage,
                                                                                       VkImageCreateFlags                 flags,
                                                                                       VkExternalMemoryHandleTypeFlagsNV  externalHandleType,
                                                                                       VkExternalImageFormatPropertiesNV *pExternalImageFormatProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)(VkPhysicalDevice                             physicalDevice,
                                                                               const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo,
                                                                               VkExternalSemaphoreProperties               *pExternalSemaphoreProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)(VkPhysicalDevice                             physicalDevice,
                                                                                  const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo,
                                                                                  VkExternalSemaphoreProperties               *pExternalSemaphoreProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures *pFeatures);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceFeatures2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceFeatures2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties *pFormatProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceFormatProperties2)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 *pFormatProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceFormatProperties2KHR)(VkPhysicalDevice     physicalDevice,
                                                                        VkFormat             format,
                                                                        VkFormatProperties2 *pFormatProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)(VkPhysicalDevice                        physicalDevice,
                                                                               uint32_t                               *pFragmentShadingRateCount,
                                                                               VkPhysicalDeviceFragmentShadingRateKHR *pFragmentShadingRates);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties)(VkPhysicalDevice         physicalDevice,
                                                                             VkFormat                 format,
                                                                             VkImageType              type,
                                                                             VkImageTiling            tiling,
                                                                             VkImageUsageFlags        usage,
                                                                             VkImageCreateFlags       flags,
                                                                             VkImageFormatProperties *pImageFormatProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties2)(VkPhysicalDevice                        physicalDevice,
                                                                              const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo,
                                                                              VkImageFormatProperties2               *pImageFormatProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)(VkPhysicalDevice                        physicalDevice,
                                                                                 const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo,
                                                                                 VkImageFormatProperties2               *pImageFormatProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties *pMemoryProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceMemoryProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 *pMemoryProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceMemoryProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 *pMemoryProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)(VkPhysicalDevice            physicalDevice,
                                                                            VkSampleCountFlagBits       samples,
                                                                            VkMultisamplePropertiesEXT *pMultisampleProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)(VkPhysicalDevice                      physicalDevice,
                                                                                 const VkOpticalFlowImageFormatInfoNV *pOpticalFlowImageFormatInfo,
                                                                                 uint32_t                             *pFormatCount,
                                                                                 VkOpticalFlowImageFormatPropertiesNV *pImageFormatProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDevicePresentRectanglesKHR)(VkPhysicalDevice physicalDevice,
                                                                            VkSurfaceKHR     surface,
                                                                            uint32_t        *pRectCount,
                                                                            VkRect2D        *pRects);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties *pProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)(VkPhysicalDevice                           physicalDevice,
                                                                                        const VkQueryPoolPerformanceCreateInfoKHR *pPerformanceQueryCreateInfo,
                                                                                        uint32_t                                  *pNumPasses);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice         physicalDevice,
                                                                         uint32_t                *pQueueFamilyPropertyCount,
                                                                         VkQueueFamilyProperties *pQueueFamilyProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties2)(VkPhysicalDevice          physicalDevice,
                                                                          uint32_t                 *pQueueFamilyPropertyCount,
                                                                          VkQueueFamilyProperties2 *pQueueFamilyProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)(VkPhysicalDevice          physicalDevice,
                                                                             uint32_t                 *pQueueFamilyPropertyCount,
                                                                             VkQueueFamilyProperties2 *pQueueFamilyProperties);
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef VkBool32(GLAD_API_PTR *PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX)(VkPhysicalDevice       physicalDevice,
                                                                                    uint32_t               queueFamilyIndex,
                                                                                    struct _screen_window *window);

#endif
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice               physicalDevice,
                                                                               VkFormat                       format,
                                                                               VkImageType                    type,
                                                                               VkSampleCountFlagBits          samples,
                                                                               VkImageUsageFlags              usage,
                                                                               VkImageTiling                  tiling,
                                                                               uint32_t                      *pPropertyCount,
                                                                               VkSparseImageFormatProperties *pProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)(VkPhysicalDevice                              physicalDevice,
                                                                                const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo,
                                                                                uint32_t                                     *pPropertyCount,
                                                                                VkSparseImageFormatProperties2               *pProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)(VkPhysicalDevice                              physicalDevice,
                                                                                   const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo,
                                                                                   uint32_t                                     *pPropertyCount,
                                                                                   VkSparseImageFormatProperties2               *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)(VkPhysicalDevice                        physicalDevice,
                                                                                                      uint32_t                               *pCombinationCount,
                                                                                                      VkFramebufferMixedSamplesCombinationNV *pCombinations);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)(VkPhysicalDevice           physicalDevice,
                                                                               VkSurfaceKHR               surface,
                                                                               VkSurfaceCapabilities2EXT *pSurfaceCapabilities);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)(VkPhysicalDevice                       physicalDevice,
                                                                               const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                               VkSurfaceCapabilities2KHR             *pSurfaceCapabilities);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice          physicalDevice,
                                                                              VkSurfaceKHR              surface,
                                                                              VkSurfaceCapabilitiesKHR *pSurfaceCapabilities);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)(VkPhysicalDevice                       physicalDevice,
                                                                          const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                          uint32_t                              *pSurfaceFormatCount,
                                                                          VkSurfaceFormat2KHR                   *pSurfaceFormats);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice    physicalDevice,
                                                                         VkSurfaceKHR        surface,
                                                                         uint32_t           *pSurfaceFormatCount,
                                                                         VkSurfaceFormatKHR *pSurfaceFormats);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT)(VkPhysicalDevice                       physicalDevice,
                                                                               const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                               uint32_t                              *pPresentModeCount,
                                                                               VkPresentModeKHR                      *pPresentModes);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice  physicalDevice,
                                                                              VkSurfaceKHR      surface,
                                                                              uint32_t         *pPresentModeCount,
                                                                              VkPresentModeKHR *pPresentModes);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice,
                                                                         uint32_t         queueFamilyIndex,
                                                                         VkSurfaceKHR     surface,
                                                                         VkBool32        *pSupported);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceToolProperties)(VkPhysicalDevice                physicalDevice,
                                                                      uint32_t                       *pToolCount,
                                                                      VkPhysicalDeviceToolProperties *pToolProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceToolPropertiesEXT)(VkPhysicalDevice                physicalDevice,
                                                                         uint32_t                       *pToolCount,
                                                                         VkPhysicalDeviceToolProperties *pToolProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)(VkPhysicalDevice             physicalDevice,
                                                                            const VkVideoProfileInfoKHR *pVideoProfile,
                                                                            VkVideoCapabilitiesKHR      *pCapabilities);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)(VkPhysicalDevice physicalDevice,
                                                                                            const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR
                                                                                                                                   *pQualityLevelInfo,
                                                                                            VkVideoEncodeQualityLevelPropertiesKHR *pQualityLevelProperties);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)(VkPhysicalDevice                          physicalDevice,
                                                                                const VkPhysicalDeviceVideoFormatInfoKHR *pVideoFormatInfo,
                                                                                uint32_t                                 *pVideoFormatPropertyCount,
                                                                                VkVideoFormatPropertiesKHR               *pVideoFormatProperties);
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
typedef VkBool32(GLAD_API_PTR *PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)(VkPhysicalDevice   physicalDevice,
                                                                                     uint32_t           queueFamilyIndex,
                                                                                     struct wl_display *display);

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkBool32(GLAD_API_PTR *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex);

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
typedef VkBool32(GLAD_API_PTR *PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)(VkPhysicalDevice  physicalDevice,
                                                                                 uint32_t          queueFamilyIndex,
                                                                                 xcb_connection_t *connection,
                                                                                 xcb_visualid_t    visual_id);

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
typedef VkBool32(GLAD_API_PTR *PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)(VkPhysicalDevice physicalDevice,
                                                                                  uint32_t         queueFamilyIndex,
                                                                                  Display         *dpy,
                                                                                  VisualID         visualID);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetPipelineCacheData)(VkDevice device, VkPipelineCache pipelineCache, size_t *pDataSize, void *pData);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPipelineExecutableInternalRepresentationsKHR)(VkDevice                           device,
                                                                                      const VkPipelineExecutableInfoKHR *pExecutableInfo,
                                                                                      uint32_t                          *pInternalRepresentationCount,
                                                                                      VkPipelineExecutableInternalRepresentationKHR *pInternalRepresentations);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPipelineExecutablePropertiesKHR)(VkDevice                           device,
                                                                         const VkPipelineInfoKHR           *pPipelineInfo,
                                                                         uint32_t                          *pExecutableCount,
                                                                         VkPipelineExecutablePropertiesKHR *pProperties);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPipelineExecutableStatisticsKHR)(VkDevice                           device,
                                                                         const VkPipelineExecutableInfoKHR *pExecutableInfo,
                                                                         uint32_t                          *pStatisticCount,
                                                                         VkPipelineExecutableStatisticKHR  *pStatistics);
typedef VkDeviceAddress(GLAD_API_PTR *PFN_vkGetPipelineIndirectDeviceAddressNV)(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV *pInfo);
typedef void(GLAD_API_PTR *PFN_vkGetPipelineIndirectMemoryRequirementsNV)(VkDevice                           device,
                                                                          const VkComputePipelineCreateInfo *pCreateInfo,
                                                                          VkMemoryRequirements2             *pMemoryRequirements);
typedef VkResult(GLAD_API_PTR *PFN_vkGetPipelinePropertiesEXT)(VkDevice                 device,
                                                               const VkPipelineInfoEXT *pPipelineInfo,
                                                               VkBaseOutStructure      *pPipelineProperties);
typedef void(GLAD_API_PTR *PFN_vkGetPrivateData)(VkDevice          device,
                                                 VkObjectType      objectType,
                                                 uint64_t          objectHandle,
                                                 VkPrivateDataSlot privateDataSlot,
                                                 uint64_t         *pData);
typedef void(GLAD_API_PTR *PFN_vkGetPrivateDataEXT)(VkDevice          device,
                                                    VkObjectType      objectType,
                                                    uint64_t          objectHandle,
                                                    VkPrivateDataSlot privateDataSlot,
                                                    uint64_t         *pData);
typedef VkResult(GLAD_API_PTR *PFN_vkGetQueryPoolResults)(VkDevice           device,
                                                          VkQueryPool        queryPool,
                                                          uint32_t           firstQuery,
                                                          uint32_t           queryCount,
                                                          size_t             dataSize,
                                                          void              *pData,
                                                          VkDeviceSize       stride,
                                                          VkQueryResultFlags flags);
typedef void(GLAD_API_PTR *PFN_vkGetQueueCheckpointData2NV)(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointData2NV *pCheckpointData);
typedef void(GLAD_API_PTR *PFN_vkGetQueueCheckpointDataNV)(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointDataNV *pCheckpointData);
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
typedef VkResult(GLAD_API_PTR *PFN_vkGetRandROutputDisplayEXT)(VkPhysicalDevice physicalDevice, Display *dpy, RROutput rrOutput, VkDisplayKHR *pDisplay);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)(VkDevice   device,
                                                                                      VkPipeline pipeline,
                                                                                      uint32_t   firstGroup,
                                                                                      uint32_t   groupCount,
                                                                                      size_t     dataSize,
                                                                                      void      *pData);
typedef VkResult(GLAD_API_PTR *PFN_vkGetRayTracingShaderGroupHandlesKHR)(VkDevice   device,
                                                                         VkPipeline pipeline,
                                                                         uint32_t   firstGroup,
                                                                         uint32_t   groupCount,
                                                                         size_t     dataSize,
                                                                         void      *pData);
typedef VkResult(GLAD_API_PTR *PFN_vkGetRayTracingShaderGroupHandlesNV)(VkDevice   device,
                                                                        VkPipeline pipeline,
                                                                        uint32_t   firstGroup,
                                                                        uint32_t   groupCount,
                                                                        size_t     dataSize,
                                                                        void      *pData);
typedef VkDeviceSize(GLAD_API_PTR *PFN_vkGetRayTracingShaderGroupStackSizeKHR)(VkDevice               device,
                                                                               VkPipeline             pipeline,
                                                                               uint32_t               group,
                                                                               VkShaderGroupShaderKHR groupShader);
typedef VkResult(GLAD_API_PTR *PFN_vkGetRefreshCycleDurationGOOGLE)(VkDevice                      device,
                                                                    VkSwapchainKHR                swapchain,
                                                                    VkRefreshCycleDurationGOOGLE *pDisplayTimingProperties);
typedef void(GLAD_API_PTR *PFN_vkGetRenderAreaGranularity)(VkDevice device, VkRenderPass renderPass, VkExtent2D *pGranularity);
typedef void(GLAD_API_PTR *PFN_vkGetRenderingAreaGranularityKHR)(VkDevice device, const VkRenderingAreaInfoKHR *pRenderingAreaInfo, VkExtent2D *pGranularity);
typedef VkResult(GLAD_API_PTR *PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)(VkDevice                                     device,
                                                                               const VkSamplerCaptureDescriptorDataInfoEXT *pInfo,
                                                                               void                                        *pData);
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
typedef VkResult(GLAD_API_PTR *PFN_vkGetScreenBufferPropertiesQNX)(VkDevice                     device,
                                                                   const struct _screen_buffer *buffer,
                                                                   VkScreenBufferPropertiesQNX *pProperties);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetSemaphoreCounterValue)(VkDevice device, VkSemaphore semaphore, uint64_t *pValue);
typedef VkResult(GLAD_API_PTR *PFN_vkGetSemaphoreCounterValueKHR)(VkDevice device, VkSemaphore semaphore, uint64_t *pValue);
typedef VkResult(GLAD_API_PTR *PFN_vkGetSemaphoreFdKHR)(VkDevice device, const VkSemaphoreGetFdInfoKHR *pGetFdInfo, int *pFd);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetSemaphoreWin32HandleKHR)(VkDevice device, const VkSemaphoreGetWin32HandleInfoKHR *pGetWin32HandleInfo, HANDLE *pHandle);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult(GLAD_API_PTR *PFN_vkGetSemaphoreZirconHandleFUCHSIA)(VkDevice                                     device,
                                                                      const VkSemaphoreGetZirconHandleInfoFUCHSIA *pGetZirconHandleInfo,
                                                                      zx_handle_t                                 *pZirconHandle);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkGetShaderBinaryDataEXT)(VkDevice device, VkShaderEXT shader, size_t *pDataSize, void *pData);
typedef VkResult(GLAD_API_PTR *PFN_vkGetShaderInfoAMD)(VkDevice              device,
                                                       VkPipeline            pipeline,
                                                       VkShaderStageFlagBits shaderStage,
                                                       VkShaderInfoTypeAMD   infoType,
                                                       size_t               *pInfoSize,
                                                       void                 *pInfo);
typedef void(GLAD_API_PTR *PFN_vkGetShaderModuleCreateInfoIdentifierEXT)(VkDevice                        device,
                                                                         const VkShaderModuleCreateInfo *pCreateInfo,
                                                                         VkShaderModuleIdentifierEXT    *pIdentifier);
typedef void(GLAD_API_PTR *PFN_vkGetShaderModuleIdentifierEXT)(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT *pIdentifier);
typedef VkResult(GLAD_API_PTR *PFN_vkGetSwapchainCounterEXT)(VkDevice                    device,
                                                             VkSwapchainKHR              swapchain,
                                                             VkSurfaceCounterFlagBitsEXT counter,
                                                             uint64_t                   *pCounterValue);
typedef VkResult(GLAD_API_PTR *PFN_vkGetSwapchainImagesKHR)(VkDevice       device,
                                                            VkSwapchainKHR swapchain,
                                                            uint32_t      *pSwapchainImageCount,
                                                            VkImage       *pSwapchainImages);
typedef VkResult(GLAD_API_PTR *PFN_vkGetSwapchainStatusKHR)(VkDevice device, VkSwapchainKHR swapchain);
typedef VkResult(GLAD_API_PTR *PFN_vkGetValidationCacheDataEXT)(VkDevice device, VkValidationCacheEXT validationCache, size_t *pDataSize, void *pData);
typedef VkResult(GLAD_API_PTR *PFN_vkGetVideoSessionMemoryRequirementsKHR)(VkDevice                             device,
                                                                           VkVideoSessionKHR                    videoSession,
                                                                           uint32_t                            *pMemoryRequirementsCount,
                                                                           VkVideoSessionMemoryRequirementsKHR *pMemoryRequirements);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkGetWinrtDisplayNV)(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, VkDisplayKHR *pDisplay);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkImportFenceFdKHR)(VkDevice device, const VkImportFenceFdInfoKHR *pImportFenceFdInfo);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkImportFenceWin32HandleKHR)(VkDevice device, const VkImportFenceWin32HandleInfoKHR *pImportFenceWin32HandleInfo);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkImportSemaphoreFdKHR)(VkDevice device, const VkImportSemaphoreFdInfoKHR *pImportSemaphoreFdInfo);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkImportSemaphoreWin32HandleKHR)(VkDevice                                   device,
                                                                    const VkImportSemaphoreWin32HandleInfoKHR *pImportSemaphoreWin32HandleInfo);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult(GLAD_API_PTR *PFN_vkImportSemaphoreZirconHandleFUCHSIA)(VkDevice                                        device,
                                                                         const VkImportSemaphoreZirconHandleInfoFUCHSIA *pImportSemaphoreZirconHandleInfo);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkInitializePerformanceApiINTEL)(VkDevice device, const VkInitializePerformanceApiInfoINTEL *pInitializeInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkInvalidateMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges);
typedef VkResult(GLAD_API_PTR *PFN_vkLatencySleepNV)(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepInfoNV *pSleepInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkMapMemory)(VkDevice         device,
                                                VkDeviceMemory   memory,
                                                VkDeviceSize     offset,
                                                VkDeviceSize     size,
                                                VkMemoryMapFlags flags,
                                                void           **ppData);
typedef VkResult(GLAD_API_PTR *PFN_vkMapMemory2KHR)(VkDevice device, const VkMemoryMapInfoKHR *pMemoryMapInfo, void **ppData);
typedef VkResult(GLAD_API_PTR *PFN_vkMergePipelineCaches)(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache *pSrcCaches);
typedef VkResult(GLAD_API_PTR *PFN_vkMergeValidationCachesEXT)(VkDevice                    device,
                                                               VkValidationCacheEXT        dstCache,
                                                               uint32_t                    srcCacheCount,
                                                               const VkValidationCacheEXT *pSrcCaches);
typedef void(GLAD_API_PTR *PFN_vkQueueBeginDebugUtilsLabelEXT)(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkQueueBindSparse)(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo *pBindInfo, VkFence fence);
typedef void(GLAD_API_PTR *PFN_vkQueueEndDebugUtilsLabelEXT)(VkQueue queue);
typedef void(GLAD_API_PTR *PFN_vkQueueInsertDebugUtilsLabelEXT)(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo);
typedef void(GLAD_API_PTR *PFN_vkQueueNotifyOutOfBandNV)(VkQueue queue, VkOutOfBandQueueTypeInfoNV pQueueTypeInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkQueuePresentKHR)(VkQueue queue, const VkPresentInfoKHR *pPresentInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkQueueSetPerformanceConfigurationINTEL)(VkQueue queue, VkPerformanceConfigurationINTEL configuration);
typedef VkResult(GLAD_API_PTR *PFN_vkQueueSubmit)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo *pSubmits, VkFence fence);
typedef VkResult(GLAD_API_PTR *PFN_vkQueueSubmit2)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence);
typedef VkResult(GLAD_API_PTR *PFN_vkQueueSubmit2KHR)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence);
typedef VkResult(GLAD_API_PTR *PFN_vkQueueWaitIdle)(VkQueue queue);
typedef VkResult(GLAD_API_PTR *PFN_vkRegisterDeviceEventEXT)(VkDevice                     device,
                                                             const VkDeviceEventInfoEXT  *pDeviceEventInfo,
                                                             const VkAllocationCallbacks *pAllocator,
                                                             VkFence                     *pFence);
typedef VkResult(GLAD_API_PTR *PFN_vkRegisterDisplayEventEXT)(VkDevice                     device,
                                                              VkDisplayKHR                 display,
                                                              const VkDisplayEventInfoEXT *pDisplayEventInfo,
                                                              const VkAllocationCallbacks *pAllocator,
                                                              VkFence                     *pFence);
typedef VkResult(GLAD_API_PTR *PFN_vkReleaseDisplayEXT)(VkPhysicalDevice physicalDevice, VkDisplayKHR display);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
typedef VkResult(GLAD_API_PTR *PFN_vkReleaseFullScreenExclusiveModeEXT)(VkDevice device, VkSwapchainKHR swapchain);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkReleasePerformanceConfigurationINTEL)(VkDevice device, VkPerformanceConfigurationINTEL configuration);
typedef void(GLAD_API_PTR *PFN_vkReleaseProfilingLockKHR)(VkDevice device);
typedef VkResult(GLAD_API_PTR *PFN_vkReleaseSwapchainImagesEXT)(VkDevice device, const VkReleaseSwapchainImagesInfoEXT *pReleaseInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkResetCommandBuffer)(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
typedef VkResult(GLAD_API_PTR *PFN_vkResetCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
typedef VkResult(GLAD_API_PTR *PFN_vkResetDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
typedef VkResult(GLAD_API_PTR *PFN_vkResetEvent)(VkDevice device, VkEvent event);
typedef VkResult(GLAD_API_PTR *PFN_vkResetFences)(VkDevice device, uint32_t fenceCount, const VkFence *pFences);
typedef void(GLAD_API_PTR *PFN_vkResetQueryPool)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
typedef void(GLAD_API_PTR *PFN_vkResetQueryPoolEXT)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult(GLAD_API_PTR *PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA)(VkDevice                              device,
                                                                                  VkBufferCollectionFUCHSIA             collection,
                                                                                  const VkBufferConstraintsInfoFUCHSIA *pBufferConstraintsInfo);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
typedef VkResult(GLAD_API_PTR *PFN_vkSetBufferCollectionImageConstraintsFUCHSIA)(VkDevice                             device,
                                                                                 VkBufferCollectionFUCHSIA            collection,
                                                                                 const VkImageConstraintsInfoFUCHSIA *pImageConstraintsInfo);

#endif
typedef VkResult(GLAD_API_PTR *PFN_vkSetDebugUtilsObjectNameEXT)(VkDevice device, const VkDebugUtilsObjectNameInfoEXT *pNameInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkSetDebugUtilsObjectTagEXT)(VkDevice device, const VkDebugUtilsObjectTagInfoEXT *pTagInfo);
typedef void(GLAD_API_PTR *PFN_vkSetDeviceMemoryPriorityEXT)(VkDevice device, VkDeviceMemory memory, float priority);
typedef VkResult(GLAD_API_PTR *PFN_vkSetEvent)(VkDevice device, VkEvent event);
typedef void(GLAD_API_PTR *PFN_vkSetHdrMetadataEXT)(VkDevice                device,
                                                    uint32_t                swapchainCount,
                                                    const VkSwapchainKHR   *pSwapchains,
                                                    const VkHdrMetadataEXT *pMetadata);
typedef void(GLAD_API_PTR *PFN_vkSetLatencyMarkerNV)(VkDevice device, VkSwapchainKHR swapchain, VkSetLatencyMarkerInfoNV *pLatencyMarkerInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkSetLatencySleepModeNV)(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepModeInfoNV *pSleepModeInfo);
typedef void(GLAD_API_PTR *PFN_vkSetLocalDimmingAMD)(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable);
typedef VkResult(GLAD_API_PTR *PFN_vkSetPrivateData)(VkDevice          device,
                                                     VkObjectType      objectType,
                                                     uint64_t          objectHandle,
                                                     VkPrivateDataSlot privateDataSlot,
                                                     uint64_t          data);
typedef VkResult(GLAD_API_PTR *PFN_vkSetPrivateDataEXT)(VkDevice          device,
                                                        VkObjectType      objectType,
                                                        uint64_t          objectHandle,
                                                        VkPrivateDataSlot privateDataSlot,
                                                        uint64_t          data);
typedef VkResult(GLAD_API_PTR *PFN_vkSignalSemaphore)(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkSignalSemaphoreKHR)(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo);
typedef void(GLAD_API_PTR *PFN_vkSubmitDebugUtilsMessageEXT)(VkInstance                                  instance,
                                                             VkDebugUtilsMessageSeverityFlagBitsEXT      messageSeverity,
                                                             VkDebugUtilsMessageTypeFlagsEXT             messageTypes,
                                                             const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData);
typedef VkResult(GLAD_API_PTR *PFN_vkTransitionImageLayoutEXT)(VkDevice                                  device,
                                                               uint32_t                                  transitionCount,
                                                               const VkHostImageLayoutTransitionInfoEXT *pTransitions);
typedef void(GLAD_API_PTR *PFN_vkTrimCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
typedef void(GLAD_API_PTR *PFN_vkTrimCommandPoolKHR)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
typedef void(GLAD_API_PTR *PFN_vkUninitializePerformanceApiINTEL)(VkDevice device);
typedef void(GLAD_API_PTR *PFN_vkUnmapMemory)(VkDevice device, VkDeviceMemory memory);
typedef VkResult(GLAD_API_PTR *PFN_vkUnmapMemory2KHR)(VkDevice device, const VkMemoryUnmapInfoKHR *pMemoryUnmapInfo);
typedef void(GLAD_API_PTR *PFN_vkUpdateDescriptorSetWithTemplate)(VkDevice                   device,
                                                                  VkDescriptorSet            descriptorSet,
                                                                  VkDescriptorUpdateTemplate descriptorUpdateTemplate,
                                                                  const void                *pData);
typedef void(GLAD_API_PTR *PFN_vkUpdateDescriptorSetWithTemplateKHR)(VkDevice                   device,
                                                                     VkDescriptorSet            descriptorSet,
                                                                     VkDescriptorUpdateTemplate descriptorUpdateTemplate,
                                                                     const void                *pData);
typedef void(GLAD_API_PTR *PFN_vkUpdateDescriptorSets)(VkDevice                    device,
                                                       uint32_t                    descriptorWriteCount,
                                                       const VkWriteDescriptorSet *pDescriptorWrites,
                                                       uint32_t                    descriptorCopyCount,
                                                       const VkCopyDescriptorSet  *pDescriptorCopies);
typedef VkResult(GLAD_API_PTR *PFN_vkUpdateVideoSessionParametersKHR)(VkDevice                                     device,
                                                                      VkVideoSessionParametersKHR                  videoSessionParameters,
                                                                      const VkVideoSessionParametersUpdateInfoKHR *pUpdateInfo);
typedef VkResult(GLAD_API_PTR *PFN_vkWaitForFences)(VkDevice device, uint32_t fenceCount, const VkFence *pFences, VkBool32 waitAll, uint64_t timeout);
typedef VkResult(GLAD_API_PTR *PFN_vkWaitForPresentKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout);
typedef VkResult(GLAD_API_PTR *PFN_vkWaitSemaphores)(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout);
typedef VkResult(GLAD_API_PTR *PFN_vkWaitSemaphoresKHR)(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout);
typedef VkResult(GLAD_API_PTR *PFN_vkWriteAccelerationStructuresPropertiesKHR)(VkDevice                          device,
                                                                               uint32_t                          accelerationStructureCount,
                                                                               const VkAccelerationStructureKHR *pAccelerationStructures,
                                                                               VkQueryType                       queryType,
                                                                               size_t                            dataSize,
                                                                               void                             *pData,
                                                                               size_t                            stride);
typedef VkResult(GLAD_API_PTR *PFN_vkWriteMicromapsPropertiesEXT)(VkDevice             device,
                                                                  uint32_t             micromapCount,
                                                                  const VkMicromapEXT *pMicromaps,
                                                                  VkQueryType          queryType,
                                                                  size_t               dataSize,
                                                                  void                *pData,
                                                                  size_t               stride);

GLAD_API_CALL PFN_vkAcquireDrmDisplayEXT glad_vkAcquireDrmDisplayEXT;
GLAD_API_CALL PFN_vkAcquireDrmDisplayEXT glad_debug_vkAcquireDrmDisplayEXT;
#define vkAcquireDrmDisplayEXT glad_debug_vkAcquireDrmDisplayEXT
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkAcquireFullScreenExclusiveModeEXT glad_vkAcquireFullScreenExclusiveModeEXT;
GLAD_API_CALL PFN_vkAcquireFullScreenExclusiveModeEXT glad_debug_vkAcquireFullScreenExclusiveModeEXT;
	#define vkAcquireFullScreenExclusiveModeEXT glad_debug_vkAcquireFullScreenExclusiveModeEXT

#endif
GLAD_API_CALL PFN_vkAcquireNextImage2KHR glad_vkAcquireNextImage2KHR;
GLAD_API_CALL PFN_vkAcquireNextImage2KHR glad_debug_vkAcquireNextImage2KHR;
#define vkAcquireNextImage2KHR glad_debug_vkAcquireNextImage2KHR
GLAD_API_CALL PFN_vkAcquireNextImageKHR glad_vkAcquireNextImageKHR;
GLAD_API_CALL PFN_vkAcquireNextImageKHR glad_debug_vkAcquireNextImageKHR;
#define vkAcquireNextImageKHR glad_debug_vkAcquireNextImageKHR
GLAD_API_CALL PFN_vkAcquirePerformanceConfigurationINTEL glad_vkAcquirePerformanceConfigurationINTEL;
GLAD_API_CALL PFN_vkAcquirePerformanceConfigurationINTEL glad_debug_vkAcquirePerformanceConfigurationINTEL;
#define vkAcquirePerformanceConfigurationINTEL glad_debug_vkAcquirePerformanceConfigurationINTEL
GLAD_API_CALL PFN_vkAcquireProfilingLockKHR glad_vkAcquireProfilingLockKHR;
GLAD_API_CALL PFN_vkAcquireProfilingLockKHR glad_debug_vkAcquireProfilingLockKHR;
#define vkAcquireProfilingLockKHR glad_debug_vkAcquireProfilingLockKHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkAcquireWinrtDisplayNV glad_vkAcquireWinrtDisplayNV;
GLAD_API_CALL PFN_vkAcquireWinrtDisplayNV glad_debug_vkAcquireWinrtDisplayNV;
	#define vkAcquireWinrtDisplayNV glad_debug_vkAcquireWinrtDisplayNV

#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
GLAD_API_CALL PFN_vkAcquireXlibDisplayEXT glad_vkAcquireXlibDisplayEXT;
GLAD_API_CALL PFN_vkAcquireXlibDisplayEXT glad_debug_vkAcquireXlibDisplayEXT;
	#define vkAcquireXlibDisplayEXT glad_debug_vkAcquireXlibDisplayEXT

#endif
GLAD_API_CALL PFN_vkAllocateCommandBuffers glad_vkAllocateCommandBuffers;
GLAD_API_CALL PFN_vkAllocateCommandBuffers glad_debug_vkAllocateCommandBuffers;
#define vkAllocateCommandBuffers glad_debug_vkAllocateCommandBuffers
GLAD_API_CALL PFN_vkAllocateDescriptorSets glad_vkAllocateDescriptorSets;
GLAD_API_CALL PFN_vkAllocateDescriptorSets glad_debug_vkAllocateDescriptorSets;
#define vkAllocateDescriptorSets glad_debug_vkAllocateDescriptorSets
GLAD_API_CALL PFN_vkAllocateMemory glad_vkAllocateMemory;
GLAD_API_CALL PFN_vkAllocateMemory glad_debug_vkAllocateMemory;
#define vkAllocateMemory glad_debug_vkAllocateMemory
GLAD_API_CALL PFN_vkBeginCommandBuffer glad_vkBeginCommandBuffer;
GLAD_API_CALL PFN_vkBeginCommandBuffer glad_debug_vkBeginCommandBuffer;
#define vkBeginCommandBuffer glad_debug_vkBeginCommandBuffer
GLAD_API_CALL PFN_vkBindAccelerationStructureMemoryNV glad_vkBindAccelerationStructureMemoryNV;
GLAD_API_CALL PFN_vkBindAccelerationStructureMemoryNV glad_debug_vkBindAccelerationStructureMemoryNV;
#define vkBindAccelerationStructureMemoryNV glad_debug_vkBindAccelerationStructureMemoryNV
GLAD_API_CALL PFN_vkBindBufferMemory glad_vkBindBufferMemory;
GLAD_API_CALL PFN_vkBindBufferMemory glad_debug_vkBindBufferMemory;
#define vkBindBufferMemory glad_debug_vkBindBufferMemory
GLAD_API_CALL PFN_vkBindBufferMemory2 glad_vkBindBufferMemory2;
GLAD_API_CALL PFN_vkBindBufferMemory2 glad_debug_vkBindBufferMemory2;
#define vkBindBufferMemory2 glad_debug_vkBindBufferMemory2
GLAD_API_CALL PFN_vkBindBufferMemory2KHR glad_vkBindBufferMemory2KHR;
GLAD_API_CALL PFN_vkBindBufferMemory2KHR glad_debug_vkBindBufferMemory2KHR;
#define vkBindBufferMemory2KHR glad_debug_vkBindBufferMemory2KHR
GLAD_API_CALL PFN_vkBindImageMemory glad_vkBindImageMemory;
GLAD_API_CALL PFN_vkBindImageMemory glad_debug_vkBindImageMemory;
#define vkBindImageMemory glad_debug_vkBindImageMemory
GLAD_API_CALL PFN_vkBindImageMemory2 glad_vkBindImageMemory2;
GLAD_API_CALL PFN_vkBindImageMemory2 glad_debug_vkBindImageMemory2;
#define vkBindImageMemory2 glad_debug_vkBindImageMemory2
GLAD_API_CALL PFN_vkBindImageMemory2KHR glad_vkBindImageMemory2KHR;
GLAD_API_CALL PFN_vkBindImageMemory2KHR glad_debug_vkBindImageMemory2KHR;
#define vkBindImageMemory2KHR glad_debug_vkBindImageMemory2KHR
GLAD_API_CALL PFN_vkBindOpticalFlowSessionImageNV glad_vkBindOpticalFlowSessionImageNV;
GLAD_API_CALL PFN_vkBindOpticalFlowSessionImageNV glad_debug_vkBindOpticalFlowSessionImageNV;
#define vkBindOpticalFlowSessionImageNV glad_debug_vkBindOpticalFlowSessionImageNV
GLAD_API_CALL PFN_vkBindVideoSessionMemoryKHR glad_vkBindVideoSessionMemoryKHR;
GLAD_API_CALL PFN_vkBindVideoSessionMemoryKHR glad_debug_vkBindVideoSessionMemoryKHR;
#define vkBindVideoSessionMemoryKHR glad_debug_vkBindVideoSessionMemoryKHR
GLAD_API_CALL PFN_vkBuildAccelerationStructuresKHR glad_vkBuildAccelerationStructuresKHR;
GLAD_API_CALL PFN_vkBuildAccelerationStructuresKHR glad_debug_vkBuildAccelerationStructuresKHR;
#define vkBuildAccelerationStructuresKHR glad_debug_vkBuildAccelerationStructuresKHR
GLAD_API_CALL PFN_vkBuildMicromapsEXT glad_vkBuildMicromapsEXT;
GLAD_API_CALL PFN_vkBuildMicromapsEXT glad_debug_vkBuildMicromapsEXT;
#define vkBuildMicromapsEXT glad_debug_vkBuildMicromapsEXT
GLAD_API_CALL PFN_vkCmdBeginConditionalRenderingEXT glad_vkCmdBeginConditionalRenderingEXT;
GLAD_API_CALL PFN_vkCmdBeginConditionalRenderingEXT glad_debug_vkCmdBeginConditionalRenderingEXT;
#define vkCmdBeginConditionalRenderingEXT glad_debug_vkCmdBeginConditionalRenderingEXT
GLAD_API_CALL PFN_vkCmdBeginDebugUtilsLabelEXT glad_vkCmdBeginDebugUtilsLabelEXT;
GLAD_API_CALL PFN_vkCmdBeginDebugUtilsLabelEXT glad_debug_vkCmdBeginDebugUtilsLabelEXT;
#define vkCmdBeginDebugUtilsLabelEXT glad_debug_vkCmdBeginDebugUtilsLabelEXT
GLAD_API_CALL PFN_vkCmdBeginQuery glad_vkCmdBeginQuery;
GLAD_API_CALL PFN_vkCmdBeginQuery glad_debug_vkCmdBeginQuery;
#define vkCmdBeginQuery glad_debug_vkCmdBeginQuery
GLAD_API_CALL PFN_vkCmdBeginQueryIndexedEXT glad_vkCmdBeginQueryIndexedEXT;
GLAD_API_CALL PFN_vkCmdBeginQueryIndexedEXT glad_debug_vkCmdBeginQueryIndexedEXT;
#define vkCmdBeginQueryIndexedEXT glad_debug_vkCmdBeginQueryIndexedEXT
GLAD_API_CALL PFN_vkCmdBeginRenderPass glad_vkCmdBeginRenderPass;
GLAD_API_CALL PFN_vkCmdBeginRenderPass glad_debug_vkCmdBeginRenderPass;
#define vkCmdBeginRenderPass glad_debug_vkCmdBeginRenderPass
GLAD_API_CALL PFN_vkCmdBeginRenderPass2 glad_vkCmdBeginRenderPass2;
GLAD_API_CALL PFN_vkCmdBeginRenderPass2 glad_debug_vkCmdBeginRenderPass2;
#define vkCmdBeginRenderPass2 glad_debug_vkCmdBeginRenderPass2
GLAD_API_CALL PFN_vkCmdBeginRenderPass2KHR glad_vkCmdBeginRenderPass2KHR;
GLAD_API_CALL PFN_vkCmdBeginRenderPass2KHR glad_debug_vkCmdBeginRenderPass2KHR;
#define vkCmdBeginRenderPass2KHR glad_debug_vkCmdBeginRenderPass2KHR
GLAD_API_CALL PFN_vkCmdBeginRendering glad_vkCmdBeginRendering;
GLAD_API_CALL PFN_vkCmdBeginRendering glad_debug_vkCmdBeginRendering;
#define vkCmdBeginRendering glad_debug_vkCmdBeginRendering
GLAD_API_CALL PFN_vkCmdBeginRenderingKHR glad_vkCmdBeginRenderingKHR;
GLAD_API_CALL PFN_vkCmdBeginRenderingKHR glad_debug_vkCmdBeginRenderingKHR;
#define vkCmdBeginRenderingKHR glad_debug_vkCmdBeginRenderingKHR
GLAD_API_CALL PFN_vkCmdBeginTransformFeedbackEXT glad_vkCmdBeginTransformFeedbackEXT;
GLAD_API_CALL PFN_vkCmdBeginTransformFeedbackEXT glad_debug_vkCmdBeginTransformFeedbackEXT;
#define vkCmdBeginTransformFeedbackEXT glad_debug_vkCmdBeginTransformFeedbackEXT
GLAD_API_CALL PFN_vkCmdBeginVideoCodingKHR glad_vkCmdBeginVideoCodingKHR;
GLAD_API_CALL PFN_vkCmdBeginVideoCodingKHR glad_debug_vkCmdBeginVideoCodingKHR;
#define vkCmdBeginVideoCodingKHR glad_debug_vkCmdBeginVideoCodingKHR
GLAD_API_CALL PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT glad_vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
GLAD_API_CALL PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT glad_debug_vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
#define vkCmdBindDescriptorBufferEmbeddedSamplersEXT glad_debug_vkCmdBindDescriptorBufferEmbeddedSamplersEXT
GLAD_API_CALL PFN_vkCmdBindDescriptorBuffersEXT glad_vkCmdBindDescriptorBuffersEXT;
GLAD_API_CALL PFN_vkCmdBindDescriptorBuffersEXT glad_debug_vkCmdBindDescriptorBuffersEXT;
#define vkCmdBindDescriptorBuffersEXT glad_debug_vkCmdBindDescriptorBuffersEXT
GLAD_API_CALL PFN_vkCmdBindDescriptorSets glad_vkCmdBindDescriptorSets;
GLAD_API_CALL PFN_vkCmdBindDescriptorSets glad_debug_vkCmdBindDescriptorSets;
#define vkCmdBindDescriptorSets glad_debug_vkCmdBindDescriptorSets
GLAD_API_CALL PFN_vkCmdBindIndexBuffer glad_vkCmdBindIndexBuffer;
GLAD_API_CALL PFN_vkCmdBindIndexBuffer glad_debug_vkCmdBindIndexBuffer;
#define vkCmdBindIndexBuffer glad_debug_vkCmdBindIndexBuffer
GLAD_API_CALL PFN_vkCmdBindIndexBuffer2KHR glad_vkCmdBindIndexBuffer2KHR;
GLAD_API_CALL PFN_vkCmdBindIndexBuffer2KHR glad_debug_vkCmdBindIndexBuffer2KHR;
#define vkCmdBindIndexBuffer2KHR glad_debug_vkCmdBindIndexBuffer2KHR
GLAD_API_CALL PFN_vkCmdBindInvocationMaskHUAWEI glad_vkCmdBindInvocationMaskHUAWEI;
GLAD_API_CALL PFN_vkCmdBindInvocationMaskHUAWEI glad_debug_vkCmdBindInvocationMaskHUAWEI;
#define vkCmdBindInvocationMaskHUAWEI glad_debug_vkCmdBindInvocationMaskHUAWEI
GLAD_API_CALL PFN_vkCmdBindPipeline glad_vkCmdBindPipeline;
GLAD_API_CALL PFN_vkCmdBindPipeline glad_debug_vkCmdBindPipeline;
#define vkCmdBindPipeline glad_debug_vkCmdBindPipeline
GLAD_API_CALL PFN_vkCmdBindPipelineShaderGroupNV glad_vkCmdBindPipelineShaderGroupNV;
GLAD_API_CALL PFN_vkCmdBindPipelineShaderGroupNV glad_debug_vkCmdBindPipelineShaderGroupNV;
#define vkCmdBindPipelineShaderGroupNV glad_debug_vkCmdBindPipelineShaderGroupNV
GLAD_API_CALL PFN_vkCmdBindShadersEXT glad_vkCmdBindShadersEXT;
GLAD_API_CALL PFN_vkCmdBindShadersEXT glad_debug_vkCmdBindShadersEXT;
#define vkCmdBindShadersEXT glad_debug_vkCmdBindShadersEXT
GLAD_API_CALL PFN_vkCmdBindShadingRateImageNV glad_vkCmdBindShadingRateImageNV;
GLAD_API_CALL PFN_vkCmdBindShadingRateImageNV glad_debug_vkCmdBindShadingRateImageNV;
#define vkCmdBindShadingRateImageNV glad_debug_vkCmdBindShadingRateImageNV
GLAD_API_CALL PFN_vkCmdBindTransformFeedbackBuffersEXT glad_vkCmdBindTransformFeedbackBuffersEXT;
GLAD_API_CALL PFN_vkCmdBindTransformFeedbackBuffersEXT glad_debug_vkCmdBindTransformFeedbackBuffersEXT;
#define vkCmdBindTransformFeedbackBuffersEXT glad_debug_vkCmdBindTransformFeedbackBuffersEXT
GLAD_API_CALL PFN_vkCmdBindVertexBuffers glad_vkCmdBindVertexBuffers;
GLAD_API_CALL PFN_vkCmdBindVertexBuffers glad_debug_vkCmdBindVertexBuffers;
#define vkCmdBindVertexBuffers glad_debug_vkCmdBindVertexBuffers
GLAD_API_CALL PFN_vkCmdBindVertexBuffers2 glad_vkCmdBindVertexBuffers2;
GLAD_API_CALL PFN_vkCmdBindVertexBuffers2 glad_debug_vkCmdBindVertexBuffers2;
#define vkCmdBindVertexBuffers2 glad_debug_vkCmdBindVertexBuffers2
GLAD_API_CALL PFN_vkCmdBindVertexBuffers2EXT glad_vkCmdBindVertexBuffers2EXT;
GLAD_API_CALL PFN_vkCmdBindVertexBuffers2EXT glad_debug_vkCmdBindVertexBuffers2EXT;
#define vkCmdBindVertexBuffers2EXT glad_debug_vkCmdBindVertexBuffers2EXT
GLAD_API_CALL PFN_vkCmdBlitImage glad_vkCmdBlitImage;
GLAD_API_CALL PFN_vkCmdBlitImage glad_debug_vkCmdBlitImage;
#define vkCmdBlitImage glad_debug_vkCmdBlitImage
GLAD_API_CALL PFN_vkCmdBlitImage2 glad_vkCmdBlitImage2;
GLAD_API_CALL PFN_vkCmdBlitImage2 glad_debug_vkCmdBlitImage2;
#define vkCmdBlitImage2 glad_debug_vkCmdBlitImage2
GLAD_API_CALL PFN_vkCmdBlitImage2KHR glad_vkCmdBlitImage2KHR;
GLAD_API_CALL PFN_vkCmdBlitImage2KHR glad_debug_vkCmdBlitImage2KHR;
#define vkCmdBlitImage2KHR glad_debug_vkCmdBlitImage2KHR
GLAD_API_CALL PFN_vkCmdBuildAccelerationStructureNV glad_vkCmdBuildAccelerationStructureNV;
GLAD_API_CALL PFN_vkCmdBuildAccelerationStructureNV glad_debug_vkCmdBuildAccelerationStructureNV;
#define vkCmdBuildAccelerationStructureNV glad_debug_vkCmdBuildAccelerationStructureNV
GLAD_API_CALL PFN_vkCmdBuildAccelerationStructuresIndirectKHR glad_vkCmdBuildAccelerationStructuresIndirectKHR;
GLAD_API_CALL PFN_vkCmdBuildAccelerationStructuresIndirectKHR glad_debug_vkCmdBuildAccelerationStructuresIndirectKHR;
#define vkCmdBuildAccelerationStructuresIndirectKHR glad_debug_vkCmdBuildAccelerationStructuresIndirectKHR
GLAD_API_CALL PFN_vkCmdBuildAccelerationStructuresKHR glad_vkCmdBuildAccelerationStructuresKHR;
GLAD_API_CALL PFN_vkCmdBuildAccelerationStructuresKHR glad_debug_vkCmdBuildAccelerationStructuresKHR;
#define vkCmdBuildAccelerationStructuresKHR glad_debug_vkCmdBuildAccelerationStructuresKHR
GLAD_API_CALL PFN_vkCmdBuildMicromapsEXT glad_vkCmdBuildMicromapsEXT;
GLAD_API_CALL PFN_vkCmdBuildMicromapsEXT glad_debug_vkCmdBuildMicromapsEXT;
#define vkCmdBuildMicromapsEXT glad_debug_vkCmdBuildMicromapsEXT
GLAD_API_CALL PFN_vkCmdClearAttachments glad_vkCmdClearAttachments;
GLAD_API_CALL PFN_vkCmdClearAttachments glad_debug_vkCmdClearAttachments;
#define vkCmdClearAttachments glad_debug_vkCmdClearAttachments
GLAD_API_CALL PFN_vkCmdClearColorImage glad_vkCmdClearColorImage;
GLAD_API_CALL PFN_vkCmdClearColorImage glad_debug_vkCmdClearColorImage;
#define vkCmdClearColorImage glad_debug_vkCmdClearColorImage
GLAD_API_CALL PFN_vkCmdClearDepthStencilImage glad_vkCmdClearDepthStencilImage;
GLAD_API_CALL PFN_vkCmdClearDepthStencilImage glad_debug_vkCmdClearDepthStencilImage;
#define vkCmdClearDepthStencilImage glad_debug_vkCmdClearDepthStencilImage
GLAD_API_CALL PFN_vkCmdControlVideoCodingKHR glad_vkCmdControlVideoCodingKHR;
GLAD_API_CALL PFN_vkCmdControlVideoCodingKHR glad_debug_vkCmdControlVideoCodingKHR;
#define vkCmdControlVideoCodingKHR glad_debug_vkCmdControlVideoCodingKHR
GLAD_API_CALL PFN_vkCmdCopyAccelerationStructureKHR glad_vkCmdCopyAccelerationStructureKHR;
GLAD_API_CALL PFN_vkCmdCopyAccelerationStructureKHR glad_debug_vkCmdCopyAccelerationStructureKHR;
#define vkCmdCopyAccelerationStructureKHR glad_debug_vkCmdCopyAccelerationStructureKHR
GLAD_API_CALL PFN_vkCmdCopyAccelerationStructureNV glad_vkCmdCopyAccelerationStructureNV;
GLAD_API_CALL PFN_vkCmdCopyAccelerationStructureNV glad_debug_vkCmdCopyAccelerationStructureNV;
#define vkCmdCopyAccelerationStructureNV glad_debug_vkCmdCopyAccelerationStructureNV
GLAD_API_CALL PFN_vkCmdCopyAccelerationStructureToMemoryKHR glad_vkCmdCopyAccelerationStructureToMemoryKHR;
GLAD_API_CALL PFN_vkCmdCopyAccelerationStructureToMemoryKHR glad_debug_vkCmdCopyAccelerationStructureToMemoryKHR;
#define vkCmdCopyAccelerationStructureToMemoryKHR glad_debug_vkCmdCopyAccelerationStructureToMemoryKHR
GLAD_API_CALL PFN_vkCmdCopyBuffer glad_vkCmdCopyBuffer;
GLAD_API_CALL PFN_vkCmdCopyBuffer glad_debug_vkCmdCopyBuffer;
#define vkCmdCopyBuffer glad_debug_vkCmdCopyBuffer
GLAD_API_CALL PFN_vkCmdCopyBuffer2 glad_vkCmdCopyBuffer2;
GLAD_API_CALL PFN_vkCmdCopyBuffer2 glad_debug_vkCmdCopyBuffer2;
#define vkCmdCopyBuffer2 glad_debug_vkCmdCopyBuffer2
GLAD_API_CALL PFN_vkCmdCopyBuffer2KHR glad_vkCmdCopyBuffer2KHR;
GLAD_API_CALL PFN_vkCmdCopyBuffer2KHR glad_debug_vkCmdCopyBuffer2KHR;
#define vkCmdCopyBuffer2KHR glad_debug_vkCmdCopyBuffer2KHR
GLAD_API_CALL PFN_vkCmdCopyBufferToImage glad_vkCmdCopyBufferToImage;
GLAD_API_CALL PFN_vkCmdCopyBufferToImage glad_debug_vkCmdCopyBufferToImage;
#define vkCmdCopyBufferToImage glad_debug_vkCmdCopyBufferToImage
GLAD_API_CALL PFN_vkCmdCopyBufferToImage2 glad_vkCmdCopyBufferToImage2;
GLAD_API_CALL PFN_vkCmdCopyBufferToImage2 glad_debug_vkCmdCopyBufferToImage2;
#define vkCmdCopyBufferToImage2 glad_debug_vkCmdCopyBufferToImage2
GLAD_API_CALL PFN_vkCmdCopyBufferToImage2KHR glad_vkCmdCopyBufferToImage2KHR;
GLAD_API_CALL PFN_vkCmdCopyBufferToImage2KHR glad_debug_vkCmdCopyBufferToImage2KHR;
#define vkCmdCopyBufferToImage2KHR glad_debug_vkCmdCopyBufferToImage2KHR
GLAD_API_CALL PFN_vkCmdCopyImage glad_vkCmdCopyImage;
GLAD_API_CALL PFN_vkCmdCopyImage glad_debug_vkCmdCopyImage;
#define vkCmdCopyImage glad_debug_vkCmdCopyImage
GLAD_API_CALL PFN_vkCmdCopyImage2 glad_vkCmdCopyImage2;
GLAD_API_CALL PFN_vkCmdCopyImage2 glad_debug_vkCmdCopyImage2;
#define vkCmdCopyImage2 glad_debug_vkCmdCopyImage2
GLAD_API_CALL PFN_vkCmdCopyImage2KHR glad_vkCmdCopyImage2KHR;
GLAD_API_CALL PFN_vkCmdCopyImage2KHR glad_debug_vkCmdCopyImage2KHR;
#define vkCmdCopyImage2KHR glad_debug_vkCmdCopyImage2KHR
GLAD_API_CALL PFN_vkCmdCopyImageToBuffer glad_vkCmdCopyImageToBuffer;
GLAD_API_CALL PFN_vkCmdCopyImageToBuffer glad_debug_vkCmdCopyImageToBuffer;
#define vkCmdCopyImageToBuffer glad_debug_vkCmdCopyImageToBuffer
GLAD_API_CALL PFN_vkCmdCopyImageToBuffer2 glad_vkCmdCopyImageToBuffer2;
GLAD_API_CALL PFN_vkCmdCopyImageToBuffer2 glad_debug_vkCmdCopyImageToBuffer2;
#define vkCmdCopyImageToBuffer2 glad_debug_vkCmdCopyImageToBuffer2
GLAD_API_CALL PFN_vkCmdCopyImageToBuffer2KHR glad_vkCmdCopyImageToBuffer2KHR;
GLAD_API_CALL PFN_vkCmdCopyImageToBuffer2KHR glad_debug_vkCmdCopyImageToBuffer2KHR;
#define vkCmdCopyImageToBuffer2KHR glad_debug_vkCmdCopyImageToBuffer2KHR
GLAD_API_CALL PFN_vkCmdCopyMemoryIndirectNV glad_vkCmdCopyMemoryIndirectNV;
GLAD_API_CALL PFN_vkCmdCopyMemoryIndirectNV glad_debug_vkCmdCopyMemoryIndirectNV;
#define vkCmdCopyMemoryIndirectNV glad_debug_vkCmdCopyMemoryIndirectNV
GLAD_API_CALL PFN_vkCmdCopyMemoryToAccelerationStructureKHR glad_vkCmdCopyMemoryToAccelerationStructureKHR;
GLAD_API_CALL PFN_vkCmdCopyMemoryToAccelerationStructureKHR glad_debug_vkCmdCopyMemoryToAccelerationStructureKHR;
#define vkCmdCopyMemoryToAccelerationStructureKHR glad_debug_vkCmdCopyMemoryToAccelerationStructureKHR
GLAD_API_CALL PFN_vkCmdCopyMemoryToImageIndirectNV glad_vkCmdCopyMemoryToImageIndirectNV;
GLAD_API_CALL PFN_vkCmdCopyMemoryToImageIndirectNV glad_debug_vkCmdCopyMemoryToImageIndirectNV;
#define vkCmdCopyMemoryToImageIndirectNV glad_debug_vkCmdCopyMemoryToImageIndirectNV
GLAD_API_CALL PFN_vkCmdCopyMemoryToMicromapEXT glad_vkCmdCopyMemoryToMicromapEXT;
GLAD_API_CALL PFN_vkCmdCopyMemoryToMicromapEXT glad_debug_vkCmdCopyMemoryToMicromapEXT;
#define vkCmdCopyMemoryToMicromapEXT glad_debug_vkCmdCopyMemoryToMicromapEXT
GLAD_API_CALL PFN_vkCmdCopyMicromapEXT glad_vkCmdCopyMicromapEXT;
GLAD_API_CALL PFN_vkCmdCopyMicromapEXT glad_debug_vkCmdCopyMicromapEXT;
#define vkCmdCopyMicromapEXT glad_debug_vkCmdCopyMicromapEXT
GLAD_API_CALL PFN_vkCmdCopyMicromapToMemoryEXT glad_vkCmdCopyMicromapToMemoryEXT;
GLAD_API_CALL PFN_vkCmdCopyMicromapToMemoryEXT glad_debug_vkCmdCopyMicromapToMemoryEXT;
#define vkCmdCopyMicromapToMemoryEXT glad_debug_vkCmdCopyMicromapToMemoryEXT
GLAD_API_CALL PFN_vkCmdCopyQueryPoolResults glad_vkCmdCopyQueryPoolResults;
GLAD_API_CALL PFN_vkCmdCopyQueryPoolResults glad_debug_vkCmdCopyQueryPoolResults;
#define vkCmdCopyQueryPoolResults glad_debug_vkCmdCopyQueryPoolResults
GLAD_API_CALL PFN_vkCmdCuLaunchKernelNVX glad_vkCmdCuLaunchKernelNVX;
GLAD_API_CALL PFN_vkCmdCuLaunchKernelNVX glad_debug_vkCmdCuLaunchKernelNVX;
#define vkCmdCuLaunchKernelNVX glad_debug_vkCmdCuLaunchKernelNVX
GLAD_API_CALL PFN_vkCmdDebugMarkerBeginEXT glad_vkCmdDebugMarkerBeginEXT;
GLAD_API_CALL PFN_vkCmdDebugMarkerBeginEXT glad_debug_vkCmdDebugMarkerBeginEXT;
#define vkCmdDebugMarkerBeginEXT glad_debug_vkCmdDebugMarkerBeginEXT
GLAD_API_CALL PFN_vkCmdDebugMarkerEndEXT glad_vkCmdDebugMarkerEndEXT;
GLAD_API_CALL PFN_vkCmdDebugMarkerEndEXT glad_debug_vkCmdDebugMarkerEndEXT;
#define vkCmdDebugMarkerEndEXT glad_debug_vkCmdDebugMarkerEndEXT
GLAD_API_CALL PFN_vkCmdDebugMarkerInsertEXT glad_vkCmdDebugMarkerInsertEXT;
GLAD_API_CALL PFN_vkCmdDebugMarkerInsertEXT glad_debug_vkCmdDebugMarkerInsertEXT;
#define vkCmdDebugMarkerInsertEXT glad_debug_vkCmdDebugMarkerInsertEXT
GLAD_API_CALL PFN_vkCmdDecodeVideoKHR glad_vkCmdDecodeVideoKHR;
GLAD_API_CALL PFN_vkCmdDecodeVideoKHR glad_debug_vkCmdDecodeVideoKHR;
#define vkCmdDecodeVideoKHR glad_debug_vkCmdDecodeVideoKHR
GLAD_API_CALL PFN_vkCmdDecompressMemoryIndirectCountNV glad_vkCmdDecompressMemoryIndirectCountNV;
GLAD_API_CALL PFN_vkCmdDecompressMemoryIndirectCountNV glad_debug_vkCmdDecompressMemoryIndirectCountNV;
#define vkCmdDecompressMemoryIndirectCountNV glad_debug_vkCmdDecompressMemoryIndirectCountNV
GLAD_API_CALL PFN_vkCmdDecompressMemoryNV glad_vkCmdDecompressMemoryNV;
GLAD_API_CALL PFN_vkCmdDecompressMemoryNV glad_debug_vkCmdDecompressMemoryNV;
#define vkCmdDecompressMemoryNV glad_debug_vkCmdDecompressMemoryNV
GLAD_API_CALL PFN_vkCmdDispatch glad_vkCmdDispatch;
GLAD_API_CALL PFN_vkCmdDispatch glad_debug_vkCmdDispatch;
#define vkCmdDispatch glad_debug_vkCmdDispatch
GLAD_API_CALL PFN_vkCmdDispatchBase glad_vkCmdDispatchBase;
GLAD_API_CALL PFN_vkCmdDispatchBase glad_debug_vkCmdDispatchBase;
#define vkCmdDispatchBase glad_debug_vkCmdDispatchBase
GLAD_API_CALL PFN_vkCmdDispatchBaseKHR glad_vkCmdDispatchBaseKHR;
GLAD_API_CALL PFN_vkCmdDispatchBaseKHR glad_debug_vkCmdDispatchBaseKHR;
#define vkCmdDispatchBaseKHR glad_debug_vkCmdDispatchBaseKHR
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkCmdDispatchGraphAMDX glad_vkCmdDispatchGraphAMDX;
GLAD_API_CALL PFN_vkCmdDispatchGraphAMDX glad_debug_vkCmdDispatchGraphAMDX;
	#define vkCmdDispatchGraphAMDX glad_debug_vkCmdDispatchGraphAMDX

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkCmdDispatchGraphIndirectAMDX glad_vkCmdDispatchGraphIndirectAMDX;
GLAD_API_CALL PFN_vkCmdDispatchGraphIndirectAMDX glad_debug_vkCmdDispatchGraphIndirectAMDX;
	#define vkCmdDispatchGraphIndirectAMDX glad_debug_vkCmdDispatchGraphIndirectAMDX

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkCmdDispatchGraphIndirectCountAMDX glad_vkCmdDispatchGraphIndirectCountAMDX;
GLAD_API_CALL PFN_vkCmdDispatchGraphIndirectCountAMDX glad_debug_vkCmdDispatchGraphIndirectCountAMDX;
	#define vkCmdDispatchGraphIndirectCountAMDX glad_debug_vkCmdDispatchGraphIndirectCountAMDX

#endif
GLAD_API_CALL PFN_vkCmdDispatchIndirect glad_vkCmdDispatchIndirect;
GLAD_API_CALL PFN_vkCmdDispatchIndirect glad_debug_vkCmdDispatchIndirect;
#define vkCmdDispatchIndirect glad_debug_vkCmdDispatchIndirect
GLAD_API_CALL PFN_vkCmdDraw glad_vkCmdDraw;
GLAD_API_CALL PFN_vkCmdDraw glad_debug_vkCmdDraw;
#define vkCmdDraw glad_debug_vkCmdDraw
GLAD_API_CALL PFN_vkCmdDrawClusterHUAWEI glad_vkCmdDrawClusterHUAWEI;
GLAD_API_CALL PFN_vkCmdDrawClusterHUAWEI glad_debug_vkCmdDrawClusterHUAWEI;
#define vkCmdDrawClusterHUAWEI glad_debug_vkCmdDrawClusterHUAWEI
GLAD_API_CALL PFN_vkCmdDrawClusterIndirectHUAWEI glad_vkCmdDrawClusterIndirectHUAWEI;
GLAD_API_CALL PFN_vkCmdDrawClusterIndirectHUAWEI glad_debug_vkCmdDrawClusterIndirectHUAWEI;
#define vkCmdDrawClusterIndirectHUAWEI glad_debug_vkCmdDrawClusterIndirectHUAWEI
GLAD_API_CALL PFN_vkCmdDrawIndexed glad_vkCmdDrawIndexed;
GLAD_API_CALL PFN_vkCmdDrawIndexed glad_debug_vkCmdDrawIndexed;
#define vkCmdDrawIndexed glad_debug_vkCmdDrawIndexed
GLAD_API_CALL PFN_vkCmdDrawIndexedIndirect glad_vkCmdDrawIndexedIndirect;
GLAD_API_CALL PFN_vkCmdDrawIndexedIndirect glad_debug_vkCmdDrawIndexedIndirect;
#define vkCmdDrawIndexedIndirect glad_debug_vkCmdDrawIndexedIndirect
GLAD_API_CALL PFN_vkCmdDrawIndexedIndirectCount glad_vkCmdDrawIndexedIndirectCount;
GLAD_API_CALL PFN_vkCmdDrawIndexedIndirectCount glad_debug_vkCmdDrawIndexedIndirectCount;
#define vkCmdDrawIndexedIndirectCount glad_debug_vkCmdDrawIndexedIndirectCount
GLAD_API_CALL PFN_vkCmdDrawIndexedIndirectCountAMD glad_vkCmdDrawIndexedIndirectCountAMD;
GLAD_API_CALL PFN_vkCmdDrawIndexedIndirectCountAMD glad_debug_vkCmdDrawIndexedIndirectCountAMD;
#define vkCmdDrawIndexedIndirectCountAMD glad_debug_vkCmdDrawIndexedIndirectCountAMD
GLAD_API_CALL PFN_vkCmdDrawIndexedIndirectCountKHR glad_vkCmdDrawIndexedIndirectCountKHR;
GLAD_API_CALL PFN_vkCmdDrawIndexedIndirectCountKHR glad_debug_vkCmdDrawIndexedIndirectCountKHR;
#define vkCmdDrawIndexedIndirectCountKHR glad_debug_vkCmdDrawIndexedIndirectCountKHR
GLAD_API_CALL PFN_vkCmdDrawIndirect glad_vkCmdDrawIndirect;
GLAD_API_CALL PFN_vkCmdDrawIndirect glad_debug_vkCmdDrawIndirect;
#define vkCmdDrawIndirect glad_debug_vkCmdDrawIndirect
GLAD_API_CALL PFN_vkCmdDrawIndirectByteCountEXT glad_vkCmdDrawIndirectByteCountEXT;
GLAD_API_CALL PFN_vkCmdDrawIndirectByteCountEXT glad_debug_vkCmdDrawIndirectByteCountEXT;
#define vkCmdDrawIndirectByteCountEXT glad_debug_vkCmdDrawIndirectByteCountEXT
GLAD_API_CALL PFN_vkCmdDrawIndirectCount glad_vkCmdDrawIndirectCount;
GLAD_API_CALL PFN_vkCmdDrawIndirectCount glad_debug_vkCmdDrawIndirectCount;
#define vkCmdDrawIndirectCount glad_debug_vkCmdDrawIndirectCount
GLAD_API_CALL PFN_vkCmdDrawIndirectCountAMD glad_vkCmdDrawIndirectCountAMD;
GLAD_API_CALL PFN_vkCmdDrawIndirectCountAMD glad_debug_vkCmdDrawIndirectCountAMD;
#define vkCmdDrawIndirectCountAMD glad_debug_vkCmdDrawIndirectCountAMD
GLAD_API_CALL PFN_vkCmdDrawIndirectCountKHR glad_vkCmdDrawIndirectCountKHR;
GLAD_API_CALL PFN_vkCmdDrawIndirectCountKHR glad_debug_vkCmdDrawIndirectCountKHR;
#define vkCmdDrawIndirectCountKHR glad_debug_vkCmdDrawIndirectCountKHR
GLAD_API_CALL PFN_vkCmdDrawMeshTasksEXT glad_vkCmdDrawMeshTasksEXT;
GLAD_API_CALL PFN_vkCmdDrawMeshTasksEXT glad_debug_vkCmdDrawMeshTasksEXT;
#define vkCmdDrawMeshTasksEXT glad_debug_vkCmdDrawMeshTasksEXT
GLAD_API_CALL PFN_vkCmdDrawMeshTasksIndirectCountEXT glad_vkCmdDrawMeshTasksIndirectCountEXT;
GLAD_API_CALL PFN_vkCmdDrawMeshTasksIndirectCountEXT glad_debug_vkCmdDrawMeshTasksIndirectCountEXT;
#define vkCmdDrawMeshTasksIndirectCountEXT glad_debug_vkCmdDrawMeshTasksIndirectCountEXT
GLAD_API_CALL PFN_vkCmdDrawMeshTasksIndirectCountNV glad_vkCmdDrawMeshTasksIndirectCountNV;
GLAD_API_CALL PFN_vkCmdDrawMeshTasksIndirectCountNV glad_debug_vkCmdDrawMeshTasksIndirectCountNV;
#define vkCmdDrawMeshTasksIndirectCountNV glad_debug_vkCmdDrawMeshTasksIndirectCountNV
GLAD_API_CALL PFN_vkCmdDrawMeshTasksIndirectEXT glad_vkCmdDrawMeshTasksIndirectEXT;
GLAD_API_CALL PFN_vkCmdDrawMeshTasksIndirectEXT glad_debug_vkCmdDrawMeshTasksIndirectEXT;
#define vkCmdDrawMeshTasksIndirectEXT glad_debug_vkCmdDrawMeshTasksIndirectEXT
GLAD_API_CALL PFN_vkCmdDrawMeshTasksIndirectNV glad_vkCmdDrawMeshTasksIndirectNV;
GLAD_API_CALL PFN_vkCmdDrawMeshTasksIndirectNV glad_debug_vkCmdDrawMeshTasksIndirectNV;
#define vkCmdDrawMeshTasksIndirectNV glad_debug_vkCmdDrawMeshTasksIndirectNV
GLAD_API_CALL PFN_vkCmdDrawMeshTasksNV glad_vkCmdDrawMeshTasksNV;
GLAD_API_CALL PFN_vkCmdDrawMeshTasksNV glad_debug_vkCmdDrawMeshTasksNV;
#define vkCmdDrawMeshTasksNV glad_debug_vkCmdDrawMeshTasksNV
GLAD_API_CALL PFN_vkCmdDrawMultiEXT glad_vkCmdDrawMultiEXT;
GLAD_API_CALL PFN_vkCmdDrawMultiEXT glad_debug_vkCmdDrawMultiEXT;
#define vkCmdDrawMultiEXT glad_debug_vkCmdDrawMultiEXT
GLAD_API_CALL PFN_vkCmdDrawMultiIndexedEXT glad_vkCmdDrawMultiIndexedEXT;
GLAD_API_CALL PFN_vkCmdDrawMultiIndexedEXT glad_debug_vkCmdDrawMultiIndexedEXT;
#define vkCmdDrawMultiIndexedEXT glad_debug_vkCmdDrawMultiIndexedEXT
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkCmdEncodeVideoKHR glad_vkCmdEncodeVideoKHR;
GLAD_API_CALL PFN_vkCmdEncodeVideoKHR glad_debug_vkCmdEncodeVideoKHR;
	#define vkCmdEncodeVideoKHR glad_debug_vkCmdEncodeVideoKHR

#endif
GLAD_API_CALL PFN_vkCmdEndConditionalRenderingEXT glad_vkCmdEndConditionalRenderingEXT;
GLAD_API_CALL PFN_vkCmdEndConditionalRenderingEXT glad_debug_vkCmdEndConditionalRenderingEXT;
#define vkCmdEndConditionalRenderingEXT glad_debug_vkCmdEndConditionalRenderingEXT
GLAD_API_CALL PFN_vkCmdEndDebugUtilsLabelEXT glad_vkCmdEndDebugUtilsLabelEXT;
GLAD_API_CALL PFN_vkCmdEndDebugUtilsLabelEXT glad_debug_vkCmdEndDebugUtilsLabelEXT;
#define vkCmdEndDebugUtilsLabelEXT glad_debug_vkCmdEndDebugUtilsLabelEXT
GLAD_API_CALL PFN_vkCmdEndQuery glad_vkCmdEndQuery;
GLAD_API_CALL PFN_vkCmdEndQuery glad_debug_vkCmdEndQuery;
#define vkCmdEndQuery glad_debug_vkCmdEndQuery
GLAD_API_CALL PFN_vkCmdEndQueryIndexedEXT glad_vkCmdEndQueryIndexedEXT;
GLAD_API_CALL PFN_vkCmdEndQueryIndexedEXT glad_debug_vkCmdEndQueryIndexedEXT;
#define vkCmdEndQueryIndexedEXT glad_debug_vkCmdEndQueryIndexedEXT
GLAD_API_CALL PFN_vkCmdEndRenderPass glad_vkCmdEndRenderPass;
GLAD_API_CALL PFN_vkCmdEndRenderPass glad_debug_vkCmdEndRenderPass;
#define vkCmdEndRenderPass glad_debug_vkCmdEndRenderPass
GLAD_API_CALL PFN_vkCmdEndRenderPass2 glad_vkCmdEndRenderPass2;
GLAD_API_CALL PFN_vkCmdEndRenderPass2 glad_debug_vkCmdEndRenderPass2;
#define vkCmdEndRenderPass2 glad_debug_vkCmdEndRenderPass2
GLAD_API_CALL PFN_vkCmdEndRenderPass2KHR glad_vkCmdEndRenderPass2KHR;
GLAD_API_CALL PFN_vkCmdEndRenderPass2KHR glad_debug_vkCmdEndRenderPass2KHR;
#define vkCmdEndRenderPass2KHR glad_debug_vkCmdEndRenderPass2KHR
GLAD_API_CALL PFN_vkCmdEndRendering glad_vkCmdEndRendering;
GLAD_API_CALL PFN_vkCmdEndRendering glad_debug_vkCmdEndRendering;
#define vkCmdEndRendering glad_debug_vkCmdEndRendering
GLAD_API_CALL PFN_vkCmdEndRenderingKHR glad_vkCmdEndRenderingKHR;
GLAD_API_CALL PFN_vkCmdEndRenderingKHR glad_debug_vkCmdEndRenderingKHR;
#define vkCmdEndRenderingKHR glad_debug_vkCmdEndRenderingKHR
GLAD_API_CALL PFN_vkCmdEndTransformFeedbackEXT glad_vkCmdEndTransformFeedbackEXT;
GLAD_API_CALL PFN_vkCmdEndTransformFeedbackEXT glad_debug_vkCmdEndTransformFeedbackEXT;
#define vkCmdEndTransformFeedbackEXT glad_debug_vkCmdEndTransformFeedbackEXT
GLAD_API_CALL PFN_vkCmdEndVideoCodingKHR glad_vkCmdEndVideoCodingKHR;
GLAD_API_CALL PFN_vkCmdEndVideoCodingKHR glad_debug_vkCmdEndVideoCodingKHR;
#define vkCmdEndVideoCodingKHR glad_debug_vkCmdEndVideoCodingKHR
GLAD_API_CALL PFN_vkCmdExecuteCommands glad_vkCmdExecuteCommands;
GLAD_API_CALL PFN_vkCmdExecuteCommands glad_debug_vkCmdExecuteCommands;
#define vkCmdExecuteCommands glad_debug_vkCmdExecuteCommands
GLAD_API_CALL PFN_vkCmdExecuteGeneratedCommandsNV glad_vkCmdExecuteGeneratedCommandsNV;
GLAD_API_CALL PFN_vkCmdExecuteGeneratedCommandsNV glad_debug_vkCmdExecuteGeneratedCommandsNV;
#define vkCmdExecuteGeneratedCommandsNV glad_debug_vkCmdExecuteGeneratedCommandsNV
GLAD_API_CALL PFN_vkCmdFillBuffer glad_vkCmdFillBuffer;
GLAD_API_CALL PFN_vkCmdFillBuffer glad_debug_vkCmdFillBuffer;
#define vkCmdFillBuffer glad_debug_vkCmdFillBuffer
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkCmdInitializeGraphScratchMemoryAMDX glad_vkCmdInitializeGraphScratchMemoryAMDX;
GLAD_API_CALL PFN_vkCmdInitializeGraphScratchMemoryAMDX glad_debug_vkCmdInitializeGraphScratchMemoryAMDX;
	#define vkCmdInitializeGraphScratchMemoryAMDX glad_debug_vkCmdInitializeGraphScratchMemoryAMDX

#endif
GLAD_API_CALL PFN_vkCmdInsertDebugUtilsLabelEXT glad_vkCmdInsertDebugUtilsLabelEXT;
GLAD_API_CALL PFN_vkCmdInsertDebugUtilsLabelEXT glad_debug_vkCmdInsertDebugUtilsLabelEXT;
#define vkCmdInsertDebugUtilsLabelEXT glad_debug_vkCmdInsertDebugUtilsLabelEXT
GLAD_API_CALL PFN_vkCmdNextSubpass glad_vkCmdNextSubpass;
GLAD_API_CALL PFN_vkCmdNextSubpass glad_debug_vkCmdNextSubpass;
#define vkCmdNextSubpass glad_debug_vkCmdNextSubpass
GLAD_API_CALL PFN_vkCmdNextSubpass2 glad_vkCmdNextSubpass2;
GLAD_API_CALL PFN_vkCmdNextSubpass2 glad_debug_vkCmdNextSubpass2;
#define vkCmdNextSubpass2 glad_debug_vkCmdNextSubpass2
GLAD_API_CALL PFN_vkCmdNextSubpass2KHR glad_vkCmdNextSubpass2KHR;
GLAD_API_CALL PFN_vkCmdNextSubpass2KHR glad_debug_vkCmdNextSubpass2KHR;
#define vkCmdNextSubpass2KHR glad_debug_vkCmdNextSubpass2KHR
GLAD_API_CALL PFN_vkCmdOpticalFlowExecuteNV glad_vkCmdOpticalFlowExecuteNV;
GLAD_API_CALL PFN_vkCmdOpticalFlowExecuteNV glad_debug_vkCmdOpticalFlowExecuteNV;
#define vkCmdOpticalFlowExecuteNV glad_debug_vkCmdOpticalFlowExecuteNV
GLAD_API_CALL PFN_vkCmdPipelineBarrier glad_vkCmdPipelineBarrier;
GLAD_API_CALL PFN_vkCmdPipelineBarrier glad_debug_vkCmdPipelineBarrier;
#define vkCmdPipelineBarrier glad_debug_vkCmdPipelineBarrier
GLAD_API_CALL PFN_vkCmdPipelineBarrier2 glad_vkCmdPipelineBarrier2;
GLAD_API_CALL PFN_vkCmdPipelineBarrier2 glad_debug_vkCmdPipelineBarrier2;
#define vkCmdPipelineBarrier2 glad_debug_vkCmdPipelineBarrier2
GLAD_API_CALL PFN_vkCmdPipelineBarrier2KHR glad_vkCmdPipelineBarrier2KHR;
GLAD_API_CALL PFN_vkCmdPipelineBarrier2KHR glad_debug_vkCmdPipelineBarrier2KHR;
#define vkCmdPipelineBarrier2KHR glad_debug_vkCmdPipelineBarrier2KHR
GLAD_API_CALL PFN_vkCmdPreprocessGeneratedCommandsNV glad_vkCmdPreprocessGeneratedCommandsNV;
GLAD_API_CALL PFN_vkCmdPreprocessGeneratedCommandsNV glad_debug_vkCmdPreprocessGeneratedCommandsNV;
#define vkCmdPreprocessGeneratedCommandsNV glad_debug_vkCmdPreprocessGeneratedCommandsNV
GLAD_API_CALL PFN_vkCmdPushConstants glad_vkCmdPushConstants;
GLAD_API_CALL PFN_vkCmdPushConstants glad_debug_vkCmdPushConstants;
#define vkCmdPushConstants glad_debug_vkCmdPushConstants
GLAD_API_CALL PFN_vkCmdPushDescriptorSetKHR glad_vkCmdPushDescriptorSetKHR;
GLAD_API_CALL PFN_vkCmdPushDescriptorSetKHR glad_debug_vkCmdPushDescriptorSetKHR;
#define vkCmdPushDescriptorSetKHR glad_debug_vkCmdPushDescriptorSetKHR
GLAD_API_CALL PFN_vkCmdPushDescriptorSetWithTemplateKHR glad_vkCmdPushDescriptorSetWithTemplateKHR;
GLAD_API_CALL PFN_vkCmdPushDescriptorSetWithTemplateKHR glad_debug_vkCmdPushDescriptorSetWithTemplateKHR;
#define vkCmdPushDescriptorSetWithTemplateKHR glad_debug_vkCmdPushDescriptorSetWithTemplateKHR
GLAD_API_CALL PFN_vkCmdResetEvent glad_vkCmdResetEvent;
GLAD_API_CALL PFN_vkCmdResetEvent glad_debug_vkCmdResetEvent;
#define vkCmdResetEvent glad_debug_vkCmdResetEvent
GLAD_API_CALL PFN_vkCmdResetEvent2 glad_vkCmdResetEvent2;
GLAD_API_CALL PFN_vkCmdResetEvent2 glad_debug_vkCmdResetEvent2;
#define vkCmdResetEvent2 glad_debug_vkCmdResetEvent2
GLAD_API_CALL PFN_vkCmdResetEvent2KHR glad_vkCmdResetEvent2KHR;
GLAD_API_CALL PFN_vkCmdResetEvent2KHR glad_debug_vkCmdResetEvent2KHR;
#define vkCmdResetEvent2KHR glad_debug_vkCmdResetEvent2KHR
GLAD_API_CALL PFN_vkCmdResetQueryPool glad_vkCmdResetQueryPool;
GLAD_API_CALL PFN_vkCmdResetQueryPool glad_debug_vkCmdResetQueryPool;
#define vkCmdResetQueryPool glad_debug_vkCmdResetQueryPool
GLAD_API_CALL PFN_vkCmdResolveImage glad_vkCmdResolveImage;
GLAD_API_CALL PFN_vkCmdResolveImage glad_debug_vkCmdResolveImage;
#define vkCmdResolveImage glad_debug_vkCmdResolveImage
GLAD_API_CALL PFN_vkCmdResolveImage2 glad_vkCmdResolveImage2;
GLAD_API_CALL PFN_vkCmdResolveImage2 glad_debug_vkCmdResolveImage2;
#define vkCmdResolveImage2 glad_debug_vkCmdResolveImage2
GLAD_API_CALL PFN_vkCmdResolveImage2KHR glad_vkCmdResolveImage2KHR;
GLAD_API_CALL PFN_vkCmdResolveImage2KHR glad_debug_vkCmdResolveImage2KHR;
#define vkCmdResolveImage2KHR glad_debug_vkCmdResolveImage2KHR
GLAD_API_CALL PFN_vkCmdSetAlphaToCoverageEnableEXT glad_vkCmdSetAlphaToCoverageEnableEXT;
GLAD_API_CALL PFN_vkCmdSetAlphaToCoverageEnableEXT glad_debug_vkCmdSetAlphaToCoverageEnableEXT;
#define vkCmdSetAlphaToCoverageEnableEXT glad_debug_vkCmdSetAlphaToCoverageEnableEXT
GLAD_API_CALL PFN_vkCmdSetAlphaToOneEnableEXT glad_vkCmdSetAlphaToOneEnableEXT;
GLAD_API_CALL PFN_vkCmdSetAlphaToOneEnableEXT glad_debug_vkCmdSetAlphaToOneEnableEXT;
#define vkCmdSetAlphaToOneEnableEXT glad_debug_vkCmdSetAlphaToOneEnableEXT
GLAD_API_CALL PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT glad_vkCmdSetAttachmentFeedbackLoopEnableEXT;
GLAD_API_CALL PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT glad_debug_vkCmdSetAttachmentFeedbackLoopEnableEXT;
#define vkCmdSetAttachmentFeedbackLoopEnableEXT glad_debug_vkCmdSetAttachmentFeedbackLoopEnableEXT
GLAD_API_CALL PFN_vkCmdSetBlendConstants glad_vkCmdSetBlendConstants;
GLAD_API_CALL PFN_vkCmdSetBlendConstants glad_debug_vkCmdSetBlendConstants;
#define vkCmdSetBlendConstants glad_debug_vkCmdSetBlendConstants
GLAD_API_CALL PFN_vkCmdSetCheckpointNV glad_vkCmdSetCheckpointNV;
GLAD_API_CALL PFN_vkCmdSetCheckpointNV glad_debug_vkCmdSetCheckpointNV;
#define vkCmdSetCheckpointNV glad_debug_vkCmdSetCheckpointNV
GLAD_API_CALL PFN_vkCmdSetCoarseSampleOrderNV glad_vkCmdSetCoarseSampleOrderNV;
GLAD_API_CALL PFN_vkCmdSetCoarseSampleOrderNV glad_debug_vkCmdSetCoarseSampleOrderNV;
#define vkCmdSetCoarseSampleOrderNV glad_debug_vkCmdSetCoarseSampleOrderNV
GLAD_API_CALL PFN_vkCmdSetColorBlendAdvancedEXT glad_vkCmdSetColorBlendAdvancedEXT;
GLAD_API_CALL PFN_vkCmdSetColorBlendAdvancedEXT glad_debug_vkCmdSetColorBlendAdvancedEXT;
#define vkCmdSetColorBlendAdvancedEXT glad_debug_vkCmdSetColorBlendAdvancedEXT
GLAD_API_CALL PFN_vkCmdSetColorBlendEnableEXT glad_vkCmdSetColorBlendEnableEXT;
GLAD_API_CALL PFN_vkCmdSetColorBlendEnableEXT glad_debug_vkCmdSetColorBlendEnableEXT;
#define vkCmdSetColorBlendEnableEXT glad_debug_vkCmdSetColorBlendEnableEXT
GLAD_API_CALL PFN_vkCmdSetColorBlendEquationEXT glad_vkCmdSetColorBlendEquationEXT;
GLAD_API_CALL PFN_vkCmdSetColorBlendEquationEXT glad_debug_vkCmdSetColorBlendEquationEXT;
#define vkCmdSetColorBlendEquationEXT glad_debug_vkCmdSetColorBlendEquationEXT
GLAD_API_CALL PFN_vkCmdSetColorWriteEnableEXT glad_vkCmdSetColorWriteEnableEXT;
GLAD_API_CALL PFN_vkCmdSetColorWriteEnableEXT glad_debug_vkCmdSetColorWriteEnableEXT;
#define vkCmdSetColorWriteEnableEXT glad_debug_vkCmdSetColorWriteEnableEXT
GLAD_API_CALL PFN_vkCmdSetColorWriteMaskEXT glad_vkCmdSetColorWriteMaskEXT;
GLAD_API_CALL PFN_vkCmdSetColorWriteMaskEXT glad_debug_vkCmdSetColorWriteMaskEXT;
#define vkCmdSetColorWriteMaskEXT glad_debug_vkCmdSetColorWriteMaskEXT
GLAD_API_CALL PFN_vkCmdSetConservativeRasterizationModeEXT glad_vkCmdSetConservativeRasterizationModeEXT;
GLAD_API_CALL PFN_vkCmdSetConservativeRasterizationModeEXT glad_debug_vkCmdSetConservativeRasterizationModeEXT;
#define vkCmdSetConservativeRasterizationModeEXT glad_debug_vkCmdSetConservativeRasterizationModeEXT
GLAD_API_CALL PFN_vkCmdSetCoverageModulationModeNV glad_vkCmdSetCoverageModulationModeNV;
GLAD_API_CALL PFN_vkCmdSetCoverageModulationModeNV glad_debug_vkCmdSetCoverageModulationModeNV;
#define vkCmdSetCoverageModulationModeNV glad_debug_vkCmdSetCoverageModulationModeNV
GLAD_API_CALL PFN_vkCmdSetCoverageModulationTableEnableNV glad_vkCmdSetCoverageModulationTableEnableNV;
GLAD_API_CALL PFN_vkCmdSetCoverageModulationTableEnableNV glad_debug_vkCmdSetCoverageModulationTableEnableNV;
#define vkCmdSetCoverageModulationTableEnableNV glad_debug_vkCmdSetCoverageModulationTableEnableNV
GLAD_API_CALL PFN_vkCmdSetCoverageModulationTableNV glad_vkCmdSetCoverageModulationTableNV;
GLAD_API_CALL PFN_vkCmdSetCoverageModulationTableNV glad_debug_vkCmdSetCoverageModulationTableNV;
#define vkCmdSetCoverageModulationTableNV glad_debug_vkCmdSetCoverageModulationTableNV
GLAD_API_CALL PFN_vkCmdSetCoverageReductionModeNV glad_vkCmdSetCoverageReductionModeNV;
GLAD_API_CALL PFN_vkCmdSetCoverageReductionModeNV glad_debug_vkCmdSetCoverageReductionModeNV;
#define vkCmdSetCoverageReductionModeNV glad_debug_vkCmdSetCoverageReductionModeNV
GLAD_API_CALL PFN_vkCmdSetCoverageToColorEnableNV glad_vkCmdSetCoverageToColorEnableNV;
GLAD_API_CALL PFN_vkCmdSetCoverageToColorEnableNV glad_debug_vkCmdSetCoverageToColorEnableNV;
#define vkCmdSetCoverageToColorEnableNV glad_debug_vkCmdSetCoverageToColorEnableNV
GLAD_API_CALL PFN_vkCmdSetCoverageToColorLocationNV glad_vkCmdSetCoverageToColorLocationNV;
GLAD_API_CALL PFN_vkCmdSetCoverageToColorLocationNV glad_debug_vkCmdSetCoverageToColorLocationNV;
#define vkCmdSetCoverageToColorLocationNV glad_debug_vkCmdSetCoverageToColorLocationNV
GLAD_API_CALL PFN_vkCmdSetCullMode glad_vkCmdSetCullMode;
GLAD_API_CALL PFN_vkCmdSetCullMode glad_debug_vkCmdSetCullMode;
#define vkCmdSetCullMode glad_debug_vkCmdSetCullMode
GLAD_API_CALL PFN_vkCmdSetCullModeEXT glad_vkCmdSetCullModeEXT;
GLAD_API_CALL PFN_vkCmdSetCullModeEXT glad_debug_vkCmdSetCullModeEXT;
#define vkCmdSetCullModeEXT glad_debug_vkCmdSetCullModeEXT
GLAD_API_CALL PFN_vkCmdSetDepthBias glad_vkCmdSetDepthBias;
GLAD_API_CALL PFN_vkCmdSetDepthBias glad_debug_vkCmdSetDepthBias;
#define vkCmdSetDepthBias glad_debug_vkCmdSetDepthBias
GLAD_API_CALL PFN_vkCmdSetDepthBias2EXT glad_vkCmdSetDepthBias2EXT;
GLAD_API_CALL PFN_vkCmdSetDepthBias2EXT glad_debug_vkCmdSetDepthBias2EXT;
#define vkCmdSetDepthBias2EXT glad_debug_vkCmdSetDepthBias2EXT
GLAD_API_CALL PFN_vkCmdSetDepthBiasEnable glad_vkCmdSetDepthBiasEnable;
GLAD_API_CALL PFN_vkCmdSetDepthBiasEnable glad_debug_vkCmdSetDepthBiasEnable;
#define vkCmdSetDepthBiasEnable glad_debug_vkCmdSetDepthBiasEnable
GLAD_API_CALL PFN_vkCmdSetDepthBiasEnableEXT glad_vkCmdSetDepthBiasEnableEXT;
GLAD_API_CALL PFN_vkCmdSetDepthBiasEnableEXT glad_debug_vkCmdSetDepthBiasEnableEXT;
#define vkCmdSetDepthBiasEnableEXT glad_debug_vkCmdSetDepthBiasEnableEXT
GLAD_API_CALL PFN_vkCmdSetDepthBounds glad_vkCmdSetDepthBounds;
GLAD_API_CALL PFN_vkCmdSetDepthBounds glad_debug_vkCmdSetDepthBounds;
#define vkCmdSetDepthBounds glad_debug_vkCmdSetDepthBounds
GLAD_API_CALL PFN_vkCmdSetDepthBoundsTestEnable glad_vkCmdSetDepthBoundsTestEnable;
GLAD_API_CALL PFN_vkCmdSetDepthBoundsTestEnable glad_debug_vkCmdSetDepthBoundsTestEnable;
#define vkCmdSetDepthBoundsTestEnable glad_debug_vkCmdSetDepthBoundsTestEnable
GLAD_API_CALL PFN_vkCmdSetDepthBoundsTestEnableEXT glad_vkCmdSetDepthBoundsTestEnableEXT;
GLAD_API_CALL PFN_vkCmdSetDepthBoundsTestEnableEXT glad_debug_vkCmdSetDepthBoundsTestEnableEXT;
#define vkCmdSetDepthBoundsTestEnableEXT glad_debug_vkCmdSetDepthBoundsTestEnableEXT
GLAD_API_CALL PFN_vkCmdSetDepthClampEnableEXT glad_vkCmdSetDepthClampEnableEXT;
GLAD_API_CALL PFN_vkCmdSetDepthClampEnableEXT glad_debug_vkCmdSetDepthClampEnableEXT;
#define vkCmdSetDepthClampEnableEXT glad_debug_vkCmdSetDepthClampEnableEXT
GLAD_API_CALL PFN_vkCmdSetDepthClipEnableEXT glad_vkCmdSetDepthClipEnableEXT;
GLAD_API_CALL PFN_vkCmdSetDepthClipEnableEXT glad_debug_vkCmdSetDepthClipEnableEXT;
#define vkCmdSetDepthClipEnableEXT glad_debug_vkCmdSetDepthClipEnableEXT
GLAD_API_CALL PFN_vkCmdSetDepthClipNegativeOneToOneEXT glad_vkCmdSetDepthClipNegativeOneToOneEXT;
GLAD_API_CALL PFN_vkCmdSetDepthClipNegativeOneToOneEXT glad_debug_vkCmdSetDepthClipNegativeOneToOneEXT;
#define vkCmdSetDepthClipNegativeOneToOneEXT glad_debug_vkCmdSetDepthClipNegativeOneToOneEXT
GLAD_API_CALL PFN_vkCmdSetDepthCompareOp glad_vkCmdSetDepthCompareOp;
GLAD_API_CALL PFN_vkCmdSetDepthCompareOp glad_debug_vkCmdSetDepthCompareOp;
#define vkCmdSetDepthCompareOp glad_debug_vkCmdSetDepthCompareOp
GLAD_API_CALL PFN_vkCmdSetDepthCompareOpEXT glad_vkCmdSetDepthCompareOpEXT;
GLAD_API_CALL PFN_vkCmdSetDepthCompareOpEXT glad_debug_vkCmdSetDepthCompareOpEXT;
#define vkCmdSetDepthCompareOpEXT glad_debug_vkCmdSetDepthCompareOpEXT
GLAD_API_CALL PFN_vkCmdSetDepthTestEnable glad_vkCmdSetDepthTestEnable;
GLAD_API_CALL PFN_vkCmdSetDepthTestEnable glad_debug_vkCmdSetDepthTestEnable;
#define vkCmdSetDepthTestEnable glad_debug_vkCmdSetDepthTestEnable
GLAD_API_CALL PFN_vkCmdSetDepthTestEnableEXT glad_vkCmdSetDepthTestEnableEXT;
GLAD_API_CALL PFN_vkCmdSetDepthTestEnableEXT glad_debug_vkCmdSetDepthTestEnableEXT;
#define vkCmdSetDepthTestEnableEXT glad_debug_vkCmdSetDepthTestEnableEXT
GLAD_API_CALL PFN_vkCmdSetDepthWriteEnable glad_vkCmdSetDepthWriteEnable;
GLAD_API_CALL PFN_vkCmdSetDepthWriteEnable glad_debug_vkCmdSetDepthWriteEnable;
#define vkCmdSetDepthWriteEnable glad_debug_vkCmdSetDepthWriteEnable
GLAD_API_CALL PFN_vkCmdSetDepthWriteEnableEXT glad_vkCmdSetDepthWriteEnableEXT;
GLAD_API_CALL PFN_vkCmdSetDepthWriteEnableEXT glad_debug_vkCmdSetDepthWriteEnableEXT;
#define vkCmdSetDepthWriteEnableEXT glad_debug_vkCmdSetDepthWriteEnableEXT
GLAD_API_CALL PFN_vkCmdSetDescriptorBufferOffsetsEXT glad_vkCmdSetDescriptorBufferOffsetsEXT;
GLAD_API_CALL PFN_vkCmdSetDescriptorBufferOffsetsEXT glad_debug_vkCmdSetDescriptorBufferOffsetsEXT;
#define vkCmdSetDescriptorBufferOffsetsEXT glad_debug_vkCmdSetDescriptorBufferOffsetsEXT
GLAD_API_CALL PFN_vkCmdSetDeviceMask glad_vkCmdSetDeviceMask;
GLAD_API_CALL PFN_vkCmdSetDeviceMask glad_debug_vkCmdSetDeviceMask;
#define vkCmdSetDeviceMask glad_debug_vkCmdSetDeviceMask
GLAD_API_CALL PFN_vkCmdSetDeviceMaskKHR glad_vkCmdSetDeviceMaskKHR;
GLAD_API_CALL PFN_vkCmdSetDeviceMaskKHR glad_debug_vkCmdSetDeviceMaskKHR;
#define vkCmdSetDeviceMaskKHR glad_debug_vkCmdSetDeviceMaskKHR
GLAD_API_CALL PFN_vkCmdSetDiscardRectangleEXT glad_vkCmdSetDiscardRectangleEXT;
GLAD_API_CALL PFN_vkCmdSetDiscardRectangleEXT glad_debug_vkCmdSetDiscardRectangleEXT;
#define vkCmdSetDiscardRectangleEXT glad_debug_vkCmdSetDiscardRectangleEXT
GLAD_API_CALL PFN_vkCmdSetDiscardRectangleEnableEXT glad_vkCmdSetDiscardRectangleEnableEXT;
GLAD_API_CALL PFN_vkCmdSetDiscardRectangleEnableEXT glad_debug_vkCmdSetDiscardRectangleEnableEXT;
#define vkCmdSetDiscardRectangleEnableEXT glad_debug_vkCmdSetDiscardRectangleEnableEXT
GLAD_API_CALL PFN_vkCmdSetDiscardRectangleModeEXT glad_vkCmdSetDiscardRectangleModeEXT;
GLAD_API_CALL PFN_vkCmdSetDiscardRectangleModeEXT glad_debug_vkCmdSetDiscardRectangleModeEXT;
#define vkCmdSetDiscardRectangleModeEXT glad_debug_vkCmdSetDiscardRectangleModeEXT
GLAD_API_CALL PFN_vkCmdSetEvent glad_vkCmdSetEvent;
GLAD_API_CALL PFN_vkCmdSetEvent glad_debug_vkCmdSetEvent;
#define vkCmdSetEvent glad_debug_vkCmdSetEvent
GLAD_API_CALL PFN_vkCmdSetEvent2 glad_vkCmdSetEvent2;
GLAD_API_CALL PFN_vkCmdSetEvent2 glad_debug_vkCmdSetEvent2;
#define vkCmdSetEvent2 glad_debug_vkCmdSetEvent2
GLAD_API_CALL PFN_vkCmdSetEvent2KHR glad_vkCmdSetEvent2KHR;
GLAD_API_CALL PFN_vkCmdSetEvent2KHR glad_debug_vkCmdSetEvent2KHR;
#define vkCmdSetEvent2KHR glad_debug_vkCmdSetEvent2KHR
GLAD_API_CALL PFN_vkCmdSetExclusiveScissorEnableNV glad_vkCmdSetExclusiveScissorEnableNV;
GLAD_API_CALL PFN_vkCmdSetExclusiveScissorEnableNV glad_debug_vkCmdSetExclusiveScissorEnableNV;
#define vkCmdSetExclusiveScissorEnableNV glad_debug_vkCmdSetExclusiveScissorEnableNV
GLAD_API_CALL PFN_vkCmdSetExclusiveScissorNV glad_vkCmdSetExclusiveScissorNV;
GLAD_API_CALL PFN_vkCmdSetExclusiveScissorNV glad_debug_vkCmdSetExclusiveScissorNV;
#define vkCmdSetExclusiveScissorNV glad_debug_vkCmdSetExclusiveScissorNV
GLAD_API_CALL PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT glad_vkCmdSetExtraPrimitiveOverestimationSizeEXT;
GLAD_API_CALL PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT glad_debug_vkCmdSetExtraPrimitiveOverestimationSizeEXT;
#define vkCmdSetExtraPrimitiveOverestimationSizeEXT glad_debug_vkCmdSetExtraPrimitiveOverestimationSizeEXT
GLAD_API_CALL PFN_vkCmdSetFragmentShadingRateEnumNV glad_vkCmdSetFragmentShadingRateEnumNV;
GLAD_API_CALL PFN_vkCmdSetFragmentShadingRateEnumNV glad_debug_vkCmdSetFragmentShadingRateEnumNV;
#define vkCmdSetFragmentShadingRateEnumNV glad_debug_vkCmdSetFragmentShadingRateEnumNV
GLAD_API_CALL PFN_vkCmdSetFragmentShadingRateKHR glad_vkCmdSetFragmentShadingRateKHR;
GLAD_API_CALL PFN_vkCmdSetFragmentShadingRateKHR glad_debug_vkCmdSetFragmentShadingRateKHR;
#define vkCmdSetFragmentShadingRateKHR glad_debug_vkCmdSetFragmentShadingRateKHR
GLAD_API_CALL PFN_vkCmdSetFrontFace glad_vkCmdSetFrontFace;
GLAD_API_CALL PFN_vkCmdSetFrontFace glad_debug_vkCmdSetFrontFace;
#define vkCmdSetFrontFace glad_debug_vkCmdSetFrontFace
GLAD_API_CALL PFN_vkCmdSetFrontFaceEXT glad_vkCmdSetFrontFaceEXT;
GLAD_API_CALL PFN_vkCmdSetFrontFaceEXT glad_debug_vkCmdSetFrontFaceEXT;
#define vkCmdSetFrontFaceEXT glad_debug_vkCmdSetFrontFaceEXT
GLAD_API_CALL PFN_vkCmdSetLineRasterizationModeEXT glad_vkCmdSetLineRasterizationModeEXT;
GLAD_API_CALL PFN_vkCmdSetLineRasterizationModeEXT glad_debug_vkCmdSetLineRasterizationModeEXT;
#define vkCmdSetLineRasterizationModeEXT glad_debug_vkCmdSetLineRasterizationModeEXT
GLAD_API_CALL PFN_vkCmdSetLineStippleEXT glad_vkCmdSetLineStippleEXT;
GLAD_API_CALL PFN_vkCmdSetLineStippleEXT glad_debug_vkCmdSetLineStippleEXT;
#define vkCmdSetLineStippleEXT glad_debug_vkCmdSetLineStippleEXT
GLAD_API_CALL PFN_vkCmdSetLineStippleEnableEXT glad_vkCmdSetLineStippleEnableEXT;
GLAD_API_CALL PFN_vkCmdSetLineStippleEnableEXT glad_debug_vkCmdSetLineStippleEnableEXT;
#define vkCmdSetLineStippleEnableEXT glad_debug_vkCmdSetLineStippleEnableEXT
GLAD_API_CALL PFN_vkCmdSetLineWidth glad_vkCmdSetLineWidth;
GLAD_API_CALL PFN_vkCmdSetLineWidth glad_debug_vkCmdSetLineWidth;
#define vkCmdSetLineWidth glad_debug_vkCmdSetLineWidth
GLAD_API_CALL PFN_vkCmdSetLogicOpEXT glad_vkCmdSetLogicOpEXT;
GLAD_API_CALL PFN_vkCmdSetLogicOpEXT glad_debug_vkCmdSetLogicOpEXT;
#define vkCmdSetLogicOpEXT glad_debug_vkCmdSetLogicOpEXT
GLAD_API_CALL PFN_vkCmdSetLogicOpEnableEXT glad_vkCmdSetLogicOpEnableEXT;
GLAD_API_CALL PFN_vkCmdSetLogicOpEnableEXT glad_debug_vkCmdSetLogicOpEnableEXT;
#define vkCmdSetLogicOpEnableEXT glad_debug_vkCmdSetLogicOpEnableEXT
GLAD_API_CALL PFN_vkCmdSetPatchControlPointsEXT glad_vkCmdSetPatchControlPointsEXT;
GLAD_API_CALL PFN_vkCmdSetPatchControlPointsEXT glad_debug_vkCmdSetPatchControlPointsEXT;
#define vkCmdSetPatchControlPointsEXT glad_debug_vkCmdSetPatchControlPointsEXT
GLAD_API_CALL PFN_vkCmdSetPerformanceMarkerINTEL glad_vkCmdSetPerformanceMarkerINTEL;
GLAD_API_CALL PFN_vkCmdSetPerformanceMarkerINTEL glad_debug_vkCmdSetPerformanceMarkerINTEL;
#define vkCmdSetPerformanceMarkerINTEL glad_debug_vkCmdSetPerformanceMarkerINTEL
GLAD_API_CALL PFN_vkCmdSetPerformanceOverrideINTEL glad_vkCmdSetPerformanceOverrideINTEL;
GLAD_API_CALL PFN_vkCmdSetPerformanceOverrideINTEL glad_debug_vkCmdSetPerformanceOverrideINTEL;
#define vkCmdSetPerformanceOverrideINTEL glad_debug_vkCmdSetPerformanceOverrideINTEL
GLAD_API_CALL PFN_vkCmdSetPerformanceStreamMarkerINTEL glad_vkCmdSetPerformanceStreamMarkerINTEL;
GLAD_API_CALL PFN_vkCmdSetPerformanceStreamMarkerINTEL glad_debug_vkCmdSetPerformanceStreamMarkerINTEL;
#define vkCmdSetPerformanceStreamMarkerINTEL glad_debug_vkCmdSetPerformanceStreamMarkerINTEL
GLAD_API_CALL PFN_vkCmdSetPolygonModeEXT glad_vkCmdSetPolygonModeEXT;
GLAD_API_CALL PFN_vkCmdSetPolygonModeEXT glad_debug_vkCmdSetPolygonModeEXT;
#define vkCmdSetPolygonModeEXT glad_debug_vkCmdSetPolygonModeEXT
GLAD_API_CALL PFN_vkCmdSetPrimitiveRestartEnable glad_vkCmdSetPrimitiveRestartEnable;
GLAD_API_CALL PFN_vkCmdSetPrimitiveRestartEnable glad_debug_vkCmdSetPrimitiveRestartEnable;
#define vkCmdSetPrimitiveRestartEnable glad_debug_vkCmdSetPrimitiveRestartEnable
GLAD_API_CALL PFN_vkCmdSetPrimitiveRestartEnableEXT glad_vkCmdSetPrimitiveRestartEnableEXT;
GLAD_API_CALL PFN_vkCmdSetPrimitiveRestartEnableEXT glad_debug_vkCmdSetPrimitiveRestartEnableEXT;
#define vkCmdSetPrimitiveRestartEnableEXT glad_debug_vkCmdSetPrimitiveRestartEnableEXT
GLAD_API_CALL PFN_vkCmdSetPrimitiveTopology glad_vkCmdSetPrimitiveTopology;
GLAD_API_CALL PFN_vkCmdSetPrimitiveTopology glad_debug_vkCmdSetPrimitiveTopology;
#define vkCmdSetPrimitiveTopology glad_debug_vkCmdSetPrimitiveTopology
GLAD_API_CALL PFN_vkCmdSetPrimitiveTopologyEXT glad_vkCmdSetPrimitiveTopologyEXT;
GLAD_API_CALL PFN_vkCmdSetPrimitiveTopologyEXT glad_debug_vkCmdSetPrimitiveTopologyEXT;
#define vkCmdSetPrimitiveTopologyEXT glad_debug_vkCmdSetPrimitiveTopologyEXT
GLAD_API_CALL PFN_vkCmdSetProvokingVertexModeEXT glad_vkCmdSetProvokingVertexModeEXT;
GLAD_API_CALL PFN_vkCmdSetProvokingVertexModeEXT glad_debug_vkCmdSetProvokingVertexModeEXT;
#define vkCmdSetProvokingVertexModeEXT glad_debug_vkCmdSetProvokingVertexModeEXT
GLAD_API_CALL PFN_vkCmdSetRasterizationSamplesEXT glad_vkCmdSetRasterizationSamplesEXT;
GLAD_API_CALL PFN_vkCmdSetRasterizationSamplesEXT glad_debug_vkCmdSetRasterizationSamplesEXT;
#define vkCmdSetRasterizationSamplesEXT glad_debug_vkCmdSetRasterizationSamplesEXT
GLAD_API_CALL PFN_vkCmdSetRasterizationStreamEXT glad_vkCmdSetRasterizationStreamEXT;
GLAD_API_CALL PFN_vkCmdSetRasterizationStreamEXT glad_debug_vkCmdSetRasterizationStreamEXT;
#define vkCmdSetRasterizationStreamEXT glad_debug_vkCmdSetRasterizationStreamEXT
GLAD_API_CALL PFN_vkCmdSetRasterizerDiscardEnable glad_vkCmdSetRasterizerDiscardEnable;
GLAD_API_CALL PFN_vkCmdSetRasterizerDiscardEnable glad_debug_vkCmdSetRasterizerDiscardEnable;
#define vkCmdSetRasterizerDiscardEnable glad_debug_vkCmdSetRasterizerDiscardEnable
GLAD_API_CALL PFN_vkCmdSetRasterizerDiscardEnableEXT glad_vkCmdSetRasterizerDiscardEnableEXT;
GLAD_API_CALL PFN_vkCmdSetRasterizerDiscardEnableEXT glad_debug_vkCmdSetRasterizerDiscardEnableEXT;
#define vkCmdSetRasterizerDiscardEnableEXT glad_debug_vkCmdSetRasterizerDiscardEnableEXT
GLAD_API_CALL PFN_vkCmdSetRayTracingPipelineStackSizeKHR glad_vkCmdSetRayTracingPipelineStackSizeKHR;
GLAD_API_CALL PFN_vkCmdSetRayTracingPipelineStackSizeKHR glad_debug_vkCmdSetRayTracingPipelineStackSizeKHR;
#define vkCmdSetRayTracingPipelineStackSizeKHR glad_debug_vkCmdSetRayTracingPipelineStackSizeKHR
GLAD_API_CALL PFN_vkCmdSetRepresentativeFragmentTestEnableNV glad_vkCmdSetRepresentativeFragmentTestEnableNV;
GLAD_API_CALL PFN_vkCmdSetRepresentativeFragmentTestEnableNV glad_debug_vkCmdSetRepresentativeFragmentTestEnableNV;
#define vkCmdSetRepresentativeFragmentTestEnableNV glad_debug_vkCmdSetRepresentativeFragmentTestEnableNV
GLAD_API_CALL PFN_vkCmdSetSampleLocationsEXT glad_vkCmdSetSampleLocationsEXT;
GLAD_API_CALL PFN_vkCmdSetSampleLocationsEXT glad_debug_vkCmdSetSampleLocationsEXT;
#define vkCmdSetSampleLocationsEXT glad_debug_vkCmdSetSampleLocationsEXT
GLAD_API_CALL PFN_vkCmdSetSampleLocationsEnableEXT glad_vkCmdSetSampleLocationsEnableEXT;
GLAD_API_CALL PFN_vkCmdSetSampleLocationsEnableEXT glad_debug_vkCmdSetSampleLocationsEnableEXT;
#define vkCmdSetSampleLocationsEnableEXT glad_debug_vkCmdSetSampleLocationsEnableEXT
GLAD_API_CALL PFN_vkCmdSetSampleMaskEXT glad_vkCmdSetSampleMaskEXT;
GLAD_API_CALL PFN_vkCmdSetSampleMaskEXT glad_debug_vkCmdSetSampleMaskEXT;
#define vkCmdSetSampleMaskEXT glad_debug_vkCmdSetSampleMaskEXT
GLAD_API_CALL PFN_vkCmdSetScissor glad_vkCmdSetScissor;
GLAD_API_CALL PFN_vkCmdSetScissor glad_debug_vkCmdSetScissor;
#define vkCmdSetScissor glad_debug_vkCmdSetScissor
GLAD_API_CALL PFN_vkCmdSetScissorWithCount glad_vkCmdSetScissorWithCount;
GLAD_API_CALL PFN_vkCmdSetScissorWithCount glad_debug_vkCmdSetScissorWithCount;
#define vkCmdSetScissorWithCount glad_debug_vkCmdSetScissorWithCount
GLAD_API_CALL PFN_vkCmdSetScissorWithCountEXT glad_vkCmdSetScissorWithCountEXT;
GLAD_API_CALL PFN_vkCmdSetScissorWithCountEXT glad_debug_vkCmdSetScissorWithCountEXT;
#define vkCmdSetScissorWithCountEXT glad_debug_vkCmdSetScissorWithCountEXT
GLAD_API_CALL PFN_vkCmdSetShadingRateImageEnableNV glad_vkCmdSetShadingRateImageEnableNV;
GLAD_API_CALL PFN_vkCmdSetShadingRateImageEnableNV glad_debug_vkCmdSetShadingRateImageEnableNV;
#define vkCmdSetShadingRateImageEnableNV glad_debug_vkCmdSetShadingRateImageEnableNV
GLAD_API_CALL PFN_vkCmdSetStencilCompareMask glad_vkCmdSetStencilCompareMask;
GLAD_API_CALL PFN_vkCmdSetStencilCompareMask glad_debug_vkCmdSetStencilCompareMask;
#define vkCmdSetStencilCompareMask glad_debug_vkCmdSetStencilCompareMask
GLAD_API_CALL PFN_vkCmdSetStencilOp glad_vkCmdSetStencilOp;
GLAD_API_CALL PFN_vkCmdSetStencilOp glad_debug_vkCmdSetStencilOp;
#define vkCmdSetStencilOp glad_debug_vkCmdSetStencilOp
GLAD_API_CALL PFN_vkCmdSetStencilOpEXT glad_vkCmdSetStencilOpEXT;
GLAD_API_CALL PFN_vkCmdSetStencilOpEXT glad_debug_vkCmdSetStencilOpEXT;
#define vkCmdSetStencilOpEXT glad_debug_vkCmdSetStencilOpEXT
GLAD_API_CALL PFN_vkCmdSetStencilReference glad_vkCmdSetStencilReference;
GLAD_API_CALL PFN_vkCmdSetStencilReference glad_debug_vkCmdSetStencilReference;
#define vkCmdSetStencilReference glad_debug_vkCmdSetStencilReference
GLAD_API_CALL PFN_vkCmdSetStencilTestEnable glad_vkCmdSetStencilTestEnable;
GLAD_API_CALL PFN_vkCmdSetStencilTestEnable glad_debug_vkCmdSetStencilTestEnable;
#define vkCmdSetStencilTestEnable glad_debug_vkCmdSetStencilTestEnable
GLAD_API_CALL PFN_vkCmdSetStencilTestEnableEXT glad_vkCmdSetStencilTestEnableEXT;
GLAD_API_CALL PFN_vkCmdSetStencilTestEnableEXT glad_debug_vkCmdSetStencilTestEnableEXT;
#define vkCmdSetStencilTestEnableEXT glad_debug_vkCmdSetStencilTestEnableEXT
GLAD_API_CALL PFN_vkCmdSetStencilWriteMask glad_vkCmdSetStencilWriteMask;
GLAD_API_CALL PFN_vkCmdSetStencilWriteMask glad_debug_vkCmdSetStencilWriteMask;
#define vkCmdSetStencilWriteMask glad_debug_vkCmdSetStencilWriteMask
GLAD_API_CALL PFN_vkCmdSetTessellationDomainOriginEXT glad_vkCmdSetTessellationDomainOriginEXT;
GLAD_API_CALL PFN_vkCmdSetTessellationDomainOriginEXT glad_debug_vkCmdSetTessellationDomainOriginEXT;
#define vkCmdSetTessellationDomainOriginEXT glad_debug_vkCmdSetTessellationDomainOriginEXT
GLAD_API_CALL PFN_vkCmdSetVertexInputEXT glad_vkCmdSetVertexInputEXT;
GLAD_API_CALL PFN_vkCmdSetVertexInputEXT glad_debug_vkCmdSetVertexInputEXT;
#define vkCmdSetVertexInputEXT glad_debug_vkCmdSetVertexInputEXT
GLAD_API_CALL PFN_vkCmdSetViewport glad_vkCmdSetViewport;
GLAD_API_CALL PFN_vkCmdSetViewport glad_debug_vkCmdSetViewport;
#define vkCmdSetViewport glad_debug_vkCmdSetViewport
GLAD_API_CALL PFN_vkCmdSetViewportShadingRatePaletteNV glad_vkCmdSetViewportShadingRatePaletteNV;
GLAD_API_CALL PFN_vkCmdSetViewportShadingRatePaletteNV glad_debug_vkCmdSetViewportShadingRatePaletteNV;
#define vkCmdSetViewportShadingRatePaletteNV glad_debug_vkCmdSetViewportShadingRatePaletteNV
GLAD_API_CALL PFN_vkCmdSetViewportSwizzleNV glad_vkCmdSetViewportSwizzleNV;
GLAD_API_CALL PFN_vkCmdSetViewportSwizzleNV glad_debug_vkCmdSetViewportSwizzleNV;
#define vkCmdSetViewportSwizzleNV glad_debug_vkCmdSetViewportSwizzleNV
GLAD_API_CALL PFN_vkCmdSetViewportWScalingEnableNV glad_vkCmdSetViewportWScalingEnableNV;
GLAD_API_CALL PFN_vkCmdSetViewportWScalingEnableNV glad_debug_vkCmdSetViewportWScalingEnableNV;
#define vkCmdSetViewportWScalingEnableNV glad_debug_vkCmdSetViewportWScalingEnableNV
GLAD_API_CALL PFN_vkCmdSetViewportWScalingNV glad_vkCmdSetViewportWScalingNV;
GLAD_API_CALL PFN_vkCmdSetViewportWScalingNV glad_debug_vkCmdSetViewportWScalingNV;
#define vkCmdSetViewportWScalingNV glad_debug_vkCmdSetViewportWScalingNV
GLAD_API_CALL PFN_vkCmdSetViewportWithCount glad_vkCmdSetViewportWithCount;
GLAD_API_CALL PFN_vkCmdSetViewportWithCount glad_debug_vkCmdSetViewportWithCount;
#define vkCmdSetViewportWithCount glad_debug_vkCmdSetViewportWithCount
GLAD_API_CALL PFN_vkCmdSetViewportWithCountEXT glad_vkCmdSetViewportWithCountEXT;
GLAD_API_CALL PFN_vkCmdSetViewportWithCountEXT glad_debug_vkCmdSetViewportWithCountEXT;
#define vkCmdSetViewportWithCountEXT glad_debug_vkCmdSetViewportWithCountEXT
GLAD_API_CALL PFN_vkCmdSubpassShadingHUAWEI glad_vkCmdSubpassShadingHUAWEI;
GLAD_API_CALL PFN_vkCmdSubpassShadingHUAWEI glad_debug_vkCmdSubpassShadingHUAWEI;
#define vkCmdSubpassShadingHUAWEI glad_debug_vkCmdSubpassShadingHUAWEI
GLAD_API_CALL PFN_vkCmdTraceRaysIndirect2KHR glad_vkCmdTraceRaysIndirect2KHR;
GLAD_API_CALL PFN_vkCmdTraceRaysIndirect2KHR glad_debug_vkCmdTraceRaysIndirect2KHR;
#define vkCmdTraceRaysIndirect2KHR glad_debug_vkCmdTraceRaysIndirect2KHR
GLAD_API_CALL PFN_vkCmdTraceRaysIndirectKHR glad_vkCmdTraceRaysIndirectKHR;
GLAD_API_CALL PFN_vkCmdTraceRaysIndirectKHR glad_debug_vkCmdTraceRaysIndirectKHR;
#define vkCmdTraceRaysIndirectKHR glad_debug_vkCmdTraceRaysIndirectKHR
GLAD_API_CALL PFN_vkCmdTraceRaysKHR glad_vkCmdTraceRaysKHR;
GLAD_API_CALL PFN_vkCmdTraceRaysKHR glad_debug_vkCmdTraceRaysKHR;
#define vkCmdTraceRaysKHR glad_debug_vkCmdTraceRaysKHR
GLAD_API_CALL PFN_vkCmdTraceRaysNV glad_vkCmdTraceRaysNV;
GLAD_API_CALL PFN_vkCmdTraceRaysNV glad_debug_vkCmdTraceRaysNV;
#define vkCmdTraceRaysNV glad_debug_vkCmdTraceRaysNV
GLAD_API_CALL PFN_vkCmdUpdateBuffer glad_vkCmdUpdateBuffer;
GLAD_API_CALL PFN_vkCmdUpdateBuffer glad_debug_vkCmdUpdateBuffer;
#define vkCmdUpdateBuffer glad_debug_vkCmdUpdateBuffer
GLAD_API_CALL PFN_vkCmdUpdatePipelineIndirectBufferNV glad_vkCmdUpdatePipelineIndirectBufferNV;
GLAD_API_CALL PFN_vkCmdUpdatePipelineIndirectBufferNV glad_debug_vkCmdUpdatePipelineIndirectBufferNV;
#define vkCmdUpdatePipelineIndirectBufferNV glad_debug_vkCmdUpdatePipelineIndirectBufferNV
GLAD_API_CALL PFN_vkCmdWaitEvents glad_vkCmdWaitEvents;
GLAD_API_CALL PFN_vkCmdWaitEvents glad_debug_vkCmdWaitEvents;
#define vkCmdWaitEvents glad_debug_vkCmdWaitEvents
GLAD_API_CALL PFN_vkCmdWaitEvents2 glad_vkCmdWaitEvents2;
GLAD_API_CALL PFN_vkCmdWaitEvents2 glad_debug_vkCmdWaitEvents2;
#define vkCmdWaitEvents2 glad_debug_vkCmdWaitEvents2
GLAD_API_CALL PFN_vkCmdWaitEvents2KHR glad_vkCmdWaitEvents2KHR;
GLAD_API_CALL PFN_vkCmdWaitEvents2KHR glad_debug_vkCmdWaitEvents2KHR;
#define vkCmdWaitEvents2KHR glad_debug_vkCmdWaitEvents2KHR
GLAD_API_CALL PFN_vkCmdWriteAccelerationStructuresPropertiesKHR glad_vkCmdWriteAccelerationStructuresPropertiesKHR;
GLAD_API_CALL PFN_vkCmdWriteAccelerationStructuresPropertiesKHR glad_debug_vkCmdWriteAccelerationStructuresPropertiesKHR;
#define vkCmdWriteAccelerationStructuresPropertiesKHR glad_debug_vkCmdWriteAccelerationStructuresPropertiesKHR
GLAD_API_CALL PFN_vkCmdWriteAccelerationStructuresPropertiesNV glad_vkCmdWriteAccelerationStructuresPropertiesNV;
GLAD_API_CALL PFN_vkCmdWriteAccelerationStructuresPropertiesNV glad_debug_vkCmdWriteAccelerationStructuresPropertiesNV;
#define vkCmdWriteAccelerationStructuresPropertiesNV glad_debug_vkCmdWriteAccelerationStructuresPropertiesNV
GLAD_API_CALL PFN_vkCmdWriteBufferMarker2AMD glad_vkCmdWriteBufferMarker2AMD;
GLAD_API_CALL PFN_vkCmdWriteBufferMarker2AMD glad_debug_vkCmdWriteBufferMarker2AMD;
#define vkCmdWriteBufferMarker2AMD glad_debug_vkCmdWriteBufferMarker2AMD
GLAD_API_CALL PFN_vkCmdWriteBufferMarkerAMD glad_vkCmdWriteBufferMarkerAMD;
GLAD_API_CALL PFN_vkCmdWriteBufferMarkerAMD glad_debug_vkCmdWriteBufferMarkerAMD;
#define vkCmdWriteBufferMarkerAMD glad_debug_vkCmdWriteBufferMarkerAMD
GLAD_API_CALL PFN_vkCmdWriteMicromapsPropertiesEXT glad_vkCmdWriteMicromapsPropertiesEXT;
GLAD_API_CALL PFN_vkCmdWriteMicromapsPropertiesEXT glad_debug_vkCmdWriteMicromapsPropertiesEXT;
#define vkCmdWriteMicromapsPropertiesEXT glad_debug_vkCmdWriteMicromapsPropertiesEXT
GLAD_API_CALL PFN_vkCmdWriteTimestamp glad_vkCmdWriteTimestamp;
GLAD_API_CALL PFN_vkCmdWriteTimestamp glad_debug_vkCmdWriteTimestamp;
#define vkCmdWriteTimestamp glad_debug_vkCmdWriteTimestamp
GLAD_API_CALL PFN_vkCmdWriteTimestamp2 glad_vkCmdWriteTimestamp2;
GLAD_API_CALL PFN_vkCmdWriteTimestamp2 glad_debug_vkCmdWriteTimestamp2;
#define vkCmdWriteTimestamp2 glad_debug_vkCmdWriteTimestamp2
GLAD_API_CALL PFN_vkCmdWriteTimestamp2KHR glad_vkCmdWriteTimestamp2KHR;
GLAD_API_CALL PFN_vkCmdWriteTimestamp2KHR glad_debug_vkCmdWriteTimestamp2KHR;
#define vkCmdWriteTimestamp2KHR glad_debug_vkCmdWriteTimestamp2KHR
GLAD_API_CALL PFN_vkCompileDeferredNV glad_vkCompileDeferredNV;
GLAD_API_CALL PFN_vkCompileDeferredNV glad_debug_vkCompileDeferredNV;
#define vkCompileDeferredNV glad_debug_vkCompileDeferredNV
GLAD_API_CALL PFN_vkCopyAccelerationStructureKHR glad_vkCopyAccelerationStructureKHR;
GLAD_API_CALL PFN_vkCopyAccelerationStructureKHR glad_debug_vkCopyAccelerationStructureKHR;
#define vkCopyAccelerationStructureKHR glad_debug_vkCopyAccelerationStructureKHR
GLAD_API_CALL PFN_vkCopyAccelerationStructureToMemoryKHR glad_vkCopyAccelerationStructureToMemoryKHR;
GLAD_API_CALL PFN_vkCopyAccelerationStructureToMemoryKHR glad_debug_vkCopyAccelerationStructureToMemoryKHR;
#define vkCopyAccelerationStructureToMemoryKHR glad_debug_vkCopyAccelerationStructureToMemoryKHR
GLAD_API_CALL PFN_vkCopyImageToImageEXT glad_vkCopyImageToImageEXT;
GLAD_API_CALL PFN_vkCopyImageToImageEXT glad_debug_vkCopyImageToImageEXT;
#define vkCopyImageToImageEXT glad_debug_vkCopyImageToImageEXT
GLAD_API_CALL PFN_vkCopyImageToMemoryEXT glad_vkCopyImageToMemoryEXT;
GLAD_API_CALL PFN_vkCopyImageToMemoryEXT glad_debug_vkCopyImageToMemoryEXT;
#define vkCopyImageToMemoryEXT glad_debug_vkCopyImageToMemoryEXT
GLAD_API_CALL PFN_vkCopyMemoryToAccelerationStructureKHR glad_vkCopyMemoryToAccelerationStructureKHR;
GLAD_API_CALL PFN_vkCopyMemoryToAccelerationStructureKHR glad_debug_vkCopyMemoryToAccelerationStructureKHR;
#define vkCopyMemoryToAccelerationStructureKHR glad_debug_vkCopyMemoryToAccelerationStructureKHR
GLAD_API_CALL PFN_vkCopyMemoryToImageEXT glad_vkCopyMemoryToImageEXT;
GLAD_API_CALL PFN_vkCopyMemoryToImageEXT glad_debug_vkCopyMemoryToImageEXT;
#define vkCopyMemoryToImageEXT glad_debug_vkCopyMemoryToImageEXT
GLAD_API_CALL PFN_vkCopyMemoryToMicromapEXT glad_vkCopyMemoryToMicromapEXT;
GLAD_API_CALL PFN_vkCopyMemoryToMicromapEXT glad_debug_vkCopyMemoryToMicromapEXT;
#define vkCopyMemoryToMicromapEXT glad_debug_vkCopyMemoryToMicromapEXT
GLAD_API_CALL PFN_vkCopyMicromapEXT glad_vkCopyMicromapEXT;
GLAD_API_CALL PFN_vkCopyMicromapEXT glad_debug_vkCopyMicromapEXT;
#define vkCopyMicromapEXT glad_debug_vkCopyMicromapEXT
GLAD_API_CALL PFN_vkCopyMicromapToMemoryEXT glad_vkCopyMicromapToMemoryEXT;
GLAD_API_CALL PFN_vkCopyMicromapToMemoryEXT glad_debug_vkCopyMicromapToMemoryEXT;
#define vkCopyMicromapToMemoryEXT glad_debug_vkCopyMicromapToMemoryEXT
GLAD_API_CALL PFN_vkCreateAccelerationStructureKHR glad_vkCreateAccelerationStructureKHR;
GLAD_API_CALL PFN_vkCreateAccelerationStructureKHR glad_debug_vkCreateAccelerationStructureKHR;
#define vkCreateAccelerationStructureKHR glad_debug_vkCreateAccelerationStructureKHR
GLAD_API_CALL PFN_vkCreateAccelerationStructureNV glad_vkCreateAccelerationStructureNV;
GLAD_API_CALL PFN_vkCreateAccelerationStructureNV glad_debug_vkCreateAccelerationStructureNV;
#define vkCreateAccelerationStructureNV glad_debug_vkCreateAccelerationStructureNV
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
GLAD_API_CALL PFN_vkCreateAndroidSurfaceKHR glad_vkCreateAndroidSurfaceKHR;
GLAD_API_CALL PFN_vkCreateAndroidSurfaceKHR glad_debug_vkCreateAndroidSurfaceKHR;
	#define vkCreateAndroidSurfaceKHR glad_debug_vkCreateAndroidSurfaceKHR

#endif
GLAD_API_CALL PFN_vkCreateBuffer glad_vkCreateBuffer;
GLAD_API_CALL PFN_vkCreateBuffer glad_debug_vkCreateBuffer;
#define vkCreateBuffer glad_debug_vkCreateBuffer
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkCreateBufferCollectionFUCHSIA glad_vkCreateBufferCollectionFUCHSIA;
GLAD_API_CALL PFN_vkCreateBufferCollectionFUCHSIA glad_debug_vkCreateBufferCollectionFUCHSIA;
	#define vkCreateBufferCollectionFUCHSIA glad_debug_vkCreateBufferCollectionFUCHSIA

#endif
GLAD_API_CALL PFN_vkCreateBufferView glad_vkCreateBufferView;
GLAD_API_CALL PFN_vkCreateBufferView glad_debug_vkCreateBufferView;
#define vkCreateBufferView glad_debug_vkCreateBufferView
GLAD_API_CALL PFN_vkCreateCommandPool glad_vkCreateCommandPool;
GLAD_API_CALL PFN_vkCreateCommandPool glad_debug_vkCreateCommandPool;
#define vkCreateCommandPool glad_debug_vkCreateCommandPool
GLAD_API_CALL PFN_vkCreateComputePipelines glad_vkCreateComputePipelines;
GLAD_API_CALL PFN_vkCreateComputePipelines glad_debug_vkCreateComputePipelines;
#define vkCreateComputePipelines glad_debug_vkCreateComputePipelines
GLAD_API_CALL PFN_vkCreateCuFunctionNVX glad_vkCreateCuFunctionNVX;
GLAD_API_CALL PFN_vkCreateCuFunctionNVX glad_debug_vkCreateCuFunctionNVX;
#define vkCreateCuFunctionNVX glad_debug_vkCreateCuFunctionNVX
GLAD_API_CALL PFN_vkCreateCuModuleNVX glad_vkCreateCuModuleNVX;
GLAD_API_CALL PFN_vkCreateCuModuleNVX glad_debug_vkCreateCuModuleNVX;
#define vkCreateCuModuleNVX glad_debug_vkCreateCuModuleNVX
GLAD_API_CALL PFN_vkCreateDebugReportCallbackEXT glad_vkCreateDebugReportCallbackEXT;
GLAD_API_CALL PFN_vkCreateDebugReportCallbackEXT glad_debug_vkCreateDebugReportCallbackEXT;
#define vkCreateDebugReportCallbackEXT glad_debug_vkCreateDebugReportCallbackEXT
GLAD_API_CALL PFN_vkCreateDebugUtilsMessengerEXT glad_vkCreateDebugUtilsMessengerEXT;
GLAD_API_CALL PFN_vkCreateDebugUtilsMessengerEXT glad_debug_vkCreateDebugUtilsMessengerEXT;
#define vkCreateDebugUtilsMessengerEXT glad_debug_vkCreateDebugUtilsMessengerEXT
GLAD_API_CALL PFN_vkCreateDeferredOperationKHR glad_vkCreateDeferredOperationKHR;
GLAD_API_CALL PFN_vkCreateDeferredOperationKHR glad_debug_vkCreateDeferredOperationKHR;
#define vkCreateDeferredOperationKHR glad_debug_vkCreateDeferredOperationKHR
GLAD_API_CALL PFN_vkCreateDescriptorPool glad_vkCreateDescriptorPool;
GLAD_API_CALL PFN_vkCreateDescriptorPool glad_debug_vkCreateDescriptorPool;
#define vkCreateDescriptorPool glad_debug_vkCreateDescriptorPool
GLAD_API_CALL PFN_vkCreateDescriptorSetLayout glad_vkCreateDescriptorSetLayout;
GLAD_API_CALL PFN_vkCreateDescriptorSetLayout glad_debug_vkCreateDescriptorSetLayout;
#define vkCreateDescriptorSetLayout glad_debug_vkCreateDescriptorSetLayout
GLAD_API_CALL PFN_vkCreateDescriptorUpdateTemplate glad_vkCreateDescriptorUpdateTemplate;
GLAD_API_CALL PFN_vkCreateDescriptorUpdateTemplate glad_debug_vkCreateDescriptorUpdateTemplate;
#define vkCreateDescriptorUpdateTemplate glad_debug_vkCreateDescriptorUpdateTemplate
GLAD_API_CALL PFN_vkCreateDescriptorUpdateTemplateKHR glad_vkCreateDescriptorUpdateTemplateKHR;
GLAD_API_CALL PFN_vkCreateDescriptorUpdateTemplateKHR glad_debug_vkCreateDescriptorUpdateTemplateKHR;
#define vkCreateDescriptorUpdateTemplateKHR glad_debug_vkCreateDescriptorUpdateTemplateKHR
GLAD_API_CALL PFN_vkCreateDevice glad_vkCreateDevice;
GLAD_API_CALL PFN_vkCreateDevice glad_debug_vkCreateDevice;
#define vkCreateDevice glad_debug_vkCreateDevice
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
GLAD_API_CALL PFN_vkCreateDirectFBSurfaceEXT glad_vkCreateDirectFBSurfaceEXT;
GLAD_API_CALL PFN_vkCreateDirectFBSurfaceEXT glad_debug_vkCreateDirectFBSurfaceEXT;
	#define vkCreateDirectFBSurfaceEXT glad_debug_vkCreateDirectFBSurfaceEXT

#endif
GLAD_API_CALL PFN_vkCreateDisplayModeKHR glad_vkCreateDisplayModeKHR;
GLAD_API_CALL PFN_vkCreateDisplayModeKHR glad_debug_vkCreateDisplayModeKHR;
#define vkCreateDisplayModeKHR glad_debug_vkCreateDisplayModeKHR
GLAD_API_CALL PFN_vkCreateDisplayPlaneSurfaceKHR glad_vkCreateDisplayPlaneSurfaceKHR;
GLAD_API_CALL PFN_vkCreateDisplayPlaneSurfaceKHR glad_debug_vkCreateDisplayPlaneSurfaceKHR;
#define vkCreateDisplayPlaneSurfaceKHR glad_debug_vkCreateDisplayPlaneSurfaceKHR
GLAD_API_CALL PFN_vkCreateEvent glad_vkCreateEvent;
GLAD_API_CALL PFN_vkCreateEvent glad_debug_vkCreateEvent;
#define vkCreateEvent glad_debug_vkCreateEvent
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkCreateExecutionGraphPipelinesAMDX glad_vkCreateExecutionGraphPipelinesAMDX;
GLAD_API_CALL PFN_vkCreateExecutionGraphPipelinesAMDX glad_debug_vkCreateExecutionGraphPipelinesAMDX;
	#define vkCreateExecutionGraphPipelinesAMDX glad_debug_vkCreateExecutionGraphPipelinesAMDX

#endif
GLAD_API_CALL PFN_vkCreateFence glad_vkCreateFence;
GLAD_API_CALL PFN_vkCreateFence glad_debug_vkCreateFence;
#define vkCreateFence glad_debug_vkCreateFence
GLAD_API_CALL PFN_vkCreateFramebuffer glad_vkCreateFramebuffer;
GLAD_API_CALL PFN_vkCreateFramebuffer glad_debug_vkCreateFramebuffer;
#define vkCreateFramebuffer glad_debug_vkCreateFramebuffer
GLAD_API_CALL PFN_vkCreateGraphicsPipelines glad_vkCreateGraphicsPipelines;
GLAD_API_CALL PFN_vkCreateGraphicsPipelines glad_debug_vkCreateGraphicsPipelines;
#define vkCreateGraphicsPipelines glad_debug_vkCreateGraphicsPipelines
GLAD_API_CALL PFN_vkCreateHeadlessSurfaceEXT glad_vkCreateHeadlessSurfaceEXT;
GLAD_API_CALL PFN_vkCreateHeadlessSurfaceEXT glad_debug_vkCreateHeadlessSurfaceEXT;
#define vkCreateHeadlessSurfaceEXT glad_debug_vkCreateHeadlessSurfaceEXT
#if defined(VK_USE_PLATFORM_IOS_MVK)
GLAD_API_CALL PFN_vkCreateIOSSurfaceMVK glad_vkCreateIOSSurfaceMVK;
GLAD_API_CALL PFN_vkCreateIOSSurfaceMVK glad_debug_vkCreateIOSSurfaceMVK;
	#define vkCreateIOSSurfaceMVK glad_debug_vkCreateIOSSurfaceMVK

#endif
GLAD_API_CALL PFN_vkCreateImage glad_vkCreateImage;
GLAD_API_CALL PFN_vkCreateImage glad_debug_vkCreateImage;
#define vkCreateImage glad_debug_vkCreateImage
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkCreateImagePipeSurfaceFUCHSIA glad_vkCreateImagePipeSurfaceFUCHSIA;
GLAD_API_CALL PFN_vkCreateImagePipeSurfaceFUCHSIA glad_debug_vkCreateImagePipeSurfaceFUCHSIA;
	#define vkCreateImagePipeSurfaceFUCHSIA glad_debug_vkCreateImagePipeSurfaceFUCHSIA

#endif
GLAD_API_CALL PFN_vkCreateImageView glad_vkCreateImageView;
GLAD_API_CALL PFN_vkCreateImageView glad_debug_vkCreateImageView;
#define vkCreateImageView glad_debug_vkCreateImageView
GLAD_API_CALL PFN_vkCreateIndirectCommandsLayoutNV glad_vkCreateIndirectCommandsLayoutNV;
GLAD_API_CALL PFN_vkCreateIndirectCommandsLayoutNV glad_debug_vkCreateIndirectCommandsLayoutNV;
#define vkCreateIndirectCommandsLayoutNV glad_debug_vkCreateIndirectCommandsLayoutNV
GLAD_API_CALL PFN_vkCreateInstance glad_vkCreateInstance;
GLAD_API_CALL PFN_vkCreateInstance glad_debug_vkCreateInstance;
#define vkCreateInstance glad_debug_vkCreateInstance
#if defined(VK_USE_PLATFORM_MACOS_MVK)
GLAD_API_CALL PFN_vkCreateMacOSSurfaceMVK glad_vkCreateMacOSSurfaceMVK;
GLAD_API_CALL PFN_vkCreateMacOSSurfaceMVK glad_debug_vkCreateMacOSSurfaceMVK;
	#define vkCreateMacOSSurfaceMVK glad_debug_vkCreateMacOSSurfaceMVK

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
GLAD_API_CALL PFN_vkCreateMetalSurfaceEXT glad_vkCreateMetalSurfaceEXT;
GLAD_API_CALL PFN_vkCreateMetalSurfaceEXT glad_debug_vkCreateMetalSurfaceEXT;
	#define vkCreateMetalSurfaceEXT glad_debug_vkCreateMetalSurfaceEXT

#endif
GLAD_API_CALL PFN_vkCreateMicromapEXT glad_vkCreateMicromapEXT;
GLAD_API_CALL PFN_vkCreateMicromapEXT glad_debug_vkCreateMicromapEXT;
#define vkCreateMicromapEXT glad_debug_vkCreateMicromapEXT
GLAD_API_CALL PFN_vkCreateOpticalFlowSessionNV glad_vkCreateOpticalFlowSessionNV;
GLAD_API_CALL PFN_vkCreateOpticalFlowSessionNV glad_debug_vkCreateOpticalFlowSessionNV;
#define vkCreateOpticalFlowSessionNV glad_debug_vkCreateOpticalFlowSessionNV
GLAD_API_CALL PFN_vkCreatePipelineCache glad_vkCreatePipelineCache;
GLAD_API_CALL PFN_vkCreatePipelineCache glad_debug_vkCreatePipelineCache;
#define vkCreatePipelineCache glad_debug_vkCreatePipelineCache
GLAD_API_CALL PFN_vkCreatePipelineLayout glad_vkCreatePipelineLayout;
GLAD_API_CALL PFN_vkCreatePipelineLayout glad_debug_vkCreatePipelineLayout;
#define vkCreatePipelineLayout glad_debug_vkCreatePipelineLayout
GLAD_API_CALL PFN_vkCreatePrivateDataSlot glad_vkCreatePrivateDataSlot;
GLAD_API_CALL PFN_vkCreatePrivateDataSlot glad_debug_vkCreatePrivateDataSlot;
#define vkCreatePrivateDataSlot glad_debug_vkCreatePrivateDataSlot
GLAD_API_CALL PFN_vkCreatePrivateDataSlotEXT glad_vkCreatePrivateDataSlotEXT;
GLAD_API_CALL PFN_vkCreatePrivateDataSlotEXT glad_debug_vkCreatePrivateDataSlotEXT;
#define vkCreatePrivateDataSlotEXT glad_debug_vkCreatePrivateDataSlotEXT
GLAD_API_CALL PFN_vkCreateQueryPool glad_vkCreateQueryPool;
GLAD_API_CALL PFN_vkCreateQueryPool glad_debug_vkCreateQueryPool;
#define vkCreateQueryPool glad_debug_vkCreateQueryPool
GLAD_API_CALL PFN_vkCreateRayTracingPipelinesKHR glad_vkCreateRayTracingPipelinesKHR;
GLAD_API_CALL PFN_vkCreateRayTracingPipelinesKHR glad_debug_vkCreateRayTracingPipelinesKHR;
#define vkCreateRayTracingPipelinesKHR glad_debug_vkCreateRayTracingPipelinesKHR
GLAD_API_CALL PFN_vkCreateRayTracingPipelinesNV glad_vkCreateRayTracingPipelinesNV;
GLAD_API_CALL PFN_vkCreateRayTracingPipelinesNV glad_debug_vkCreateRayTracingPipelinesNV;
#define vkCreateRayTracingPipelinesNV glad_debug_vkCreateRayTracingPipelinesNV
GLAD_API_CALL PFN_vkCreateRenderPass glad_vkCreateRenderPass;
GLAD_API_CALL PFN_vkCreateRenderPass glad_debug_vkCreateRenderPass;
#define vkCreateRenderPass glad_debug_vkCreateRenderPass
GLAD_API_CALL PFN_vkCreateRenderPass2 glad_vkCreateRenderPass2;
GLAD_API_CALL PFN_vkCreateRenderPass2 glad_debug_vkCreateRenderPass2;
#define vkCreateRenderPass2 glad_debug_vkCreateRenderPass2
GLAD_API_CALL PFN_vkCreateRenderPass2KHR glad_vkCreateRenderPass2KHR;
GLAD_API_CALL PFN_vkCreateRenderPass2KHR glad_debug_vkCreateRenderPass2KHR;
#define vkCreateRenderPass2KHR glad_debug_vkCreateRenderPass2KHR
GLAD_API_CALL PFN_vkCreateSampler glad_vkCreateSampler;
GLAD_API_CALL PFN_vkCreateSampler glad_debug_vkCreateSampler;
#define vkCreateSampler glad_debug_vkCreateSampler
GLAD_API_CALL PFN_vkCreateSamplerYcbcrConversion glad_vkCreateSamplerYcbcrConversion;
GLAD_API_CALL PFN_vkCreateSamplerYcbcrConversion glad_debug_vkCreateSamplerYcbcrConversion;
#define vkCreateSamplerYcbcrConversion glad_debug_vkCreateSamplerYcbcrConversion
GLAD_API_CALL PFN_vkCreateSamplerYcbcrConversionKHR glad_vkCreateSamplerYcbcrConversionKHR;
GLAD_API_CALL PFN_vkCreateSamplerYcbcrConversionKHR glad_debug_vkCreateSamplerYcbcrConversionKHR;
#define vkCreateSamplerYcbcrConversionKHR glad_debug_vkCreateSamplerYcbcrConversionKHR
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
GLAD_API_CALL PFN_vkCreateScreenSurfaceQNX glad_vkCreateScreenSurfaceQNX;
GLAD_API_CALL PFN_vkCreateScreenSurfaceQNX glad_debug_vkCreateScreenSurfaceQNX;
	#define vkCreateScreenSurfaceQNX glad_debug_vkCreateScreenSurfaceQNX

#endif
GLAD_API_CALL PFN_vkCreateSemaphore glad_vkCreateSemaphore;
GLAD_API_CALL PFN_vkCreateSemaphore glad_debug_vkCreateSemaphore;
#define vkCreateSemaphore glad_debug_vkCreateSemaphore
GLAD_API_CALL PFN_vkCreateShaderModule glad_vkCreateShaderModule;
GLAD_API_CALL PFN_vkCreateShaderModule glad_debug_vkCreateShaderModule;
#define vkCreateShaderModule glad_debug_vkCreateShaderModule
GLAD_API_CALL PFN_vkCreateShadersEXT glad_vkCreateShadersEXT;
GLAD_API_CALL PFN_vkCreateShadersEXT glad_debug_vkCreateShadersEXT;
#define vkCreateShadersEXT glad_debug_vkCreateShadersEXT
GLAD_API_CALL PFN_vkCreateSharedSwapchainsKHR glad_vkCreateSharedSwapchainsKHR;
GLAD_API_CALL PFN_vkCreateSharedSwapchainsKHR glad_debug_vkCreateSharedSwapchainsKHR;
#define vkCreateSharedSwapchainsKHR glad_debug_vkCreateSharedSwapchainsKHR
#if defined(VK_USE_PLATFORM_GGP)
GLAD_API_CALL PFN_vkCreateStreamDescriptorSurfaceGGP glad_vkCreateStreamDescriptorSurfaceGGP;
GLAD_API_CALL PFN_vkCreateStreamDescriptorSurfaceGGP glad_debug_vkCreateStreamDescriptorSurfaceGGP;
	#define vkCreateStreamDescriptorSurfaceGGP glad_debug_vkCreateStreamDescriptorSurfaceGGP

#endif
GLAD_API_CALL PFN_vkCreateSwapchainKHR glad_vkCreateSwapchainKHR;
GLAD_API_CALL PFN_vkCreateSwapchainKHR glad_debug_vkCreateSwapchainKHR;
#define vkCreateSwapchainKHR glad_debug_vkCreateSwapchainKHR
GLAD_API_CALL PFN_vkCreateValidationCacheEXT glad_vkCreateValidationCacheEXT;
GLAD_API_CALL PFN_vkCreateValidationCacheEXT glad_debug_vkCreateValidationCacheEXT;
#define vkCreateValidationCacheEXT glad_debug_vkCreateValidationCacheEXT
#if defined(VK_USE_PLATFORM_VI_NN)
GLAD_API_CALL PFN_vkCreateViSurfaceNN glad_vkCreateViSurfaceNN;
GLAD_API_CALL PFN_vkCreateViSurfaceNN glad_debug_vkCreateViSurfaceNN;
	#define vkCreateViSurfaceNN glad_debug_vkCreateViSurfaceNN

#endif
GLAD_API_CALL PFN_vkCreateVideoSessionKHR glad_vkCreateVideoSessionKHR;
GLAD_API_CALL PFN_vkCreateVideoSessionKHR glad_debug_vkCreateVideoSessionKHR;
#define vkCreateVideoSessionKHR glad_debug_vkCreateVideoSessionKHR
GLAD_API_CALL PFN_vkCreateVideoSessionParametersKHR glad_vkCreateVideoSessionParametersKHR;
GLAD_API_CALL PFN_vkCreateVideoSessionParametersKHR glad_debug_vkCreateVideoSessionParametersKHR;
#define vkCreateVideoSessionParametersKHR glad_debug_vkCreateVideoSessionParametersKHR
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
GLAD_API_CALL PFN_vkCreateWaylandSurfaceKHR glad_vkCreateWaylandSurfaceKHR;
GLAD_API_CALL PFN_vkCreateWaylandSurfaceKHR glad_debug_vkCreateWaylandSurfaceKHR;
	#define vkCreateWaylandSurfaceKHR glad_debug_vkCreateWaylandSurfaceKHR

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkCreateWin32SurfaceKHR glad_vkCreateWin32SurfaceKHR;
GLAD_API_CALL PFN_vkCreateWin32SurfaceKHR glad_debug_vkCreateWin32SurfaceKHR;
	#define vkCreateWin32SurfaceKHR glad_debug_vkCreateWin32SurfaceKHR

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
GLAD_API_CALL PFN_vkCreateXcbSurfaceKHR glad_vkCreateXcbSurfaceKHR;
GLAD_API_CALL PFN_vkCreateXcbSurfaceKHR glad_debug_vkCreateXcbSurfaceKHR;
	#define vkCreateXcbSurfaceKHR glad_debug_vkCreateXcbSurfaceKHR

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
GLAD_API_CALL PFN_vkCreateXlibSurfaceKHR glad_vkCreateXlibSurfaceKHR;
GLAD_API_CALL PFN_vkCreateXlibSurfaceKHR glad_debug_vkCreateXlibSurfaceKHR;
	#define vkCreateXlibSurfaceKHR glad_debug_vkCreateXlibSurfaceKHR

#endif
GLAD_API_CALL PFN_vkDebugMarkerSetObjectNameEXT glad_vkDebugMarkerSetObjectNameEXT;
GLAD_API_CALL PFN_vkDebugMarkerSetObjectNameEXT glad_debug_vkDebugMarkerSetObjectNameEXT;
#define vkDebugMarkerSetObjectNameEXT glad_debug_vkDebugMarkerSetObjectNameEXT
GLAD_API_CALL PFN_vkDebugMarkerSetObjectTagEXT glad_vkDebugMarkerSetObjectTagEXT;
GLAD_API_CALL PFN_vkDebugMarkerSetObjectTagEXT glad_debug_vkDebugMarkerSetObjectTagEXT;
#define vkDebugMarkerSetObjectTagEXT glad_debug_vkDebugMarkerSetObjectTagEXT
GLAD_API_CALL PFN_vkDebugReportMessageEXT glad_vkDebugReportMessageEXT;
GLAD_API_CALL PFN_vkDebugReportMessageEXT glad_debug_vkDebugReportMessageEXT;
#define vkDebugReportMessageEXT glad_debug_vkDebugReportMessageEXT
GLAD_API_CALL PFN_vkDeferredOperationJoinKHR glad_vkDeferredOperationJoinKHR;
GLAD_API_CALL PFN_vkDeferredOperationJoinKHR glad_debug_vkDeferredOperationJoinKHR;
#define vkDeferredOperationJoinKHR glad_debug_vkDeferredOperationJoinKHR
GLAD_API_CALL PFN_vkDestroyAccelerationStructureKHR glad_vkDestroyAccelerationStructureKHR;
GLAD_API_CALL PFN_vkDestroyAccelerationStructureKHR glad_debug_vkDestroyAccelerationStructureKHR;
#define vkDestroyAccelerationStructureKHR glad_debug_vkDestroyAccelerationStructureKHR
GLAD_API_CALL PFN_vkDestroyAccelerationStructureNV glad_vkDestroyAccelerationStructureNV;
GLAD_API_CALL PFN_vkDestroyAccelerationStructureNV glad_debug_vkDestroyAccelerationStructureNV;
#define vkDestroyAccelerationStructureNV glad_debug_vkDestroyAccelerationStructureNV
GLAD_API_CALL PFN_vkDestroyBuffer glad_vkDestroyBuffer;
GLAD_API_CALL PFN_vkDestroyBuffer glad_debug_vkDestroyBuffer;
#define vkDestroyBuffer glad_debug_vkDestroyBuffer
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkDestroyBufferCollectionFUCHSIA glad_vkDestroyBufferCollectionFUCHSIA;
GLAD_API_CALL PFN_vkDestroyBufferCollectionFUCHSIA glad_debug_vkDestroyBufferCollectionFUCHSIA;
	#define vkDestroyBufferCollectionFUCHSIA glad_debug_vkDestroyBufferCollectionFUCHSIA

#endif
GLAD_API_CALL PFN_vkDestroyBufferView glad_vkDestroyBufferView;
GLAD_API_CALL PFN_vkDestroyBufferView glad_debug_vkDestroyBufferView;
#define vkDestroyBufferView glad_debug_vkDestroyBufferView
GLAD_API_CALL PFN_vkDestroyCommandPool glad_vkDestroyCommandPool;
GLAD_API_CALL PFN_vkDestroyCommandPool glad_debug_vkDestroyCommandPool;
#define vkDestroyCommandPool glad_debug_vkDestroyCommandPool
GLAD_API_CALL PFN_vkDestroyCuFunctionNVX glad_vkDestroyCuFunctionNVX;
GLAD_API_CALL PFN_vkDestroyCuFunctionNVX glad_debug_vkDestroyCuFunctionNVX;
#define vkDestroyCuFunctionNVX glad_debug_vkDestroyCuFunctionNVX
GLAD_API_CALL PFN_vkDestroyCuModuleNVX glad_vkDestroyCuModuleNVX;
GLAD_API_CALL PFN_vkDestroyCuModuleNVX glad_debug_vkDestroyCuModuleNVX;
#define vkDestroyCuModuleNVX glad_debug_vkDestroyCuModuleNVX
GLAD_API_CALL PFN_vkDestroyDebugReportCallbackEXT glad_vkDestroyDebugReportCallbackEXT;
GLAD_API_CALL PFN_vkDestroyDebugReportCallbackEXT glad_debug_vkDestroyDebugReportCallbackEXT;
#define vkDestroyDebugReportCallbackEXT glad_debug_vkDestroyDebugReportCallbackEXT
GLAD_API_CALL PFN_vkDestroyDebugUtilsMessengerEXT glad_vkDestroyDebugUtilsMessengerEXT;
GLAD_API_CALL PFN_vkDestroyDebugUtilsMessengerEXT glad_debug_vkDestroyDebugUtilsMessengerEXT;
#define vkDestroyDebugUtilsMessengerEXT glad_debug_vkDestroyDebugUtilsMessengerEXT
GLAD_API_CALL PFN_vkDestroyDeferredOperationKHR glad_vkDestroyDeferredOperationKHR;
GLAD_API_CALL PFN_vkDestroyDeferredOperationKHR glad_debug_vkDestroyDeferredOperationKHR;
#define vkDestroyDeferredOperationKHR glad_debug_vkDestroyDeferredOperationKHR
GLAD_API_CALL PFN_vkDestroyDescriptorPool glad_vkDestroyDescriptorPool;
GLAD_API_CALL PFN_vkDestroyDescriptorPool glad_debug_vkDestroyDescriptorPool;
#define vkDestroyDescriptorPool glad_debug_vkDestroyDescriptorPool
GLAD_API_CALL PFN_vkDestroyDescriptorSetLayout glad_vkDestroyDescriptorSetLayout;
GLAD_API_CALL PFN_vkDestroyDescriptorSetLayout glad_debug_vkDestroyDescriptorSetLayout;
#define vkDestroyDescriptorSetLayout glad_debug_vkDestroyDescriptorSetLayout
GLAD_API_CALL PFN_vkDestroyDescriptorUpdateTemplate glad_vkDestroyDescriptorUpdateTemplate;
GLAD_API_CALL PFN_vkDestroyDescriptorUpdateTemplate glad_debug_vkDestroyDescriptorUpdateTemplate;
#define vkDestroyDescriptorUpdateTemplate glad_debug_vkDestroyDescriptorUpdateTemplate
GLAD_API_CALL PFN_vkDestroyDescriptorUpdateTemplateKHR glad_vkDestroyDescriptorUpdateTemplateKHR;
GLAD_API_CALL PFN_vkDestroyDescriptorUpdateTemplateKHR glad_debug_vkDestroyDescriptorUpdateTemplateKHR;
#define vkDestroyDescriptorUpdateTemplateKHR glad_debug_vkDestroyDescriptorUpdateTemplateKHR
GLAD_API_CALL PFN_vkDestroyDevice glad_vkDestroyDevice;
GLAD_API_CALL PFN_vkDestroyDevice glad_debug_vkDestroyDevice;
#define vkDestroyDevice glad_debug_vkDestroyDevice
GLAD_API_CALL PFN_vkDestroyEvent glad_vkDestroyEvent;
GLAD_API_CALL PFN_vkDestroyEvent glad_debug_vkDestroyEvent;
#define vkDestroyEvent glad_debug_vkDestroyEvent
GLAD_API_CALL PFN_vkDestroyFence glad_vkDestroyFence;
GLAD_API_CALL PFN_vkDestroyFence glad_debug_vkDestroyFence;
#define vkDestroyFence glad_debug_vkDestroyFence
GLAD_API_CALL PFN_vkDestroyFramebuffer glad_vkDestroyFramebuffer;
GLAD_API_CALL PFN_vkDestroyFramebuffer glad_debug_vkDestroyFramebuffer;
#define vkDestroyFramebuffer glad_debug_vkDestroyFramebuffer
GLAD_API_CALL PFN_vkDestroyImage glad_vkDestroyImage;
GLAD_API_CALL PFN_vkDestroyImage glad_debug_vkDestroyImage;
#define vkDestroyImage glad_debug_vkDestroyImage
GLAD_API_CALL PFN_vkDestroyImageView glad_vkDestroyImageView;
GLAD_API_CALL PFN_vkDestroyImageView glad_debug_vkDestroyImageView;
#define vkDestroyImageView glad_debug_vkDestroyImageView
GLAD_API_CALL PFN_vkDestroyIndirectCommandsLayoutNV glad_vkDestroyIndirectCommandsLayoutNV;
GLAD_API_CALL PFN_vkDestroyIndirectCommandsLayoutNV glad_debug_vkDestroyIndirectCommandsLayoutNV;
#define vkDestroyIndirectCommandsLayoutNV glad_debug_vkDestroyIndirectCommandsLayoutNV
GLAD_API_CALL PFN_vkDestroyInstance glad_vkDestroyInstance;
GLAD_API_CALL PFN_vkDestroyInstance glad_debug_vkDestroyInstance;
#define vkDestroyInstance glad_debug_vkDestroyInstance
GLAD_API_CALL PFN_vkDestroyMicromapEXT glad_vkDestroyMicromapEXT;
GLAD_API_CALL PFN_vkDestroyMicromapEXT glad_debug_vkDestroyMicromapEXT;
#define vkDestroyMicromapEXT glad_debug_vkDestroyMicromapEXT
GLAD_API_CALL PFN_vkDestroyOpticalFlowSessionNV glad_vkDestroyOpticalFlowSessionNV;
GLAD_API_CALL PFN_vkDestroyOpticalFlowSessionNV glad_debug_vkDestroyOpticalFlowSessionNV;
#define vkDestroyOpticalFlowSessionNV glad_debug_vkDestroyOpticalFlowSessionNV
GLAD_API_CALL PFN_vkDestroyPipeline glad_vkDestroyPipeline;
GLAD_API_CALL PFN_vkDestroyPipeline glad_debug_vkDestroyPipeline;
#define vkDestroyPipeline glad_debug_vkDestroyPipeline
GLAD_API_CALL PFN_vkDestroyPipelineCache glad_vkDestroyPipelineCache;
GLAD_API_CALL PFN_vkDestroyPipelineCache glad_debug_vkDestroyPipelineCache;
#define vkDestroyPipelineCache glad_debug_vkDestroyPipelineCache
GLAD_API_CALL PFN_vkDestroyPipelineLayout glad_vkDestroyPipelineLayout;
GLAD_API_CALL PFN_vkDestroyPipelineLayout glad_debug_vkDestroyPipelineLayout;
#define vkDestroyPipelineLayout glad_debug_vkDestroyPipelineLayout
GLAD_API_CALL PFN_vkDestroyPrivateDataSlot glad_vkDestroyPrivateDataSlot;
GLAD_API_CALL PFN_vkDestroyPrivateDataSlot glad_debug_vkDestroyPrivateDataSlot;
#define vkDestroyPrivateDataSlot glad_debug_vkDestroyPrivateDataSlot
GLAD_API_CALL PFN_vkDestroyPrivateDataSlotEXT glad_vkDestroyPrivateDataSlotEXT;
GLAD_API_CALL PFN_vkDestroyPrivateDataSlotEXT glad_debug_vkDestroyPrivateDataSlotEXT;
#define vkDestroyPrivateDataSlotEXT glad_debug_vkDestroyPrivateDataSlotEXT
GLAD_API_CALL PFN_vkDestroyQueryPool glad_vkDestroyQueryPool;
GLAD_API_CALL PFN_vkDestroyQueryPool glad_debug_vkDestroyQueryPool;
#define vkDestroyQueryPool glad_debug_vkDestroyQueryPool
GLAD_API_CALL PFN_vkDestroyRenderPass glad_vkDestroyRenderPass;
GLAD_API_CALL PFN_vkDestroyRenderPass glad_debug_vkDestroyRenderPass;
#define vkDestroyRenderPass glad_debug_vkDestroyRenderPass
GLAD_API_CALL PFN_vkDestroySampler glad_vkDestroySampler;
GLAD_API_CALL PFN_vkDestroySampler glad_debug_vkDestroySampler;
#define vkDestroySampler glad_debug_vkDestroySampler
GLAD_API_CALL PFN_vkDestroySamplerYcbcrConversion glad_vkDestroySamplerYcbcrConversion;
GLAD_API_CALL PFN_vkDestroySamplerYcbcrConversion glad_debug_vkDestroySamplerYcbcrConversion;
#define vkDestroySamplerYcbcrConversion glad_debug_vkDestroySamplerYcbcrConversion
GLAD_API_CALL PFN_vkDestroySamplerYcbcrConversionKHR glad_vkDestroySamplerYcbcrConversionKHR;
GLAD_API_CALL PFN_vkDestroySamplerYcbcrConversionKHR glad_debug_vkDestroySamplerYcbcrConversionKHR;
#define vkDestroySamplerYcbcrConversionKHR glad_debug_vkDestroySamplerYcbcrConversionKHR
GLAD_API_CALL PFN_vkDestroySemaphore glad_vkDestroySemaphore;
GLAD_API_CALL PFN_vkDestroySemaphore glad_debug_vkDestroySemaphore;
#define vkDestroySemaphore glad_debug_vkDestroySemaphore
GLAD_API_CALL PFN_vkDestroyShaderEXT glad_vkDestroyShaderEXT;
GLAD_API_CALL PFN_vkDestroyShaderEXT glad_debug_vkDestroyShaderEXT;
#define vkDestroyShaderEXT glad_debug_vkDestroyShaderEXT
GLAD_API_CALL PFN_vkDestroyShaderModule glad_vkDestroyShaderModule;
GLAD_API_CALL PFN_vkDestroyShaderModule glad_debug_vkDestroyShaderModule;
#define vkDestroyShaderModule glad_debug_vkDestroyShaderModule
GLAD_API_CALL PFN_vkDestroySurfaceKHR glad_vkDestroySurfaceKHR;
GLAD_API_CALL PFN_vkDestroySurfaceKHR glad_debug_vkDestroySurfaceKHR;
#define vkDestroySurfaceKHR glad_debug_vkDestroySurfaceKHR
GLAD_API_CALL PFN_vkDestroySwapchainKHR glad_vkDestroySwapchainKHR;
GLAD_API_CALL PFN_vkDestroySwapchainKHR glad_debug_vkDestroySwapchainKHR;
#define vkDestroySwapchainKHR glad_debug_vkDestroySwapchainKHR
GLAD_API_CALL PFN_vkDestroyValidationCacheEXT glad_vkDestroyValidationCacheEXT;
GLAD_API_CALL PFN_vkDestroyValidationCacheEXT glad_debug_vkDestroyValidationCacheEXT;
#define vkDestroyValidationCacheEXT glad_debug_vkDestroyValidationCacheEXT
GLAD_API_CALL PFN_vkDestroyVideoSessionKHR glad_vkDestroyVideoSessionKHR;
GLAD_API_CALL PFN_vkDestroyVideoSessionKHR glad_debug_vkDestroyVideoSessionKHR;
#define vkDestroyVideoSessionKHR glad_debug_vkDestroyVideoSessionKHR
GLAD_API_CALL PFN_vkDestroyVideoSessionParametersKHR glad_vkDestroyVideoSessionParametersKHR;
GLAD_API_CALL PFN_vkDestroyVideoSessionParametersKHR glad_debug_vkDestroyVideoSessionParametersKHR;
#define vkDestroyVideoSessionParametersKHR glad_debug_vkDestroyVideoSessionParametersKHR
GLAD_API_CALL PFN_vkDeviceWaitIdle glad_vkDeviceWaitIdle;
GLAD_API_CALL PFN_vkDeviceWaitIdle glad_debug_vkDeviceWaitIdle;
#define vkDeviceWaitIdle glad_debug_vkDeviceWaitIdle
GLAD_API_CALL PFN_vkDisplayPowerControlEXT glad_vkDisplayPowerControlEXT;
GLAD_API_CALL PFN_vkDisplayPowerControlEXT glad_debug_vkDisplayPowerControlEXT;
#define vkDisplayPowerControlEXT glad_debug_vkDisplayPowerControlEXT
GLAD_API_CALL PFN_vkEndCommandBuffer glad_vkEndCommandBuffer;
GLAD_API_CALL PFN_vkEndCommandBuffer glad_debug_vkEndCommandBuffer;
#define vkEndCommandBuffer glad_debug_vkEndCommandBuffer
GLAD_API_CALL PFN_vkEnumerateDeviceExtensionProperties glad_vkEnumerateDeviceExtensionProperties;
GLAD_API_CALL PFN_vkEnumerateDeviceExtensionProperties glad_debug_vkEnumerateDeviceExtensionProperties;
#define vkEnumerateDeviceExtensionProperties glad_debug_vkEnumerateDeviceExtensionProperties
GLAD_API_CALL PFN_vkEnumerateDeviceLayerProperties glad_vkEnumerateDeviceLayerProperties;
GLAD_API_CALL PFN_vkEnumerateDeviceLayerProperties glad_debug_vkEnumerateDeviceLayerProperties;
#define vkEnumerateDeviceLayerProperties glad_debug_vkEnumerateDeviceLayerProperties
GLAD_API_CALL PFN_vkEnumerateInstanceExtensionProperties glad_vkEnumerateInstanceExtensionProperties;
GLAD_API_CALL PFN_vkEnumerateInstanceExtensionProperties glad_debug_vkEnumerateInstanceExtensionProperties;
#define vkEnumerateInstanceExtensionProperties glad_debug_vkEnumerateInstanceExtensionProperties
GLAD_API_CALL PFN_vkEnumerateInstanceLayerProperties glad_vkEnumerateInstanceLayerProperties;
GLAD_API_CALL PFN_vkEnumerateInstanceLayerProperties glad_debug_vkEnumerateInstanceLayerProperties;
#define vkEnumerateInstanceLayerProperties glad_debug_vkEnumerateInstanceLayerProperties
GLAD_API_CALL PFN_vkEnumerateInstanceVersion glad_vkEnumerateInstanceVersion;
GLAD_API_CALL PFN_vkEnumerateInstanceVersion glad_debug_vkEnumerateInstanceVersion;
#define vkEnumerateInstanceVersion glad_debug_vkEnumerateInstanceVersion
GLAD_API_CALL PFN_vkEnumeratePhysicalDeviceGroups glad_vkEnumeratePhysicalDeviceGroups;
GLAD_API_CALL PFN_vkEnumeratePhysicalDeviceGroups glad_debug_vkEnumeratePhysicalDeviceGroups;
#define vkEnumeratePhysicalDeviceGroups glad_debug_vkEnumeratePhysicalDeviceGroups
GLAD_API_CALL PFN_vkEnumeratePhysicalDeviceGroupsKHR glad_vkEnumeratePhysicalDeviceGroupsKHR;
GLAD_API_CALL PFN_vkEnumeratePhysicalDeviceGroupsKHR glad_debug_vkEnumeratePhysicalDeviceGroupsKHR;
#define vkEnumeratePhysicalDeviceGroupsKHR glad_debug_vkEnumeratePhysicalDeviceGroupsKHR
GLAD_API_CALL PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR glad_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
GLAD_API_CALL PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR glad_debug_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
#define vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR glad_debug_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR
GLAD_API_CALL PFN_vkEnumeratePhysicalDevices glad_vkEnumeratePhysicalDevices;
GLAD_API_CALL PFN_vkEnumeratePhysicalDevices glad_debug_vkEnumeratePhysicalDevices;
#define vkEnumeratePhysicalDevices glad_debug_vkEnumeratePhysicalDevices
#if defined(VK_USE_PLATFORM_METAL_EXT)
GLAD_API_CALL PFN_vkExportMetalObjectsEXT glad_vkExportMetalObjectsEXT;
GLAD_API_CALL PFN_vkExportMetalObjectsEXT glad_debug_vkExportMetalObjectsEXT;
	#define vkExportMetalObjectsEXT glad_debug_vkExportMetalObjectsEXT

#endif
GLAD_API_CALL PFN_vkFlushMappedMemoryRanges glad_vkFlushMappedMemoryRanges;
GLAD_API_CALL PFN_vkFlushMappedMemoryRanges glad_debug_vkFlushMappedMemoryRanges;
#define vkFlushMappedMemoryRanges glad_debug_vkFlushMappedMemoryRanges
GLAD_API_CALL PFN_vkFreeCommandBuffers glad_vkFreeCommandBuffers;
GLAD_API_CALL PFN_vkFreeCommandBuffers glad_debug_vkFreeCommandBuffers;
#define vkFreeCommandBuffers glad_debug_vkFreeCommandBuffers
GLAD_API_CALL PFN_vkFreeDescriptorSets glad_vkFreeDescriptorSets;
GLAD_API_CALL PFN_vkFreeDescriptorSets glad_debug_vkFreeDescriptorSets;
#define vkFreeDescriptorSets glad_debug_vkFreeDescriptorSets
GLAD_API_CALL PFN_vkFreeMemory glad_vkFreeMemory;
GLAD_API_CALL PFN_vkFreeMemory glad_debug_vkFreeMemory;
#define vkFreeMemory glad_debug_vkFreeMemory
GLAD_API_CALL PFN_vkGetAccelerationStructureBuildSizesKHR glad_vkGetAccelerationStructureBuildSizesKHR;
GLAD_API_CALL PFN_vkGetAccelerationStructureBuildSizesKHR glad_debug_vkGetAccelerationStructureBuildSizesKHR;
#define vkGetAccelerationStructureBuildSizesKHR glad_debug_vkGetAccelerationStructureBuildSizesKHR
GLAD_API_CALL PFN_vkGetAccelerationStructureDeviceAddressKHR glad_vkGetAccelerationStructureDeviceAddressKHR;
GLAD_API_CALL PFN_vkGetAccelerationStructureDeviceAddressKHR glad_debug_vkGetAccelerationStructureDeviceAddressKHR;
#define vkGetAccelerationStructureDeviceAddressKHR glad_debug_vkGetAccelerationStructureDeviceAddressKHR
GLAD_API_CALL PFN_vkGetAccelerationStructureHandleNV glad_vkGetAccelerationStructureHandleNV;
GLAD_API_CALL PFN_vkGetAccelerationStructureHandleNV glad_debug_vkGetAccelerationStructureHandleNV;
#define vkGetAccelerationStructureHandleNV glad_debug_vkGetAccelerationStructureHandleNV
GLAD_API_CALL PFN_vkGetAccelerationStructureMemoryRequirementsNV glad_vkGetAccelerationStructureMemoryRequirementsNV;
GLAD_API_CALL PFN_vkGetAccelerationStructureMemoryRequirementsNV glad_debug_vkGetAccelerationStructureMemoryRequirementsNV;
#define vkGetAccelerationStructureMemoryRequirementsNV glad_debug_vkGetAccelerationStructureMemoryRequirementsNV
GLAD_API_CALL PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT glad_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
GLAD_API_CALL PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT glad_debug_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
#define vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT glad_debug_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
GLAD_API_CALL PFN_vkGetAndroidHardwareBufferPropertiesANDROID glad_vkGetAndroidHardwareBufferPropertiesANDROID;
GLAD_API_CALL PFN_vkGetAndroidHardwareBufferPropertiesANDROID glad_debug_vkGetAndroidHardwareBufferPropertiesANDROID;
	#define vkGetAndroidHardwareBufferPropertiesANDROID glad_debug_vkGetAndroidHardwareBufferPropertiesANDROID

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkGetBufferCollectionPropertiesFUCHSIA glad_vkGetBufferCollectionPropertiesFUCHSIA;
GLAD_API_CALL PFN_vkGetBufferCollectionPropertiesFUCHSIA glad_debug_vkGetBufferCollectionPropertiesFUCHSIA;
	#define vkGetBufferCollectionPropertiesFUCHSIA glad_debug_vkGetBufferCollectionPropertiesFUCHSIA

#endif
GLAD_API_CALL PFN_vkGetBufferDeviceAddress glad_vkGetBufferDeviceAddress;
GLAD_API_CALL PFN_vkGetBufferDeviceAddress glad_debug_vkGetBufferDeviceAddress;
#define vkGetBufferDeviceAddress glad_debug_vkGetBufferDeviceAddress
GLAD_API_CALL PFN_vkGetBufferDeviceAddressEXT glad_vkGetBufferDeviceAddressEXT;
GLAD_API_CALL PFN_vkGetBufferDeviceAddressEXT glad_debug_vkGetBufferDeviceAddressEXT;
#define vkGetBufferDeviceAddressEXT glad_debug_vkGetBufferDeviceAddressEXT
GLAD_API_CALL PFN_vkGetBufferDeviceAddressKHR glad_vkGetBufferDeviceAddressKHR;
GLAD_API_CALL PFN_vkGetBufferDeviceAddressKHR glad_debug_vkGetBufferDeviceAddressKHR;
#define vkGetBufferDeviceAddressKHR glad_debug_vkGetBufferDeviceAddressKHR
GLAD_API_CALL PFN_vkGetBufferMemoryRequirements glad_vkGetBufferMemoryRequirements;
GLAD_API_CALL PFN_vkGetBufferMemoryRequirements glad_debug_vkGetBufferMemoryRequirements;
#define vkGetBufferMemoryRequirements glad_debug_vkGetBufferMemoryRequirements
GLAD_API_CALL PFN_vkGetBufferMemoryRequirements2 glad_vkGetBufferMemoryRequirements2;
GLAD_API_CALL PFN_vkGetBufferMemoryRequirements2 glad_debug_vkGetBufferMemoryRequirements2;
#define vkGetBufferMemoryRequirements2 glad_debug_vkGetBufferMemoryRequirements2
GLAD_API_CALL PFN_vkGetBufferMemoryRequirements2KHR glad_vkGetBufferMemoryRequirements2KHR;
GLAD_API_CALL PFN_vkGetBufferMemoryRequirements2KHR glad_debug_vkGetBufferMemoryRequirements2KHR;
#define vkGetBufferMemoryRequirements2KHR glad_debug_vkGetBufferMemoryRequirements2KHR
GLAD_API_CALL PFN_vkGetBufferOpaqueCaptureAddress glad_vkGetBufferOpaqueCaptureAddress;
GLAD_API_CALL PFN_vkGetBufferOpaqueCaptureAddress glad_debug_vkGetBufferOpaqueCaptureAddress;
#define vkGetBufferOpaqueCaptureAddress glad_debug_vkGetBufferOpaqueCaptureAddress
GLAD_API_CALL PFN_vkGetBufferOpaqueCaptureAddressKHR glad_vkGetBufferOpaqueCaptureAddressKHR;
GLAD_API_CALL PFN_vkGetBufferOpaqueCaptureAddressKHR glad_debug_vkGetBufferOpaqueCaptureAddressKHR;
#define vkGetBufferOpaqueCaptureAddressKHR glad_debug_vkGetBufferOpaqueCaptureAddressKHR
GLAD_API_CALL PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT glad_vkGetBufferOpaqueCaptureDescriptorDataEXT;
GLAD_API_CALL PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT glad_debug_vkGetBufferOpaqueCaptureDescriptorDataEXT;
#define vkGetBufferOpaqueCaptureDescriptorDataEXT glad_debug_vkGetBufferOpaqueCaptureDescriptorDataEXT
GLAD_API_CALL PFN_vkGetCalibratedTimestampsEXT glad_vkGetCalibratedTimestampsEXT;
GLAD_API_CALL PFN_vkGetCalibratedTimestampsEXT glad_debug_vkGetCalibratedTimestampsEXT;
#define vkGetCalibratedTimestampsEXT glad_debug_vkGetCalibratedTimestampsEXT
GLAD_API_CALL PFN_vkGetDeferredOperationMaxConcurrencyKHR glad_vkGetDeferredOperationMaxConcurrencyKHR;
GLAD_API_CALL PFN_vkGetDeferredOperationMaxConcurrencyKHR glad_debug_vkGetDeferredOperationMaxConcurrencyKHR;
#define vkGetDeferredOperationMaxConcurrencyKHR glad_debug_vkGetDeferredOperationMaxConcurrencyKHR
GLAD_API_CALL PFN_vkGetDeferredOperationResultKHR glad_vkGetDeferredOperationResultKHR;
GLAD_API_CALL PFN_vkGetDeferredOperationResultKHR glad_debug_vkGetDeferredOperationResultKHR;
#define vkGetDeferredOperationResultKHR glad_debug_vkGetDeferredOperationResultKHR
GLAD_API_CALL PFN_vkGetDescriptorEXT glad_vkGetDescriptorEXT;
GLAD_API_CALL PFN_vkGetDescriptorEXT glad_debug_vkGetDescriptorEXT;
#define vkGetDescriptorEXT glad_debug_vkGetDescriptorEXT
GLAD_API_CALL PFN_vkGetDescriptorSetHostMappingVALVE glad_vkGetDescriptorSetHostMappingVALVE;
GLAD_API_CALL PFN_vkGetDescriptorSetHostMappingVALVE glad_debug_vkGetDescriptorSetHostMappingVALVE;
#define vkGetDescriptorSetHostMappingVALVE glad_debug_vkGetDescriptorSetHostMappingVALVE
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutBindingOffsetEXT glad_vkGetDescriptorSetLayoutBindingOffsetEXT;
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutBindingOffsetEXT glad_debug_vkGetDescriptorSetLayoutBindingOffsetEXT;
#define vkGetDescriptorSetLayoutBindingOffsetEXT glad_debug_vkGetDescriptorSetLayoutBindingOffsetEXT
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE glad_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE glad_debug_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
#define vkGetDescriptorSetLayoutHostMappingInfoVALVE glad_debug_vkGetDescriptorSetLayoutHostMappingInfoVALVE
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutSizeEXT glad_vkGetDescriptorSetLayoutSizeEXT;
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutSizeEXT glad_debug_vkGetDescriptorSetLayoutSizeEXT;
#define vkGetDescriptorSetLayoutSizeEXT glad_debug_vkGetDescriptorSetLayoutSizeEXT
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutSupport glad_vkGetDescriptorSetLayoutSupport;
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutSupport glad_debug_vkGetDescriptorSetLayoutSupport;
#define vkGetDescriptorSetLayoutSupport glad_debug_vkGetDescriptorSetLayoutSupport
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutSupportKHR glad_vkGetDescriptorSetLayoutSupportKHR;
GLAD_API_CALL PFN_vkGetDescriptorSetLayoutSupportKHR glad_debug_vkGetDescriptorSetLayoutSupportKHR;
#define vkGetDescriptorSetLayoutSupportKHR glad_debug_vkGetDescriptorSetLayoutSupportKHR
GLAD_API_CALL PFN_vkGetDeviceAccelerationStructureCompatibilityKHR glad_vkGetDeviceAccelerationStructureCompatibilityKHR;
GLAD_API_CALL PFN_vkGetDeviceAccelerationStructureCompatibilityKHR glad_debug_vkGetDeviceAccelerationStructureCompatibilityKHR;
#define vkGetDeviceAccelerationStructureCompatibilityKHR glad_debug_vkGetDeviceAccelerationStructureCompatibilityKHR
GLAD_API_CALL PFN_vkGetDeviceBufferMemoryRequirements glad_vkGetDeviceBufferMemoryRequirements;
GLAD_API_CALL PFN_vkGetDeviceBufferMemoryRequirements glad_debug_vkGetDeviceBufferMemoryRequirements;
#define vkGetDeviceBufferMemoryRequirements glad_debug_vkGetDeviceBufferMemoryRequirements
GLAD_API_CALL PFN_vkGetDeviceBufferMemoryRequirementsKHR glad_vkGetDeviceBufferMemoryRequirementsKHR;
GLAD_API_CALL PFN_vkGetDeviceBufferMemoryRequirementsKHR glad_debug_vkGetDeviceBufferMemoryRequirementsKHR;
#define vkGetDeviceBufferMemoryRequirementsKHR glad_debug_vkGetDeviceBufferMemoryRequirementsKHR
GLAD_API_CALL PFN_vkGetDeviceFaultInfoEXT glad_vkGetDeviceFaultInfoEXT;
GLAD_API_CALL PFN_vkGetDeviceFaultInfoEXT glad_debug_vkGetDeviceFaultInfoEXT;
#define vkGetDeviceFaultInfoEXT glad_debug_vkGetDeviceFaultInfoEXT
GLAD_API_CALL PFN_vkGetDeviceGroupPeerMemoryFeatures glad_vkGetDeviceGroupPeerMemoryFeatures;
GLAD_API_CALL PFN_vkGetDeviceGroupPeerMemoryFeatures glad_debug_vkGetDeviceGroupPeerMemoryFeatures;
#define vkGetDeviceGroupPeerMemoryFeatures glad_debug_vkGetDeviceGroupPeerMemoryFeatures
GLAD_API_CALL PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR glad_vkGetDeviceGroupPeerMemoryFeaturesKHR;
GLAD_API_CALL PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR glad_debug_vkGetDeviceGroupPeerMemoryFeaturesKHR;
#define vkGetDeviceGroupPeerMemoryFeaturesKHR glad_debug_vkGetDeviceGroupPeerMemoryFeaturesKHR
GLAD_API_CALL PFN_vkGetDeviceGroupPresentCapabilitiesKHR glad_vkGetDeviceGroupPresentCapabilitiesKHR;
GLAD_API_CALL PFN_vkGetDeviceGroupPresentCapabilitiesKHR glad_debug_vkGetDeviceGroupPresentCapabilitiesKHR;
#define vkGetDeviceGroupPresentCapabilitiesKHR glad_debug_vkGetDeviceGroupPresentCapabilitiesKHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkGetDeviceGroupSurfacePresentModes2EXT glad_vkGetDeviceGroupSurfacePresentModes2EXT;
GLAD_API_CALL PFN_vkGetDeviceGroupSurfacePresentModes2EXT glad_debug_vkGetDeviceGroupSurfacePresentModes2EXT;
	#define vkGetDeviceGroupSurfacePresentModes2EXT glad_debug_vkGetDeviceGroupSurfacePresentModes2EXT

#endif
GLAD_API_CALL PFN_vkGetDeviceGroupSurfacePresentModesKHR glad_vkGetDeviceGroupSurfacePresentModesKHR;
GLAD_API_CALL PFN_vkGetDeviceGroupSurfacePresentModesKHR glad_debug_vkGetDeviceGroupSurfacePresentModesKHR;
#define vkGetDeviceGroupSurfacePresentModesKHR glad_debug_vkGetDeviceGroupSurfacePresentModesKHR
GLAD_API_CALL PFN_vkGetDeviceImageMemoryRequirements glad_vkGetDeviceImageMemoryRequirements;
GLAD_API_CALL PFN_vkGetDeviceImageMemoryRequirements glad_debug_vkGetDeviceImageMemoryRequirements;
#define vkGetDeviceImageMemoryRequirements glad_debug_vkGetDeviceImageMemoryRequirements
GLAD_API_CALL PFN_vkGetDeviceImageMemoryRequirementsKHR glad_vkGetDeviceImageMemoryRequirementsKHR;
GLAD_API_CALL PFN_vkGetDeviceImageMemoryRequirementsKHR glad_debug_vkGetDeviceImageMemoryRequirementsKHR;
#define vkGetDeviceImageMemoryRequirementsKHR glad_debug_vkGetDeviceImageMemoryRequirementsKHR
GLAD_API_CALL PFN_vkGetDeviceImageSparseMemoryRequirements glad_vkGetDeviceImageSparseMemoryRequirements;
GLAD_API_CALL PFN_vkGetDeviceImageSparseMemoryRequirements glad_debug_vkGetDeviceImageSparseMemoryRequirements;
#define vkGetDeviceImageSparseMemoryRequirements glad_debug_vkGetDeviceImageSparseMemoryRequirements
GLAD_API_CALL PFN_vkGetDeviceImageSparseMemoryRequirementsKHR glad_vkGetDeviceImageSparseMemoryRequirementsKHR;
GLAD_API_CALL PFN_vkGetDeviceImageSparseMemoryRequirementsKHR glad_debug_vkGetDeviceImageSparseMemoryRequirementsKHR;
#define vkGetDeviceImageSparseMemoryRequirementsKHR glad_debug_vkGetDeviceImageSparseMemoryRequirementsKHR
GLAD_API_CALL PFN_vkGetDeviceImageSubresourceLayoutKHR glad_vkGetDeviceImageSubresourceLayoutKHR;
GLAD_API_CALL PFN_vkGetDeviceImageSubresourceLayoutKHR glad_debug_vkGetDeviceImageSubresourceLayoutKHR;
#define vkGetDeviceImageSubresourceLayoutKHR glad_debug_vkGetDeviceImageSubresourceLayoutKHR
GLAD_API_CALL PFN_vkGetDeviceMemoryCommitment glad_vkGetDeviceMemoryCommitment;
GLAD_API_CALL PFN_vkGetDeviceMemoryCommitment glad_debug_vkGetDeviceMemoryCommitment;
#define vkGetDeviceMemoryCommitment glad_debug_vkGetDeviceMemoryCommitment
GLAD_API_CALL PFN_vkGetDeviceMemoryOpaqueCaptureAddress glad_vkGetDeviceMemoryOpaqueCaptureAddress;
GLAD_API_CALL PFN_vkGetDeviceMemoryOpaqueCaptureAddress glad_debug_vkGetDeviceMemoryOpaqueCaptureAddress;
#define vkGetDeviceMemoryOpaqueCaptureAddress glad_debug_vkGetDeviceMemoryOpaqueCaptureAddress
GLAD_API_CALL PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
GLAD_API_CALL PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR glad_debug_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
#define vkGetDeviceMemoryOpaqueCaptureAddressKHR glad_debug_vkGetDeviceMemoryOpaqueCaptureAddressKHR
GLAD_API_CALL PFN_vkGetDeviceMicromapCompatibilityEXT glad_vkGetDeviceMicromapCompatibilityEXT;
GLAD_API_CALL PFN_vkGetDeviceMicromapCompatibilityEXT glad_debug_vkGetDeviceMicromapCompatibilityEXT;
#define vkGetDeviceMicromapCompatibilityEXT glad_debug_vkGetDeviceMicromapCompatibilityEXT
GLAD_API_CALL PFN_vkGetDeviceProcAddr glad_vkGetDeviceProcAddr;
GLAD_API_CALL PFN_vkGetDeviceProcAddr glad_debug_vkGetDeviceProcAddr;
#define vkGetDeviceProcAddr glad_debug_vkGetDeviceProcAddr
GLAD_API_CALL PFN_vkGetDeviceQueue glad_vkGetDeviceQueue;
GLAD_API_CALL PFN_vkGetDeviceQueue glad_debug_vkGetDeviceQueue;
#define vkGetDeviceQueue glad_debug_vkGetDeviceQueue
GLAD_API_CALL PFN_vkGetDeviceQueue2 glad_vkGetDeviceQueue2;
GLAD_API_CALL PFN_vkGetDeviceQueue2 glad_debug_vkGetDeviceQueue2;
#define vkGetDeviceQueue2 glad_debug_vkGetDeviceQueue2
GLAD_API_CALL PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI glad_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
GLAD_API_CALL PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI glad_debug_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
#define vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI glad_debug_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI
GLAD_API_CALL PFN_vkGetDisplayModeProperties2KHR glad_vkGetDisplayModeProperties2KHR;
GLAD_API_CALL PFN_vkGetDisplayModeProperties2KHR glad_debug_vkGetDisplayModeProperties2KHR;
#define vkGetDisplayModeProperties2KHR glad_debug_vkGetDisplayModeProperties2KHR
GLAD_API_CALL PFN_vkGetDisplayModePropertiesKHR glad_vkGetDisplayModePropertiesKHR;
GLAD_API_CALL PFN_vkGetDisplayModePropertiesKHR glad_debug_vkGetDisplayModePropertiesKHR;
#define vkGetDisplayModePropertiesKHR glad_debug_vkGetDisplayModePropertiesKHR
GLAD_API_CALL PFN_vkGetDisplayPlaneCapabilities2KHR glad_vkGetDisplayPlaneCapabilities2KHR;
GLAD_API_CALL PFN_vkGetDisplayPlaneCapabilities2KHR glad_debug_vkGetDisplayPlaneCapabilities2KHR;
#define vkGetDisplayPlaneCapabilities2KHR glad_debug_vkGetDisplayPlaneCapabilities2KHR
GLAD_API_CALL PFN_vkGetDisplayPlaneCapabilitiesKHR glad_vkGetDisplayPlaneCapabilitiesKHR;
GLAD_API_CALL PFN_vkGetDisplayPlaneCapabilitiesKHR glad_debug_vkGetDisplayPlaneCapabilitiesKHR;
#define vkGetDisplayPlaneCapabilitiesKHR glad_debug_vkGetDisplayPlaneCapabilitiesKHR
GLAD_API_CALL PFN_vkGetDisplayPlaneSupportedDisplaysKHR glad_vkGetDisplayPlaneSupportedDisplaysKHR;
GLAD_API_CALL PFN_vkGetDisplayPlaneSupportedDisplaysKHR glad_debug_vkGetDisplayPlaneSupportedDisplaysKHR;
#define vkGetDisplayPlaneSupportedDisplaysKHR glad_debug_vkGetDisplayPlaneSupportedDisplaysKHR
GLAD_API_CALL PFN_vkGetDrmDisplayEXT glad_vkGetDrmDisplayEXT;
GLAD_API_CALL PFN_vkGetDrmDisplayEXT glad_debug_vkGetDrmDisplayEXT;
#define vkGetDrmDisplayEXT glad_debug_vkGetDrmDisplayEXT
GLAD_API_CALL PFN_vkGetDynamicRenderingTilePropertiesQCOM glad_vkGetDynamicRenderingTilePropertiesQCOM;
GLAD_API_CALL PFN_vkGetDynamicRenderingTilePropertiesQCOM glad_debug_vkGetDynamicRenderingTilePropertiesQCOM;
#define vkGetDynamicRenderingTilePropertiesQCOM glad_debug_vkGetDynamicRenderingTilePropertiesQCOM
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkGetEncodedVideoSessionParametersKHR glad_vkGetEncodedVideoSessionParametersKHR;
GLAD_API_CALL PFN_vkGetEncodedVideoSessionParametersKHR glad_debug_vkGetEncodedVideoSessionParametersKHR;
	#define vkGetEncodedVideoSessionParametersKHR glad_debug_vkGetEncodedVideoSessionParametersKHR

#endif
GLAD_API_CALL PFN_vkGetEventStatus glad_vkGetEventStatus;
GLAD_API_CALL PFN_vkGetEventStatus glad_debug_vkGetEventStatus;
#define vkGetEventStatus glad_debug_vkGetEventStatus
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkGetExecutionGraphPipelineNodeIndexAMDX glad_vkGetExecutionGraphPipelineNodeIndexAMDX;
GLAD_API_CALL PFN_vkGetExecutionGraphPipelineNodeIndexAMDX glad_debug_vkGetExecutionGraphPipelineNodeIndexAMDX;
	#define vkGetExecutionGraphPipelineNodeIndexAMDX glad_debug_vkGetExecutionGraphPipelineNodeIndexAMDX

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkGetExecutionGraphPipelineScratchSizeAMDX glad_vkGetExecutionGraphPipelineScratchSizeAMDX;
GLAD_API_CALL PFN_vkGetExecutionGraphPipelineScratchSizeAMDX glad_debug_vkGetExecutionGraphPipelineScratchSizeAMDX;
	#define vkGetExecutionGraphPipelineScratchSizeAMDX glad_debug_vkGetExecutionGraphPipelineScratchSizeAMDX

#endif
GLAD_API_CALL PFN_vkGetFenceFdKHR glad_vkGetFenceFdKHR;
GLAD_API_CALL PFN_vkGetFenceFdKHR glad_debug_vkGetFenceFdKHR;
#define vkGetFenceFdKHR glad_debug_vkGetFenceFdKHR
GLAD_API_CALL PFN_vkGetFenceStatus glad_vkGetFenceStatus;
GLAD_API_CALL PFN_vkGetFenceStatus glad_debug_vkGetFenceStatus;
#define vkGetFenceStatus glad_debug_vkGetFenceStatus
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkGetFenceWin32HandleKHR glad_vkGetFenceWin32HandleKHR;
GLAD_API_CALL PFN_vkGetFenceWin32HandleKHR glad_debug_vkGetFenceWin32HandleKHR;
	#define vkGetFenceWin32HandleKHR glad_debug_vkGetFenceWin32HandleKHR

#endif
GLAD_API_CALL PFN_vkGetFramebufferTilePropertiesQCOM glad_vkGetFramebufferTilePropertiesQCOM;
GLAD_API_CALL PFN_vkGetFramebufferTilePropertiesQCOM glad_debug_vkGetFramebufferTilePropertiesQCOM;
#define vkGetFramebufferTilePropertiesQCOM glad_debug_vkGetFramebufferTilePropertiesQCOM
GLAD_API_CALL PFN_vkGetGeneratedCommandsMemoryRequirementsNV glad_vkGetGeneratedCommandsMemoryRequirementsNV;
GLAD_API_CALL PFN_vkGetGeneratedCommandsMemoryRequirementsNV glad_debug_vkGetGeneratedCommandsMemoryRequirementsNV;
#define vkGetGeneratedCommandsMemoryRequirementsNV glad_debug_vkGetGeneratedCommandsMemoryRequirementsNV
GLAD_API_CALL PFN_vkGetImageDrmFormatModifierPropertiesEXT glad_vkGetImageDrmFormatModifierPropertiesEXT;
GLAD_API_CALL PFN_vkGetImageDrmFormatModifierPropertiesEXT glad_debug_vkGetImageDrmFormatModifierPropertiesEXT;
#define vkGetImageDrmFormatModifierPropertiesEXT glad_debug_vkGetImageDrmFormatModifierPropertiesEXT
GLAD_API_CALL PFN_vkGetImageMemoryRequirements glad_vkGetImageMemoryRequirements;
GLAD_API_CALL PFN_vkGetImageMemoryRequirements glad_debug_vkGetImageMemoryRequirements;
#define vkGetImageMemoryRequirements glad_debug_vkGetImageMemoryRequirements
GLAD_API_CALL PFN_vkGetImageMemoryRequirements2 glad_vkGetImageMemoryRequirements2;
GLAD_API_CALL PFN_vkGetImageMemoryRequirements2 glad_debug_vkGetImageMemoryRequirements2;
#define vkGetImageMemoryRequirements2 glad_debug_vkGetImageMemoryRequirements2
GLAD_API_CALL PFN_vkGetImageMemoryRequirements2KHR glad_vkGetImageMemoryRequirements2KHR;
GLAD_API_CALL PFN_vkGetImageMemoryRequirements2KHR glad_debug_vkGetImageMemoryRequirements2KHR;
#define vkGetImageMemoryRequirements2KHR glad_debug_vkGetImageMemoryRequirements2KHR
GLAD_API_CALL PFN_vkGetImageOpaqueCaptureDescriptorDataEXT glad_vkGetImageOpaqueCaptureDescriptorDataEXT;
GLAD_API_CALL PFN_vkGetImageOpaqueCaptureDescriptorDataEXT glad_debug_vkGetImageOpaqueCaptureDescriptorDataEXT;
#define vkGetImageOpaqueCaptureDescriptorDataEXT glad_debug_vkGetImageOpaqueCaptureDescriptorDataEXT
GLAD_API_CALL PFN_vkGetImageSparseMemoryRequirements glad_vkGetImageSparseMemoryRequirements;
GLAD_API_CALL PFN_vkGetImageSparseMemoryRequirements glad_debug_vkGetImageSparseMemoryRequirements;
#define vkGetImageSparseMemoryRequirements glad_debug_vkGetImageSparseMemoryRequirements
GLAD_API_CALL PFN_vkGetImageSparseMemoryRequirements2 glad_vkGetImageSparseMemoryRequirements2;
GLAD_API_CALL PFN_vkGetImageSparseMemoryRequirements2 glad_debug_vkGetImageSparseMemoryRequirements2;
#define vkGetImageSparseMemoryRequirements2 glad_debug_vkGetImageSparseMemoryRequirements2
GLAD_API_CALL PFN_vkGetImageSparseMemoryRequirements2KHR glad_vkGetImageSparseMemoryRequirements2KHR;
GLAD_API_CALL PFN_vkGetImageSparseMemoryRequirements2KHR glad_debug_vkGetImageSparseMemoryRequirements2KHR;
#define vkGetImageSparseMemoryRequirements2KHR glad_debug_vkGetImageSparseMemoryRequirements2KHR
GLAD_API_CALL PFN_vkGetImageSubresourceLayout glad_vkGetImageSubresourceLayout;
GLAD_API_CALL PFN_vkGetImageSubresourceLayout glad_debug_vkGetImageSubresourceLayout;
#define vkGetImageSubresourceLayout glad_debug_vkGetImageSubresourceLayout
GLAD_API_CALL PFN_vkGetImageSubresourceLayout2EXT glad_vkGetImageSubresourceLayout2EXT;
GLAD_API_CALL PFN_vkGetImageSubresourceLayout2EXT glad_debug_vkGetImageSubresourceLayout2EXT;
#define vkGetImageSubresourceLayout2EXT glad_debug_vkGetImageSubresourceLayout2EXT
GLAD_API_CALL PFN_vkGetImageSubresourceLayout2KHR glad_vkGetImageSubresourceLayout2KHR;
GLAD_API_CALL PFN_vkGetImageSubresourceLayout2KHR glad_debug_vkGetImageSubresourceLayout2KHR;
#define vkGetImageSubresourceLayout2KHR glad_debug_vkGetImageSubresourceLayout2KHR
GLAD_API_CALL PFN_vkGetImageViewAddressNVX glad_vkGetImageViewAddressNVX;
GLAD_API_CALL PFN_vkGetImageViewAddressNVX glad_debug_vkGetImageViewAddressNVX;
#define vkGetImageViewAddressNVX glad_debug_vkGetImageViewAddressNVX
GLAD_API_CALL PFN_vkGetImageViewHandleNVX glad_vkGetImageViewHandleNVX;
GLAD_API_CALL PFN_vkGetImageViewHandleNVX glad_debug_vkGetImageViewHandleNVX;
#define vkGetImageViewHandleNVX glad_debug_vkGetImageViewHandleNVX
GLAD_API_CALL PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT glad_vkGetImageViewOpaqueCaptureDescriptorDataEXT;
GLAD_API_CALL PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT glad_debug_vkGetImageViewOpaqueCaptureDescriptorDataEXT;
#define vkGetImageViewOpaqueCaptureDescriptorDataEXT glad_debug_vkGetImageViewOpaqueCaptureDescriptorDataEXT
GLAD_API_CALL PFN_vkGetInstanceProcAddr glad_vkGetInstanceProcAddr;
GLAD_API_CALL PFN_vkGetInstanceProcAddr glad_debug_vkGetInstanceProcAddr;
#define vkGetInstanceProcAddr glad_debug_vkGetInstanceProcAddr
GLAD_API_CALL PFN_vkGetLatencyTimingsNV glad_vkGetLatencyTimingsNV;
GLAD_API_CALL PFN_vkGetLatencyTimingsNV glad_debug_vkGetLatencyTimingsNV;
#define vkGetLatencyTimingsNV glad_debug_vkGetLatencyTimingsNV
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
GLAD_API_CALL PFN_vkGetMemoryAndroidHardwareBufferANDROID glad_vkGetMemoryAndroidHardwareBufferANDROID;
GLAD_API_CALL PFN_vkGetMemoryAndroidHardwareBufferANDROID glad_debug_vkGetMemoryAndroidHardwareBufferANDROID;
	#define vkGetMemoryAndroidHardwareBufferANDROID glad_debug_vkGetMemoryAndroidHardwareBufferANDROID

#endif
GLAD_API_CALL PFN_vkGetMemoryFdKHR glad_vkGetMemoryFdKHR;
GLAD_API_CALL PFN_vkGetMemoryFdKHR glad_debug_vkGetMemoryFdKHR;
#define vkGetMemoryFdKHR glad_debug_vkGetMemoryFdKHR
GLAD_API_CALL PFN_vkGetMemoryFdPropertiesKHR glad_vkGetMemoryFdPropertiesKHR;
GLAD_API_CALL PFN_vkGetMemoryFdPropertiesKHR glad_debug_vkGetMemoryFdPropertiesKHR;
#define vkGetMemoryFdPropertiesKHR glad_debug_vkGetMemoryFdPropertiesKHR
GLAD_API_CALL PFN_vkGetMemoryHostPointerPropertiesEXT glad_vkGetMemoryHostPointerPropertiesEXT;
GLAD_API_CALL PFN_vkGetMemoryHostPointerPropertiesEXT glad_debug_vkGetMemoryHostPointerPropertiesEXT;
#define vkGetMemoryHostPointerPropertiesEXT glad_debug_vkGetMemoryHostPointerPropertiesEXT
GLAD_API_CALL PFN_vkGetMemoryRemoteAddressNV glad_vkGetMemoryRemoteAddressNV;
GLAD_API_CALL PFN_vkGetMemoryRemoteAddressNV glad_debug_vkGetMemoryRemoteAddressNV;
#define vkGetMemoryRemoteAddressNV glad_debug_vkGetMemoryRemoteAddressNV
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkGetMemoryWin32HandleKHR glad_vkGetMemoryWin32HandleKHR;
GLAD_API_CALL PFN_vkGetMemoryWin32HandleKHR glad_debug_vkGetMemoryWin32HandleKHR;
	#define vkGetMemoryWin32HandleKHR glad_debug_vkGetMemoryWin32HandleKHR

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkGetMemoryWin32HandleNV glad_vkGetMemoryWin32HandleNV;
GLAD_API_CALL PFN_vkGetMemoryWin32HandleNV glad_debug_vkGetMemoryWin32HandleNV;
	#define vkGetMemoryWin32HandleNV glad_debug_vkGetMemoryWin32HandleNV

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkGetMemoryWin32HandlePropertiesKHR glad_vkGetMemoryWin32HandlePropertiesKHR;
GLAD_API_CALL PFN_vkGetMemoryWin32HandlePropertiesKHR glad_debug_vkGetMemoryWin32HandlePropertiesKHR;
	#define vkGetMemoryWin32HandlePropertiesKHR glad_debug_vkGetMemoryWin32HandlePropertiesKHR

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkGetMemoryZirconHandleFUCHSIA glad_vkGetMemoryZirconHandleFUCHSIA;
GLAD_API_CALL PFN_vkGetMemoryZirconHandleFUCHSIA glad_debug_vkGetMemoryZirconHandleFUCHSIA;
	#define vkGetMemoryZirconHandleFUCHSIA glad_debug_vkGetMemoryZirconHandleFUCHSIA

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA glad_vkGetMemoryZirconHandlePropertiesFUCHSIA;
GLAD_API_CALL PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA glad_debug_vkGetMemoryZirconHandlePropertiesFUCHSIA;
	#define vkGetMemoryZirconHandlePropertiesFUCHSIA glad_debug_vkGetMemoryZirconHandlePropertiesFUCHSIA

#endif
GLAD_API_CALL PFN_vkGetMicromapBuildSizesEXT glad_vkGetMicromapBuildSizesEXT;
GLAD_API_CALL PFN_vkGetMicromapBuildSizesEXT glad_debug_vkGetMicromapBuildSizesEXT;
#define vkGetMicromapBuildSizesEXT glad_debug_vkGetMicromapBuildSizesEXT
GLAD_API_CALL PFN_vkGetPastPresentationTimingGOOGLE glad_vkGetPastPresentationTimingGOOGLE;
GLAD_API_CALL PFN_vkGetPastPresentationTimingGOOGLE glad_debug_vkGetPastPresentationTimingGOOGLE;
#define vkGetPastPresentationTimingGOOGLE glad_debug_vkGetPastPresentationTimingGOOGLE
GLAD_API_CALL PFN_vkGetPerformanceParameterINTEL glad_vkGetPerformanceParameterINTEL;
GLAD_API_CALL PFN_vkGetPerformanceParameterINTEL glad_debug_vkGetPerformanceParameterINTEL;
#define vkGetPerformanceParameterINTEL glad_debug_vkGetPerformanceParameterINTEL
GLAD_API_CALL PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT glad_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
GLAD_API_CALL PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT glad_debug_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
#define vkGetPhysicalDeviceCalibrateableTimeDomainsEXT glad_debug_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT
GLAD_API_CALL PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
#define vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
GLAD_API_CALL PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
#define vkGetPhysicalDeviceCooperativeMatrixPropertiesNV glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
GLAD_API_CALL PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT glad_vkGetPhysicalDeviceDirectFBPresentationSupportEXT;
GLAD_API_CALL PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT glad_debug_vkGetPhysicalDeviceDirectFBPresentationSupportEXT;
	#define vkGetPhysicalDeviceDirectFBPresentationSupportEXT glad_debug_vkGetPhysicalDeviceDirectFBPresentationSupportEXT

#endif
GLAD_API_CALL PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR glad_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR glad_debug_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
#define vkGetPhysicalDeviceDisplayPlaneProperties2KHR glad_debug_vkGetPhysicalDeviceDisplayPlaneProperties2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR glad_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR glad_debug_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
#define vkGetPhysicalDeviceDisplayPlanePropertiesKHR glad_debug_vkGetPhysicalDeviceDisplayPlanePropertiesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceDisplayProperties2KHR glad_vkGetPhysicalDeviceDisplayProperties2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceDisplayProperties2KHR glad_debug_vkGetPhysicalDeviceDisplayProperties2KHR;
#define vkGetPhysicalDeviceDisplayProperties2KHR glad_debug_vkGetPhysicalDeviceDisplayProperties2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceDisplayPropertiesKHR glad_vkGetPhysicalDeviceDisplayPropertiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceDisplayPropertiesKHR glad_debug_vkGetPhysicalDeviceDisplayPropertiesKHR;
#define vkGetPhysicalDeviceDisplayPropertiesKHR glad_debug_vkGetPhysicalDeviceDisplayPropertiesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalBufferProperties glad_vkGetPhysicalDeviceExternalBufferProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalBufferProperties glad_debug_vkGetPhysicalDeviceExternalBufferProperties;
#define vkGetPhysicalDeviceExternalBufferProperties glad_debug_vkGetPhysicalDeviceExternalBufferProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR glad_debug_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
#define vkGetPhysicalDeviceExternalBufferPropertiesKHR glad_debug_vkGetPhysicalDeviceExternalBufferPropertiesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalFenceProperties glad_vkGetPhysicalDeviceExternalFenceProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalFenceProperties glad_debug_vkGetPhysicalDeviceExternalFenceProperties;
#define vkGetPhysicalDeviceExternalFenceProperties glad_debug_vkGetPhysicalDeviceExternalFenceProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR glad_vkGetPhysicalDeviceExternalFencePropertiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR glad_debug_vkGetPhysicalDeviceExternalFencePropertiesKHR;
#define vkGetPhysicalDeviceExternalFencePropertiesKHR glad_debug_vkGetPhysicalDeviceExternalFencePropertiesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV glad_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV glad_debug_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
#define vkGetPhysicalDeviceExternalImageFormatPropertiesNV glad_debug_vkGetPhysicalDeviceExternalImageFormatPropertiesNV
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalSemaphoreProperties glad_vkGetPhysicalDeviceExternalSemaphoreProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalSemaphoreProperties glad_debug_vkGetPhysicalDeviceExternalSemaphoreProperties;
#define vkGetPhysicalDeviceExternalSemaphoreProperties glad_debug_vkGetPhysicalDeviceExternalSemaphoreProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR glad_debug_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
#define vkGetPhysicalDeviceExternalSemaphorePropertiesKHR glad_debug_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceFeatures glad_vkGetPhysicalDeviceFeatures;
GLAD_API_CALL PFN_vkGetPhysicalDeviceFeatures glad_debug_vkGetPhysicalDeviceFeatures;
#define vkGetPhysicalDeviceFeatures glad_debug_vkGetPhysicalDeviceFeatures
GLAD_API_CALL PFN_vkGetPhysicalDeviceFeatures2 glad_vkGetPhysicalDeviceFeatures2;
GLAD_API_CALL PFN_vkGetPhysicalDeviceFeatures2 glad_debug_vkGetPhysicalDeviceFeatures2;
#define vkGetPhysicalDeviceFeatures2 glad_debug_vkGetPhysicalDeviceFeatures2
GLAD_API_CALL PFN_vkGetPhysicalDeviceFeatures2KHR glad_vkGetPhysicalDeviceFeatures2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceFeatures2KHR glad_debug_vkGetPhysicalDeviceFeatures2KHR;
#define vkGetPhysicalDeviceFeatures2KHR glad_debug_vkGetPhysicalDeviceFeatures2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceFormatProperties glad_vkGetPhysicalDeviceFormatProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceFormatProperties glad_debug_vkGetPhysicalDeviceFormatProperties;
#define vkGetPhysicalDeviceFormatProperties glad_debug_vkGetPhysicalDeviceFormatProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceFormatProperties2 glad_vkGetPhysicalDeviceFormatProperties2;
GLAD_API_CALL PFN_vkGetPhysicalDeviceFormatProperties2 glad_debug_vkGetPhysicalDeviceFormatProperties2;
#define vkGetPhysicalDeviceFormatProperties2 glad_debug_vkGetPhysicalDeviceFormatProperties2
GLAD_API_CALL PFN_vkGetPhysicalDeviceFormatProperties2KHR glad_vkGetPhysicalDeviceFormatProperties2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceFormatProperties2KHR glad_debug_vkGetPhysicalDeviceFormatProperties2KHR;
#define vkGetPhysicalDeviceFormatProperties2KHR glad_debug_vkGetPhysicalDeviceFormatProperties2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR glad_vkGetPhysicalDeviceFragmentShadingRatesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR glad_debug_vkGetPhysicalDeviceFragmentShadingRatesKHR;
#define vkGetPhysicalDeviceFragmentShadingRatesKHR glad_debug_vkGetPhysicalDeviceFragmentShadingRatesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceImageFormatProperties glad_vkGetPhysicalDeviceImageFormatProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceImageFormatProperties glad_debug_vkGetPhysicalDeviceImageFormatProperties;
#define vkGetPhysicalDeviceImageFormatProperties glad_debug_vkGetPhysicalDeviceImageFormatProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceImageFormatProperties2 glad_vkGetPhysicalDeviceImageFormatProperties2;
GLAD_API_CALL PFN_vkGetPhysicalDeviceImageFormatProperties2 glad_debug_vkGetPhysicalDeviceImageFormatProperties2;
#define vkGetPhysicalDeviceImageFormatProperties2 glad_debug_vkGetPhysicalDeviceImageFormatProperties2
GLAD_API_CALL PFN_vkGetPhysicalDeviceImageFormatProperties2KHR glad_vkGetPhysicalDeviceImageFormatProperties2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceImageFormatProperties2KHR glad_debug_vkGetPhysicalDeviceImageFormatProperties2KHR;
#define vkGetPhysicalDeviceImageFormatProperties2KHR glad_debug_vkGetPhysicalDeviceImageFormatProperties2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceMemoryProperties glad_vkGetPhysicalDeviceMemoryProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceMemoryProperties glad_debug_vkGetPhysicalDeviceMemoryProperties;
#define vkGetPhysicalDeviceMemoryProperties glad_debug_vkGetPhysicalDeviceMemoryProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceMemoryProperties2 glad_vkGetPhysicalDeviceMemoryProperties2;
GLAD_API_CALL PFN_vkGetPhysicalDeviceMemoryProperties2 glad_debug_vkGetPhysicalDeviceMemoryProperties2;
#define vkGetPhysicalDeviceMemoryProperties2 glad_debug_vkGetPhysicalDeviceMemoryProperties2
GLAD_API_CALL PFN_vkGetPhysicalDeviceMemoryProperties2KHR glad_vkGetPhysicalDeviceMemoryProperties2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceMemoryProperties2KHR glad_debug_vkGetPhysicalDeviceMemoryProperties2KHR;
#define vkGetPhysicalDeviceMemoryProperties2KHR glad_debug_vkGetPhysicalDeviceMemoryProperties2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT glad_vkGetPhysicalDeviceMultisamplePropertiesEXT;
GLAD_API_CALL PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT glad_debug_vkGetPhysicalDeviceMultisamplePropertiesEXT;
#define vkGetPhysicalDeviceMultisamplePropertiesEXT glad_debug_vkGetPhysicalDeviceMultisamplePropertiesEXT
GLAD_API_CALL PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV glad_vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
GLAD_API_CALL PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV glad_debug_vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
#define vkGetPhysicalDeviceOpticalFlowImageFormatsNV glad_debug_vkGetPhysicalDeviceOpticalFlowImageFormatsNV
GLAD_API_CALL PFN_vkGetPhysicalDevicePresentRectanglesKHR glad_vkGetPhysicalDevicePresentRectanglesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDevicePresentRectanglesKHR glad_debug_vkGetPhysicalDevicePresentRectanglesKHR;
#define vkGetPhysicalDevicePresentRectanglesKHR glad_debug_vkGetPhysicalDevicePresentRectanglesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceProperties glad_vkGetPhysicalDeviceProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceProperties glad_debug_vkGetPhysicalDeviceProperties;
#define vkGetPhysicalDeviceProperties glad_debug_vkGetPhysicalDeviceProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceProperties2 glad_vkGetPhysicalDeviceProperties2;
GLAD_API_CALL PFN_vkGetPhysicalDeviceProperties2 glad_debug_vkGetPhysicalDeviceProperties2;
#define vkGetPhysicalDeviceProperties2 glad_debug_vkGetPhysicalDeviceProperties2
GLAD_API_CALL PFN_vkGetPhysicalDeviceProperties2KHR glad_vkGetPhysicalDeviceProperties2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceProperties2KHR glad_debug_vkGetPhysicalDeviceProperties2KHR;
#define vkGetPhysicalDeviceProperties2KHR glad_debug_vkGetPhysicalDeviceProperties2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR glad_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR glad_debug_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
#define vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR glad_debug_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceQueueFamilyProperties glad_vkGetPhysicalDeviceQueueFamilyProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceQueueFamilyProperties glad_debug_vkGetPhysicalDeviceQueueFamilyProperties;
#define vkGetPhysicalDeviceQueueFamilyProperties glad_debug_vkGetPhysicalDeviceQueueFamilyProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceQueueFamilyProperties2 glad_vkGetPhysicalDeviceQueueFamilyProperties2;
GLAD_API_CALL PFN_vkGetPhysicalDeviceQueueFamilyProperties2 glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2;
#define vkGetPhysicalDeviceQueueFamilyProperties2 glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2
GLAD_API_CALL PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
#define vkGetPhysicalDeviceQueueFamilyProperties2KHR glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2KHR
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
GLAD_API_CALL PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX glad_vkGetPhysicalDeviceScreenPresentationSupportQNX;
GLAD_API_CALL PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX glad_debug_vkGetPhysicalDeviceScreenPresentationSupportQNX;
	#define vkGetPhysicalDeviceScreenPresentationSupportQNX glad_debug_vkGetPhysicalDeviceScreenPresentationSupportQNX

#endif
GLAD_API_CALL PFN_vkGetPhysicalDeviceSparseImageFormatProperties glad_vkGetPhysicalDeviceSparseImageFormatProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSparseImageFormatProperties glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties;
#define vkGetPhysicalDeviceSparseImageFormatProperties glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 glad_vkGetPhysicalDeviceSparseImageFormatProperties2;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2;
#define vkGetPhysicalDeviceSparseImageFormatProperties2 glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2
GLAD_API_CALL PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
#define vkGetPhysicalDeviceSparseImageFormatProperties2KHR glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV glad_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV
	glad_debug_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
#define vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV glad_debug_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT glad_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
#define vkGetPhysicalDeviceSurfaceCapabilities2EXT glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2EXT
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR glad_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
#define vkGetPhysicalDeviceSurfaceCapabilities2KHR glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR glad_debug_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
#define vkGetPhysicalDeviceSurfaceCapabilitiesKHR glad_debug_vkGetPhysicalDeviceSurfaceCapabilitiesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceFormats2KHR glad_vkGetPhysicalDeviceSurfaceFormats2KHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceFormats2KHR glad_debug_vkGetPhysicalDeviceSurfaceFormats2KHR;
#define vkGetPhysicalDeviceSurfaceFormats2KHR glad_debug_vkGetPhysicalDeviceSurfaceFormats2KHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceFormatsKHR glad_vkGetPhysicalDeviceSurfaceFormatsKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceFormatsKHR glad_debug_vkGetPhysicalDeviceSurfaceFormatsKHR;
#define vkGetPhysicalDeviceSurfaceFormatsKHR glad_debug_vkGetPhysicalDeviceSurfaceFormatsKHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT glad_vkGetPhysicalDeviceSurfacePresentModes2EXT;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT glad_debug_vkGetPhysicalDeviceSurfacePresentModes2EXT;
	#define vkGetPhysicalDeviceSurfacePresentModes2EXT glad_debug_vkGetPhysicalDeviceSurfacePresentModes2EXT

#endif
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfacePresentModesKHR glad_vkGetPhysicalDeviceSurfacePresentModesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfacePresentModesKHR glad_debug_vkGetPhysicalDeviceSurfacePresentModesKHR;
#define vkGetPhysicalDeviceSurfacePresentModesKHR glad_debug_vkGetPhysicalDeviceSurfacePresentModesKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceSupportKHR glad_vkGetPhysicalDeviceSurfaceSupportKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceSurfaceSupportKHR glad_debug_vkGetPhysicalDeviceSurfaceSupportKHR;
#define vkGetPhysicalDeviceSurfaceSupportKHR glad_debug_vkGetPhysicalDeviceSurfaceSupportKHR
GLAD_API_CALL PFN_vkGetPhysicalDeviceToolProperties glad_vkGetPhysicalDeviceToolProperties;
GLAD_API_CALL PFN_vkGetPhysicalDeviceToolProperties glad_debug_vkGetPhysicalDeviceToolProperties;
#define vkGetPhysicalDeviceToolProperties glad_debug_vkGetPhysicalDeviceToolProperties
GLAD_API_CALL PFN_vkGetPhysicalDeviceToolPropertiesEXT glad_vkGetPhysicalDeviceToolPropertiesEXT;
GLAD_API_CALL PFN_vkGetPhysicalDeviceToolPropertiesEXT glad_debug_vkGetPhysicalDeviceToolPropertiesEXT;
#define vkGetPhysicalDeviceToolPropertiesEXT glad_debug_vkGetPhysicalDeviceToolPropertiesEXT
GLAD_API_CALL PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR glad_vkGetPhysicalDeviceVideoCapabilitiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR glad_debug_vkGetPhysicalDeviceVideoCapabilitiesKHR;
#define vkGetPhysicalDeviceVideoCapabilitiesKHR glad_debug_vkGetPhysicalDeviceVideoCapabilitiesKHR
#if defined(VK_ENABLE_BETA_EXTENSIONS)
GLAD_API_CALL PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR glad_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR glad_debug_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
	#define vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR glad_debug_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR

#endif
GLAD_API_CALL PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR glad_vkGetPhysicalDeviceVideoFormatPropertiesKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR glad_debug_vkGetPhysicalDeviceVideoFormatPropertiesKHR;
#define vkGetPhysicalDeviceVideoFormatPropertiesKHR glad_debug_vkGetPhysicalDeviceVideoFormatPropertiesKHR
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
GLAD_API_CALL PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR glad_vkGetPhysicalDeviceWaylandPresentationSupportKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR glad_debug_vkGetPhysicalDeviceWaylandPresentationSupportKHR;
	#define vkGetPhysicalDeviceWaylandPresentationSupportKHR glad_debug_vkGetPhysicalDeviceWaylandPresentationSupportKHR

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR glad_vkGetPhysicalDeviceWin32PresentationSupportKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR glad_debug_vkGetPhysicalDeviceWin32PresentationSupportKHR;
	#define vkGetPhysicalDeviceWin32PresentationSupportKHR glad_debug_vkGetPhysicalDeviceWin32PresentationSupportKHR

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
GLAD_API_CALL PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR glad_vkGetPhysicalDeviceXcbPresentationSupportKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR glad_debug_vkGetPhysicalDeviceXcbPresentationSupportKHR;
	#define vkGetPhysicalDeviceXcbPresentationSupportKHR glad_debug_vkGetPhysicalDeviceXcbPresentationSupportKHR

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
GLAD_API_CALL PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR glad_vkGetPhysicalDeviceXlibPresentationSupportKHR;
GLAD_API_CALL PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR glad_debug_vkGetPhysicalDeviceXlibPresentationSupportKHR;
	#define vkGetPhysicalDeviceXlibPresentationSupportKHR glad_debug_vkGetPhysicalDeviceXlibPresentationSupportKHR

#endif
GLAD_API_CALL PFN_vkGetPipelineCacheData glad_vkGetPipelineCacheData;
GLAD_API_CALL PFN_vkGetPipelineCacheData glad_debug_vkGetPipelineCacheData;
#define vkGetPipelineCacheData glad_debug_vkGetPipelineCacheData
GLAD_API_CALL PFN_vkGetPipelineExecutableInternalRepresentationsKHR glad_vkGetPipelineExecutableInternalRepresentationsKHR;
GLAD_API_CALL PFN_vkGetPipelineExecutableInternalRepresentationsKHR glad_debug_vkGetPipelineExecutableInternalRepresentationsKHR;
#define vkGetPipelineExecutableInternalRepresentationsKHR glad_debug_vkGetPipelineExecutableInternalRepresentationsKHR
GLAD_API_CALL PFN_vkGetPipelineExecutablePropertiesKHR glad_vkGetPipelineExecutablePropertiesKHR;
GLAD_API_CALL PFN_vkGetPipelineExecutablePropertiesKHR glad_debug_vkGetPipelineExecutablePropertiesKHR;
#define vkGetPipelineExecutablePropertiesKHR glad_debug_vkGetPipelineExecutablePropertiesKHR
GLAD_API_CALL PFN_vkGetPipelineExecutableStatisticsKHR glad_vkGetPipelineExecutableStatisticsKHR;
GLAD_API_CALL PFN_vkGetPipelineExecutableStatisticsKHR glad_debug_vkGetPipelineExecutableStatisticsKHR;
#define vkGetPipelineExecutableStatisticsKHR glad_debug_vkGetPipelineExecutableStatisticsKHR
GLAD_API_CALL PFN_vkGetPipelineIndirectDeviceAddressNV glad_vkGetPipelineIndirectDeviceAddressNV;
GLAD_API_CALL PFN_vkGetPipelineIndirectDeviceAddressNV glad_debug_vkGetPipelineIndirectDeviceAddressNV;
#define vkGetPipelineIndirectDeviceAddressNV glad_debug_vkGetPipelineIndirectDeviceAddressNV
GLAD_API_CALL PFN_vkGetPipelineIndirectMemoryRequirementsNV glad_vkGetPipelineIndirectMemoryRequirementsNV;
GLAD_API_CALL PFN_vkGetPipelineIndirectMemoryRequirementsNV glad_debug_vkGetPipelineIndirectMemoryRequirementsNV;
#define vkGetPipelineIndirectMemoryRequirementsNV glad_debug_vkGetPipelineIndirectMemoryRequirementsNV
GLAD_API_CALL PFN_vkGetPipelinePropertiesEXT glad_vkGetPipelinePropertiesEXT;
GLAD_API_CALL PFN_vkGetPipelinePropertiesEXT glad_debug_vkGetPipelinePropertiesEXT;
#define vkGetPipelinePropertiesEXT glad_debug_vkGetPipelinePropertiesEXT
GLAD_API_CALL PFN_vkGetPrivateData glad_vkGetPrivateData;
GLAD_API_CALL PFN_vkGetPrivateData glad_debug_vkGetPrivateData;
#define vkGetPrivateData glad_debug_vkGetPrivateData
GLAD_API_CALL PFN_vkGetPrivateDataEXT glad_vkGetPrivateDataEXT;
GLAD_API_CALL PFN_vkGetPrivateDataEXT glad_debug_vkGetPrivateDataEXT;
#define vkGetPrivateDataEXT glad_debug_vkGetPrivateDataEXT
GLAD_API_CALL PFN_vkGetQueryPoolResults glad_vkGetQueryPoolResults;
GLAD_API_CALL PFN_vkGetQueryPoolResults glad_debug_vkGetQueryPoolResults;
#define vkGetQueryPoolResults glad_debug_vkGetQueryPoolResults
GLAD_API_CALL PFN_vkGetQueueCheckpointData2NV glad_vkGetQueueCheckpointData2NV;
GLAD_API_CALL PFN_vkGetQueueCheckpointData2NV glad_debug_vkGetQueueCheckpointData2NV;
#define vkGetQueueCheckpointData2NV glad_debug_vkGetQueueCheckpointData2NV
GLAD_API_CALL PFN_vkGetQueueCheckpointDataNV glad_vkGetQueueCheckpointDataNV;
GLAD_API_CALL PFN_vkGetQueueCheckpointDataNV glad_debug_vkGetQueueCheckpointDataNV;
#define vkGetQueueCheckpointDataNV glad_debug_vkGetQueueCheckpointDataNV
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
GLAD_API_CALL PFN_vkGetRandROutputDisplayEXT glad_vkGetRandROutputDisplayEXT;
GLAD_API_CALL PFN_vkGetRandROutputDisplayEXT glad_debug_vkGetRandROutputDisplayEXT;
	#define vkGetRandROutputDisplayEXT glad_debug_vkGetRandROutputDisplayEXT

#endif
GLAD_API_CALL PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR glad_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
GLAD_API_CALL PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR glad_debug_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
#define vkGetRayTracingCaptureReplayShaderGroupHandlesKHR glad_debug_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR
GLAD_API_CALL PFN_vkGetRayTracingShaderGroupHandlesKHR glad_vkGetRayTracingShaderGroupHandlesKHR;
GLAD_API_CALL PFN_vkGetRayTracingShaderGroupHandlesKHR glad_debug_vkGetRayTracingShaderGroupHandlesKHR;
#define vkGetRayTracingShaderGroupHandlesKHR glad_debug_vkGetRayTracingShaderGroupHandlesKHR
GLAD_API_CALL PFN_vkGetRayTracingShaderGroupHandlesNV glad_vkGetRayTracingShaderGroupHandlesNV;
GLAD_API_CALL PFN_vkGetRayTracingShaderGroupHandlesNV glad_debug_vkGetRayTracingShaderGroupHandlesNV;
#define vkGetRayTracingShaderGroupHandlesNV glad_debug_vkGetRayTracingShaderGroupHandlesNV
GLAD_API_CALL PFN_vkGetRayTracingShaderGroupStackSizeKHR glad_vkGetRayTracingShaderGroupStackSizeKHR;
GLAD_API_CALL PFN_vkGetRayTracingShaderGroupStackSizeKHR glad_debug_vkGetRayTracingShaderGroupStackSizeKHR;
#define vkGetRayTracingShaderGroupStackSizeKHR glad_debug_vkGetRayTracingShaderGroupStackSizeKHR
GLAD_API_CALL PFN_vkGetRefreshCycleDurationGOOGLE glad_vkGetRefreshCycleDurationGOOGLE;
GLAD_API_CALL PFN_vkGetRefreshCycleDurationGOOGLE glad_debug_vkGetRefreshCycleDurationGOOGLE;
#define vkGetRefreshCycleDurationGOOGLE glad_debug_vkGetRefreshCycleDurationGOOGLE
GLAD_API_CALL PFN_vkGetRenderAreaGranularity glad_vkGetRenderAreaGranularity;
GLAD_API_CALL PFN_vkGetRenderAreaGranularity glad_debug_vkGetRenderAreaGranularity;
#define vkGetRenderAreaGranularity glad_debug_vkGetRenderAreaGranularity
GLAD_API_CALL PFN_vkGetRenderingAreaGranularityKHR glad_vkGetRenderingAreaGranularityKHR;
GLAD_API_CALL PFN_vkGetRenderingAreaGranularityKHR glad_debug_vkGetRenderingAreaGranularityKHR;
#define vkGetRenderingAreaGranularityKHR glad_debug_vkGetRenderingAreaGranularityKHR
GLAD_API_CALL PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT glad_vkGetSamplerOpaqueCaptureDescriptorDataEXT;
GLAD_API_CALL PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT glad_debug_vkGetSamplerOpaqueCaptureDescriptorDataEXT;
#define vkGetSamplerOpaqueCaptureDescriptorDataEXT glad_debug_vkGetSamplerOpaqueCaptureDescriptorDataEXT
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
GLAD_API_CALL PFN_vkGetScreenBufferPropertiesQNX glad_vkGetScreenBufferPropertiesQNX;
GLAD_API_CALL PFN_vkGetScreenBufferPropertiesQNX glad_debug_vkGetScreenBufferPropertiesQNX;
	#define vkGetScreenBufferPropertiesQNX glad_debug_vkGetScreenBufferPropertiesQNX

#endif
GLAD_API_CALL PFN_vkGetSemaphoreCounterValue glad_vkGetSemaphoreCounterValue;
GLAD_API_CALL PFN_vkGetSemaphoreCounterValue glad_debug_vkGetSemaphoreCounterValue;
#define vkGetSemaphoreCounterValue glad_debug_vkGetSemaphoreCounterValue
GLAD_API_CALL PFN_vkGetSemaphoreCounterValueKHR glad_vkGetSemaphoreCounterValueKHR;
GLAD_API_CALL PFN_vkGetSemaphoreCounterValueKHR glad_debug_vkGetSemaphoreCounterValueKHR;
#define vkGetSemaphoreCounterValueKHR glad_debug_vkGetSemaphoreCounterValueKHR
GLAD_API_CALL PFN_vkGetSemaphoreFdKHR glad_vkGetSemaphoreFdKHR;
GLAD_API_CALL PFN_vkGetSemaphoreFdKHR glad_debug_vkGetSemaphoreFdKHR;
#define vkGetSemaphoreFdKHR glad_debug_vkGetSemaphoreFdKHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkGetSemaphoreWin32HandleKHR glad_vkGetSemaphoreWin32HandleKHR;
GLAD_API_CALL PFN_vkGetSemaphoreWin32HandleKHR glad_debug_vkGetSemaphoreWin32HandleKHR;
	#define vkGetSemaphoreWin32HandleKHR glad_debug_vkGetSemaphoreWin32HandleKHR

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkGetSemaphoreZirconHandleFUCHSIA glad_vkGetSemaphoreZirconHandleFUCHSIA;
GLAD_API_CALL PFN_vkGetSemaphoreZirconHandleFUCHSIA glad_debug_vkGetSemaphoreZirconHandleFUCHSIA;
	#define vkGetSemaphoreZirconHandleFUCHSIA glad_debug_vkGetSemaphoreZirconHandleFUCHSIA

#endif
GLAD_API_CALL PFN_vkGetShaderBinaryDataEXT glad_vkGetShaderBinaryDataEXT;
GLAD_API_CALL PFN_vkGetShaderBinaryDataEXT glad_debug_vkGetShaderBinaryDataEXT;
#define vkGetShaderBinaryDataEXT glad_debug_vkGetShaderBinaryDataEXT
GLAD_API_CALL PFN_vkGetShaderInfoAMD glad_vkGetShaderInfoAMD;
GLAD_API_CALL PFN_vkGetShaderInfoAMD glad_debug_vkGetShaderInfoAMD;
#define vkGetShaderInfoAMD glad_debug_vkGetShaderInfoAMD
GLAD_API_CALL PFN_vkGetShaderModuleCreateInfoIdentifierEXT glad_vkGetShaderModuleCreateInfoIdentifierEXT;
GLAD_API_CALL PFN_vkGetShaderModuleCreateInfoIdentifierEXT glad_debug_vkGetShaderModuleCreateInfoIdentifierEXT;
#define vkGetShaderModuleCreateInfoIdentifierEXT glad_debug_vkGetShaderModuleCreateInfoIdentifierEXT
GLAD_API_CALL PFN_vkGetShaderModuleIdentifierEXT glad_vkGetShaderModuleIdentifierEXT;
GLAD_API_CALL PFN_vkGetShaderModuleIdentifierEXT glad_debug_vkGetShaderModuleIdentifierEXT;
#define vkGetShaderModuleIdentifierEXT glad_debug_vkGetShaderModuleIdentifierEXT
GLAD_API_CALL PFN_vkGetSwapchainCounterEXT glad_vkGetSwapchainCounterEXT;
GLAD_API_CALL PFN_vkGetSwapchainCounterEXT glad_debug_vkGetSwapchainCounterEXT;
#define vkGetSwapchainCounterEXT glad_debug_vkGetSwapchainCounterEXT
GLAD_API_CALL PFN_vkGetSwapchainImagesKHR glad_vkGetSwapchainImagesKHR;
GLAD_API_CALL PFN_vkGetSwapchainImagesKHR glad_debug_vkGetSwapchainImagesKHR;
#define vkGetSwapchainImagesKHR glad_debug_vkGetSwapchainImagesKHR
GLAD_API_CALL PFN_vkGetSwapchainStatusKHR glad_vkGetSwapchainStatusKHR;
GLAD_API_CALL PFN_vkGetSwapchainStatusKHR glad_debug_vkGetSwapchainStatusKHR;
#define vkGetSwapchainStatusKHR glad_debug_vkGetSwapchainStatusKHR
GLAD_API_CALL PFN_vkGetValidationCacheDataEXT glad_vkGetValidationCacheDataEXT;
GLAD_API_CALL PFN_vkGetValidationCacheDataEXT glad_debug_vkGetValidationCacheDataEXT;
#define vkGetValidationCacheDataEXT glad_debug_vkGetValidationCacheDataEXT
GLAD_API_CALL PFN_vkGetVideoSessionMemoryRequirementsKHR glad_vkGetVideoSessionMemoryRequirementsKHR;
GLAD_API_CALL PFN_vkGetVideoSessionMemoryRequirementsKHR glad_debug_vkGetVideoSessionMemoryRequirementsKHR;
#define vkGetVideoSessionMemoryRequirementsKHR glad_debug_vkGetVideoSessionMemoryRequirementsKHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkGetWinrtDisplayNV glad_vkGetWinrtDisplayNV;
GLAD_API_CALL PFN_vkGetWinrtDisplayNV glad_debug_vkGetWinrtDisplayNV;
	#define vkGetWinrtDisplayNV glad_debug_vkGetWinrtDisplayNV

#endif
GLAD_API_CALL PFN_vkImportFenceFdKHR glad_vkImportFenceFdKHR;
GLAD_API_CALL PFN_vkImportFenceFdKHR glad_debug_vkImportFenceFdKHR;
#define vkImportFenceFdKHR glad_debug_vkImportFenceFdKHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkImportFenceWin32HandleKHR glad_vkImportFenceWin32HandleKHR;
GLAD_API_CALL PFN_vkImportFenceWin32HandleKHR glad_debug_vkImportFenceWin32HandleKHR;
	#define vkImportFenceWin32HandleKHR glad_debug_vkImportFenceWin32HandleKHR

#endif
GLAD_API_CALL PFN_vkImportSemaphoreFdKHR glad_vkImportSemaphoreFdKHR;
GLAD_API_CALL PFN_vkImportSemaphoreFdKHR glad_debug_vkImportSemaphoreFdKHR;
#define vkImportSemaphoreFdKHR glad_debug_vkImportSemaphoreFdKHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkImportSemaphoreWin32HandleKHR glad_vkImportSemaphoreWin32HandleKHR;
GLAD_API_CALL PFN_vkImportSemaphoreWin32HandleKHR glad_debug_vkImportSemaphoreWin32HandleKHR;
	#define vkImportSemaphoreWin32HandleKHR glad_debug_vkImportSemaphoreWin32HandleKHR

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkImportSemaphoreZirconHandleFUCHSIA glad_vkImportSemaphoreZirconHandleFUCHSIA;
GLAD_API_CALL PFN_vkImportSemaphoreZirconHandleFUCHSIA glad_debug_vkImportSemaphoreZirconHandleFUCHSIA;
	#define vkImportSemaphoreZirconHandleFUCHSIA glad_debug_vkImportSemaphoreZirconHandleFUCHSIA

#endif
GLAD_API_CALL PFN_vkInitializePerformanceApiINTEL glad_vkInitializePerformanceApiINTEL;
GLAD_API_CALL PFN_vkInitializePerformanceApiINTEL glad_debug_vkInitializePerformanceApiINTEL;
#define vkInitializePerformanceApiINTEL glad_debug_vkInitializePerformanceApiINTEL
GLAD_API_CALL PFN_vkInvalidateMappedMemoryRanges glad_vkInvalidateMappedMemoryRanges;
GLAD_API_CALL PFN_vkInvalidateMappedMemoryRanges glad_debug_vkInvalidateMappedMemoryRanges;
#define vkInvalidateMappedMemoryRanges glad_debug_vkInvalidateMappedMemoryRanges
GLAD_API_CALL PFN_vkLatencySleepNV glad_vkLatencySleepNV;
GLAD_API_CALL PFN_vkLatencySleepNV glad_debug_vkLatencySleepNV;
#define vkLatencySleepNV glad_debug_vkLatencySleepNV
GLAD_API_CALL PFN_vkMapMemory glad_vkMapMemory;
GLAD_API_CALL PFN_vkMapMemory glad_debug_vkMapMemory;
#define vkMapMemory glad_debug_vkMapMemory
GLAD_API_CALL PFN_vkMapMemory2KHR glad_vkMapMemory2KHR;
GLAD_API_CALL PFN_vkMapMemory2KHR glad_debug_vkMapMemory2KHR;
#define vkMapMemory2KHR glad_debug_vkMapMemory2KHR
GLAD_API_CALL PFN_vkMergePipelineCaches glad_vkMergePipelineCaches;
GLAD_API_CALL PFN_vkMergePipelineCaches glad_debug_vkMergePipelineCaches;
#define vkMergePipelineCaches glad_debug_vkMergePipelineCaches
GLAD_API_CALL PFN_vkMergeValidationCachesEXT glad_vkMergeValidationCachesEXT;
GLAD_API_CALL PFN_vkMergeValidationCachesEXT glad_debug_vkMergeValidationCachesEXT;
#define vkMergeValidationCachesEXT glad_debug_vkMergeValidationCachesEXT
GLAD_API_CALL PFN_vkQueueBeginDebugUtilsLabelEXT glad_vkQueueBeginDebugUtilsLabelEXT;
GLAD_API_CALL PFN_vkQueueBeginDebugUtilsLabelEXT glad_debug_vkQueueBeginDebugUtilsLabelEXT;
#define vkQueueBeginDebugUtilsLabelEXT glad_debug_vkQueueBeginDebugUtilsLabelEXT
GLAD_API_CALL PFN_vkQueueBindSparse glad_vkQueueBindSparse;
GLAD_API_CALL PFN_vkQueueBindSparse glad_debug_vkQueueBindSparse;
#define vkQueueBindSparse glad_debug_vkQueueBindSparse
GLAD_API_CALL PFN_vkQueueEndDebugUtilsLabelEXT glad_vkQueueEndDebugUtilsLabelEXT;
GLAD_API_CALL PFN_vkQueueEndDebugUtilsLabelEXT glad_debug_vkQueueEndDebugUtilsLabelEXT;
#define vkQueueEndDebugUtilsLabelEXT glad_debug_vkQueueEndDebugUtilsLabelEXT
GLAD_API_CALL PFN_vkQueueInsertDebugUtilsLabelEXT glad_vkQueueInsertDebugUtilsLabelEXT;
GLAD_API_CALL PFN_vkQueueInsertDebugUtilsLabelEXT glad_debug_vkQueueInsertDebugUtilsLabelEXT;
#define vkQueueInsertDebugUtilsLabelEXT glad_debug_vkQueueInsertDebugUtilsLabelEXT
GLAD_API_CALL PFN_vkQueueNotifyOutOfBandNV glad_vkQueueNotifyOutOfBandNV;
GLAD_API_CALL PFN_vkQueueNotifyOutOfBandNV glad_debug_vkQueueNotifyOutOfBandNV;
#define vkQueueNotifyOutOfBandNV glad_debug_vkQueueNotifyOutOfBandNV
GLAD_API_CALL PFN_vkQueuePresentKHR glad_vkQueuePresentKHR;
GLAD_API_CALL PFN_vkQueuePresentKHR glad_debug_vkQueuePresentKHR;
#define vkQueuePresentKHR glad_debug_vkQueuePresentKHR
GLAD_API_CALL PFN_vkQueueSetPerformanceConfigurationINTEL glad_vkQueueSetPerformanceConfigurationINTEL;
GLAD_API_CALL PFN_vkQueueSetPerformanceConfigurationINTEL glad_debug_vkQueueSetPerformanceConfigurationINTEL;
#define vkQueueSetPerformanceConfigurationINTEL glad_debug_vkQueueSetPerformanceConfigurationINTEL
GLAD_API_CALL PFN_vkQueueSubmit glad_vkQueueSubmit;
GLAD_API_CALL PFN_vkQueueSubmit glad_debug_vkQueueSubmit;
#define vkQueueSubmit glad_debug_vkQueueSubmit
GLAD_API_CALL PFN_vkQueueSubmit2 glad_vkQueueSubmit2;
GLAD_API_CALL PFN_vkQueueSubmit2 glad_debug_vkQueueSubmit2;
#define vkQueueSubmit2 glad_debug_vkQueueSubmit2
GLAD_API_CALL PFN_vkQueueSubmit2KHR glad_vkQueueSubmit2KHR;
GLAD_API_CALL PFN_vkQueueSubmit2KHR glad_debug_vkQueueSubmit2KHR;
#define vkQueueSubmit2KHR glad_debug_vkQueueSubmit2KHR
GLAD_API_CALL PFN_vkQueueWaitIdle glad_vkQueueWaitIdle;
GLAD_API_CALL PFN_vkQueueWaitIdle glad_debug_vkQueueWaitIdle;
#define vkQueueWaitIdle glad_debug_vkQueueWaitIdle
GLAD_API_CALL PFN_vkRegisterDeviceEventEXT glad_vkRegisterDeviceEventEXT;
GLAD_API_CALL PFN_vkRegisterDeviceEventEXT glad_debug_vkRegisterDeviceEventEXT;
#define vkRegisterDeviceEventEXT glad_debug_vkRegisterDeviceEventEXT
GLAD_API_CALL PFN_vkRegisterDisplayEventEXT glad_vkRegisterDisplayEventEXT;
GLAD_API_CALL PFN_vkRegisterDisplayEventEXT glad_debug_vkRegisterDisplayEventEXT;
#define vkRegisterDisplayEventEXT glad_debug_vkRegisterDisplayEventEXT
GLAD_API_CALL PFN_vkReleaseDisplayEXT glad_vkReleaseDisplayEXT;
GLAD_API_CALL PFN_vkReleaseDisplayEXT glad_debug_vkReleaseDisplayEXT;
#define vkReleaseDisplayEXT glad_debug_vkReleaseDisplayEXT
#if defined(VK_USE_PLATFORM_WIN32_KHR)
GLAD_API_CALL PFN_vkReleaseFullScreenExclusiveModeEXT glad_vkReleaseFullScreenExclusiveModeEXT;
GLAD_API_CALL PFN_vkReleaseFullScreenExclusiveModeEXT glad_debug_vkReleaseFullScreenExclusiveModeEXT;
	#define vkReleaseFullScreenExclusiveModeEXT glad_debug_vkReleaseFullScreenExclusiveModeEXT

#endif
GLAD_API_CALL PFN_vkReleasePerformanceConfigurationINTEL glad_vkReleasePerformanceConfigurationINTEL;
GLAD_API_CALL PFN_vkReleasePerformanceConfigurationINTEL glad_debug_vkReleasePerformanceConfigurationINTEL;
#define vkReleasePerformanceConfigurationINTEL glad_debug_vkReleasePerformanceConfigurationINTEL
GLAD_API_CALL PFN_vkReleaseProfilingLockKHR glad_vkReleaseProfilingLockKHR;
GLAD_API_CALL PFN_vkReleaseProfilingLockKHR glad_debug_vkReleaseProfilingLockKHR;
#define vkReleaseProfilingLockKHR glad_debug_vkReleaseProfilingLockKHR
GLAD_API_CALL PFN_vkReleaseSwapchainImagesEXT glad_vkReleaseSwapchainImagesEXT;
GLAD_API_CALL PFN_vkReleaseSwapchainImagesEXT glad_debug_vkReleaseSwapchainImagesEXT;
#define vkReleaseSwapchainImagesEXT glad_debug_vkReleaseSwapchainImagesEXT
GLAD_API_CALL PFN_vkResetCommandBuffer glad_vkResetCommandBuffer;
GLAD_API_CALL PFN_vkResetCommandBuffer glad_debug_vkResetCommandBuffer;
#define vkResetCommandBuffer glad_debug_vkResetCommandBuffer
GLAD_API_CALL PFN_vkResetCommandPool glad_vkResetCommandPool;
GLAD_API_CALL PFN_vkResetCommandPool glad_debug_vkResetCommandPool;
#define vkResetCommandPool glad_debug_vkResetCommandPool
GLAD_API_CALL PFN_vkResetDescriptorPool glad_vkResetDescriptorPool;
GLAD_API_CALL PFN_vkResetDescriptorPool glad_debug_vkResetDescriptorPool;
#define vkResetDescriptorPool glad_debug_vkResetDescriptorPool
GLAD_API_CALL PFN_vkResetEvent glad_vkResetEvent;
GLAD_API_CALL PFN_vkResetEvent glad_debug_vkResetEvent;
#define vkResetEvent glad_debug_vkResetEvent
GLAD_API_CALL PFN_vkResetFences glad_vkResetFences;
GLAD_API_CALL PFN_vkResetFences glad_debug_vkResetFences;
#define vkResetFences glad_debug_vkResetFences
GLAD_API_CALL PFN_vkResetQueryPool glad_vkResetQueryPool;
GLAD_API_CALL PFN_vkResetQueryPool glad_debug_vkResetQueryPool;
#define vkResetQueryPool glad_debug_vkResetQueryPool
GLAD_API_CALL PFN_vkResetQueryPoolEXT glad_vkResetQueryPoolEXT;
GLAD_API_CALL PFN_vkResetQueryPoolEXT glad_debug_vkResetQueryPoolEXT;
#define vkResetQueryPoolEXT glad_debug_vkResetQueryPoolEXT
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA glad_vkSetBufferCollectionBufferConstraintsFUCHSIA;
GLAD_API_CALL PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA glad_debug_vkSetBufferCollectionBufferConstraintsFUCHSIA;
	#define vkSetBufferCollectionBufferConstraintsFUCHSIA glad_debug_vkSetBufferCollectionBufferConstraintsFUCHSIA

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
GLAD_API_CALL PFN_vkSetBufferCollectionImageConstraintsFUCHSIA glad_vkSetBufferCollectionImageConstraintsFUCHSIA;
GLAD_API_CALL PFN_vkSetBufferCollectionImageConstraintsFUCHSIA glad_debug_vkSetBufferCollectionImageConstraintsFUCHSIA;
	#define vkSetBufferCollectionImageConstraintsFUCHSIA glad_debug_vkSetBufferCollectionImageConstraintsFUCHSIA

#endif
GLAD_API_CALL PFN_vkSetDebugUtilsObjectNameEXT glad_vkSetDebugUtilsObjectNameEXT;
GLAD_API_CALL PFN_vkSetDebugUtilsObjectNameEXT glad_debug_vkSetDebugUtilsObjectNameEXT;
#define vkSetDebugUtilsObjectNameEXT glad_debug_vkSetDebugUtilsObjectNameEXT
GLAD_API_CALL PFN_vkSetDebugUtilsObjectTagEXT glad_vkSetDebugUtilsObjectTagEXT;
GLAD_API_CALL PFN_vkSetDebugUtilsObjectTagEXT glad_debug_vkSetDebugUtilsObjectTagEXT;
#define vkSetDebugUtilsObjectTagEXT glad_debug_vkSetDebugUtilsObjectTagEXT
GLAD_API_CALL PFN_vkSetDeviceMemoryPriorityEXT glad_vkSetDeviceMemoryPriorityEXT;
GLAD_API_CALL PFN_vkSetDeviceMemoryPriorityEXT glad_debug_vkSetDeviceMemoryPriorityEXT;
#define vkSetDeviceMemoryPriorityEXT glad_debug_vkSetDeviceMemoryPriorityEXT
GLAD_API_CALL PFN_vkSetEvent glad_vkSetEvent;
GLAD_API_CALL PFN_vkSetEvent glad_debug_vkSetEvent;
#define vkSetEvent glad_debug_vkSetEvent
GLAD_API_CALL PFN_vkSetHdrMetadataEXT glad_vkSetHdrMetadataEXT;
GLAD_API_CALL PFN_vkSetHdrMetadataEXT glad_debug_vkSetHdrMetadataEXT;
#define vkSetHdrMetadataEXT glad_debug_vkSetHdrMetadataEXT
GLAD_API_CALL PFN_vkSetLatencyMarkerNV glad_vkSetLatencyMarkerNV;
GLAD_API_CALL PFN_vkSetLatencyMarkerNV glad_debug_vkSetLatencyMarkerNV;
#define vkSetLatencyMarkerNV glad_debug_vkSetLatencyMarkerNV
GLAD_API_CALL PFN_vkSetLatencySleepModeNV glad_vkSetLatencySleepModeNV;
GLAD_API_CALL PFN_vkSetLatencySleepModeNV glad_debug_vkSetLatencySleepModeNV;
#define vkSetLatencySleepModeNV glad_debug_vkSetLatencySleepModeNV
GLAD_API_CALL PFN_vkSetLocalDimmingAMD glad_vkSetLocalDimmingAMD;
GLAD_API_CALL PFN_vkSetLocalDimmingAMD glad_debug_vkSetLocalDimmingAMD;
#define vkSetLocalDimmingAMD glad_debug_vkSetLocalDimmingAMD
GLAD_API_CALL PFN_vkSetPrivateData glad_vkSetPrivateData;
GLAD_API_CALL PFN_vkSetPrivateData glad_debug_vkSetPrivateData;
#define vkSetPrivateData glad_debug_vkSetPrivateData
GLAD_API_CALL PFN_vkSetPrivateDataEXT glad_vkSetPrivateDataEXT;
GLAD_API_CALL PFN_vkSetPrivateDataEXT glad_debug_vkSetPrivateDataEXT;
#define vkSetPrivateDataEXT glad_debug_vkSetPrivateDataEXT
GLAD_API_CALL PFN_vkSignalSemaphore glad_vkSignalSemaphore;
GLAD_API_CALL PFN_vkSignalSemaphore glad_debug_vkSignalSemaphore;
#define vkSignalSemaphore glad_debug_vkSignalSemaphore
GLAD_API_CALL PFN_vkSignalSemaphoreKHR glad_vkSignalSemaphoreKHR;
GLAD_API_CALL PFN_vkSignalSemaphoreKHR glad_debug_vkSignalSemaphoreKHR;
#define vkSignalSemaphoreKHR glad_debug_vkSignalSemaphoreKHR
GLAD_API_CALL PFN_vkSubmitDebugUtilsMessageEXT glad_vkSubmitDebugUtilsMessageEXT;
GLAD_API_CALL PFN_vkSubmitDebugUtilsMessageEXT glad_debug_vkSubmitDebugUtilsMessageEXT;
#define vkSubmitDebugUtilsMessageEXT glad_debug_vkSubmitDebugUtilsMessageEXT
GLAD_API_CALL PFN_vkTransitionImageLayoutEXT glad_vkTransitionImageLayoutEXT;
GLAD_API_CALL PFN_vkTransitionImageLayoutEXT glad_debug_vkTransitionImageLayoutEXT;
#define vkTransitionImageLayoutEXT glad_debug_vkTransitionImageLayoutEXT
GLAD_API_CALL PFN_vkTrimCommandPool glad_vkTrimCommandPool;
GLAD_API_CALL PFN_vkTrimCommandPool glad_debug_vkTrimCommandPool;
#define vkTrimCommandPool glad_debug_vkTrimCommandPool
GLAD_API_CALL PFN_vkTrimCommandPoolKHR glad_vkTrimCommandPoolKHR;
GLAD_API_CALL PFN_vkTrimCommandPoolKHR glad_debug_vkTrimCommandPoolKHR;
#define vkTrimCommandPoolKHR glad_debug_vkTrimCommandPoolKHR
GLAD_API_CALL PFN_vkUninitializePerformanceApiINTEL glad_vkUninitializePerformanceApiINTEL;
GLAD_API_CALL PFN_vkUninitializePerformanceApiINTEL glad_debug_vkUninitializePerformanceApiINTEL;
#define vkUninitializePerformanceApiINTEL glad_debug_vkUninitializePerformanceApiINTEL
GLAD_API_CALL PFN_vkUnmapMemory glad_vkUnmapMemory;
GLAD_API_CALL PFN_vkUnmapMemory glad_debug_vkUnmapMemory;
#define vkUnmapMemory glad_debug_vkUnmapMemory
GLAD_API_CALL PFN_vkUnmapMemory2KHR glad_vkUnmapMemory2KHR;
GLAD_API_CALL PFN_vkUnmapMemory2KHR glad_debug_vkUnmapMemory2KHR;
#define vkUnmapMemory2KHR glad_debug_vkUnmapMemory2KHR
GLAD_API_CALL PFN_vkUpdateDescriptorSetWithTemplate glad_vkUpdateDescriptorSetWithTemplate;
GLAD_API_CALL PFN_vkUpdateDescriptorSetWithTemplate glad_debug_vkUpdateDescriptorSetWithTemplate;
#define vkUpdateDescriptorSetWithTemplate glad_debug_vkUpdateDescriptorSetWithTemplate
GLAD_API_CALL PFN_vkUpdateDescriptorSetWithTemplateKHR glad_vkUpdateDescriptorSetWithTemplateKHR;
GLAD_API_CALL PFN_vkUpdateDescriptorSetWithTemplateKHR glad_debug_vkUpdateDescriptorSetWithTemplateKHR;
#define vkUpdateDescriptorSetWithTemplateKHR glad_debug_vkUpdateDescriptorSetWithTemplateKHR
GLAD_API_CALL PFN_vkUpdateDescriptorSets glad_vkUpdateDescriptorSets;
GLAD_API_CALL PFN_vkUpdateDescriptorSets glad_debug_vkUpdateDescriptorSets;
#define vkUpdateDescriptorSets glad_debug_vkUpdateDescriptorSets
GLAD_API_CALL PFN_vkUpdateVideoSessionParametersKHR glad_vkUpdateVideoSessionParametersKHR;
GLAD_API_CALL PFN_vkUpdateVideoSessionParametersKHR glad_debug_vkUpdateVideoSessionParametersKHR;
#define vkUpdateVideoSessionParametersKHR glad_debug_vkUpdateVideoSessionParametersKHR
GLAD_API_CALL PFN_vkWaitForFences glad_vkWaitForFences;
GLAD_API_CALL PFN_vkWaitForFences glad_debug_vkWaitForFences;
#define vkWaitForFences glad_debug_vkWaitForFences
GLAD_API_CALL PFN_vkWaitForPresentKHR glad_vkWaitForPresentKHR;
GLAD_API_CALL PFN_vkWaitForPresentKHR glad_debug_vkWaitForPresentKHR;
#define vkWaitForPresentKHR glad_debug_vkWaitForPresentKHR
GLAD_API_CALL PFN_vkWaitSemaphores glad_vkWaitSemaphores;
GLAD_API_CALL PFN_vkWaitSemaphores glad_debug_vkWaitSemaphores;
#define vkWaitSemaphores glad_debug_vkWaitSemaphores
GLAD_API_CALL PFN_vkWaitSemaphoresKHR glad_vkWaitSemaphoresKHR;
GLAD_API_CALL PFN_vkWaitSemaphoresKHR glad_debug_vkWaitSemaphoresKHR;
#define vkWaitSemaphoresKHR glad_debug_vkWaitSemaphoresKHR
GLAD_API_CALL PFN_vkWriteAccelerationStructuresPropertiesKHR glad_vkWriteAccelerationStructuresPropertiesKHR;
GLAD_API_CALL PFN_vkWriteAccelerationStructuresPropertiesKHR glad_debug_vkWriteAccelerationStructuresPropertiesKHR;
#define vkWriteAccelerationStructuresPropertiesKHR glad_debug_vkWriteAccelerationStructuresPropertiesKHR
GLAD_API_CALL PFN_vkWriteMicromapsPropertiesEXT glad_vkWriteMicromapsPropertiesEXT;
GLAD_API_CALL PFN_vkWriteMicromapsPropertiesEXT glad_debug_vkWriteMicromapsPropertiesEXT;
#define vkWriteMicromapsPropertiesEXT glad_debug_vkWriteMicromapsPropertiesEXT



GLAD_API_CALL void gladSetVulkanPreCallback(GLADprecallback cb);
GLAD_API_CALL void gladSetVulkanPostCallback(GLADpostcallback cb);

GLAD_API_CALL void gladInstallVulkanDebug(void);
GLAD_API_CALL void gladUninstallVulkanDebug(void);

GLAD_API_CALL int gladLoadVulkanUserPtr(VkPhysicalDevice physical_device, GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadVulkan(VkPhysicalDevice physical_device, GLADloadfunc load);


#ifdef GLAD_VULKAN

GLAD_API_CALL int  gladLoaderLoadVulkan(VkInstance instance, VkPhysicalDevice physical_device, VkDevice device);
GLAD_API_CALL void gladLoaderUnloadVulkan(void);



#endif

#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef GLAD_VULKAN_IMPLEMENTATION
/**
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
	#define GLAD_IMPL_UTIL_C_

	#ifdef _MSC_VER
		#define GLAD_IMPL_UTIL_SSCANF sscanf_s
	#else
		#define GLAD_IMPL_UTIL_SSCANF sscanf
	#endif

#endif /* GLAD_IMPL_UTIL_C_ */

#ifdef __cplusplus
extern "C" {
#endif



int GLAD_VK_VERSION_1_0 = 0;
int GLAD_VK_VERSION_1_1 = 0;
int GLAD_VK_VERSION_1_2 = 0;
int GLAD_VK_VERSION_1_3 = 0;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
int GLAD_VK_AMDX_shader_enqueue = 0;

#endif
int GLAD_VK_AMD_buffer_marker = 0;
int GLAD_VK_AMD_device_coherent_memory = 0;
int GLAD_VK_AMD_display_native_hdr = 0;
int GLAD_VK_AMD_draw_indirect_count = 0;
int GLAD_VK_AMD_gcn_shader = 0;
int GLAD_VK_AMD_gpu_shader_half_float = 0;
int GLAD_VK_AMD_gpu_shader_int16 = 0;
int GLAD_VK_AMD_memory_overallocation_behavior = 0;
int GLAD_VK_AMD_mixed_attachment_samples = 0;
int GLAD_VK_AMD_negative_viewport_height = 0;
int GLAD_VK_AMD_pipeline_compiler_control = 0;
int GLAD_VK_AMD_rasterization_order = 0;
int GLAD_VK_AMD_shader_ballot = 0;
int GLAD_VK_AMD_shader_core_properties = 0;
int GLAD_VK_AMD_shader_core_properties2 = 0;
int GLAD_VK_AMD_shader_early_and_late_fragment_tests = 0;
int GLAD_VK_AMD_shader_explicit_vertex_parameter = 0;
int GLAD_VK_AMD_shader_fragment_mask = 0;
int GLAD_VK_AMD_shader_image_load_store_lod = 0;
int GLAD_VK_AMD_shader_info = 0;
int GLAD_VK_AMD_shader_trinary_minmax = 0;
int GLAD_VK_AMD_texture_gather_bias_lod = 0;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
int GLAD_VK_ANDROID_external_format_resolve = 0;

#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
int GLAD_VK_ANDROID_external_memory_android_hardware_buffer = 0;

#endif
int GLAD_VK_ARM_rasterization_order_attachment_access = 0;
int GLAD_VK_ARM_shader_core_builtins = 0;
int GLAD_VK_ARM_shader_core_properties = 0;
int GLAD_VK_EXT_4444_formats = 0;
int GLAD_VK_EXT_acquire_drm_display = 0;
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
int GLAD_VK_EXT_acquire_xlib_display = 0;

#endif
int GLAD_VK_EXT_astc_decode_mode = 0;
int GLAD_VK_EXT_attachment_feedback_loop_dynamic_state = 0;
int GLAD_VK_EXT_attachment_feedback_loop_layout = 0;
int GLAD_VK_EXT_blend_operation_advanced = 0;
int GLAD_VK_EXT_border_color_swizzle = 0;
int GLAD_VK_EXT_buffer_device_address = 0;
int GLAD_VK_EXT_calibrated_timestamps = 0;
int GLAD_VK_EXT_color_write_enable = 0;
int GLAD_VK_EXT_conditional_rendering = 0;
int GLAD_VK_EXT_conservative_rasterization = 0;
int GLAD_VK_EXT_custom_border_color = 0;
int GLAD_VK_EXT_debug_marker = 0;
int GLAD_VK_EXT_debug_report = 0;
int GLAD_VK_EXT_debug_utils = 0;
int GLAD_VK_EXT_depth_bias_control = 0;
int GLAD_VK_EXT_depth_clamp_zero_one = 0;
int GLAD_VK_EXT_depth_clip_control = 0;
int GLAD_VK_EXT_depth_clip_enable = 0;
int GLAD_VK_EXT_depth_range_unrestricted = 0;
int GLAD_VK_EXT_descriptor_buffer = 0;
int GLAD_VK_EXT_descriptor_indexing = 0;
int GLAD_VK_EXT_device_address_binding_report = 0;
int GLAD_VK_EXT_device_fault = 0;
int GLAD_VK_EXT_device_memory_report = 0;
int GLAD_VK_EXT_direct_mode_display = 0;
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
int GLAD_VK_EXT_directfb_surface = 0;

#endif
int GLAD_VK_EXT_discard_rectangles = 0;
int GLAD_VK_EXT_display_control = 0;
int GLAD_VK_EXT_display_surface_counter = 0;
int GLAD_VK_EXT_dynamic_rendering_unused_attachments = 0;
int GLAD_VK_EXT_extended_dynamic_state = 0;
int GLAD_VK_EXT_extended_dynamic_state2 = 0;
int GLAD_VK_EXT_extended_dynamic_state3 = 0;
int GLAD_VK_EXT_external_memory_acquire_unmodified = 0;
int GLAD_VK_EXT_external_memory_dma_buf = 0;
int GLAD_VK_EXT_external_memory_host = 0;
int GLAD_VK_EXT_filter_cubic = 0;
int GLAD_VK_EXT_fragment_density_map = 0;
int GLAD_VK_EXT_fragment_density_map2 = 0;
int GLAD_VK_EXT_fragment_shader_interlock = 0;
int GLAD_VK_EXT_frame_boundary = 0;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
int GLAD_VK_EXT_full_screen_exclusive = 0;

#endif
int GLAD_VK_EXT_global_priority = 0;
int GLAD_VK_EXT_global_priority_query = 0;
int GLAD_VK_EXT_graphics_pipeline_library = 0;
int GLAD_VK_EXT_hdr_metadata = 0;
int GLAD_VK_EXT_headless_surface = 0;
int GLAD_VK_EXT_host_image_copy = 0;
int GLAD_VK_EXT_host_query_reset = 0;
int GLAD_VK_EXT_image_2d_view_of_3d = 0;
int GLAD_VK_EXT_image_compression_control = 0;
int GLAD_VK_EXT_image_compression_control_swapchain = 0;
int GLAD_VK_EXT_image_drm_format_modifier = 0;
int GLAD_VK_EXT_image_robustness = 0;
int GLAD_VK_EXT_image_sliced_view_of_3d = 0;
int GLAD_VK_EXT_image_view_min_lod = 0;
int GLAD_VK_EXT_index_type_uint8 = 0;
int GLAD_VK_EXT_inline_uniform_block = 0;
int GLAD_VK_EXT_legacy_dithering = 0;
int GLAD_VK_EXT_line_rasterization = 0;
int GLAD_VK_EXT_load_store_op_none = 0;
int GLAD_VK_EXT_memory_budget = 0;
int GLAD_VK_EXT_memory_priority = 0;
int GLAD_VK_EXT_mesh_shader = 0;
#if defined(VK_USE_PLATFORM_METAL_EXT)
int GLAD_VK_EXT_metal_objects = 0;

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
int GLAD_VK_EXT_metal_surface = 0;

#endif
int GLAD_VK_EXT_multi_draw = 0;
int GLAD_VK_EXT_multisampled_render_to_single_sampled = 0;
int GLAD_VK_EXT_mutable_descriptor_type = 0;
int GLAD_VK_EXT_non_seamless_cube_map = 0;
int GLAD_VK_EXT_opacity_micromap = 0;
int GLAD_VK_EXT_pageable_device_local_memory = 0;
int GLAD_VK_EXT_pci_bus_info = 0;
int GLAD_VK_EXT_physical_device_drm = 0;
int GLAD_VK_EXT_pipeline_creation_cache_control = 0;
int GLAD_VK_EXT_pipeline_creation_feedback = 0;
int GLAD_VK_EXT_pipeline_library_group_handles = 0;
int GLAD_VK_EXT_pipeline_properties = 0;
int GLAD_VK_EXT_pipeline_protected_access = 0;
int GLAD_VK_EXT_pipeline_robustness = 0;
int GLAD_VK_EXT_post_depth_coverage = 0;
int GLAD_VK_EXT_primitive_topology_list_restart = 0;
int GLAD_VK_EXT_primitives_generated_query = 0;
int GLAD_VK_EXT_private_data = 0;
int GLAD_VK_EXT_provoking_vertex = 0;
int GLAD_VK_EXT_queue_family_foreign = 0;
int GLAD_VK_EXT_rasterization_order_attachment_access = 0;
int GLAD_VK_EXT_rgba10x6_formats = 0;
int GLAD_VK_EXT_robustness2 = 0;
int GLAD_VK_EXT_sample_locations = 0;
int GLAD_VK_EXT_sampler_filter_minmax = 0;
int GLAD_VK_EXT_scalar_block_layout = 0;
int GLAD_VK_EXT_separate_stencil_usage = 0;
int GLAD_VK_EXT_shader_atomic_float = 0;
int GLAD_VK_EXT_shader_atomic_float2 = 0;
int GLAD_VK_EXT_shader_demote_to_helper_invocation = 0;
int GLAD_VK_EXT_shader_image_atomic_int64 = 0;
int GLAD_VK_EXT_shader_module_identifier = 0;
int GLAD_VK_EXT_shader_object = 0;
int GLAD_VK_EXT_shader_stencil_export = 0;
int GLAD_VK_EXT_shader_subgroup_ballot = 0;
int GLAD_VK_EXT_shader_subgroup_vote = 0;
int GLAD_VK_EXT_shader_tile_image = 0;
int GLAD_VK_EXT_shader_viewport_index_layer = 0;
int GLAD_VK_EXT_subgroup_size_control = 0;
int GLAD_VK_EXT_subpass_merge_feedback = 0;
int GLAD_VK_EXT_surface_maintenance1 = 0;
int GLAD_VK_EXT_swapchain_colorspace = 0;
int GLAD_VK_EXT_swapchain_maintenance1 = 0;
int GLAD_VK_EXT_texel_buffer_alignment = 0;
int GLAD_VK_EXT_texture_compression_astc_hdr = 0;
int GLAD_VK_EXT_tooling_info = 0;
int GLAD_VK_EXT_transform_feedback = 0;
int GLAD_VK_EXT_validation_cache = 0;
int GLAD_VK_EXT_validation_features = 0;
int GLAD_VK_EXT_validation_flags = 0;
int GLAD_VK_EXT_vertex_attribute_divisor = 0;
int GLAD_VK_EXT_vertex_input_dynamic_state = 0;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
int GLAD_VK_EXT_video_encode_h264 = 0;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
int GLAD_VK_EXT_video_encode_h265 = 0;

#endif
int GLAD_VK_EXT_ycbcr_2plane_444_formats = 0;
int GLAD_VK_EXT_ycbcr_image_arrays = 0;
#if defined(VK_USE_PLATFORM_FUCHSIA)
int GLAD_VK_FUCHSIA_buffer_collection = 0;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
int GLAD_VK_FUCHSIA_external_memory = 0;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
int GLAD_VK_FUCHSIA_external_semaphore = 0;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
int GLAD_VK_FUCHSIA_imagepipe_surface = 0;

#endif
#if defined(VK_USE_PLATFORM_GGP)
int GLAD_VK_GGP_frame_token = 0;

#endif
#if defined(VK_USE_PLATFORM_GGP)
int GLAD_VK_GGP_stream_descriptor_surface = 0;

#endif
int GLAD_VK_GOOGLE_decorate_string = 0;
int GLAD_VK_GOOGLE_display_timing = 0;
int GLAD_VK_GOOGLE_hlsl_functionality1 = 0;
int GLAD_VK_GOOGLE_surfaceless_query = 0;
int GLAD_VK_GOOGLE_user_type = 0;
int GLAD_VK_HUAWEI_cluster_culling_shader = 0;
int GLAD_VK_HUAWEI_invocation_mask = 0;
int GLAD_VK_HUAWEI_subpass_shading = 0;
int GLAD_VK_IMG_filter_cubic = 0;
int GLAD_VK_IMG_format_pvrtc = 0;
int GLAD_VK_INTEL_performance_query = 0;
int GLAD_VK_INTEL_shader_integer_functions2 = 0;
int GLAD_VK_KHR_16bit_storage = 0;
int GLAD_VK_KHR_8bit_storage = 0;
int GLAD_VK_KHR_acceleration_structure = 0;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
int GLAD_VK_KHR_android_surface = 0;

#endif
int GLAD_VK_KHR_bind_memory2 = 0;
int GLAD_VK_KHR_buffer_device_address = 0;
int GLAD_VK_KHR_cooperative_matrix = 0;
int GLAD_VK_KHR_copy_commands2 = 0;
int GLAD_VK_KHR_create_renderpass2 = 0;
int GLAD_VK_KHR_dedicated_allocation = 0;
int GLAD_VK_KHR_deferred_host_operations = 0;
int GLAD_VK_KHR_depth_stencil_resolve = 0;
int GLAD_VK_KHR_descriptor_update_template = 0;
int GLAD_VK_KHR_device_group = 0;
int GLAD_VK_KHR_device_group_creation = 0;
int GLAD_VK_KHR_display = 0;
int GLAD_VK_KHR_display_swapchain = 0;
int GLAD_VK_KHR_draw_indirect_count = 0;
int GLAD_VK_KHR_driver_properties = 0;
int GLAD_VK_KHR_dynamic_rendering = 0;
int GLAD_VK_KHR_external_fence = 0;
int GLAD_VK_KHR_external_fence_capabilities = 0;
int GLAD_VK_KHR_external_fence_fd = 0;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
int GLAD_VK_KHR_external_fence_win32 = 0;

#endif
int GLAD_VK_KHR_external_memory = 0;
int GLAD_VK_KHR_external_memory_capabilities = 0;
int GLAD_VK_KHR_external_memory_fd = 0;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
int GLAD_VK_KHR_external_memory_win32 = 0;

#endif
int GLAD_VK_KHR_external_semaphore = 0;
int GLAD_VK_KHR_external_semaphore_capabilities = 0;
int GLAD_VK_KHR_external_semaphore_fd = 0;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
int GLAD_VK_KHR_external_semaphore_win32 = 0;

#endif
int GLAD_VK_KHR_format_feature_flags2 = 0;
int GLAD_VK_KHR_fragment_shader_barycentric = 0;
int GLAD_VK_KHR_fragment_shading_rate = 0;
int GLAD_VK_KHR_get_display_properties2 = 0;
int GLAD_VK_KHR_get_memory_requirements2 = 0;
int GLAD_VK_KHR_get_physical_device_properties2 = 0;
int GLAD_VK_KHR_get_surface_capabilities2 = 0;
int GLAD_VK_KHR_global_priority = 0;
int GLAD_VK_KHR_image_format_list = 0;
int GLAD_VK_KHR_imageless_framebuffer = 0;
int GLAD_VK_KHR_incremental_present = 0;
int GLAD_VK_KHR_maintenance1 = 0;
int GLAD_VK_KHR_maintenance2 = 0;
int GLAD_VK_KHR_maintenance3 = 0;
int GLAD_VK_KHR_maintenance4 = 0;
int GLAD_VK_KHR_maintenance5 = 0;
int GLAD_VK_KHR_map_memory2 = 0;
int GLAD_VK_KHR_multiview = 0;
int GLAD_VK_KHR_performance_query = 0;
int GLAD_VK_KHR_pipeline_executable_properties = 0;
int GLAD_VK_KHR_pipeline_library = 0;
int GLAD_VK_KHR_portability_enumeration = 0;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
int GLAD_VK_KHR_portability_subset = 0;

#endif
int GLAD_VK_KHR_present_id = 0;
int GLAD_VK_KHR_present_wait = 0;
int GLAD_VK_KHR_push_descriptor = 0;
int GLAD_VK_KHR_ray_query = 0;
int GLAD_VK_KHR_ray_tracing_maintenance1 = 0;
int GLAD_VK_KHR_ray_tracing_pipeline = 0;
int GLAD_VK_KHR_ray_tracing_position_fetch = 0;
int GLAD_VK_KHR_relaxed_block_layout = 0;
int GLAD_VK_KHR_sampler_mirror_clamp_to_edge = 0;
int GLAD_VK_KHR_sampler_ycbcr_conversion = 0;
int GLAD_VK_KHR_separate_depth_stencil_layouts = 0;
int GLAD_VK_KHR_shader_atomic_int64 = 0;
int GLAD_VK_KHR_shader_clock = 0;
int GLAD_VK_KHR_shader_draw_parameters = 0;
int GLAD_VK_KHR_shader_float16_int8 = 0;
int GLAD_VK_KHR_shader_float_controls = 0;
int GLAD_VK_KHR_shader_integer_dot_product = 0;
int GLAD_VK_KHR_shader_non_semantic_info = 0;
int GLAD_VK_KHR_shader_subgroup_extended_types = 0;
int GLAD_VK_KHR_shader_subgroup_uniform_control_flow = 0;
int GLAD_VK_KHR_shader_terminate_invocation = 0;
int GLAD_VK_KHR_shared_presentable_image = 0;
int GLAD_VK_KHR_spirv_1_4 = 0;
int GLAD_VK_KHR_storage_buffer_storage_class = 0;
int GLAD_VK_KHR_surface = 0;
int GLAD_VK_KHR_surface_protected_capabilities = 0;
int GLAD_VK_KHR_swapchain = 0;
int GLAD_VK_KHR_swapchain_mutable_format = 0;
int GLAD_VK_KHR_synchronization2 = 0;
int GLAD_VK_KHR_timeline_semaphore = 0;
int GLAD_VK_KHR_uniform_buffer_standard_layout = 0;
int GLAD_VK_KHR_variable_pointers = 0;
int GLAD_VK_KHR_video_decode_h264 = 0;
int GLAD_VK_KHR_video_decode_h265 = 0;
int GLAD_VK_KHR_video_decode_queue = 0;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
int GLAD_VK_KHR_video_encode_queue = 0;

#endif
int GLAD_VK_KHR_video_queue = 0;
int GLAD_VK_KHR_vulkan_memory_model = 0;
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
int GLAD_VK_KHR_wayland_surface = 0;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
int GLAD_VK_KHR_win32_keyed_mutex = 0;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
int GLAD_VK_KHR_win32_surface = 0;

#endif
int GLAD_VK_KHR_workgroup_memory_explicit_layout = 0;
#if defined(VK_USE_PLATFORM_XCB_KHR)
int GLAD_VK_KHR_xcb_surface = 0;

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
int GLAD_VK_KHR_xlib_surface = 0;

#endif
int GLAD_VK_KHR_zero_initialize_workgroup_memory = 0;
int GLAD_VK_LUNARG_direct_driver_loading = 0;
int GLAD_VK_MSFT_layered_driver = 0;
#if defined(VK_USE_PLATFORM_IOS_MVK)
int GLAD_VK_MVK_ios_surface = 0;

#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
int GLAD_VK_MVK_macos_surface = 0;

#endif
#if defined(VK_USE_PLATFORM_VI_NN)
int GLAD_VK_NN_vi_surface = 0;

#endif
int GLAD_VK_NVX_binary_import = 0;
int GLAD_VK_NVX_image_view_handle = 0;
int GLAD_VK_NVX_multiview_per_view_attributes = 0;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
int GLAD_VK_NV_acquire_winrt_display = 0;

#endif
int GLAD_VK_NV_clip_space_w_scaling = 0;
int GLAD_VK_NV_compute_shader_derivatives = 0;
int GLAD_VK_NV_cooperative_matrix = 0;
int GLAD_VK_NV_copy_memory_indirect = 0;
int GLAD_VK_NV_corner_sampled_image = 0;
int GLAD_VK_NV_coverage_reduction_mode = 0;
int GLAD_VK_NV_dedicated_allocation = 0;
int GLAD_VK_NV_dedicated_allocation_image_aliasing = 0;
int GLAD_VK_NV_descriptor_pool_overallocation = 0;
int GLAD_VK_NV_device_diagnostic_checkpoints = 0;
int GLAD_VK_NV_device_diagnostics_config = 0;
int GLAD_VK_NV_device_generated_commands = 0;
int GLAD_VK_NV_device_generated_commands_compute = 0;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
int GLAD_VK_NV_displacement_micromap = 0;

#endif
int GLAD_VK_NV_external_memory = 0;
int GLAD_VK_NV_external_memory_capabilities = 0;
int GLAD_VK_NV_external_memory_rdma = 0;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
int GLAD_VK_NV_external_memory_win32 = 0;

#endif
int GLAD_VK_NV_fill_rectangle = 0;
int GLAD_VK_NV_fragment_coverage_to_color = 0;
int GLAD_VK_NV_fragment_shader_barycentric = 0;
int GLAD_VK_NV_fragment_shading_rate_enums = 0;
int GLAD_VK_NV_framebuffer_mixed_samples = 0;
int GLAD_VK_NV_geometry_shader_passthrough = 0;
int GLAD_VK_NV_glsl_shader = 0;
int GLAD_VK_NV_inherited_viewport_scissor = 0;
int GLAD_VK_NV_linear_color_attachment = 0;
int GLAD_VK_NV_low_latency = 0;
int GLAD_VK_NV_low_latency2 = 0;
int GLAD_VK_NV_memory_decompression = 0;
int GLAD_VK_NV_mesh_shader = 0;
int GLAD_VK_NV_optical_flow = 0;
int GLAD_VK_NV_present_barrier = 0;
int GLAD_VK_NV_ray_tracing = 0;
int GLAD_VK_NV_ray_tracing_invocation_reorder = 0;
int GLAD_VK_NV_ray_tracing_motion_blur = 0;
int GLAD_VK_NV_representative_fragment_test = 0;
int GLAD_VK_NV_sample_mask_override_coverage = 0;
int GLAD_VK_NV_scissor_exclusive = 0;
int GLAD_VK_NV_shader_image_footprint = 0;
int GLAD_VK_NV_shader_sm_builtins = 0;
int GLAD_VK_NV_shader_subgroup_partitioned = 0;
int GLAD_VK_NV_shading_rate_image = 0;
int GLAD_VK_NV_viewport_array2 = 0;
int GLAD_VK_NV_viewport_swizzle = 0;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
int GLAD_VK_NV_win32_keyed_mutex = 0;

#endif
int GLAD_VK_QCOM_filter_cubic_clamp = 0;
int GLAD_VK_QCOM_filter_cubic_weights = 0;
int GLAD_VK_QCOM_fragment_density_map_offset = 0;
int GLAD_VK_QCOM_image_processing = 0;
int GLAD_VK_QCOM_image_processing2 = 0;
int GLAD_VK_QCOM_multiview_per_view_render_areas = 0;
int GLAD_VK_QCOM_multiview_per_view_viewports = 0;
int GLAD_VK_QCOM_render_pass_shader_resolve = 0;
int GLAD_VK_QCOM_render_pass_store_ops = 0;
int GLAD_VK_QCOM_render_pass_transform = 0;
int GLAD_VK_QCOM_rotated_copy_commands = 0;
int GLAD_VK_QCOM_tile_properties = 0;
int GLAD_VK_QCOM_ycbcr_degamma = 0;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
int GLAD_VK_QNX_external_memory_screen_buffer = 0;

#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
int GLAD_VK_QNX_screen_surface = 0;

#endif
int GLAD_VK_SEC_amigo_profiling = 0;
int GLAD_VK_VALVE_descriptor_set_host_mapping = 0;
int GLAD_VK_VALVE_mutable_descriptor_type = 0;


static void _pre_call_vulkan_callback_default(const char *name, GLADapiproc apiproc, int len_args, ...) {
	GLAD_UNUSED(name);
	GLAD_UNUSED(apiproc);
	GLAD_UNUSED(len_args);
}
static void _post_call_vulkan_callback_default(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...) {
	GLAD_UNUSED(ret);
	GLAD_UNUSED(name);
	GLAD_UNUSED(apiproc);
	GLAD_UNUSED(len_args);
}

static GLADprecallback _pre_call_vulkan_callback = _pre_call_vulkan_callback_default;
void                   gladSetVulkanPreCallback(GLADprecallback cb) {
        _pre_call_vulkan_callback = cb;
}
static GLADpostcallback _post_call_vulkan_callback = _post_call_vulkan_callback_default;
void                    gladSetVulkanPostCallback(GLADpostcallback cb) {
        _post_call_vulkan_callback = cb;
}

PFN_vkAcquireDrmDisplayEXT   glad_vkAcquireDrmDisplayEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display) {
	VkResult ret;
	_pre_call_vulkan_callback("vkAcquireDrmDisplayEXT", (GLADapiproc)glad_vkAcquireDrmDisplayEXT, 3, physicalDevice, drmFd, display);
	ret = glad_vkAcquireDrmDisplayEXT(physicalDevice, drmFd, display);
	_post_call_vulkan_callback((void *)&ret, "vkAcquireDrmDisplayEXT", (GLADapiproc)glad_vkAcquireDrmDisplayEXT, 3, physicalDevice, drmFd, display);
	return ret;
}
PFN_vkAcquireDrmDisplayEXT glad_debug_vkAcquireDrmDisplayEXT = glad_debug_impl_vkAcquireDrmDisplayEXT;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkAcquireFullScreenExclusiveModeEXT glad_vkAcquireFullScreenExclusiveModeEXT = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkAcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) {
        VkResult ret;
        _pre_call_vulkan_callback("vkAcquireFullScreenExclusiveModeEXT", (GLADapiproc)glad_vkAcquireFullScreenExclusiveModeEXT, 2, device, swapchain);
        ret = glad_vkAcquireFullScreenExclusiveModeEXT(device, swapchain);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkAcquireFullScreenExclusiveModeEXT",
                                   (GLADapiproc)glad_vkAcquireFullScreenExclusiveModeEXT,
                                   2,
                                   device,
                                   swapchain);
        return ret;
}
PFN_vkAcquireFullScreenExclusiveModeEXT glad_debug_vkAcquireFullScreenExclusiveModeEXT = glad_debug_impl_vkAcquireFullScreenExclusiveModeEXT;

#endif
PFN_vkAcquireNextImage2KHR   glad_vkAcquireNextImage2KHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR *pAcquireInfo, uint32_t *pImageIndex) {
	VkResult ret;
	_pre_call_vulkan_callback("vkAcquireNextImage2KHR", (GLADapiproc)glad_vkAcquireNextImage2KHR, 3, device, pAcquireInfo, pImageIndex);
	ret = glad_vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
	_post_call_vulkan_callback((void *)&ret, "vkAcquireNextImage2KHR", (GLADapiproc)glad_vkAcquireNextImage2KHR, 3, device, pAcquireInfo, pImageIndex);
	return ret;
}
PFN_vkAcquireNextImage2KHR   glad_debug_vkAcquireNextImage2KHR = glad_debug_impl_vkAcquireNextImage2KHR;
PFN_vkAcquireNextImageKHR    glad_vkAcquireNextImageKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkAcquireNextImageKHR(VkDevice       device,
                                                                   VkSwapchainKHR swapchain,
                                                                   uint64_t       timeout,
                                                                   VkSemaphore    semaphore,
                                                                   VkFence        fence,
                                                                   uint32_t      *pImageIndex) {
	VkResult ret;
	_pre_call_vulkan_callback("vkAcquireNextImageKHR",
	                          (GLADapiproc)glad_vkAcquireNextImageKHR,
	                          6,
	                          device,
	                          swapchain,
	                          timeout,
	                          semaphore,
	                          fence,
	                          pImageIndex);
	ret = glad_vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkAcquireNextImageKHR",
	                           (GLADapiproc)glad_vkAcquireNextImageKHR,
	                           6,
	                           device,
	                           swapchain,
	                           timeout,
	                           semaphore,
	                           fence,
	                           pImageIndex);
	return ret;
}
PFN_vkAcquireNextImageKHR                  glad_debug_vkAcquireNextImageKHR = glad_debug_impl_vkAcquireNextImageKHR;
PFN_vkAcquirePerformanceConfigurationINTEL glad_vkAcquirePerformanceConfigurationINTEL = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkAcquirePerformanceConfigurationINTEL(VkDevice                                          device,
                                                                                                  const VkPerformanceConfigurationAcquireInfoINTEL *pAcquireInfo,
                                                                                                  VkPerformanceConfigurationINTEL                  *pConfiguration) {
        VkResult ret;
        _pre_call_vulkan_callback("vkAcquirePerformanceConfigurationINTEL",
                                  (GLADapiproc)glad_vkAcquirePerformanceConfigurationINTEL,
                                  3,
                                  device,
                                  pAcquireInfo,
                                  pConfiguration);
        ret = glad_vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkAcquirePerformanceConfigurationINTEL",
                                   (GLADapiproc)glad_vkAcquirePerformanceConfigurationINTEL,
                                   3,
                                   device,
                                   pAcquireInfo,
                                   pConfiguration);
        return ret;
}
PFN_vkAcquirePerformanceConfigurationINTEL glad_debug_vkAcquirePerformanceConfigurationINTEL = glad_debug_impl_vkAcquirePerformanceConfigurationINTEL;
PFN_vkAcquireProfilingLockKHR              glad_vkAcquireProfilingLockKHR = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR *pInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkAcquireProfilingLockKHR", (GLADapiproc)glad_vkAcquireProfilingLockKHR, 2, device, pInfo);
        ret = glad_vkAcquireProfilingLockKHR(device, pInfo);
        _post_call_vulkan_callback((void *)&ret, "vkAcquireProfilingLockKHR", (GLADapiproc)glad_vkAcquireProfilingLockKHR, 2, device, pInfo);
        return ret;
}
PFN_vkAcquireProfilingLockKHR glad_debug_vkAcquireProfilingLockKHR = glad_debug_impl_vkAcquireProfilingLockKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkAcquireWinrtDisplayNV  glad_vkAcquireWinrtDisplayNV = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkAcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice, VkDisplayKHR display) {
	VkResult ret;
	_pre_call_vulkan_callback("vkAcquireWinrtDisplayNV", (GLADapiproc)glad_vkAcquireWinrtDisplayNV, 2, physicalDevice, display);
	ret = glad_vkAcquireWinrtDisplayNV(physicalDevice, display);
	_post_call_vulkan_callback((void *)&ret, "vkAcquireWinrtDisplayNV", (GLADapiproc)glad_vkAcquireWinrtDisplayNV, 2, physicalDevice, display);
	return ret;
}
PFN_vkAcquireWinrtDisplayNV glad_debug_vkAcquireWinrtDisplayNV = glad_debug_impl_vkAcquireWinrtDisplayNV;

#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
PFN_vkAcquireXlibDisplayEXT  glad_vkAcquireXlibDisplayEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkAcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, Display *dpy, VkDisplayKHR display) {
	VkResult ret;
	_pre_call_vulkan_callback("vkAcquireXlibDisplayEXT", (GLADapiproc)glad_vkAcquireXlibDisplayEXT, 3, physicalDevice, dpy, display);
	ret = glad_vkAcquireXlibDisplayEXT(physicalDevice, dpy, display);
	_post_call_vulkan_callback((void *)&ret, "vkAcquireXlibDisplayEXT", (GLADapiproc)glad_vkAcquireXlibDisplayEXT, 3, physicalDevice, dpy, display);
	return ret;
}
PFN_vkAcquireXlibDisplayEXT glad_debug_vkAcquireXlibDisplayEXT = glad_debug_impl_vkAcquireXlibDisplayEXT;

#endif
PFN_vkAllocateCommandBuffers glad_vkAllocateCommandBuffers = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkAllocateCommandBuffers(VkDevice                           device,
                                                                      const VkCommandBufferAllocateInfo *pAllocateInfo,
                                                                      VkCommandBuffer                   *pCommandBuffers) {
	VkResult ret;
	_pre_call_vulkan_callback("vkAllocateCommandBuffers", (GLADapiproc)glad_vkAllocateCommandBuffers, 3, device, pAllocateInfo, pCommandBuffers);
	ret = glad_vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkAllocateCommandBuffers",
	                           (GLADapiproc)glad_vkAllocateCommandBuffers,
	                           3,
	                           device,
	                           pAllocateInfo,
	                           pCommandBuffers);
	return ret;
}
PFN_vkAllocateCommandBuffers glad_debug_vkAllocateCommandBuffers = glad_debug_impl_vkAllocateCommandBuffers;
PFN_vkAllocateDescriptorSets glad_vkAllocateDescriptorSets = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkAllocateDescriptorSets(VkDevice                           device,
                                                                      const VkDescriptorSetAllocateInfo *pAllocateInfo,
                                                                      VkDescriptorSet                   *pDescriptorSets) {
	VkResult ret;
	_pre_call_vulkan_callback("vkAllocateDescriptorSets", (GLADapiproc)glad_vkAllocateDescriptorSets, 3, device, pAllocateInfo, pDescriptorSets);
	ret = glad_vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkAllocateDescriptorSets",
	                           (GLADapiproc)glad_vkAllocateDescriptorSets,
	                           3,
	                           device,
	                           pAllocateInfo,
	                           pDescriptorSets);
	return ret;
}
PFN_vkAllocateDescriptorSets glad_debug_vkAllocateDescriptorSets = glad_debug_impl_vkAllocateDescriptorSets;
PFN_vkAllocateMemory         glad_vkAllocateMemory = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkAllocateMemory(VkDevice                     device,
                                                              const VkMemoryAllocateInfo  *pAllocateInfo,
                                                              const VkAllocationCallbacks *pAllocator,
                                                              VkDeviceMemory              *pMemory) {
	VkResult ret;
	_pre_call_vulkan_callback("vkAllocateMemory", (GLADapiproc)glad_vkAllocateMemory, 4, device, pAllocateInfo, pAllocator, pMemory);
	ret = glad_vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
	_post_call_vulkan_callback((void *)&ret, "vkAllocateMemory", (GLADapiproc)glad_vkAllocateMemory, 4, device, pAllocateInfo, pAllocator, pMemory);
	return ret;
}
PFN_vkAllocateMemory         glad_debug_vkAllocateMemory = glad_debug_impl_vkAllocateMemory;
PFN_vkBeginCommandBuffer     glad_vkBeginCommandBuffer = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo *pBeginInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkBeginCommandBuffer", (GLADapiproc)glad_vkBeginCommandBuffer, 2, commandBuffer, pBeginInfo);
	ret = glad_vkBeginCommandBuffer(commandBuffer, pBeginInfo);
	_post_call_vulkan_callback((void *)&ret, "vkBeginCommandBuffer", (GLADapiproc)glad_vkBeginCommandBuffer, 2, commandBuffer, pBeginInfo);
	return ret;
}
PFN_vkBeginCommandBuffer                glad_debug_vkBeginCommandBuffer = glad_debug_impl_vkBeginCommandBuffer;
PFN_vkBindAccelerationStructureMemoryNV glad_vkBindAccelerationStructureMemoryNV = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkBindAccelerationStructureMemoryNV(VkDevice                                       device,
                                                                                            uint32_t                                       bindInfoCount,
                                                                                            const VkBindAccelerationStructureMemoryInfoNV *pBindInfos) {
        VkResult ret;
        _pre_call_vulkan_callback("vkBindAccelerationStructureMemoryNV",
                                  (GLADapiproc)glad_vkBindAccelerationStructureMemoryNV,
                                  3,
                                  device,
                                  bindInfoCount,
                                  pBindInfos);
        ret = glad_vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkBindAccelerationStructureMemoryNV",
                                   (GLADapiproc)glad_vkBindAccelerationStructureMemoryNV,
                                   3,
                                   device,
                                   bindInfoCount,
                                   pBindInfos);
        return ret;
}
PFN_vkBindAccelerationStructureMemoryNV glad_debug_vkBindAccelerationStructureMemoryNV = glad_debug_impl_vkBindAccelerationStructureMemoryNV;
PFN_vkBindBufferMemory                  glad_vkBindBufferMemory = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
        VkResult ret;
        _pre_call_vulkan_callback("vkBindBufferMemory", (GLADapiproc)glad_vkBindBufferMemory, 4, device, buffer, memory, memoryOffset);
        ret = glad_vkBindBufferMemory(device, buffer, memory, memoryOffset);
        _post_call_vulkan_callback((void *)&ret, "vkBindBufferMemory", (GLADapiproc)glad_vkBindBufferMemory, 4, device, buffer, memory, memoryOffset);
        return ret;
}
PFN_vkBindBufferMemory       glad_debug_vkBindBufferMemory = glad_debug_impl_vkBindBufferMemory;
PFN_vkBindBufferMemory2      glad_vkBindBufferMemory2 = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos) {
	VkResult ret;
	_pre_call_vulkan_callback("vkBindBufferMemory2", (GLADapiproc)glad_vkBindBufferMemory2, 3, device, bindInfoCount, pBindInfos);
	ret = glad_vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
	_post_call_vulkan_callback((void *)&ret, "vkBindBufferMemory2", (GLADapiproc)glad_vkBindBufferMemory2, 3, device, bindInfoCount, pBindInfos);
	return ret;
}
PFN_vkBindBufferMemory2      glad_debug_vkBindBufferMemory2 = glad_debug_impl_vkBindBufferMemory2;
PFN_vkBindBufferMemory2KHR   glad_vkBindBufferMemory2KHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos) {
	VkResult ret;
	_pre_call_vulkan_callback("vkBindBufferMemory2KHR", (GLADapiproc)glad_vkBindBufferMemory2KHR, 3, device, bindInfoCount, pBindInfos);
	ret = glad_vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
	_post_call_vulkan_callback((void *)&ret, "vkBindBufferMemory2KHR", (GLADapiproc)glad_vkBindBufferMemory2KHR, 3, device, bindInfoCount, pBindInfos);
	return ret;
}
PFN_vkBindBufferMemory2KHR   glad_debug_vkBindBufferMemory2KHR = glad_debug_impl_vkBindBufferMemory2KHR;
PFN_vkBindImageMemory        glad_vkBindImageMemory = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
	VkResult ret;
	_pre_call_vulkan_callback("vkBindImageMemory", (GLADapiproc)glad_vkBindImageMemory, 4, device, image, memory, memoryOffset);
	ret = glad_vkBindImageMemory(device, image, memory, memoryOffset);
	_post_call_vulkan_callback((void *)&ret, "vkBindImageMemory", (GLADapiproc)glad_vkBindImageMemory, 4, device, image, memory, memoryOffset);
	return ret;
}
PFN_vkBindImageMemory        glad_debug_vkBindImageMemory = glad_debug_impl_vkBindImageMemory;
PFN_vkBindImageMemory2       glad_vkBindImageMemory2 = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos) {
	VkResult ret;
	_pre_call_vulkan_callback("vkBindImageMemory2", (GLADapiproc)glad_vkBindImageMemory2, 3, device, bindInfoCount, pBindInfos);
	ret = glad_vkBindImageMemory2(device, bindInfoCount, pBindInfos);
	_post_call_vulkan_callback((void *)&ret, "vkBindImageMemory2", (GLADapiproc)glad_vkBindImageMemory2, 3, device, bindInfoCount, pBindInfos);
	return ret;
}
PFN_vkBindImageMemory2       glad_debug_vkBindImageMemory2 = glad_debug_impl_vkBindImageMemory2;
PFN_vkBindImageMemory2KHR    glad_vkBindImageMemory2KHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos) {
	VkResult ret;
	_pre_call_vulkan_callback("vkBindImageMemory2KHR", (GLADapiproc)glad_vkBindImageMemory2KHR, 3, device, bindInfoCount, pBindInfos);
	ret = glad_vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
	_post_call_vulkan_callback((void *)&ret, "vkBindImageMemory2KHR", (GLADapiproc)glad_vkBindImageMemory2KHR, 3, device, bindInfoCount, pBindInfos);
	return ret;
}
PFN_vkBindImageMemory2KHR           glad_debug_vkBindImageMemory2KHR = glad_debug_impl_vkBindImageMemory2KHR;
PFN_vkBindOpticalFlowSessionImageNV glad_vkBindOpticalFlowSessionImageNV = NULL;
static VkResult GLAD_API_PTR        glad_debug_impl_vkBindOpticalFlowSessionImageNV(VkDevice                           device,
                                                                                    VkOpticalFlowSessionNV             session,
                                                                                    VkOpticalFlowSessionBindingPointNV bindingPoint,
                                                                                    VkImageView                        view,
                                                                                    VkImageLayout                      layout) {
        VkResult ret;
        _pre_call_vulkan_callback("vkBindOpticalFlowSessionImageNV",
                                  (GLADapiproc)glad_vkBindOpticalFlowSessionImageNV,
                                  5,
                                  device,
                                  session,
                                  bindingPoint,
                                  view,
                                  layout);
        ret = glad_vkBindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkBindOpticalFlowSessionImageNV",
                                   (GLADapiproc)glad_vkBindOpticalFlowSessionImageNV,
                                   5,
                                   device,
                                   session,
                                   bindingPoint,
                                   view,
                                   layout);
        return ret;
}
PFN_vkBindOpticalFlowSessionImageNV glad_debug_vkBindOpticalFlowSessionImageNV = glad_debug_impl_vkBindOpticalFlowSessionImageNV;
PFN_vkBindVideoSessionMemoryKHR     glad_vkBindVideoSessionMemoryKHR = NULL;
static VkResult GLAD_API_PTR        glad_debug_impl_vkBindVideoSessionMemoryKHR(VkDevice                               device,
                                                                                VkVideoSessionKHR                      videoSession,
                                                                                uint32_t                               bindSessionMemoryInfoCount,
                                                                                const VkBindVideoSessionMemoryInfoKHR *pBindSessionMemoryInfos) {
        VkResult ret;
        _pre_call_vulkan_callback("vkBindVideoSessionMemoryKHR",
                                  (GLADapiproc)glad_vkBindVideoSessionMemoryKHR,
                                  4,
                                  device,
                                  videoSession,
                                  bindSessionMemoryInfoCount,
                                  pBindSessionMemoryInfos);
        ret = glad_vkBindVideoSessionMemoryKHR(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkBindVideoSessionMemoryKHR",
                                   (GLADapiproc)glad_vkBindVideoSessionMemoryKHR,
                                   4,
                                   device,
                                   videoSession,
                                   bindSessionMemoryInfoCount,
                                   pBindSessionMemoryInfos);
        return ret;
}
PFN_vkBindVideoSessionMemoryKHR      glad_debug_vkBindVideoSessionMemoryKHR = glad_debug_impl_vkBindVideoSessionMemoryKHR;
PFN_vkBuildAccelerationStructuresKHR glad_vkBuildAccelerationStructuresKHR = NULL;
static VkResult GLAD_API_PTR         glad_debug_impl_vkBuildAccelerationStructuresKHR(VkDevice                                               device,
                                                                                      VkDeferredOperationKHR                                 deferredOperation,
                                                                                      uint32_t                                               infoCount,
                                                                                      const VkAccelerationStructureBuildGeometryInfoKHR     *pInfos,
                                                                                      const VkAccelerationStructureBuildRangeInfoKHR *const *ppBuildRangeInfos) {
        VkResult ret;
        _pre_call_vulkan_callback("vkBuildAccelerationStructuresKHR",
                                  (GLADapiproc)glad_vkBuildAccelerationStructuresKHR,
                                  5,
                                  device,
                                  deferredOperation,
                                  infoCount,
                                  pInfos,
                                  ppBuildRangeInfos);
        ret = glad_vkBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkBuildAccelerationStructuresKHR",
                                   (GLADapiproc)glad_vkBuildAccelerationStructuresKHR,
                                   5,
                                   device,
                                   deferredOperation,
                                   infoCount,
                                   pInfos,
                                   ppBuildRangeInfos);
        return ret;
}
PFN_vkBuildAccelerationStructuresKHR glad_debug_vkBuildAccelerationStructuresKHR = glad_debug_impl_vkBuildAccelerationStructuresKHR;
PFN_vkBuildMicromapsEXT              glad_vkBuildMicromapsEXT = NULL;
static VkResult GLAD_API_PTR         glad_debug_impl_vkBuildMicromapsEXT(VkDevice                      device,
                                                                         VkDeferredOperationKHR        deferredOperation,
                                                                         uint32_t                      infoCount,
                                                                         const VkMicromapBuildInfoEXT *pInfos) {
        VkResult ret;
        _pre_call_vulkan_callback("vkBuildMicromapsEXT", (GLADapiproc)glad_vkBuildMicromapsEXT, 4, device, deferredOperation, infoCount, pInfos);
        ret = glad_vkBuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);
        _post_call_vulkan_callback((void *)&ret, "vkBuildMicromapsEXT", (GLADapiproc)glad_vkBuildMicromapsEXT, 4, device, deferredOperation, infoCount, pInfos);
        return ret;
}
PFN_vkBuildMicromapsEXT               glad_debug_vkBuildMicromapsEXT = glad_debug_impl_vkBuildMicromapsEXT;
PFN_vkCmdBeginConditionalRenderingEXT glad_vkCmdBeginConditionalRenderingEXT = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdBeginConditionalRenderingEXT(VkCommandBuffer                           commandBuffer,
                                                                                        const VkConditionalRenderingBeginInfoEXT *pConditionalRenderingBegin) {
        _pre_call_vulkan_callback("vkCmdBeginConditionalRenderingEXT",
                                  (GLADapiproc)glad_vkCmdBeginConditionalRenderingEXT,
                                  2,
                                  commandBuffer,
                                  pConditionalRenderingBegin);
        glad_vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBeginConditionalRenderingEXT",
                                   (GLADapiproc)glad_vkCmdBeginConditionalRenderingEXT,
                                   2,
                                   commandBuffer,
                                   pConditionalRenderingBegin);
}
PFN_vkCmdBeginConditionalRenderingEXT glad_debug_vkCmdBeginConditionalRenderingEXT = glad_debug_impl_vkCmdBeginConditionalRenderingEXT;
PFN_vkCmdBeginDebugUtilsLabelEXT      glad_vkCmdBeginDebugUtilsLabelEXT = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo) {
        _pre_call_vulkan_callback("vkCmdBeginDebugUtilsLabelEXT", (GLADapiproc)glad_vkCmdBeginDebugUtilsLabelEXT, 2, commandBuffer, pLabelInfo);
        glad_vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
        _post_call_vulkan_callback(NULL, "vkCmdBeginDebugUtilsLabelEXT", (GLADapiproc)glad_vkCmdBeginDebugUtilsLabelEXT, 2, commandBuffer, pLabelInfo);
}
PFN_vkCmdBeginDebugUtilsLabelEXT glad_debug_vkCmdBeginDebugUtilsLabelEXT = glad_debug_impl_vkCmdBeginDebugUtilsLabelEXT;
PFN_vkCmdBeginQuery              glad_vkCmdBeginQuery = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) {
	_pre_call_vulkan_callback("vkCmdBeginQuery", (GLADapiproc)glad_vkCmdBeginQuery, 4, commandBuffer, queryPool, query, flags);
	glad_vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
	_post_call_vulkan_callback(NULL, "vkCmdBeginQuery", (GLADapiproc)glad_vkCmdBeginQuery, 4, commandBuffer, queryPool, query, flags);
}
PFN_vkCmdBeginQuery           glad_debug_vkCmdBeginQuery = glad_debug_impl_vkCmdBeginQuery;
PFN_vkCmdBeginQueryIndexedEXT glad_vkCmdBeginQueryIndexedEXT = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index) {
	_pre_call_vulkan_callback("vkCmdBeginQueryIndexedEXT", (GLADapiproc)glad_vkCmdBeginQueryIndexedEXT, 5, commandBuffer, queryPool, query, flags, index);
	glad_vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdBeginQueryIndexedEXT",
	                           (GLADapiproc)glad_vkCmdBeginQueryIndexedEXT,
	                           5,
	                           commandBuffer,
	                           queryPool,
	                           query,
	                           flags,
	                           index);
}
PFN_vkCmdBeginQueryIndexedEXT glad_debug_vkCmdBeginQueryIndexedEXT = glad_debug_impl_vkCmdBeginQueryIndexedEXT;
PFN_vkCmdBeginRenderPass      glad_vkCmdBeginRenderPass = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdBeginRenderPass(VkCommandBuffer              commandBuffer,
                                                                   const VkRenderPassBeginInfo *pRenderPassBegin,
                                                                   VkSubpassContents            contents) {
        _pre_call_vulkan_callback("vkCmdBeginRenderPass", (GLADapiproc)glad_vkCmdBeginRenderPass, 3, commandBuffer, pRenderPassBegin, contents);
        glad_vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
        _post_call_vulkan_callback(NULL, "vkCmdBeginRenderPass", (GLADapiproc)glad_vkCmdBeginRenderPass, 3, commandBuffer, pRenderPassBegin, contents);
}
PFN_vkCmdBeginRenderPass  glad_debug_vkCmdBeginRenderPass = glad_debug_impl_vkCmdBeginRenderPass;
PFN_vkCmdBeginRenderPass2 glad_vkCmdBeginRenderPass2 = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkCmdBeginRenderPass2(VkCommandBuffer              commandBuffer,
                                                                const VkRenderPassBeginInfo *pRenderPassBegin,
                                                                const VkSubpassBeginInfo    *pSubpassBeginInfo) {
        _pre_call_vulkan_callback("vkCmdBeginRenderPass2", (GLADapiproc)glad_vkCmdBeginRenderPass2, 3, commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
        glad_vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBeginRenderPass2",
                                   (GLADapiproc)glad_vkCmdBeginRenderPass2,
                                   3,
                                   commandBuffer,
                                   pRenderPassBegin,
                                   pSubpassBeginInfo);
}
PFN_vkCmdBeginRenderPass2    glad_debug_vkCmdBeginRenderPass2 = glad_debug_impl_vkCmdBeginRenderPass2;
PFN_vkCmdBeginRenderPass2KHR glad_vkCmdBeginRenderPass2KHR = NULL;
static void GLAD_API_PTR     glad_debug_impl_vkCmdBeginRenderPass2KHR(VkCommandBuffer              commandBuffer,
                                                                      const VkRenderPassBeginInfo *pRenderPassBegin,
                                                                      const VkSubpassBeginInfo    *pSubpassBeginInfo) {
        _pre_call_vulkan_callback("vkCmdBeginRenderPass2KHR",
                                  (GLADapiproc)glad_vkCmdBeginRenderPass2KHR,
                                  3,
                                  commandBuffer,
                                  pRenderPassBegin,
                                  pSubpassBeginInfo);
        glad_vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBeginRenderPass2KHR",
                                   (GLADapiproc)glad_vkCmdBeginRenderPass2KHR,
                                   3,
                                   commandBuffer,
                                   pRenderPassBegin,
                                   pSubpassBeginInfo);
}
PFN_vkCmdBeginRenderPass2KHR glad_debug_vkCmdBeginRenderPass2KHR = glad_debug_impl_vkCmdBeginRenderPass2KHR;
PFN_vkCmdBeginRendering      glad_vkCmdBeginRendering = NULL;
static void GLAD_API_PTR     glad_debug_impl_vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo) {
        _pre_call_vulkan_callback("vkCmdBeginRendering", (GLADapiproc)glad_vkCmdBeginRendering, 2, commandBuffer, pRenderingInfo);
        glad_vkCmdBeginRendering(commandBuffer, pRenderingInfo);
        _post_call_vulkan_callback(NULL, "vkCmdBeginRendering", (GLADapiproc)glad_vkCmdBeginRendering, 2, commandBuffer, pRenderingInfo);
}
PFN_vkCmdBeginRendering    glad_debug_vkCmdBeginRendering = glad_debug_impl_vkCmdBeginRendering;
PFN_vkCmdBeginRenderingKHR glad_vkCmdBeginRenderingKHR = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo) {
        _pre_call_vulkan_callback("vkCmdBeginRenderingKHR", (GLADapiproc)glad_vkCmdBeginRenderingKHR, 2, commandBuffer, pRenderingInfo);
        glad_vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo);
        _post_call_vulkan_callback(NULL, "vkCmdBeginRenderingKHR", (GLADapiproc)glad_vkCmdBeginRenderingKHR, 2, commandBuffer, pRenderingInfo);
}
PFN_vkCmdBeginRenderingKHR         glad_debug_vkCmdBeginRenderingKHR = glad_debug_impl_vkCmdBeginRenderingKHR;
PFN_vkCmdBeginTransformFeedbackEXT glad_vkCmdBeginTransformFeedbackEXT = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdBeginTransformFeedbackEXT(VkCommandBuffer     commandBuffer,
                                                                                  uint32_t            firstCounterBuffer,
                                                                                  uint32_t            counterBufferCount,
                                                                                  const VkBuffer     *pCounterBuffers,
                                                                                  const VkDeviceSize *pCounterBufferOffsets) {
        _pre_call_vulkan_callback("vkCmdBeginTransformFeedbackEXT",
                                  (GLADapiproc)glad_vkCmdBeginTransformFeedbackEXT,
                                  5,
                                  commandBuffer,
                                  firstCounterBuffer,
                                  counterBufferCount,
                                  pCounterBuffers,
                                  pCounterBufferOffsets);
        glad_vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBeginTransformFeedbackEXT",
                                   (GLADapiproc)glad_vkCmdBeginTransformFeedbackEXT,
                                   5,
                                   commandBuffer,
                                   firstCounterBuffer,
                                   counterBufferCount,
                                   pCounterBuffers,
                                   pCounterBufferOffsets);
}
PFN_vkCmdBeginTransformFeedbackEXT glad_debug_vkCmdBeginTransformFeedbackEXT = glad_debug_impl_vkCmdBeginTransformFeedbackEXT;
PFN_vkCmdBeginVideoCodingKHR       glad_vkCmdBeginVideoCodingKHR = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR *pBeginInfo) {
        _pre_call_vulkan_callback("vkCmdBeginVideoCodingKHR", (GLADapiproc)glad_vkCmdBeginVideoCodingKHR, 2, commandBuffer, pBeginInfo);
        glad_vkCmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);
        _post_call_vulkan_callback(NULL, "vkCmdBeginVideoCodingKHR", (GLADapiproc)glad_vkCmdBeginVideoCodingKHR, 2, commandBuffer, pBeginInfo);
}
PFN_vkCmdBeginVideoCodingKHR                     glad_debug_vkCmdBeginVideoCodingKHR = glad_debug_impl_vkCmdBeginVideoCodingKHR;
PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT glad_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = NULL;
static void GLAD_API_PTR                         glad_debug_impl_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer     commandBuffer,
                                                                                                              VkPipelineBindPoint pipelineBindPoint,
                                                                                                              VkPipelineLayout    layout,
                                                                                                              uint32_t            set) {
        _pre_call_vulkan_callback("vkCmdBindDescriptorBufferEmbeddedSamplersEXT",
                                  (GLADapiproc)glad_vkCmdBindDescriptorBufferEmbeddedSamplersEXT,
                                  4,
                                  commandBuffer,
                                  pipelineBindPoint,
                                  layout,
                                  set);
        glad_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer, pipelineBindPoint, layout, set);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBindDescriptorBufferEmbeddedSamplersEXT",
                                   (GLADapiproc)glad_vkCmdBindDescriptorBufferEmbeddedSamplersEXT,
                                   4,
                                   commandBuffer,
                                   pipelineBindPoint,
                                   layout,
                                   set);
}
PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT glad_debug_vkCmdBindDescriptorBufferEmbeddedSamplersEXT =
	glad_debug_impl_vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
PFN_vkCmdBindDescriptorBuffersEXT glad_vkCmdBindDescriptorBuffersEXT = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdBindDescriptorBuffersEXT(VkCommandBuffer                         commandBuffer,
                                                                                uint32_t                                bufferCount,
                                                                                const VkDescriptorBufferBindingInfoEXT *pBindingInfos) {
        _pre_call_vulkan_callback("vkCmdBindDescriptorBuffersEXT",
                                  (GLADapiproc)glad_vkCmdBindDescriptorBuffersEXT,
                                  3,
                                  commandBuffer,
                                  bufferCount,
                                  pBindingInfos);
        glad_vkCmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBindDescriptorBuffersEXT",
                                   (GLADapiproc)glad_vkCmdBindDescriptorBuffersEXT,
                                   3,
                                   commandBuffer,
                                   bufferCount,
                                   pBindingInfos);
}
PFN_vkCmdBindDescriptorBuffersEXT glad_debug_vkCmdBindDescriptorBuffersEXT = glad_debug_impl_vkCmdBindDescriptorBuffersEXT;
PFN_vkCmdBindDescriptorSets       glad_vkCmdBindDescriptorSets = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdBindDescriptorSets(VkCommandBuffer        commandBuffer,
                                                                          VkPipelineBindPoint    pipelineBindPoint,
                                                                          VkPipelineLayout       layout,
                                                                          uint32_t               firstSet,
                                                                          uint32_t               descriptorSetCount,
                                                                          const VkDescriptorSet *pDescriptorSets,
                                                                          uint32_t               dynamicOffsetCount,
                                                                          const uint32_t        *pDynamicOffsets) {
        _pre_call_vulkan_callback("vkCmdBindDescriptorSets",
                                  (GLADapiproc)glad_vkCmdBindDescriptorSets,
                                  8,
                                  commandBuffer,
                                  pipelineBindPoint,
                                  layout,
                                  firstSet,
                                  descriptorSetCount,
                                  pDescriptorSets,
                                  dynamicOffsetCount,
                                  pDynamicOffsets);
        glad_vkCmdBindDescriptorSets(commandBuffer,
                                     pipelineBindPoint,
                                     layout,
                                     firstSet,
                                     descriptorSetCount,
                                     pDescriptorSets,
                                     dynamicOffsetCount,
                                     pDynamicOffsets);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBindDescriptorSets",
                                   (GLADapiproc)glad_vkCmdBindDescriptorSets,
                                   8,
                                   commandBuffer,
                                   pipelineBindPoint,
                                   layout,
                                   firstSet,
                                   descriptorSetCount,
                                   pDescriptorSets,
                                   dynamicOffsetCount,
                                   pDynamicOffsets);
}
PFN_vkCmdBindDescriptorSets glad_debug_vkCmdBindDescriptorSets = glad_debug_impl_vkCmdBindDescriptorSets;
PFN_vkCmdBindIndexBuffer    glad_vkCmdBindIndexBuffer = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) {
        _pre_call_vulkan_callback("vkCmdBindIndexBuffer", (GLADapiproc)glad_vkCmdBindIndexBuffer, 4, commandBuffer, buffer, offset, indexType);
        glad_vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
        _post_call_vulkan_callback(NULL, "vkCmdBindIndexBuffer", (GLADapiproc)glad_vkCmdBindIndexBuffer, 4, commandBuffer, buffer, offset, indexType);
}
PFN_vkCmdBindIndexBuffer     glad_debug_vkCmdBindIndexBuffer = glad_debug_impl_vkCmdBindIndexBuffer;
PFN_vkCmdBindIndexBuffer2KHR glad_vkCmdBindIndexBuffer2KHR = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType) {
	_pre_call_vulkan_callback("vkCmdBindIndexBuffer2KHR", (GLADapiproc)glad_vkCmdBindIndexBuffer2KHR, 5, commandBuffer, buffer, offset, size, indexType);
	glad_vkCmdBindIndexBuffer2KHR(commandBuffer, buffer, offset, size, indexType);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdBindIndexBuffer2KHR",
	                           (GLADapiproc)glad_vkCmdBindIndexBuffer2KHR,
	                           5,
	                           commandBuffer,
	                           buffer,
	                           offset,
	                           size,
	                           indexType);
}
PFN_vkCmdBindIndexBuffer2KHR      glad_debug_vkCmdBindIndexBuffer2KHR = glad_debug_impl_vkCmdBindIndexBuffer2KHR;
PFN_vkCmdBindInvocationMaskHUAWEI glad_vkCmdBindInvocationMaskHUAWEI = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) {
	_pre_call_vulkan_callback("vkCmdBindInvocationMaskHUAWEI", (GLADapiproc)glad_vkCmdBindInvocationMaskHUAWEI, 3, commandBuffer, imageView, imageLayout);
	glad_vkCmdBindInvocationMaskHUAWEI(commandBuffer, imageView, imageLayout);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdBindInvocationMaskHUAWEI",
	                           (GLADapiproc)glad_vkCmdBindInvocationMaskHUAWEI,
	                           3,
	                           commandBuffer,
	                           imageView,
	                           imageLayout);
}
PFN_vkCmdBindInvocationMaskHUAWEI glad_debug_vkCmdBindInvocationMaskHUAWEI = glad_debug_impl_vkCmdBindInvocationMaskHUAWEI;
PFN_vkCmdBindPipeline             glad_vkCmdBindPipeline = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) {
        _pre_call_vulkan_callback("vkCmdBindPipeline", (GLADapiproc)glad_vkCmdBindPipeline, 3, commandBuffer, pipelineBindPoint, pipeline);
        glad_vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
        _post_call_vulkan_callback(NULL, "vkCmdBindPipeline", (GLADapiproc)glad_vkCmdBindPipeline, 3, commandBuffer, pipelineBindPoint, pipeline);
}
PFN_vkCmdBindPipeline              glad_debug_vkCmdBindPipeline = glad_debug_impl_vkCmdBindPipeline;
PFN_vkCmdBindPipelineShaderGroupNV glad_vkCmdBindPipelineShaderGroupNV = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdBindPipelineShaderGroupNV(VkCommandBuffer     commandBuffer,
                                                                                  VkPipelineBindPoint pipelineBindPoint,
                                                                                  VkPipeline          pipeline,
                                                                                  uint32_t            groupIndex) {
        _pre_call_vulkan_callback("vkCmdBindPipelineShaderGroupNV",
                                  (GLADapiproc)glad_vkCmdBindPipelineShaderGroupNV,
                                  4,
                                  commandBuffer,
                                  pipelineBindPoint,
                                  pipeline,
                                  groupIndex);
        glad_vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBindPipelineShaderGroupNV",
                                   (GLADapiproc)glad_vkCmdBindPipelineShaderGroupNV,
                                   4,
                                   commandBuffer,
                                   pipelineBindPoint,
                                   pipeline,
                                   groupIndex);
}
PFN_vkCmdBindPipelineShaderGroupNV glad_debug_vkCmdBindPipelineShaderGroupNV = glad_debug_impl_vkCmdBindPipelineShaderGroupNV;
PFN_vkCmdBindShadersEXT            glad_vkCmdBindShadersEXT = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdBindShadersEXT(VkCommandBuffer              commandBuffer,
                                                                       uint32_t                     stageCount,
                                                                       const VkShaderStageFlagBits *pStages,
                                                                       const VkShaderEXT           *pShaders) {
        _pre_call_vulkan_callback("vkCmdBindShadersEXT", (GLADapiproc)glad_vkCmdBindShadersEXT, 4, commandBuffer, stageCount, pStages, pShaders);
        glad_vkCmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);
        _post_call_vulkan_callback(NULL, "vkCmdBindShadersEXT", (GLADapiproc)glad_vkCmdBindShadersEXT, 4, commandBuffer, stageCount, pStages, pShaders);
}
PFN_vkCmdBindShadersEXT         glad_debug_vkCmdBindShadersEXT = glad_debug_impl_vkCmdBindShadersEXT;
PFN_vkCmdBindShadingRateImageNV glad_vkCmdBindShadingRateImageNV = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) {
        _pre_call_vulkan_callback("vkCmdBindShadingRateImageNV", (GLADapiproc)glad_vkCmdBindShadingRateImageNV, 3, commandBuffer, imageView, imageLayout);
        glad_vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBindShadingRateImageNV",
                                   (GLADapiproc)glad_vkCmdBindShadingRateImageNV,
                                   3,
                                   commandBuffer,
                                   imageView,
                                   imageLayout);
}
PFN_vkCmdBindShadingRateImageNV          glad_debug_vkCmdBindShadingRateImageNV = glad_debug_impl_vkCmdBindShadingRateImageNV;
PFN_vkCmdBindTransformFeedbackBuffersEXT glad_vkCmdBindTransformFeedbackBuffersEXT = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer     commandBuffer,
                                                                                              uint32_t            firstBinding,
                                                                                              uint32_t            bindingCount,
                                                                                              const VkBuffer     *pBuffers,
                                                                                              const VkDeviceSize *pOffsets,
                                                                                              const VkDeviceSize *pSizes) {
        _pre_call_vulkan_callback("vkCmdBindTransformFeedbackBuffersEXT",
                                  (GLADapiproc)glad_vkCmdBindTransformFeedbackBuffersEXT,
                                  6,
                                  commandBuffer,
                                  firstBinding,
                                  bindingCount,
                                  pBuffers,
                                  pOffsets,
                                  pSizes);
        glad_vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBindTransformFeedbackBuffersEXT",
                                   (GLADapiproc)glad_vkCmdBindTransformFeedbackBuffersEXT,
                                   6,
                                   commandBuffer,
                                   firstBinding,
                                   bindingCount,
                                   pBuffers,
                                   pOffsets,
                                   pSizes);
}
PFN_vkCmdBindTransformFeedbackBuffersEXT glad_debug_vkCmdBindTransformFeedbackBuffersEXT = glad_debug_impl_vkCmdBindTransformFeedbackBuffersEXT;
PFN_vkCmdBindVertexBuffers               glad_vkCmdBindVertexBuffers = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkCmdBindVertexBuffers(VkCommandBuffer     commandBuffer,
                                                                                uint32_t            firstBinding,
                                                                                uint32_t            bindingCount,
                                                                                const VkBuffer     *pBuffers,
                                                                                const VkDeviceSize *pOffsets) {
        _pre_call_vulkan_callback("vkCmdBindVertexBuffers",
                                  (GLADapiproc)glad_vkCmdBindVertexBuffers,
                                  5,
                                  commandBuffer,
                                  firstBinding,
                                  bindingCount,
                                  pBuffers,
                                  pOffsets);
        glad_vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBindVertexBuffers",
                                   (GLADapiproc)glad_vkCmdBindVertexBuffers,
                                   5,
                                   commandBuffer,
                                   firstBinding,
                                   bindingCount,
                                   pBuffers,
                                   pOffsets);
}
PFN_vkCmdBindVertexBuffers  glad_debug_vkCmdBindVertexBuffers = glad_debug_impl_vkCmdBindVertexBuffers;
PFN_vkCmdBindVertexBuffers2 glad_vkCmdBindVertexBuffers2 = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkCmdBindVertexBuffers2(VkCommandBuffer     commandBuffer,
                                                                    uint32_t            firstBinding,
                                                                    uint32_t            bindingCount,
                                                                    const VkBuffer     *pBuffers,
                                                                    const VkDeviceSize *pOffsets,
                                                                    const VkDeviceSize *pSizes,
                                                                    const VkDeviceSize *pStrides) {
        _pre_call_vulkan_callback("vkCmdBindVertexBuffers2",
                                  (GLADapiproc)glad_vkCmdBindVertexBuffers2,
                                  7,
                                  commandBuffer,
                                  firstBinding,
                                  bindingCount,
                                  pBuffers,
                                  pOffsets,
                                  pSizes,
                                  pStrides);
        glad_vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBindVertexBuffers2",
                                   (GLADapiproc)glad_vkCmdBindVertexBuffers2,
                                   7,
                                   commandBuffer,
                                   firstBinding,
                                   bindingCount,
                                   pBuffers,
                                   pOffsets,
                                   pSizes,
                                   pStrides);
}
PFN_vkCmdBindVertexBuffers2    glad_debug_vkCmdBindVertexBuffers2 = glad_debug_impl_vkCmdBindVertexBuffers2;
PFN_vkCmdBindVertexBuffers2EXT glad_vkCmdBindVertexBuffers2EXT = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdBindVertexBuffers2EXT(VkCommandBuffer     commandBuffer,
                                                                          uint32_t            firstBinding,
                                                                          uint32_t            bindingCount,
                                                                          const VkBuffer     *pBuffers,
                                                                          const VkDeviceSize *pOffsets,
                                                                          const VkDeviceSize *pSizes,
                                                                          const VkDeviceSize *pStrides) {
        _pre_call_vulkan_callback("vkCmdBindVertexBuffers2EXT",
                                  (GLADapiproc)glad_vkCmdBindVertexBuffers2EXT,
                                  7,
                                  commandBuffer,
                                  firstBinding,
                                  bindingCount,
                                  pBuffers,
                                  pOffsets,
                                  pSizes,
                                  pStrides);
        glad_vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBindVertexBuffers2EXT",
                                   (GLADapiproc)glad_vkCmdBindVertexBuffers2EXT,
                                   7,
                                   commandBuffer,
                                   firstBinding,
                                   bindingCount,
                                   pBuffers,
                                   pOffsets,
                                   pSizes,
                                   pStrides);
}
PFN_vkCmdBindVertexBuffers2EXT glad_debug_vkCmdBindVertexBuffers2EXT = glad_debug_impl_vkCmdBindVertexBuffers2EXT;
PFN_vkCmdBlitImage             glad_vkCmdBlitImage = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdBlitImage(VkCommandBuffer    commandBuffer,
                                                              VkImage            srcImage,
                                                              VkImageLayout      srcImageLayout,
                                                              VkImage            dstImage,
                                                              VkImageLayout      dstImageLayout,
                                                              uint32_t           regionCount,
                                                              const VkImageBlit *pRegions,
                                                              VkFilter           filter) {
        _pre_call_vulkan_callback("vkCmdBlitImage",
                                  (GLADapiproc)glad_vkCmdBlitImage,
                                  8,
                                  commandBuffer,
                                  srcImage,
                                  srcImageLayout,
                                  dstImage,
                                  dstImageLayout,
                                  regionCount,
                                  pRegions,
                                  filter);
        glad_vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBlitImage",
                                   (GLADapiproc)glad_vkCmdBlitImage,
                                   8,
                                   commandBuffer,
                                   srcImage,
                                   srcImageLayout,
                                   dstImage,
                                   dstImageLayout,
                                   regionCount,
                                   pRegions,
                                   filter);
}
PFN_vkCmdBlitImage       glad_debug_vkCmdBlitImage = glad_debug_impl_vkCmdBlitImage;
PFN_vkCmdBlitImage2      glad_vkCmdBlitImage2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo) {
	_pre_call_vulkan_callback("vkCmdBlitImage2", (GLADapiproc)glad_vkCmdBlitImage2, 2, commandBuffer, pBlitImageInfo);
	glad_vkCmdBlitImage2(commandBuffer, pBlitImageInfo);
	_post_call_vulkan_callback(NULL, "vkCmdBlitImage2", (GLADapiproc)glad_vkCmdBlitImage2, 2, commandBuffer, pBlitImageInfo);
}
PFN_vkCmdBlitImage2      glad_debug_vkCmdBlitImage2 = glad_debug_impl_vkCmdBlitImage2;
PFN_vkCmdBlitImage2KHR   glad_vkCmdBlitImage2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo) {
	_pre_call_vulkan_callback("vkCmdBlitImage2KHR", (GLADapiproc)glad_vkCmdBlitImage2KHR, 2, commandBuffer, pBlitImageInfo);
	glad_vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
	_post_call_vulkan_callback(NULL, "vkCmdBlitImage2KHR", (GLADapiproc)glad_vkCmdBlitImage2KHR, 2, commandBuffer, pBlitImageInfo);
}
PFN_vkCmdBlitImage2KHR                glad_debug_vkCmdBlitImage2KHR = glad_debug_impl_vkCmdBlitImage2KHR;
PFN_vkCmdBuildAccelerationStructureNV glad_vkCmdBuildAccelerationStructureNV = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdBuildAccelerationStructureNV(VkCommandBuffer                      commandBuffer,
                                                                                        const VkAccelerationStructureInfoNV *pInfo,
                                                                                        VkBuffer                             instanceData,
                                                                                        VkDeviceSize                         instanceOffset,
                                                                                        VkBool32                             update,
                                                                                        VkAccelerationStructureNV            dst,
                                                                                        VkAccelerationStructureNV            src,
                                                                                        VkBuffer                             scratch,
                                                                                        VkDeviceSize                         scratchOffset) {
        _pre_call_vulkan_callback("vkCmdBuildAccelerationStructureNV",
                                  (GLADapiproc)glad_vkCmdBuildAccelerationStructureNV,
                                  9,
                                  commandBuffer,
                                  pInfo,
                                  instanceData,
                                  instanceOffset,
                                  update,
                                  dst,
                                  src,
                                  scratch,
                                  scratchOffset);
        glad_vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBuildAccelerationStructureNV",
                                   (GLADapiproc)glad_vkCmdBuildAccelerationStructureNV,
                                   9,
                                   commandBuffer,
                                   pInfo,
                                   instanceData,
                                   instanceOffset,
                                   update,
                                   dst,
                                   src,
                                   scratch,
                                   scratchOffset);
}
PFN_vkCmdBuildAccelerationStructureNV           glad_debug_vkCmdBuildAccelerationStructureNV = glad_debug_impl_vkCmdBuildAccelerationStructureNV;
PFN_vkCmdBuildAccelerationStructuresIndirectKHR glad_vkCmdBuildAccelerationStructuresIndirectKHR = NULL;
static void GLAD_API_PTR                        glad_debug_impl_vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer                                    commandBuffer,
                                                                                                            uint32_t                                           infoCount,
                                                                                                            const VkAccelerationStructureBuildGeometryInfoKHR *pInfos,
                                                                                                            const VkDeviceAddress *pIndirectDeviceAddresses,
                                                                                                            const uint32_t        *pIndirectStrides,
                                                                                                            const uint32_t *const *ppMaxPrimitiveCounts) {
        _pre_call_vulkan_callback("vkCmdBuildAccelerationStructuresIndirectKHR",
                                  (GLADapiproc)glad_vkCmdBuildAccelerationStructuresIndirectKHR,
                                  6,
                                  commandBuffer,
                                  infoCount,
                                  pInfos,
                                  pIndirectDeviceAddresses,
                                  pIndirectStrides,
                                  ppMaxPrimitiveCounts);
        glad_vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBuildAccelerationStructuresIndirectKHR",
                                   (GLADapiproc)glad_vkCmdBuildAccelerationStructuresIndirectKHR,
                                   6,
                                   commandBuffer,
                                   infoCount,
                                   pInfos,
                                   pIndirectDeviceAddresses,
                                   pIndirectStrides,
                                   ppMaxPrimitiveCounts);
}
PFN_vkCmdBuildAccelerationStructuresIndirectKHR glad_debug_vkCmdBuildAccelerationStructuresIndirectKHR =
	glad_debug_impl_vkCmdBuildAccelerationStructuresIndirectKHR;
PFN_vkCmdBuildAccelerationStructuresKHR glad_vkCmdBuildAccelerationStructuresKHR = NULL;
static void GLAD_API_PTR                glad_debug_impl_vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer                                        commandBuffer,
                                                                                            uint32_t                                               infoCount,
                                                                                            const VkAccelerationStructureBuildGeometryInfoKHR     *pInfos,
                                                                                            const VkAccelerationStructureBuildRangeInfoKHR *const *ppBuildRangeInfos) {
        _pre_call_vulkan_callback("vkCmdBuildAccelerationStructuresKHR",
                                  (GLADapiproc)glad_vkCmdBuildAccelerationStructuresKHR,
                                  4,
                                  commandBuffer,
                                  infoCount,
                                  pInfos,
                                  ppBuildRangeInfos);
        glad_vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdBuildAccelerationStructuresKHR",
                                   (GLADapiproc)glad_vkCmdBuildAccelerationStructuresKHR,
                                   4,
                                   commandBuffer,
                                   infoCount,
                                   pInfos,
                                   ppBuildRangeInfos);
}
PFN_vkCmdBuildAccelerationStructuresKHR glad_debug_vkCmdBuildAccelerationStructuresKHR = glad_debug_impl_vkCmdBuildAccelerationStructuresKHR;
PFN_vkCmdBuildMicromapsEXT              glad_vkCmdBuildMicromapsEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT *pInfos) {
	_pre_call_vulkan_callback("vkCmdBuildMicromapsEXT", (GLADapiproc)glad_vkCmdBuildMicromapsEXT, 3, commandBuffer, infoCount, pInfos);
	glad_vkCmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);
	_post_call_vulkan_callback(NULL, "vkCmdBuildMicromapsEXT", (GLADapiproc)glad_vkCmdBuildMicromapsEXT, 3, commandBuffer, infoCount, pInfos);
}
PFN_vkCmdBuildMicromapsEXT glad_debug_vkCmdBuildMicromapsEXT = glad_debug_impl_vkCmdBuildMicromapsEXT;
PFN_vkCmdClearAttachments  glad_vkCmdClearAttachments = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdClearAttachments(VkCommandBuffer          commandBuffer,
                                                                 uint32_t                 attachmentCount,
                                                                 const VkClearAttachment *pAttachments,
                                                                 uint32_t                 rectCount,
                                                                 const VkClearRect       *pRects) {
        _pre_call_vulkan_callback("vkCmdClearAttachments",
                                  (GLADapiproc)glad_vkCmdClearAttachments,
                                  5,
                                  commandBuffer,
                                  attachmentCount,
                                  pAttachments,
                                  rectCount,
                                  pRects);
        glad_vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdClearAttachments",
                                   (GLADapiproc)glad_vkCmdClearAttachments,
                                   5,
                                   commandBuffer,
                                   attachmentCount,
                                   pAttachments,
                                   rectCount,
                                   pRects);
}
PFN_vkCmdClearAttachments glad_debug_vkCmdClearAttachments = glad_debug_impl_vkCmdClearAttachments;
PFN_vkCmdClearColorImage  glad_vkCmdClearColorImage = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkCmdClearColorImage(VkCommandBuffer                commandBuffer,
                                                               VkImage                        image,
                                                               VkImageLayout                  imageLayout,
                                                               const VkClearColorValue       *pColor,
                                                               uint32_t                       rangeCount,
                                                               const VkImageSubresourceRange *pRanges) {
        _pre_call_vulkan_callback("vkCmdClearColorImage",
                                  (GLADapiproc)glad_vkCmdClearColorImage,
                                  6,
                                  commandBuffer,
                                  image,
                                  imageLayout,
                                  pColor,
                                  rangeCount,
                                  pRanges);
        glad_vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdClearColorImage",
                                   (GLADapiproc)glad_vkCmdClearColorImage,
                                   6,
                                   commandBuffer,
                                   image,
                                   imageLayout,
                                   pColor,
                                   rangeCount,
                                   pRanges);
}
PFN_vkCmdClearColorImage        glad_debug_vkCmdClearColorImage = glad_debug_impl_vkCmdClearColorImage;
PFN_vkCmdClearDepthStencilImage glad_vkCmdClearDepthStencilImage = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkCmdClearDepthStencilImage(VkCommandBuffer                 commandBuffer,
                                                                            VkImage                         image,
                                                                            VkImageLayout                   imageLayout,
                                                                            const VkClearDepthStencilValue *pDepthStencil,
                                                                            uint32_t                        rangeCount,
                                                                            const VkImageSubresourceRange  *pRanges) {
        _pre_call_vulkan_callback("vkCmdClearDepthStencilImage",
                                  (GLADapiproc)glad_vkCmdClearDepthStencilImage,
                                  6,
                                  commandBuffer,
                                  image,
                                  imageLayout,
                                  pDepthStencil,
                                  rangeCount,
                                  pRanges);
        glad_vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdClearDepthStencilImage",
                                   (GLADapiproc)glad_vkCmdClearDepthStencilImage,
                                   6,
                                   commandBuffer,
                                   image,
                                   imageLayout,
                                   pDepthStencil,
                                   rangeCount,
                                   pRanges);
}
PFN_vkCmdClearDepthStencilImage glad_debug_vkCmdClearDepthStencilImage = glad_debug_impl_vkCmdClearDepthStencilImage;
PFN_vkCmdControlVideoCodingKHR  glad_vkCmdControlVideoCodingKHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR *pCodingControlInfo) {
	_pre_call_vulkan_callback("vkCmdControlVideoCodingKHR", (GLADapiproc)glad_vkCmdControlVideoCodingKHR, 2, commandBuffer, pCodingControlInfo);
	glad_vkCmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);
	_post_call_vulkan_callback(NULL, "vkCmdControlVideoCodingKHR", (GLADapiproc)glad_vkCmdControlVideoCodingKHR, 2, commandBuffer, pCodingControlInfo);
}
PFN_vkCmdControlVideoCodingKHR        glad_debug_vkCmdControlVideoCodingKHR = glad_debug_impl_vkCmdControlVideoCodingKHR;
PFN_vkCmdCopyAccelerationStructureKHR glad_vkCmdCopyAccelerationStructureKHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR *pInfo) {
	_pre_call_vulkan_callback("vkCmdCopyAccelerationStructureKHR", (GLADapiproc)glad_vkCmdCopyAccelerationStructureKHR, 2, commandBuffer, pInfo);
	glad_vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
	_post_call_vulkan_callback(NULL, "vkCmdCopyAccelerationStructureKHR", (GLADapiproc)glad_vkCmdCopyAccelerationStructureKHR, 2, commandBuffer, pInfo);
}
PFN_vkCmdCopyAccelerationStructureKHR glad_debug_vkCmdCopyAccelerationStructureKHR = glad_debug_impl_vkCmdCopyAccelerationStructureKHR;
PFN_vkCmdCopyAccelerationStructureNV  glad_vkCmdCopyAccelerationStructureNV = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdCopyAccelerationStructureNV(VkCommandBuffer                    commandBuffer,
                                                                                       VkAccelerationStructureNV          dst,
                                                                                       VkAccelerationStructureNV          src,
                                                                                       VkCopyAccelerationStructureModeKHR mode) {
        _pre_call_vulkan_callback("vkCmdCopyAccelerationStructureNV", (GLADapiproc)glad_vkCmdCopyAccelerationStructureNV, 4, commandBuffer, dst, src, mode);
        glad_vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdCopyAccelerationStructureNV",
                                   (GLADapiproc)glad_vkCmdCopyAccelerationStructureNV,
                                   4,
                                   commandBuffer,
                                   dst,
                                   src,
                                   mode);
}
PFN_vkCmdCopyAccelerationStructureNV          glad_debug_vkCmdCopyAccelerationStructureNV = glad_debug_impl_vkCmdCopyAccelerationStructureNV;
PFN_vkCmdCopyAccelerationStructureToMemoryKHR glad_vkCmdCopyAccelerationStructureToMemoryKHR = NULL;
static void GLAD_API_PTR                      glad_debug_impl_vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer                                   commandBuffer,
                                                                                                        const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo) {
        _pre_call_vulkan_callback("vkCmdCopyAccelerationStructureToMemoryKHR",
                                  (GLADapiproc)glad_vkCmdCopyAccelerationStructureToMemoryKHR,
                                  2,
                                  commandBuffer,
                                  pInfo);
        glad_vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdCopyAccelerationStructureToMemoryKHR",
                                   (GLADapiproc)glad_vkCmdCopyAccelerationStructureToMemoryKHR,
                                   2,
                                   commandBuffer,
                                   pInfo);
}
PFN_vkCmdCopyAccelerationStructureToMemoryKHR glad_debug_vkCmdCopyAccelerationStructureToMemoryKHR = glad_debug_impl_vkCmdCopyAccelerationStructureToMemoryKHR;
PFN_vkCmdCopyBuffer                           glad_vkCmdCopyBuffer = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy *pRegions) {
	_pre_call_vulkan_callback("vkCmdCopyBuffer", (GLADapiproc)glad_vkCmdCopyBuffer, 5, commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
	glad_vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
	_post_call_vulkan_callback(NULL, "vkCmdCopyBuffer", (GLADapiproc)glad_vkCmdCopyBuffer, 5, commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}
PFN_vkCmdCopyBuffer      glad_debug_vkCmdCopyBuffer = glad_debug_impl_vkCmdCopyBuffer;
PFN_vkCmdCopyBuffer2     glad_vkCmdCopyBuffer2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo) {
	_pre_call_vulkan_callback("vkCmdCopyBuffer2", (GLADapiproc)glad_vkCmdCopyBuffer2, 2, commandBuffer, pCopyBufferInfo);
	glad_vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
	_post_call_vulkan_callback(NULL, "vkCmdCopyBuffer2", (GLADapiproc)glad_vkCmdCopyBuffer2, 2, commandBuffer, pCopyBufferInfo);
}
PFN_vkCmdCopyBuffer2     glad_debug_vkCmdCopyBuffer2 = glad_debug_impl_vkCmdCopyBuffer2;
PFN_vkCmdCopyBuffer2KHR  glad_vkCmdCopyBuffer2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo) {
	_pre_call_vulkan_callback("vkCmdCopyBuffer2KHR", (GLADapiproc)glad_vkCmdCopyBuffer2KHR, 2, commandBuffer, pCopyBufferInfo);
	glad_vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
	_post_call_vulkan_callback(NULL, "vkCmdCopyBuffer2KHR", (GLADapiproc)glad_vkCmdCopyBuffer2KHR, 2, commandBuffer, pCopyBufferInfo);
}
PFN_vkCmdCopyBuffer2KHR    glad_debug_vkCmdCopyBuffer2KHR = glad_debug_impl_vkCmdCopyBuffer2KHR;
PFN_vkCmdCopyBufferToImage glad_vkCmdCopyBufferToImage = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdCopyBufferToImage(VkCommandBuffer          commandBuffer,
                                                                  VkBuffer                 srcBuffer,
                                                                  VkImage                  dstImage,
                                                                  VkImageLayout            dstImageLayout,
                                                                  uint32_t                 regionCount,
                                                                  const VkBufferImageCopy *pRegions) {
        _pre_call_vulkan_callback("vkCmdCopyBufferToImage",
                                  (GLADapiproc)glad_vkCmdCopyBufferToImage,
                                  6,
                                  commandBuffer,
                                  srcBuffer,
                                  dstImage,
                                  dstImageLayout,
                                  regionCount,
                                  pRegions);
        glad_vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdCopyBufferToImage",
                                   (GLADapiproc)glad_vkCmdCopyBufferToImage,
                                   6,
                                   commandBuffer,
                                   srcBuffer,
                                   dstImage,
                                   dstImageLayout,
                                   regionCount,
                                   pRegions);
}
PFN_vkCmdCopyBufferToImage  glad_debug_vkCmdCopyBufferToImage = glad_debug_impl_vkCmdCopyBufferToImage;
PFN_vkCmdCopyBufferToImage2 glad_vkCmdCopyBufferToImage2 = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo) {
        _pre_call_vulkan_callback("vkCmdCopyBufferToImage2", (GLADapiproc)glad_vkCmdCopyBufferToImage2, 2, commandBuffer, pCopyBufferToImageInfo);
        glad_vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
        _post_call_vulkan_callback(NULL, "vkCmdCopyBufferToImage2", (GLADapiproc)glad_vkCmdCopyBufferToImage2, 2, commandBuffer, pCopyBufferToImageInfo);
}
PFN_vkCmdCopyBufferToImage2    glad_debug_vkCmdCopyBufferToImage2 = glad_debug_impl_vkCmdCopyBufferToImage2;
PFN_vkCmdCopyBufferToImage2KHR glad_vkCmdCopyBufferToImage2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo) {
	_pre_call_vulkan_callback("vkCmdCopyBufferToImage2KHR", (GLADapiproc)glad_vkCmdCopyBufferToImage2KHR, 2, commandBuffer, pCopyBufferToImageInfo);
	glad_vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
	_post_call_vulkan_callback(NULL, "vkCmdCopyBufferToImage2KHR", (GLADapiproc)glad_vkCmdCopyBufferToImage2KHR, 2, commandBuffer, pCopyBufferToImageInfo);
}
PFN_vkCmdCopyBufferToImage2KHR glad_debug_vkCmdCopyBufferToImage2KHR = glad_debug_impl_vkCmdCopyBufferToImage2KHR;
PFN_vkCmdCopyImage             glad_vkCmdCopyImage = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdCopyImage(VkCommandBuffer    commandBuffer,
                                                              VkImage            srcImage,
                                                              VkImageLayout      srcImageLayout,
                                                              VkImage            dstImage,
                                                              VkImageLayout      dstImageLayout,
                                                              uint32_t           regionCount,
                                                              const VkImageCopy *pRegions) {
        _pre_call_vulkan_callback("vkCmdCopyImage",
                                  (GLADapiproc)glad_vkCmdCopyImage,
                                  7,
                                  commandBuffer,
                                  srcImage,
                                  srcImageLayout,
                                  dstImage,
                                  dstImageLayout,
                                  regionCount,
                                  pRegions);
        glad_vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdCopyImage",
                                   (GLADapiproc)glad_vkCmdCopyImage,
                                   7,
                                   commandBuffer,
                                   srcImage,
                                   srcImageLayout,
                                   dstImage,
                                   dstImageLayout,
                                   regionCount,
                                   pRegions);
}
PFN_vkCmdCopyImage       glad_debug_vkCmdCopyImage = glad_debug_impl_vkCmdCopyImage;
PFN_vkCmdCopyImage2      glad_vkCmdCopyImage2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo) {
	_pre_call_vulkan_callback("vkCmdCopyImage2", (GLADapiproc)glad_vkCmdCopyImage2, 2, commandBuffer, pCopyImageInfo);
	glad_vkCmdCopyImage2(commandBuffer, pCopyImageInfo);
	_post_call_vulkan_callback(NULL, "vkCmdCopyImage2", (GLADapiproc)glad_vkCmdCopyImage2, 2, commandBuffer, pCopyImageInfo);
}
PFN_vkCmdCopyImage2      glad_debug_vkCmdCopyImage2 = glad_debug_impl_vkCmdCopyImage2;
PFN_vkCmdCopyImage2KHR   glad_vkCmdCopyImage2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo) {
	_pre_call_vulkan_callback("vkCmdCopyImage2KHR", (GLADapiproc)glad_vkCmdCopyImage2KHR, 2, commandBuffer, pCopyImageInfo);
	glad_vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
	_post_call_vulkan_callback(NULL, "vkCmdCopyImage2KHR", (GLADapiproc)glad_vkCmdCopyImage2KHR, 2, commandBuffer, pCopyImageInfo);
}
PFN_vkCmdCopyImage2KHR     glad_debug_vkCmdCopyImage2KHR = glad_debug_impl_vkCmdCopyImage2KHR;
PFN_vkCmdCopyImageToBuffer glad_vkCmdCopyImageToBuffer = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdCopyImageToBuffer(VkCommandBuffer          commandBuffer,
                                                                  VkImage                  srcImage,
                                                                  VkImageLayout            srcImageLayout,
                                                                  VkBuffer                 dstBuffer,
                                                                  uint32_t                 regionCount,
                                                                  const VkBufferImageCopy *pRegions) {
        _pre_call_vulkan_callback("vkCmdCopyImageToBuffer",
                                  (GLADapiproc)glad_vkCmdCopyImageToBuffer,
                                  6,
                                  commandBuffer,
                                  srcImage,
                                  srcImageLayout,
                                  dstBuffer,
                                  regionCount,
                                  pRegions);
        glad_vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdCopyImageToBuffer",
                                   (GLADapiproc)glad_vkCmdCopyImageToBuffer,
                                   6,
                                   commandBuffer,
                                   srcImage,
                                   srcImageLayout,
                                   dstBuffer,
                                   regionCount,
                                   pRegions);
}
PFN_vkCmdCopyImageToBuffer  glad_debug_vkCmdCopyImageToBuffer = glad_debug_impl_vkCmdCopyImageToBuffer;
PFN_vkCmdCopyImageToBuffer2 glad_vkCmdCopyImageToBuffer2 = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo) {
        _pre_call_vulkan_callback("vkCmdCopyImageToBuffer2", (GLADapiproc)glad_vkCmdCopyImageToBuffer2, 2, commandBuffer, pCopyImageToBufferInfo);
        glad_vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
        _post_call_vulkan_callback(NULL, "vkCmdCopyImageToBuffer2", (GLADapiproc)glad_vkCmdCopyImageToBuffer2, 2, commandBuffer, pCopyImageToBufferInfo);
}
PFN_vkCmdCopyImageToBuffer2    glad_debug_vkCmdCopyImageToBuffer2 = glad_debug_impl_vkCmdCopyImageToBuffer2;
PFN_vkCmdCopyImageToBuffer2KHR glad_vkCmdCopyImageToBuffer2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo) {
	_pre_call_vulkan_callback("vkCmdCopyImageToBuffer2KHR", (GLADapiproc)glad_vkCmdCopyImageToBuffer2KHR, 2, commandBuffer, pCopyImageToBufferInfo);
	glad_vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
	_post_call_vulkan_callback(NULL, "vkCmdCopyImageToBuffer2KHR", (GLADapiproc)glad_vkCmdCopyImageToBuffer2KHR, 2, commandBuffer, pCopyImageToBufferInfo);
}
PFN_vkCmdCopyImageToBuffer2KHR glad_debug_vkCmdCopyImageToBuffer2KHR = glad_debug_impl_vkCmdCopyImageToBuffer2KHR;
PFN_vkCmdCopyMemoryIndirectNV  glad_vkCmdCopyMemoryIndirectNV = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer,
                                                                         VkDeviceAddress copyBufferAddress,
                                                                         uint32_t        copyCount,
                                                                         uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdCopyMemoryIndirectNV",
                                  (GLADapiproc)glad_vkCmdCopyMemoryIndirectNV,
                                  4,
                                  commandBuffer,
                                  copyBufferAddress,
                                  copyCount,
                                  stride);
        glad_vkCmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdCopyMemoryIndirectNV",
                                   (GLADapiproc)glad_vkCmdCopyMemoryIndirectNV,
                                   4,
                                   commandBuffer,
                                   copyBufferAddress,
                                   copyCount,
                                   stride);
}
PFN_vkCmdCopyMemoryIndirectNV                 glad_debug_vkCmdCopyMemoryIndirectNV = glad_debug_impl_vkCmdCopyMemoryIndirectNV;
PFN_vkCmdCopyMemoryToAccelerationStructureKHR glad_vkCmdCopyMemoryToAccelerationStructureKHR = NULL;
static void GLAD_API_PTR                      glad_debug_impl_vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer                                   commandBuffer,
                                                                                                        const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo) {
        _pre_call_vulkan_callback("vkCmdCopyMemoryToAccelerationStructureKHR",
                                  (GLADapiproc)glad_vkCmdCopyMemoryToAccelerationStructureKHR,
                                  2,
                                  commandBuffer,
                                  pInfo);
        glad_vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdCopyMemoryToAccelerationStructureKHR",
                                   (GLADapiproc)glad_vkCmdCopyMemoryToAccelerationStructureKHR,
                                   2,
                                   commandBuffer,
                                   pInfo);
}
PFN_vkCmdCopyMemoryToAccelerationStructureKHR glad_debug_vkCmdCopyMemoryToAccelerationStructureKHR = glad_debug_impl_vkCmdCopyMemoryToAccelerationStructureKHR;
PFN_vkCmdCopyMemoryToImageIndirectNV          glad_vkCmdCopyMemoryToImageIndirectNV = NULL;
static void GLAD_API_PTR                      glad_debug_impl_vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer                 commandBuffer,
                                                                                               VkDeviceAddress                 copyBufferAddress,
                                                                                               uint32_t                        copyCount,
                                                                                               uint32_t                        stride,
                                                                                               VkImage                         dstImage,
                                                                                               VkImageLayout                   dstImageLayout,
                                                                                               const VkImageSubresourceLayers *pImageSubresources) {
        _pre_call_vulkan_callback("vkCmdCopyMemoryToImageIndirectNV",
                                  (GLADapiproc)glad_vkCmdCopyMemoryToImageIndirectNV,
                                  7,
                                  commandBuffer,
                                  copyBufferAddress,
                                  copyCount,
                                  stride,
                                  dstImage,
                                  dstImageLayout,
                                  pImageSubresources);
        glad_vkCmdCopyMemoryToImageIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdCopyMemoryToImageIndirectNV",
                                   (GLADapiproc)glad_vkCmdCopyMemoryToImageIndirectNV,
                                   7,
                                   commandBuffer,
                                   copyBufferAddress,
                                   copyCount,
                                   stride,
                                   dstImage,
                                   dstImageLayout,
                                   pImageSubresources);
}
PFN_vkCmdCopyMemoryToImageIndirectNV glad_debug_vkCmdCopyMemoryToImageIndirectNV = glad_debug_impl_vkCmdCopyMemoryToImageIndirectNV;
PFN_vkCmdCopyMemoryToMicromapEXT     glad_vkCmdCopyMemoryToMicromapEXT = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT *pInfo) {
        _pre_call_vulkan_callback("vkCmdCopyMemoryToMicromapEXT", (GLADapiproc)glad_vkCmdCopyMemoryToMicromapEXT, 2, commandBuffer, pInfo);
        glad_vkCmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);
        _post_call_vulkan_callback(NULL, "vkCmdCopyMemoryToMicromapEXT", (GLADapiproc)glad_vkCmdCopyMemoryToMicromapEXT, 2, commandBuffer, pInfo);
}
PFN_vkCmdCopyMemoryToMicromapEXT glad_debug_vkCmdCopyMemoryToMicromapEXT = glad_debug_impl_vkCmdCopyMemoryToMicromapEXT;
PFN_vkCmdCopyMicromapEXT         glad_vkCmdCopyMicromapEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT *pInfo) {
        _pre_call_vulkan_callback("vkCmdCopyMicromapEXT", (GLADapiproc)glad_vkCmdCopyMicromapEXT, 2, commandBuffer, pInfo);
        glad_vkCmdCopyMicromapEXT(commandBuffer, pInfo);
        _post_call_vulkan_callback(NULL, "vkCmdCopyMicromapEXT", (GLADapiproc)glad_vkCmdCopyMicromapEXT, 2, commandBuffer, pInfo);
}
PFN_vkCmdCopyMicromapEXT         glad_debug_vkCmdCopyMicromapEXT = glad_debug_impl_vkCmdCopyMicromapEXT;
PFN_vkCmdCopyMicromapToMemoryEXT glad_vkCmdCopyMicromapToMemoryEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT *pInfo) {
        _pre_call_vulkan_callback("vkCmdCopyMicromapToMemoryEXT", (GLADapiproc)glad_vkCmdCopyMicromapToMemoryEXT, 2, commandBuffer, pInfo);
        glad_vkCmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);
        _post_call_vulkan_callback(NULL, "vkCmdCopyMicromapToMemoryEXT", (GLADapiproc)glad_vkCmdCopyMicromapToMemoryEXT, 2, commandBuffer, pInfo);
}
PFN_vkCmdCopyMicromapToMemoryEXT glad_debug_vkCmdCopyMicromapToMemoryEXT = glad_debug_impl_vkCmdCopyMicromapToMemoryEXT;
PFN_vkCmdCopyQueryPoolResults    glad_vkCmdCopyQueryPoolResults = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdCopyQueryPoolResults(VkCommandBuffer    commandBuffer,
                                                                           VkQueryPool        queryPool,
                                                                           uint32_t           firstQuery,
                                                                           uint32_t           queryCount,
                                                                           VkBuffer           dstBuffer,
                                                                           VkDeviceSize       dstOffset,
                                                                           VkDeviceSize       stride,
                                                                           VkQueryResultFlags flags) {
        _pre_call_vulkan_callback("vkCmdCopyQueryPoolResults",
                                  (GLADapiproc)glad_vkCmdCopyQueryPoolResults,
                                  8,
                                  commandBuffer,
                                  queryPool,
                                  firstQuery,
                                  queryCount,
                                  dstBuffer,
                                  dstOffset,
                                  stride,
                                  flags);
        glad_vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdCopyQueryPoolResults",
                                   (GLADapiproc)glad_vkCmdCopyQueryPoolResults,
                                   8,
                                   commandBuffer,
                                   queryPool,
                                   firstQuery,
                                   queryCount,
                                   dstBuffer,
                                   dstOffset,
                                   stride,
                                   flags);
}
PFN_vkCmdCopyQueryPoolResults glad_debug_vkCmdCopyQueryPoolResults = glad_debug_impl_vkCmdCopyQueryPoolResults;
PFN_vkCmdCuLaunchKernelNVX    glad_vkCmdCuLaunchKernelNVX = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX *pLaunchInfo) {
        _pre_call_vulkan_callback("vkCmdCuLaunchKernelNVX", (GLADapiproc)glad_vkCmdCuLaunchKernelNVX, 2, commandBuffer, pLaunchInfo);
        glad_vkCmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);
        _post_call_vulkan_callback(NULL, "vkCmdCuLaunchKernelNVX", (GLADapiproc)glad_vkCmdCuLaunchKernelNVX, 2, commandBuffer, pLaunchInfo);
}
PFN_vkCmdCuLaunchKernelNVX   glad_debug_vkCmdCuLaunchKernelNVX = glad_debug_impl_vkCmdCuLaunchKernelNVX;
PFN_vkCmdDebugMarkerBeginEXT glad_vkCmdDebugMarkerBeginEXT = NULL;
static void GLAD_API_PTR     glad_debug_impl_vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo) {
        _pre_call_vulkan_callback("vkCmdDebugMarkerBeginEXT", (GLADapiproc)glad_vkCmdDebugMarkerBeginEXT, 2, commandBuffer, pMarkerInfo);
        glad_vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
        _post_call_vulkan_callback(NULL, "vkCmdDebugMarkerBeginEXT", (GLADapiproc)glad_vkCmdDebugMarkerBeginEXT, 2, commandBuffer, pMarkerInfo);
}
PFN_vkCmdDebugMarkerBeginEXT glad_debug_vkCmdDebugMarkerBeginEXT = glad_debug_impl_vkCmdDebugMarkerBeginEXT;
PFN_vkCmdDebugMarkerEndEXT   glad_vkCmdDebugMarkerEndEXT = NULL;
static void GLAD_API_PTR     glad_debug_impl_vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer) {
        _pre_call_vulkan_callback("vkCmdDebugMarkerEndEXT", (GLADapiproc)glad_vkCmdDebugMarkerEndEXT, 1, commandBuffer);
        glad_vkCmdDebugMarkerEndEXT(commandBuffer);
        _post_call_vulkan_callback(NULL, "vkCmdDebugMarkerEndEXT", (GLADapiproc)glad_vkCmdDebugMarkerEndEXT, 1, commandBuffer);
}
PFN_vkCmdDebugMarkerEndEXT    glad_debug_vkCmdDebugMarkerEndEXT = glad_debug_impl_vkCmdDebugMarkerEndEXT;
PFN_vkCmdDebugMarkerInsertEXT glad_vkCmdDebugMarkerInsertEXT = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo) {
        _pre_call_vulkan_callback("vkCmdDebugMarkerInsertEXT", (GLADapiproc)glad_vkCmdDebugMarkerInsertEXT, 2, commandBuffer, pMarkerInfo);
        glad_vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
        _post_call_vulkan_callback(NULL, "vkCmdDebugMarkerInsertEXT", (GLADapiproc)glad_vkCmdDebugMarkerInsertEXT, 2, commandBuffer, pMarkerInfo);
}
PFN_vkCmdDebugMarkerInsertEXT glad_debug_vkCmdDebugMarkerInsertEXT = glad_debug_impl_vkCmdDebugMarkerInsertEXT;
PFN_vkCmdDecodeVideoKHR       glad_vkCmdDecodeVideoKHR = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR *pDecodeInfo) {
        _pre_call_vulkan_callback("vkCmdDecodeVideoKHR", (GLADapiproc)glad_vkCmdDecodeVideoKHR, 2, commandBuffer, pDecodeInfo);
        glad_vkCmdDecodeVideoKHR(commandBuffer, pDecodeInfo);
        _post_call_vulkan_callback(NULL, "vkCmdDecodeVideoKHR", (GLADapiproc)glad_vkCmdDecodeVideoKHR, 2, commandBuffer, pDecodeInfo);
}
PFN_vkCmdDecodeVideoKHR                  glad_debug_vkCmdDecodeVideoKHR = glad_debug_impl_vkCmdDecodeVideoKHR;
PFN_vkCmdDecompressMemoryIndirectCountNV glad_vkCmdDecompressMemoryIndirectCountNV = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer,
                                                                                              VkDeviceAddress indirectCommandsAddress,
                                                                                              VkDeviceAddress indirectCommandsCountAddress,
                                                                                              uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdDecompressMemoryIndirectCountNV",
                                  (GLADapiproc)glad_vkCmdDecompressMemoryIndirectCountNV,
                                  4,
                                  commandBuffer,
                                  indirectCommandsAddress,
                                  indirectCommandsCountAddress,
                                  stride);
        glad_vkCmdDecompressMemoryIndirectCountNV(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDecompressMemoryIndirectCountNV",
                                   (GLADapiproc)glad_vkCmdDecompressMemoryIndirectCountNV,
                                   4,
                                   commandBuffer,
                                   indirectCommandsAddress,
                                   indirectCommandsCountAddress,
                                   stride);
}
PFN_vkCmdDecompressMemoryIndirectCountNV glad_debug_vkCmdDecompressMemoryIndirectCountNV = glad_debug_impl_vkCmdDecompressMemoryIndirectCountNV;
PFN_vkCmdDecompressMemoryNV              glad_vkCmdDecompressMemoryNV = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkCmdDecompressMemoryNV(VkCommandBuffer                   commandBuffer,
                                                                                 uint32_t                          decompressRegionCount,
                                                                                 const VkDecompressMemoryRegionNV *pDecompressMemoryRegions) {
        _pre_call_vulkan_callback("vkCmdDecompressMemoryNV",
                                  (GLADapiproc)glad_vkCmdDecompressMemoryNV,
                                  3,
                                  commandBuffer,
                                  decompressRegionCount,
                                  pDecompressMemoryRegions);
        glad_vkCmdDecompressMemoryNV(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDecompressMemoryNV",
                                   (GLADapiproc)glad_vkCmdDecompressMemoryNV,
                                   3,
                                   commandBuffer,
                                   decompressRegionCount,
                                   pDecompressMemoryRegions);
}
PFN_vkCmdDecompressMemoryNV glad_debug_vkCmdDecompressMemoryNV = glad_debug_impl_vkCmdDecompressMemoryNV;
PFN_vkCmdDispatch           glad_vkCmdDispatch = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
        _pre_call_vulkan_callback("vkCmdDispatch", (GLADapiproc)glad_vkCmdDispatch, 4, commandBuffer, groupCountX, groupCountY, groupCountZ);
        glad_vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
        _post_call_vulkan_callback(NULL, "vkCmdDispatch", (GLADapiproc)glad_vkCmdDispatch, 4, commandBuffer, groupCountX, groupCountY, groupCountZ);
}
PFN_vkCmdDispatch        glad_debug_vkCmdDispatch = glad_debug_impl_vkCmdDispatch;
PFN_vkCmdDispatchBase    glad_vkCmdDispatchBase = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdDispatchBase(VkCommandBuffer commandBuffer,
                                                           uint32_t        baseGroupX,
                                                           uint32_t        baseGroupY,
                                                           uint32_t        baseGroupZ,
                                                           uint32_t        groupCountX,
                                                           uint32_t        groupCountY,
                                                           uint32_t        groupCountZ) {
	_pre_call_vulkan_callback("vkCmdDispatchBase",
	                          (GLADapiproc)glad_vkCmdDispatchBase,
	                          7,
	                          commandBuffer,
	                          baseGroupX,
	                          baseGroupY,
	                          baseGroupZ,
	                          groupCountX,
	                          groupCountY,
	                          groupCountZ);
	glad_vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdDispatchBase",
	                           (GLADapiproc)glad_vkCmdDispatchBase,
	                           7,
	                           commandBuffer,
	                           baseGroupX,
	                           baseGroupY,
	                           baseGroupZ,
	                           groupCountX,
	                           groupCountY,
	                           groupCountZ);
}
PFN_vkCmdDispatchBase    glad_debug_vkCmdDispatchBase = glad_debug_impl_vkCmdDispatchBase;
PFN_vkCmdDispatchBaseKHR glad_vkCmdDispatchBaseKHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer,
                                                              uint32_t        baseGroupX,
                                                              uint32_t        baseGroupY,
                                                              uint32_t        baseGroupZ,
                                                              uint32_t        groupCountX,
                                                              uint32_t        groupCountY,
                                                              uint32_t        groupCountZ) {
	_pre_call_vulkan_callback("vkCmdDispatchBaseKHR",
	                          (GLADapiproc)glad_vkCmdDispatchBaseKHR,
	                          7,
	                          commandBuffer,
	                          baseGroupX,
	                          baseGroupY,
	                          baseGroupZ,
	                          groupCountX,
	                          groupCountY,
	                          groupCountZ);
	glad_vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdDispatchBaseKHR",
	                           (GLADapiproc)glad_vkCmdDispatchBaseKHR,
	                           7,
	                           commandBuffer,
	                           baseGroupX,
	                           baseGroupY,
	                           baseGroupZ,
	                           groupCountX,
	                           groupCountY,
	                           groupCountZ);
}
PFN_vkCmdDispatchBaseKHR glad_debug_vkCmdDispatchBaseKHR = glad_debug_impl_vkCmdDispatchBaseKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkCmdDispatchGraphAMDX glad_vkCmdDispatchGraphAMDX = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdDispatchGraphAMDX(VkCommandBuffer                     commandBuffer,
                                                                  VkDeviceAddress                     scratch,
                                                                  const VkDispatchGraphCountInfoAMDX *pCountInfo) {
        _pre_call_vulkan_callback("vkCmdDispatchGraphAMDX", (GLADapiproc)glad_vkCmdDispatchGraphAMDX, 3, commandBuffer, scratch, pCountInfo);
        glad_vkCmdDispatchGraphAMDX(commandBuffer, scratch, pCountInfo);
        _post_call_vulkan_callback(NULL, "vkCmdDispatchGraphAMDX", (GLADapiproc)glad_vkCmdDispatchGraphAMDX, 3, commandBuffer, scratch, pCountInfo);
}
PFN_vkCmdDispatchGraphAMDX glad_debug_vkCmdDispatchGraphAMDX = glad_debug_impl_vkCmdDispatchGraphAMDX;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkCmdDispatchGraphIndirectAMDX glad_vkCmdDispatchGraphIndirectAMDX = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdDispatchGraphIndirectAMDX(VkCommandBuffer                     commandBuffer,
                                                                                  VkDeviceAddress                     scratch,
                                                                                  const VkDispatchGraphCountInfoAMDX *pCountInfo) {
        _pre_call_vulkan_callback("vkCmdDispatchGraphIndirectAMDX", (GLADapiproc)glad_vkCmdDispatchGraphIndirectAMDX, 3, commandBuffer, scratch, pCountInfo);
        glad_vkCmdDispatchGraphIndirectAMDX(commandBuffer, scratch, pCountInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDispatchGraphIndirectAMDX",
                                   (GLADapiproc)glad_vkCmdDispatchGraphIndirectAMDX,
                                   3,
                                   commandBuffer,
                                   scratch,
                                   pCountInfo);
}
PFN_vkCmdDispatchGraphIndirectAMDX glad_debug_vkCmdDispatchGraphIndirectAMDX = glad_debug_impl_vkCmdDispatchGraphIndirectAMDX;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkCmdDispatchGraphIndirectCountAMDX glad_vkCmdDispatchGraphIndirectCountAMDX = NULL;
static void GLAD_API_PTR                glad_debug_impl_vkCmdDispatchGraphIndirectCountAMDX(VkCommandBuffer commandBuffer,
                                                                                            VkDeviceAddress scratch,
                                                                                            VkDeviceAddress countInfo) {
        _pre_call_vulkan_callback("vkCmdDispatchGraphIndirectCountAMDX",
                                  (GLADapiproc)glad_vkCmdDispatchGraphIndirectCountAMDX,
                                  3,
                                  commandBuffer,
                                  scratch,
                                  countInfo);
        glad_vkCmdDispatchGraphIndirectCountAMDX(commandBuffer, scratch, countInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDispatchGraphIndirectCountAMDX",
                                   (GLADapiproc)glad_vkCmdDispatchGraphIndirectCountAMDX,
                                   3,
                                   commandBuffer,
                                   scratch,
                                   countInfo);
}
PFN_vkCmdDispatchGraphIndirectCountAMDX glad_debug_vkCmdDispatchGraphIndirectCountAMDX = glad_debug_impl_vkCmdDispatchGraphIndirectCountAMDX;

#endif
PFN_vkCmdDispatchIndirect glad_vkCmdDispatchIndirect = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) {
        _pre_call_vulkan_callback("vkCmdDispatchIndirect", (GLADapiproc)glad_vkCmdDispatchIndirect, 3, commandBuffer, buffer, offset);
        glad_vkCmdDispatchIndirect(commandBuffer, buffer, offset);
        _post_call_vulkan_callback(NULL, "vkCmdDispatchIndirect", (GLADapiproc)glad_vkCmdDispatchIndirect, 3, commandBuffer, buffer, offset);
}
PFN_vkCmdDispatchIndirect glad_debug_vkCmdDispatchIndirect = glad_debug_impl_vkCmdDispatchIndirect;
PFN_vkCmdDraw             glad_vkCmdDraw = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
	_pre_call_vulkan_callback("vkCmdDraw", (GLADapiproc)glad_vkCmdDraw, 5, commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	glad_vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	_post_call_vulkan_callback(NULL, "vkCmdDraw", (GLADapiproc)glad_vkCmdDraw, 5, commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}
PFN_vkCmdDraw              glad_debug_vkCmdDraw = glad_debug_impl_vkCmdDraw;
PFN_vkCmdDrawClusterHUAWEI glad_vkCmdDrawClusterHUAWEI = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer,
                                                                  uint32_t        groupCountX,
                                                                  uint32_t        groupCountY,
                                                                  uint32_t        groupCountZ) {
        _pre_call_vulkan_callback("vkCmdDrawClusterHUAWEI", (GLADapiproc)glad_vkCmdDrawClusterHUAWEI, 4, commandBuffer, groupCountX, groupCountY, groupCountZ);
        glad_vkCmdDrawClusterHUAWEI(commandBuffer, groupCountX, groupCountY, groupCountZ);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawClusterHUAWEI",
                                   (GLADapiproc)glad_vkCmdDrawClusterHUAWEI,
                                   4,
                                   commandBuffer,
                                   groupCountX,
                                   groupCountY,
                                   groupCountZ);
}
PFN_vkCmdDrawClusterHUAWEI         glad_debug_vkCmdDrawClusterHUAWEI = glad_debug_impl_vkCmdDrawClusterHUAWEI;
PFN_vkCmdDrawClusterIndirectHUAWEI glad_vkCmdDrawClusterIndirectHUAWEI = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) {
        _pre_call_vulkan_callback("vkCmdDrawClusterIndirectHUAWEI", (GLADapiproc)glad_vkCmdDrawClusterIndirectHUAWEI, 3, commandBuffer, buffer, offset);
        glad_vkCmdDrawClusterIndirectHUAWEI(commandBuffer, buffer, offset);
        _post_call_vulkan_callback(NULL, "vkCmdDrawClusterIndirectHUAWEI", (GLADapiproc)glad_vkCmdDrawClusterIndirectHUAWEI, 3, commandBuffer, buffer, offset);
}
PFN_vkCmdDrawClusterIndirectHUAWEI glad_debug_vkCmdDrawClusterIndirectHUAWEI = glad_debug_impl_vkCmdDrawClusterIndirectHUAWEI;
PFN_vkCmdDrawIndexed               glad_vkCmdDrawIndexed = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdDrawIndexed(VkCommandBuffer commandBuffer,
                                                                    uint32_t        indexCount,
                                                                    uint32_t        instanceCount,
                                                                    uint32_t        firstIndex,
                                                                    int32_t         vertexOffset,
                                                                    uint32_t        firstInstance) {
        _pre_call_vulkan_callback("vkCmdDrawIndexed",
                                  (GLADapiproc)glad_vkCmdDrawIndexed,
                                  6,
                                  commandBuffer,
                                  indexCount,
                                  instanceCount,
                                  firstIndex,
                                  vertexOffset,
                                  firstInstance);
        glad_vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawIndexed",
                                   (GLADapiproc)glad_vkCmdDrawIndexed,
                                   6,
                                   commandBuffer,
                                   indexCount,
                                   instanceCount,
                                   firstIndex,
                                   vertexOffset,
                                   firstInstance);
}
PFN_vkCmdDrawIndexed         glad_debug_vkCmdDrawIndexed = glad_debug_impl_vkCmdDrawIndexed;
PFN_vkCmdDrawIndexedIndirect glad_vkCmdDrawIndexedIndirect = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	_pre_call_vulkan_callback("vkCmdDrawIndexedIndirect", (GLADapiproc)glad_vkCmdDrawIndexedIndirect, 5, commandBuffer, buffer, offset, drawCount, stride);
	glad_vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdDrawIndexedIndirect",
	                           (GLADapiproc)glad_vkCmdDrawIndexedIndirect,
	                           5,
	                           commandBuffer,
	                           buffer,
	                           offset,
	                           drawCount,
	                           stride);
}
PFN_vkCmdDrawIndexedIndirect      glad_debug_vkCmdDrawIndexedIndirect = glad_debug_impl_vkCmdDrawIndexedIndirect;
PFN_vkCmdDrawIndexedIndirectCount glad_vkCmdDrawIndexedIndirectCount = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer,
                                                                                VkBuffer        buffer,
                                                                                VkDeviceSize    offset,
                                                                                VkBuffer        countBuffer,
                                                                                VkDeviceSize    countBufferOffset,
                                                                                uint32_t        maxDrawCount,
                                                                                uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdDrawIndexedIndirectCount",
                                  (GLADapiproc)glad_vkCmdDrawIndexedIndirectCount,
                                  7,
                                  commandBuffer,
                                  buffer,
                                  offset,
                                  countBuffer,
                                  countBufferOffset,
                                  maxDrawCount,
                                  stride);
        glad_vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawIndexedIndirectCount",
                                   (GLADapiproc)glad_vkCmdDrawIndexedIndirectCount,
                                   7,
                                   commandBuffer,
                                   buffer,
                                   offset,
                                   countBuffer,
                                   countBufferOffset,
                                   maxDrawCount,
                                   stride);
}
PFN_vkCmdDrawIndexedIndirectCount    glad_debug_vkCmdDrawIndexedIndirectCount = glad_debug_impl_vkCmdDrawIndexedIndirectCount;
PFN_vkCmdDrawIndexedIndirectCountAMD glad_vkCmdDrawIndexedIndirectCountAMD = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer,
                                                                                      VkBuffer        buffer,
                                                                                      VkDeviceSize    offset,
                                                                                      VkBuffer        countBuffer,
                                                                                      VkDeviceSize    countBufferOffset,
                                                                                      uint32_t        maxDrawCount,
                                                                                      uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdDrawIndexedIndirectCountAMD",
                                  (GLADapiproc)glad_vkCmdDrawIndexedIndirectCountAMD,
                                  7,
                                  commandBuffer,
                                  buffer,
                                  offset,
                                  countBuffer,
                                  countBufferOffset,
                                  maxDrawCount,
                                  stride);
        glad_vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawIndexedIndirectCountAMD",
                                   (GLADapiproc)glad_vkCmdDrawIndexedIndirectCountAMD,
                                   7,
                                   commandBuffer,
                                   buffer,
                                   offset,
                                   countBuffer,
                                   countBufferOffset,
                                   maxDrawCount,
                                   stride);
}
PFN_vkCmdDrawIndexedIndirectCountAMD glad_debug_vkCmdDrawIndexedIndirectCountAMD = glad_debug_impl_vkCmdDrawIndexedIndirectCountAMD;
PFN_vkCmdDrawIndexedIndirectCountKHR glad_vkCmdDrawIndexedIndirectCountKHR = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer,
                                                                                      VkBuffer        buffer,
                                                                                      VkDeviceSize    offset,
                                                                                      VkBuffer        countBuffer,
                                                                                      VkDeviceSize    countBufferOffset,
                                                                                      uint32_t        maxDrawCount,
                                                                                      uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdDrawIndexedIndirectCountKHR",
                                  (GLADapiproc)glad_vkCmdDrawIndexedIndirectCountKHR,
                                  7,
                                  commandBuffer,
                                  buffer,
                                  offset,
                                  countBuffer,
                                  countBufferOffset,
                                  maxDrawCount,
                                  stride);
        glad_vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawIndexedIndirectCountKHR",
                                   (GLADapiproc)glad_vkCmdDrawIndexedIndirectCountKHR,
                                   7,
                                   commandBuffer,
                                   buffer,
                                   offset,
                                   countBuffer,
                                   countBufferOffset,
                                   maxDrawCount,
                                   stride);
}
PFN_vkCmdDrawIndexedIndirectCountKHR glad_debug_vkCmdDrawIndexedIndirectCountKHR = glad_debug_impl_vkCmdDrawIndexedIndirectCountKHR;
PFN_vkCmdDrawIndirect                glad_vkCmdDrawIndirect = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	_pre_call_vulkan_callback("vkCmdDrawIndirect", (GLADapiproc)glad_vkCmdDrawIndirect, 5, commandBuffer, buffer, offset, drawCount, stride);
	glad_vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
	_post_call_vulkan_callback(NULL, "vkCmdDrawIndirect", (GLADapiproc)glad_vkCmdDrawIndirect, 5, commandBuffer, buffer, offset, drawCount, stride);
}
PFN_vkCmdDrawIndirect             glad_debug_vkCmdDrawIndirect = glad_debug_impl_vkCmdDrawIndirect;
PFN_vkCmdDrawIndirectByteCountEXT glad_vkCmdDrawIndirectByteCountEXT = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer,
                                                                                uint32_t        instanceCount,
                                                                                uint32_t        firstInstance,
                                                                                VkBuffer        counterBuffer,
                                                                                VkDeviceSize    counterBufferOffset,
                                                                                uint32_t        counterOffset,
                                                                                uint32_t        vertexStride) {
        _pre_call_vulkan_callback("vkCmdDrawIndirectByteCountEXT",
                                  (GLADapiproc)glad_vkCmdDrawIndirectByteCountEXT,
                                  7,
                                  commandBuffer,
                                  instanceCount,
                                  firstInstance,
                                  counterBuffer,
                                  counterBufferOffset,
                                  counterOffset,
                                  vertexStride);
        glad_vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawIndirectByteCountEXT",
                                   (GLADapiproc)glad_vkCmdDrawIndirectByteCountEXT,
                                   7,
                                   commandBuffer,
                                   instanceCount,
                                   firstInstance,
                                   counterBuffer,
                                   counterBufferOffset,
                                   counterOffset,
                                   vertexStride);
}
PFN_vkCmdDrawIndirectByteCountEXT glad_debug_vkCmdDrawIndirectByteCountEXT = glad_debug_impl_vkCmdDrawIndirectByteCountEXT;
PFN_vkCmdDrawIndirectCount        glad_vkCmdDrawIndirectCount = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer,
                                                                         VkBuffer        buffer,
                                                                         VkDeviceSize    offset,
                                                                         VkBuffer        countBuffer,
                                                                         VkDeviceSize    countBufferOffset,
                                                                         uint32_t        maxDrawCount,
                                                                         uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdDrawIndirectCount",
                                  (GLADapiproc)glad_vkCmdDrawIndirectCount,
                                  7,
                                  commandBuffer,
                                  buffer,
                                  offset,
                                  countBuffer,
                                  countBufferOffset,
                                  maxDrawCount,
                                  stride);
        glad_vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawIndirectCount",
                                   (GLADapiproc)glad_vkCmdDrawIndirectCount,
                                   7,
                                   commandBuffer,
                                   buffer,
                                   offset,
                                   countBuffer,
                                   countBufferOffset,
                                   maxDrawCount,
                                   stride);
}
PFN_vkCmdDrawIndirectCount    glad_debug_vkCmdDrawIndirectCount = glad_debug_impl_vkCmdDrawIndirectCount;
PFN_vkCmdDrawIndirectCountAMD glad_vkCmdDrawIndirectCountAMD = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer,
                                                                        VkBuffer        buffer,
                                                                        VkDeviceSize    offset,
                                                                        VkBuffer        countBuffer,
                                                                        VkDeviceSize    countBufferOffset,
                                                                        uint32_t        maxDrawCount,
                                                                        uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdDrawIndirectCountAMD",
                                  (GLADapiproc)glad_vkCmdDrawIndirectCountAMD,
                                  7,
                                  commandBuffer,
                                  buffer,
                                  offset,
                                  countBuffer,
                                  countBufferOffset,
                                  maxDrawCount,
                                  stride);
        glad_vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawIndirectCountAMD",
                                   (GLADapiproc)glad_vkCmdDrawIndirectCountAMD,
                                   7,
                                   commandBuffer,
                                   buffer,
                                   offset,
                                   countBuffer,
                                   countBufferOffset,
                                   maxDrawCount,
                                   stride);
}
PFN_vkCmdDrawIndirectCountAMD glad_debug_vkCmdDrawIndirectCountAMD = glad_debug_impl_vkCmdDrawIndirectCountAMD;
PFN_vkCmdDrawIndirectCountKHR glad_vkCmdDrawIndirectCountKHR = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer,
                                                                        VkBuffer        buffer,
                                                                        VkDeviceSize    offset,
                                                                        VkBuffer        countBuffer,
                                                                        VkDeviceSize    countBufferOffset,
                                                                        uint32_t        maxDrawCount,
                                                                        uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdDrawIndirectCountKHR",
                                  (GLADapiproc)glad_vkCmdDrawIndirectCountKHR,
                                  7,
                                  commandBuffer,
                                  buffer,
                                  offset,
                                  countBuffer,
                                  countBufferOffset,
                                  maxDrawCount,
                                  stride);
        glad_vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawIndirectCountKHR",
                                   (GLADapiproc)glad_vkCmdDrawIndirectCountKHR,
                                   7,
                                   commandBuffer,
                                   buffer,
                                   offset,
                                   countBuffer,
                                   countBufferOffset,
                                   maxDrawCount,
                                   stride);
}
PFN_vkCmdDrawIndirectCountKHR glad_debug_vkCmdDrawIndirectCountKHR = glad_debug_impl_vkCmdDrawIndirectCountKHR;
PFN_vkCmdDrawMeshTasksEXT     glad_vkCmdDrawMeshTasksEXT = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer,
                                                                    uint32_t        groupCountX,
                                                                    uint32_t        groupCountY,
                                                                    uint32_t        groupCountZ) {
        _pre_call_vulkan_callback("vkCmdDrawMeshTasksEXT", (GLADapiproc)glad_vkCmdDrawMeshTasksEXT, 4, commandBuffer, groupCountX, groupCountY, groupCountZ);
        glad_vkCmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawMeshTasksEXT",
                                   (GLADapiproc)glad_vkCmdDrawMeshTasksEXT,
                                   4,
                                   commandBuffer,
                                   groupCountX,
                                   groupCountY,
                                   groupCountZ);
}
PFN_vkCmdDrawMeshTasksEXT              glad_debug_vkCmdDrawMeshTasksEXT = glad_debug_impl_vkCmdDrawMeshTasksEXT;
PFN_vkCmdDrawMeshTasksIndirectCountEXT glad_vkCmdDrawMeshTasksIndirectCountEXT = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer,
                                                                                          VkBuffer        buffer,
                                                                                          VkDeviceSize    offset,
                                                                                          VkBuffer        countBuffer,
                                                                                          VkDeviceSize    countBufferOffset,
                                                                                          uint32_t        maxDrawCount,
                                                                                          uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdDrawMeshTasksIndirectCountEXT",
                                  (GLADapiproc)glad_vkCmdDrawMeshTasksIndirectCountEXT,
                                  7,
                                  commandBuffer,
                                  buffer,
                                  offset,
                                  countBuffer,
                                  countBufferOffset,
                                  maxDrawCount,
                                  stride);
        glad_vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawMeshTasksIndirectCountEXT",
                                   (GLADapiproc)glad_vkCmdDrawMeshTasksIndirectCountEXT,
                                   7,
                                   commandBuffer,
                                   buffer,
                                   offset,
                                   countBuffer,
                                   countBufferOffset,
                                   maxDrawCount,
                                   stride);
}
PFN_vkCmdDrawMeshTasksIndirectCountEXT glad_debug_vkCmdDrawMeshTasksIndirectCountEXT = glad_debug_impl_vkCmdDrawMeshTasksIndirectCountEXT;
PFN_vkCmdDrawMeshTasksIndirectCountNV  glad_vkCmdDrawMeshTasksIndirectCountNV = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer,
                                                                                         VkBuffer        buffer,
                                                                                         VkDeviceSize    offset,
                                                                                         VkBuffer        countBuffer,
                                                                                         VkDeviceSize    countBufferOffset,
                                                                                         uint32_t        maxDrawCount,
                                                                                         uint32_t        stride) {
        _pre_call_vulkan_callback("vkCmdDrawMeshTasksIndirectCountNV",
                                  (GLADapiproc)glad_vkCmdDrawMeshTasksIndirectCountNV,
                                  7,
                                  commandBuffer,
                                  buffer,
                                  offset,
                                  countBuffer,
                                  countBufferOffset,
                                  maxDrawCount,
                                  stride);
        glad_vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawMeshTasksIndirectCountNV",
                                   (GLADapiproc)glad_vkCmdDrawMeshTasksIndirectCountNV,
                                   7,
                                   commandBuffer,
                                   buffer,
                                   offset,
                                   countBuffer,
                                   countBufferOffset,
                                   maxDrawCount,
                                   stride);
}
PFN_vkCmdDrawMeshTasksIndirectCountNV glad_debug_vkCmdDrawMeshTasksIndirectCountNV = glad_debug_impl_vkCmdDrawMeshTasksIndirectCountNV;
PFN_vkCmdDrawMeshTasksIndirectEXT     glad_vkCmdDrawMeshTasksIndirectEXT = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	_pre_call_vulkan_callback("vkCmdDrawMeshTasksIndirectEXT",
	                          (GLADapiproc)glad_vkCmdDrawMeshTasksIndirectEXT,
	                          5,
	                          commandBuffer,
	                          buffer,
	                          offset,
	                          drawCount,
	                          stride);
	glad_vkCmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdDrawMeshTasksIndirectEXT",
	                           (GLADapiproc)glad_vkCmdDrawMeshTasksIndirectEXT,
	                           5,
	                           commandBuffer,
	                           buffer,
	                           offset,
	                           drawCount,
	                           stride);
}
PFN_vkCmdDrawMeshTasksIndirectEXT glad_debug_vkCmdDrawMeshTasksIndirectEXT = glad_debug_impl_vkCmdDrawMeshTasksIndirectEXT;
PFN_vkCmdDrawMeshTasksIndirectNV  glad_vkCmdDrawMeshTasksIndirectNV = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	_pre_call_vulkan_callback("vkCmdDrawMeshTasksIndirectNV",
	                          (GLADapiproc)glad_vkCmdDrawMeshTasksIndirectNV,
	                          5,
	                          commandBuffer,
	                          buffer,
	                          offset,
	                          drawCount,
	                          stride);
	glad_vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdDrawMeshTasksIndirectNV",
	                           (GLADapiproc)glad_vkCmdDrawMeshTasksIndirectNV,
	                           5,
	                           commandBuffer,
	                           buffer,
	                           offset,
	                           drawCount,
	                           stride);
}
PFN_vkCmdDrawMeshTasksIndirectNV glad_debug_vkCmdDrawMeshTasksIndirectNV = glad_debug_impl_vkCmdDrawMeshTasksIndirectNV;
PFN_vkCmdDrawMeshTasksNV         glad_vkCmdDrawMeshTasksNV = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask) {
        _pre_call_vulkan_callback("vkCmdDrawMeshTasksNV", (GLADapiproc)glad_vkCmdDrawMeshTasksNV, 3, commandBuffer, taskCount, firstTask);
        glad_vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
        _post_call_vulkan_callback(NULL, "vkCmdDrawMeshTasksNV", (GLADapiproc)glad_vkCmdDrawMeshTasksNV, 3, commandBuffer, taskCount, firstTask);
}
PFN_vkCmdDrawMeshTasksNV glad_debug_vkCmdDrawMeshTasksNV = glad_debug_impl_vkCmdDrawMeshTasksNV;
PFN_vkCmdDrawMultiEXT    glad_vkCmdDrawMultiEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdDrawMultiEXT(VkCommandBuffer           commandBuffer,
                                                           uint32_t                  drawCount,
                                                           const VkMultiDrawInfoEXT *pVertexInfo,
                                                           uint32_t                  instanceCount,
                                                           uint32_t                  firstInstance,
                                                           uint32_t                  stride) {
	_pre_call_vulkan_callback("vkCmdDrawMultiEXT",
	                          (GLADapiproc)glad_vkCmdDrawMultiEXT,
	                          6,
	                          commandBuffer,
	                          drawCount,
	                          pVertexInfo,
	                          instanceCount,
	                          firstInstance,
	                          stride);
	glad_vkCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdDrawMultiEXT",
	                           (GLADapiproc)glad_vkCmdDrawMultiEXT,
	                           6,
	                           commandBuffer,
	                           drawCount,
	                           pVertexInfo,
	                           instanceCount,
	                           firstInstance,
	                           stride);
}
PFN_vkCmdDrawMultiEXT        glad_debug_vkCmdDrawMultiEXT = glad_debug_impl_vkCmdDrawMultiEXT;
PFN_vkCmdDrawMultiIndexedEXT glad_vkCmdDrawMultiIndexedEXT = NULL;
static void GLAD_API_PTR     glad_debug_impl_vkCmdDrawMultiIndexedEXT(VkCommandBuffer                  commandBuffer,
                                                                      uint32_t                         drawCount,
                                                                      const VkMultiDrawIndexedInfoEXT *pIndexInfo,
                                                                      uint32_t                         instanceCount,
                                                                      uint32_t                         firstInstance,
                                                                      uint32_t                         stride,
                                                                      const int32_t                   *pVertexOffset) {
        _pre_call_vulkan_callback("vkCmdDrawMultiIndexedEXT",
                                  (GLADapiproc)glad_vkCmdDrawMultiIndexedEXT,
                                  7,
                                  commandBuffer,
                                  drawCount,
                                  pIndexInfo,
                                  instanceCount,
                                  firstInstance,
                                  stride,
                                  pVertexOffset);
        glad_vkCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdDrawMultiIndexedEXT",
                                   (GLADapiproc)glad_vkCmdDrawMultiIndexedEXT,
                                   7,
                                   commandBuffer,
                                   drawCount,
                                   pIndexInfo,
                                   instanceCount,
                                   firstInstance,
                                   stride,
                                   pVertexOffset);
}
PFN_vkCmdDrawMultiIndexedEXT glad_debug_vkCmdDrawMultiIndexedEXT = glad_debug_impl_vkCmdDrawMultiIndexedEXT;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkCmdEncodeVideoKHR  glad_vkCmdEncodeVideoKHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR *pEncodeInfo) {
	_pre_call_vulkan_callback("vkCmdEncodeVideoKHR", (GLADapiproc)glad_vkCmdEncodeVideoKHR, 2, commandBuffer, pEncodeInfo);
	glad_vkCmdEncodeVideoKHR(commandBuffer, pEncodeInfo);
	_post_call_vulkan_callback(NULL, "vkCmdEncodeVideoKHR", (GLADapiproc)glad_vkCmdEncodeVideoKHR, 2, commandBuffer, pEncodeInfo);
}
PFN_vkCmdEncodeVideoKHR glad_debug_vkCmdEncodeVideoKHR = glad_debug_impl_vkCmdEncodeVideoKHR;

#endif
PFN_vkCmdEndConditionalRenderingEXT glad_vkCmdEndConditionalRenderingEXT = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer) {
        _pre_call_vulkan_callback("vkCmdEndConditionalRenderingEXT", (GLADapiproc)glad_vkCmdEndConditionalRenderingEXT, 1, commandBuffer);
        glad_vkCmdEndConditionalRenderingEXT(commandBuffer);
        _post_call_vulkan_callback(NULL, "vkCmdEndConditionalRenderingEXT", (GLADapiproc)glad_vkCmdEndConditionalRenderingEXT, 1, commandBuffer);
}
PFN_vkCmdEndConditionalRenderingEXT glad_debug_vkCmdEndConditionalRenderingEXT = glad_debug_impl_vkCmdEndConditionalRenderingEXT;
PFN_vkCmdEndDebugUtilsLabelEXT      glad_vkCmdEndDebugUtilsLabelEXT = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer) {
        _pre_call_vulkan_callback("vkCmdEndDebugUtilsLabelEXT", (GLADapiproc)glad_vkCmdEndDebugUtilsLabelEXT, 1, commandBuffer);
        glad_vkCmdEndDebugUtilsLabelEXT(commandBuffer);
        _post_call_vulkan_callback(NULL, "vkCmdEndDebugUtilsLabelEXT", (GLADapiproc)glad_vkCmdEndDebugUtilsLabelEXT, 1, commandBuffer);
}
PFN_vkCmdEndDebugUtilsLabelEXT glad_debug_vkCmdEndDebugUtilsLabelEXT = glad_debug_impl_vkCmdEndDebugUtilsLabelEXT;
PFN_vkCmdEndQuery              glad_vkCmdEndQuery = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) {
        _pre_call_vulkan_callback("vkCmdEndQuery", (GLADapiproc)glad_vkCmdEndQuery, 3, commandBuffer, queryPool, query);
        glad_vkCmdEndQuery(commandBuffer, queryPool, query);
        _post_call_vulkan_callback(NULL, "vkCmdEndQuery", (GLADapiproc)glad_vkCmdEndQuery, 3, commandBuffer, queryPool, query);
}
PFN_vkCmdEndQuery           glad_debug_vkCmdEndQuery = glad_debug_impl_vkCmdEndQuery;
PFN_vkCmdEndQueryIndexedEXT glad_vkCmdEndQueryIndexedEXT = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index) {
        _pre_call_vulkan_callback("vkCmdEndQueryIndexedEXT", (GLADapiproc)glad_vkCmdEndQueryIndexedEXT, 4, commandBuffer, queryPool, query, index);
        glad_vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
        _post_call_vulkan_callback(NULL, "vkCmdEndQueryIndexedEXT", (GLADapiproc)glad_vkCmdEndQueryIndexedEXT, 4, commandBuffer, queryPool, query, index);
}
PFN_vkCmdEndQueryIndexedEXT glad_debug_vkCmdEndQueryIndexedEXT = glad_debug_impl_vkCmdEndQueryIndexedEXT;
PFN_vkCmdEndRenderPass      glad_vkCmdEndRenderPass = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkCmdEndRenderPass(VkCommandBuffer commandBuffer) {
        _pre_call_vulkan_callback("vkCmdEndRenderPass", (GLADapiproc)glad_vkCmdEndRenderPass, 1, commandBuffer);
        glad_vkCmdEndRenderPass(commandBuffer);
        _post_call_vulkan_callback(NULL, "vkCmdEndRenderPass", (GLADapiproc)glad_vkCmdEndRenderPass, 1, commandBuffer);
}
PFN_vkCmdEndRenderPass   glad_debug_vkCmdEndRenderPass = glad_debug_impl_vkCmdEndRenderPass;
PFN_vkCmdEndRenderPass2  glad_vkCmdEndRenderPass2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo) {
	_pre_call_vulkan_callback("vkCmdEndRenderPass2", (GLADapiproc)glad_vkCmdEndRenderPass2, 2, commandBuffer, pSubpassEndInfo);
	glad_vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
	_post_call_vulkan_callback(NULL, "vkCmdEndRenderPass2", (GLADapiproc)glad_vkCmdEndRenderPass2, 2, commandBuffer, pSubpassEndInfo);
}
PFN_vkCmdEndRenderPass2    glad_debug_vkCmdEndRenderPass2 = glad_debug_impl_vkCmdEndRenderPass2;
PFN_vkCmdEndRenderPass2KHR glad_vkCmdEndRenderPass2KHR = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo) {
        _pre_call_vulkan_callback("vkCmdEndRenderPass2KHR", (GLADapiproc)glad_vkCmdEndRenderPass2KHR, 2, commandBuffer, pSubpassEndInfo);
        glad_vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
        _post_call_vulkan_callback(NULL, "vkCmdEndRenderPass2KHR", (GLADapiproc)glad_vkCmdEndRenderPass2KHR, 2, commandBuffer, pSubpassEndInfo);
}
PFN_vkCmdEndRenderPass2KHR glad_debug_vkCmdEndRenderPass2KHR = glad_debug_impl_vkCmdEndRenderPass2KHR;
PFN_vkCmdEndRendering      glad_vkCmdEndRendering = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdEndRendering(VkCommandBuffer commandBuffer) {
        _pre_call_vulkan_callback("vkCmdEndRendering", (GLADapiproc)glad_vkCmdEndRendering, 1, commandBuffer);
        glad_vkCmdEndRendering(commandBuffer);
        _post_call_vulkan_callback(NULL, "vkCmdEndRendering", (GLADapiproc)glad_vkCmdEndRendering, 1, commandBuffer);
}
PFN_vkCmdEndRendering    glad_debug_vkCmdEndRendering = glad_debug_impl_vkCmdEndRendering;
PFN_vkCmdEndRenderingKHR glad_vkCmdEndRenderingKHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer) {
	_pre_call_vulkan_callback("vkCmdEndRenderingKHR", (GLADapiproc)glad_vkCmdEndRenderingKHR, 1, commandBuffer);
	glad_vkCmdEndRenderingKHR(commandBuffer);
	_post_call_vulkan_callback(NULL, "vkCmdEndRenderingKHR", (GLADapiproc)glad_vkCmdEndRenderingKHR, 1, commandBuffer);
}
PFN_vkCmdEndRenderingKHR         glad_debug_vkCmdEndRenderingKHR = glad_debug_impl_vkCmdEndRenderingKHR;
PFN_vkCmdEndTransformFeedbackEXT glad_vkCmdEndTransformFeedbackEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdEndTransformFeedbackEXT(VkCommandBuffer     commandBuffer,
                                                                              uint32_t            firstCounterBuffer,
                                                                              uint32_t            counterBufferCount,
                                                                              const VkBuffer     *pCounterBuffers,
                                                                              const VkDeviceSize *pCounterBufferOffsets) {
        _pre_call_vulkan_callback("vkCmdEndTransformFeedbackEXT",
                                  (GLADapiproc)glad_vkCmdEndTransformFeedbackEXT,
                                  5,
                                  commandBuffer,
                                  firstCounterBuffer,
                                  counterBufferCount,
                                  pCounterBuffers,
                                  pCounterBufferOffsets);
        glad_vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdEndTransformFeedbackEXT",
                                   (GLADapiproc)glad_vkCmdEndTransformFeedbackEXT,
                                   5,
                                   commandBuffer,
                                   firstCounterBuffer,
                                   counterBufferCount,
                                   pCounterBuffers,
                                   pCounterBufferOffsets);
}
PFN_vkCmdEndTransformFeedbackEXT glad_debug_vkCmdEndTransformFeedbackEXT = glad_debug_impl_vkCmdEndTransformFeedbackEXT;
PFN_vkCmdEndVideoCodingKHR       glad_vkCmdEndVideoCodingKHR = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR *pEndCodingInfo) {
        _pre_call_vulkan_callback("vkCmdEndVideoCodingKHR", (GLADapiproc)glad_vkCmdEndVideoCodingKHR, 2, commandBuffer, pEndCodingInfo);
        glad_vkCmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);
        _post_call_vulkan_callback(NULL, "vkCmdEndVideoCodingKHR", (GLADapiproc)glad_vkCmdEndVideoCodingKHR, 2, commandBuffer, pEndCodingInfo);
}
PFN_vkCmdEndVideoCodingKHR glad_debug_vkCmdEndVideoCodingKHR = glad_debug_impl_vkCmdEndVideoCodingKHR;
PFN_vkCmdExecuteCommands   glad_vkCmdExecuteCommands = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdExecuteCommands(VkCommandBuffer        commandBuffer,
                                                                uint32_t               commandBufferCount,
                                                                const VkCommandBuffer *pCommandBuffers) {
        _pre_call_vulkan_callback("vkCmdExecuteCommands", (GLADapiproc)glad_vkCmdExecuteCommands, 3, commandBuffer, commandBufferCount, pCommandBuffers);
        glad_vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
        _post_call_vulkan_callback(NULL, "vkCmdExecuteCommands", (GLADapiproc)glad_vkCmdExecuteCommands, 3, commandBuffer, commandBufferCount, pCommandBuffers);
}
PFN_vkCmdExecuteCommands            glad_debug_vkCmdExecuteCommands = glad_debug_impl_vkCmdExecuteCommands;
PFN_vkCmdExecuteGeneratedCommandsNV glad_vkCmdExecuteGeneratedCommandsNV = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer                  commandBuffer,
                                                                                    VkBool32                         isPreprocessed,
                                                                                    const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo) {
        _pre_call_vulkan_callback("vkCmdExecuteGeneratedCommandsNV",
                                  (GLADapiproc)glad_vkCmdExecuteGeneratedCommandsNV,
                                  3,
                                  commandBuffer,
                                  isPreprocessed,
                                  pGeneratedCommandsInfo);
        glad_vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdExecuteGeneratedCommandsNV",
                                   (GLADapiproc)glad_vkCmdExecuteGeneratedCommandsNV,
                                   3,
                                   commandBuffer,
                                   isPreprocessed,
                                   pGeneratedCommandsInfo);
}
PFN_vkCmdExecuteGeneratedCommandsNV glad_debug_vkCmdExecuteGeneratedCommandsNV = glad_debug_impl_vkCmdExecuteGeneratedCommandsNV;
PFN_vkCmdFillBuffer                 glad_vkCmdFillBuffer = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) {
	_pre_call_vulkan_callback("vkCmdFillBuffer", (GLADapiproc)glad_vkCmdFillBuffer, 5, commandBuffer, dstBuffer, dstOffset, size, data);
	glad_vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
	_post_call_vulkan_callback(NULL, "vkCmdFillBuffer", (GLADapiproc)glad_vkCmdFillBuffer, 5, commandBuffer, dstBuffer, dstOffset, size, data);
}
PFN_vkCmdFillBuffer glad_debug_vkCmdFillBuffer = glad_debug_impl_vkCmdFillBuffer;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkCmdInitializeGraphScratchMemoryAMDX glad_vkCmdInitializeGraphScratchMemoryAMDX = NULL;
static void GLAD_API_PTR                  glad_debug_impl_vkCmdInitializeGraphScratchMemoryAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch) {
        _pre_call_vulkan_callback("vkCmdInitializeGraphScratchMemoryAMDX", (GLADapiproc)glad_vkCmdInitializeGraphScratchMemoryAMDX, 2, commandBuffer, scratch);
        glad_vkCmdInitializeGraphScratchMemoryAMDX(commandBuffer, scratch);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdInitializeGraphScratchMemoryAMDX",
                                   (GLADapiproc)glad_vkCmdInitializeGraphScratchMemoryAMDX,
                                   2,
                                   commandBuffer,
                                   scratch);
}
PFN_vkCmdInitializeGraphScratchMemoryAMDX glad_debug_vkCmdInitializeGraphScratchMemoryAMDX = glad_debug_impl_vkCmdInitializeGraphScratchMemoryAMDX;

#endif
PFN_vkCmdInsertDebugUtilsLabelEXT glad_vkCmdInsertDebugUtilsLabelEXT = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo) {
        _pre_call_vulkan_callback("vkCmdInsertDebugUtilsLabelEXT", (GLADapiproc)glad_vkCmdInsertDebugUtilsLabelEXT, 2, commandBuffer, pLabelInfo);
        glad_vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
        _post_call_vulkan_callback(NULL, "vkCmdInsertDebugUtilsLabelEXT", (GLADapiproc)glad_vkCmdInsertDebugUtilsLabelEXT, 2, commandBuffer, pLabelInfo);
}
PFN_vkCmdInsertDebugUtilsLabelEXT glad_debug_vkCmdInsertDebugUtilsLabelEXT = glad_debug_impl_vkCmdInsertDebugUtilsLabelEXT;
PFN_vkCmdNextSubpass              glad_vkCmdNextSubpass = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) {
        _pre_call_vulkan_callback("vkCmdNextSubpass", (GLADapiproc)glad_vkCmdNextSubpass, 2, commandBuffer, contents);
        glad_vkCmdNextSubpass(commandBuffer, contents);
        _post_call_vulkan_callback(NULL, "vkCmdNextSubpass", (GLADapiproc)glad_vkCmdNextSubpass, 2, commandBuffer, contents);
}
PFN_vkCmdNextSubpass     glad_debug_vkCmdNextSubpass = glad_debug_impl_vkCmdNextSubpass;
PFN_vkCmdNextSubpass2    glad_vkCmdNextSubpass2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdNextSubpass2(VkCommandBuffer           commandBuffer,
                                                           const VkSubpassBeginInfo *pSubpassBeginInfo,
                                                           const VkSubpassEndInfo   *pSubpassEndInfo) {
	_pre_call_vulkan_callback("vkCmdNextSubpass2", (GLADapiproc)glad_vkCmdNextSubpass2, 3, commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	glad_vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	_post_call_vulkan_callback(NULL, "vkCmdNextSubpass2", (GLADapiproc)glad_vkCmdNextSubpass2, 3, commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}
PFN_vkCmdNextSubpass2    glad_debug_vkCmdNextSubpass2 = glad_debug_impl_vkCmdNextSubpass2;
PFN_vkCmdNextSubpass2KHR glad_vkCmdNextSubpass2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdNextSubpass2KHR(VkCommandBuffer           commandBuffer,
                                                              const VkSubpassBeginInfo *pSubpassBeginInfo,
                                                              const VkSubpassEndInfo   *pSubpassEndInfo) {
	_pre_call_vulkan_callback("vkCmdNextSubpass2KHR", (GLADapiproc)glad_vkCmdNextSubpass2KHR, 3, commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	glad_vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	_post_call_vulkan_callback(NULL, "vkCmdNextSubpass2KHR", (GLADapiproc)glad_vkCmdNextSubpass2KHR, 3, commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}
PFN_vkCmdNextSubpass2KHR      glad_debug_vkCmdNextSubpass2KHR = glad_debug_impl_vkCmdNextSubpass2KHR;
PFN_vkCmdOpticalFlowExecuteNV glad_vkCmdOpticalFlowExecuteNV = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdOpticalFlowExecuteNV(VkCommandBuffer                   commandBuffer,
                                                                        VkOpticalFlowSessionNV            session,
                                                                        const VkOpticalFlowExecuteInfoNV *pExecuteInfo) {
        _pre_call_vulkan_callback("vkCmdOpticalFlowExecuteNV", (GLADapiproc)glad_vkCmdOpticalFlowExecuteNV, 3, commandBuffer, session, pExecuteInfo);
        glad_vkCmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);
        _post_call_vulkan_callback(NULL, "vkCmdOpticalFlowExecuteNV", (GLADapiproc)glad_vkCmdOpticalFlowExecuteNV, 3, commandBuffer, session, pExecuteInfo);
}
PFN_vkCmdOpticalFlowExecuteNV glad_debug_vkCmdOpticalFlowExecuteNV = glad_debug_impl_vkCmdOpticalFlowExecuteNV;
PFN_vkCmdPipelineBarrier      glad_vkCmdPipelineBarrier = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdPipelineBarrier(VkCommandBuffer              commandBuffer,
                                                                   VkPipelineStageFlags         srcStageMask,
                                                                   VkPipelineStageFlags         dstStageMask,
                                                                   VkDependencyFlags            dependencyFlags,
                                                                   uint32_t                     memoryBarrierCount,
                                                                   const VkMemoryBarrier       *pMemoryBarriers,
                                                                   uint32_t                     bufferMemoryBarrierCount,
                                                                   const VkBufferMemoryBarrier *pBufferMemoryBarriers,
                                                                   uint32_t                     imageMemoryBarrierCount,
                                                                   const VkImageMemoryBarrier  *pImageMemoryBarriers) {
        _pre_call_vulkan_callback("vkCmdPipelineBarrier",
                                  (GLADapiproc)glad_vkCmdPipelineBarrier,
                                  10,
                                  commandBuffer,
                                  srcStageMask,
                                  dstStageMask,
                                  dependencyFlags,
                                  memoryBarrierCount,
                                  pMemoryBarriers,
                                  bufferMemoryBarrierCount,
                                  pBufferMemoryBarriers,
                                  imageMemoryBarrierCount,
                                  pImageMemoryBarriers);
        glad_vkCmdPipelineBarrier(commandBuffer,
                                  srcStageMask,
                                  dstStageMask,
                                  dependencyFlags,
                                  memoryBarrierCount,
                                  pMemoryBarriers,
                                  bufferMemoryBarrierCount,
                                  pBufferMemoryBarriers,
                                  imageMemoryBarrierCount,
                                  pImageMemoryBarriers);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdPipelineBarrier",
                                   (GLADapiproc)glad_vkCmdPipelineBarrier,
                                   10,
                                   commandBuffer,
                                   srcStageMask,
                                   dstStageMask,
                                   dependencyFlags,
                                   memoryBarrierCount,
                                   pMemoryBarriers,
                                   bufferMemoryBarrierCount,
                                   pBufferMemoryBarriers,
                                   imageMemoryBarrierCount,
                                   pImageMemoryBarriers);
}
PFN_vkCmdPipelineBarrier  glad_debug_vkCmdPipelineBarrier = glad_debug_impl_vkCmdPipelineBarrier;
PFN_vkCmdPipelineBarrier2 glad_vkCmdPipelineBarrier2 = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo) {
        _pre_call_vulkan_callback("vkCmdPipelineBarrier2", (GLADapiproc)glad_vkCmdPipelineBarrier2, 2, commandBuffer, pDependencyInfo);
        glad_vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo);
        _post_call_vulkan_callback(NULL, "vkCmdPipelineBarrier2", (GLADapiproc)glad_vkCmdPipelineBarrier2, 2, commandBuffer, pDependencyInfo);
}
PFN_vkCmdPipelineBarrier2    glad_debug_vkCmdPipelineBarrier2 = glad_debug_impl_vkCmdPipelineBarrier2;
PFN_vkCmdPipelineBarrier2KHR glad_vkCmdPipelineBarrier2KHR = NULL;
static void GLAD_API_PTR     glad_debug_impl_vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo) {
        _pre_call_vulkan_callback("vkCmdPipelineBarrier2KHR", (GLADapiproc)glad_vkCmdPipelineBarrier2KHR, 2, commandBuffer, pDependencyInfo);
        glad_vkCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
        _post_call_vulkan_callback(NULL, "vkCmdPipelineBarrier2KHR", (GLADapiproc)glad_vkCmdPipelineBarrier2KHR, 2, commandBuffer, pDependencyInfo);
}
PFN_vkCmdPipelineBarrier2KHR           glad_debug_vkCmdPipelineBarrier2KHR = glad_debug_impl_vkCmdPipelineBarrier2KHR;
PFN_vkCmdPreprocessGeneratedCommandsNV glad_vkCmdPreprocessGeneratedCommandsNV = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer                  commandBuffer,
                                                                                          const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo) {
        _pre_call_vulkan_callback("vkCmdPreprocessGeneratedCommandsNV",
                                  (GLADapiproc)glad_vkCmdPreprocessGeneratedCommandsNV,
                                  2,
                                  commandBuffer,
                                  pGeneratedCommandsInfo);
        glad_vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdPreprocessGeneratedCommandsNV",
                                   (GLADapiproc)glad_vkCmdPreprocessGeneratedCommandsNV,
                                   2,
                                   commandBuffer,
                                   pGeneratedCommandsInfo);
}
PFN_vkCmdPreprocessGeneratedCommandsNV glad_debug_vkCmdPreprocessGeneratedCommandsNV = glad_debug_impl_vkCmdPreprocessGeneratedCommandsNV;
PFN_vkCmdPushConstants                 glad_vkCmdPushConstants = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkCmdPushConstants(VkCommandBuffer    commandBuffer,
                                                                          VkPipelineLayout   layout,
                                                                          VkShaderStageFlags stageFlags,
                                                                          uint32_t           offset,
                                                                          uint32_t           size,
                                                                          const void        *pValues) {
        _pre_call_vulkan_callback("vkCmdPushConstants", (GLADapiproc)glad_vkCmdPushConstants, 6, commandBuffer, layout, stageFlags, offset, size, pValues);
        glad_vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdPushConstants",
                                   (GLADapiproc)glad_vkCmdPushConstants,
                                   6,
                                   commandBuffer,
                                   layout,
                                   stageFlags,
                                   offset,
                                   size,
                                   pValues);
}
PFN_vkCmdPushConstants        glad_debug_vkCmdPushConstants = glad_debug_impl_vkCmdPushConstants;
PFN_vkCmdPushDescriptorSetKHR glad_vkCmdPushDescriptorSetKHR = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdPushDescriptorSetKHR(VkCommandBuffer             commandBuffer,
                                                                        VkPipelineBindPoint         pipelineBindPoint,
                                                                        VkPipelineLayout            layout,
                                                                        uint32_t                    set,
                                                                        uint32_t                    descriptorWriteCount,
                                                                        const VkWriteDescriptorSet *pDescriptorWrites) {
        _pre_call_vulkan_callback("vkCmdPushDescriptorSetKHR",
                                  (GLADapiproc)glad_vkCmdPushDescriptorSetKHR,
                                  6,
                                  commandBuffer,
                                  pipelineBindPoint,
                                  layout,
                                  set,
                                  descriptorWriteCount,
                                  pDescriptorWrites);
        glad_vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdPushDescriptorSetKHR",
                                   (GLADapiproc)glad_vkCmdPushDescriptorSetKHR,
                                   6,
                                   commandBuffer,
                                   pipelineBindPoint,
                                   layout,
                                   set,
                                   descriptorWriteCount,
                                   pDescriptorWrites);
}
PFN_vkCmdPushDescriptorSetKHR             glad_debug_vkCmdPushDescriptorSetKHR = glad_debug_impl_vkCmdPushDescriptorSetKHR;
PFN_vkCmdPushDescriptorSetWithTemplateKHR glad_vkCmdPushDescriptorSetWithTemplateKHR = NULL;
static void GLAD_API_PTR                  glad_debug_impl_vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer            commandBuffer,
                                                                                                VkDescriptorUpdateTemplate descriptorUpdateTemplate,
                                                                                                VkPipelineLayout           layout,
                                                                                                uint32_t                   set,
                                                                                                const void                *pData) {
        _pre_call_vulkan_callback("vkCmdPushDescriptorSetWithTemplateKHR",
                                  (GLADapiproc)glad_vkCmdPushDescriptorSetWithTemplateKHR,
                                  5,
                                  commandBuffer,
                                  descriptorUpdateTemplate,
                                  layout,
                                  set,
                                  pData);
        glad_vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdPushDescriptorSetWithTemplateKHR",
                                   (GLADapiproc)glad_vkCmdPushDescriptorSetWithTemplateKHR,
                                   5,
                                   commandBuffer,
                                   descriptorUpdateTemplate,
                                   layout,
                                   set,
                                   pData);
}
PFN_vkCmdPushDescriptorSetWithTemplateKHR glad_debug_vkCmdPushDescriptorSetWithTemplateKHR = glad_debug_impl_vkCmdPushDescriptorSetWithTemplateKHR;
PFN_vkCmdResetEvent                       glad_vkCmdResetEvent = NULL;
static void GLAD_API_PTR                  glad_debug_impl_vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
        _pre_call_vulkan_callback("vkCmdResetEvent", (GLADapiproc)glad_vkCmdResetEvent, 3, commandBuffer, event, stageMask);
        glad_vkCmdResetEvent(commandBuffer, event, stageMask);
        _post_call_vulkan_callback(NULL, "vkCmdResetEvent", (GLADapiproc)glad_vkCmdResetEvent, 3, commandBuffer, event, stageMask);
}
PFN_vkCmdResetEvent      glad_debug_vkCmdResetEvent = glad_debug_impl_vkCmdResetEvent;
PFN_vkCmdResetEvent2     glad_vkCmdResetEvent2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) {
	_pre_call_vulkan_callback("vkCmdResetEvent2", (GLADapiproc)glad_vkCmdResetEvent2, 3, commandBuffer, event, stageMask);
	glad_vkCmdResetEvent2(commandBuffer, event, stageMask);
	_post_call_vulkan_callback(NULL, "vkCmdResetEvent2", (GLADapiproc)glad_vkCmdResetEvent2, 3, commandBuffer, event, stageMask);
}
PFN_vkCmdResetEvent2     glad_debug_vkCmdResetEvent2 = glad_debug_impl_vkCmdResetEvent2;
PFN_vkCmdResetEvent2KHR  glad_vkCmdResetEvent2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) {
	_pre_call_vulkan_callback("vkCmdResetEvent2KHR", (GLADapiproc)glad_vkCmdResetEvent2KHR, 3, commandBuffer, event, stageMask);
	glad_vkCmdResetEvent2KHR(commandBuffer, event, stageMask);
	_post_call_vulkan_callback(NULL, "vkCmdResetEvent2KHR", (GLADapiproc)glad_vkCmdResetEvent2KHR, 3, commandBuffer, event, stageMask);
}
PFN_vkCmdResetEvent2KHR  glad_debug_vkCmdResetEvent2KHR = glad_debug_impl_vkCmdResetEvent2KHR;
PFN_vkCmdResetQueryPool  glad_vkCmdResetQueryPool = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	_pre_call_vulkan_callback("vkCmdResetQueryPool", (GLADapiproc)glad_vkCmdResetQueryPool, 4, commandBuffer, queryPool, firstQuery, queryCount);
	glad_vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
	_post_call_vulkan_callback(NULL, "vkCmdResetQueryPool", (GLADapiproc)glad_vkCmdResetQueryPool, 4, commandBuffer, queryPool, firstQuery, queryCount);
}
PFN_vkCmdResetQueryPool  glad_debug_vkCmdResetQueryPool = glad_debug_impl_vkCmdResetQueryPool;
PFN_vkCmdResolveImage    glad_vkCmdResolveImage = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdResolveImage(VkCommandBuffer       commandBuffer,
                                                           VkImage               srcImage,
                                                           VkImageLayout         srcImageLayout,
                                                           VkImage               dstImage,
                                                           VkImageLayout         dstImageLayout,
                                                           uint32_t              regionCount,
                                                           const VkImageResolve *pRegions) {
	_pre_call_vulkan_callback("vkCmdResolveImage",
	                          (GLADapiproc)glad_vkCmdResolveImage,
	                          7,
	                          commandBuffer,
	                          srcImage,
	                          srcImageLayout,
	                          dstImage,
	                          dstImageLayout,
	                          regionCount,
	                          pRegions);
	glad_vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdResolveImage",
	                           (GLADapiproc)glad_vkCmdResolveImage,
	                           7,
	                           commandBuffer,
	                           srcImage,
	                           srcImageLayout,
	                           dstImage,
	                           dstImageLayout,
	                           regionCount,
	                           pRegions);
}
PFN_vkCmdResolveImage    glad_debug_vkCmdResolveImage = glad_debug_impl_vkCmdResolveImage;
PFN_vkCmdResolveImage2   glad_vkCmdResolveImage2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo) {
	_pre_call_vulkan_callback("vkCmdResolveImage2", (GLADapiproc)glad_vkCmdResolveImage2, 2, commandBuffer, pResolveImageInfo);
	glad_vkCmdResolveImage2(commandBuffer, pResolveImageInfo);
	_post_call_vulkan_callback(NULL, "vkCmdResolveImage2", (GLADapiproc)glad_vkCmdResolveImage2, 2, commandBuffer, pResolveImageInfo);
}
PFN_vkCmdResolveImage2    glad_debug_vkCmdResolveImage2 = glad_debug_impl_vkCmdResolveImage2;
PFN_vkCmdResolveImage2KHR glad_vkCmdResolveImage2KHR = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo) {
        _pre_call_vulkan_callback("vkCmdResolveImage2KHR", (GLADapiproc)glad_vkCmdResolveImage2KHR, 2, commandBuffer, pResolveImageInfo);
        glad_vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
        _post_call_vulkan_callback(NULL, "vkCmdResolveImage2KHR", (GLADapiproc)glad_vkCmdResolveImage2KHR, 2, commandBuffer, pResolveImageInfo);
}
PFN_vkCmdResolveImage2KHR            glad_debug_vkCmdResolveImage2KHR = glad_debug_impl_vkCmdResolveImage2KHR;
PFN_vkCmdSetAlphaToCoverageEnableEXT glad_vkCmdSetAlphaToCoverageEnableEXT = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable) {
        _pre_call_vulkan_callback("vkCmdSetAlphaToCoverageEnableEXT",
                                  (GLADapiproc)glad_vkCmdSetAlphaToCoverageEnableEXT,
                                  2,
                                  commandBuffer,
                                  alphaToCoverageEnable);
        glad_vkCmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetAlphaToCoverageEnableEXT",
                                   (GLADapiproc)glad_vkCmdSetAlphaToCoverageEnableEXT,
                                   2,
                                   commandBuffer,
                                   alphaToCoverageEnable);
}
PFN_vkCmdSetAlphaToCoverageEnableEXT glad_debug_vkCmdSetAlphaToCoverageEnableEXT = glad_debug_impl_vkCmdSetAlphaToCoverageEnableEXT;
PFN_vkCmdSetAlphaToOneEnableEXT      glad_vkCmdSetAlphaToOneEnableEXT = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable) {
        _pre_call_vulkan_callback("vkCmdSetAlphaToOneEnableEXT", (GLADapiproc)glad_vkCmdSetAlphaToOneEnableEXT, 2, commandBuffer, alphaToOneEnable);
        glad_vkCmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetAlphaToOneEnableEXT", (GLADapiproc)glad_vkCmdSetAlphaToOneEnableEXT, 2, commandBuffer, alphaToOneEnable);
}
PFN_vkCmdSetAlphaToOneEnableEXT             glad_debug_vkCmdSetAlphaToOneEnableEXT = glad_debug_impl_vkCmdSetAlphaToOneEnableEXT;
PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT glad_vkCmdSetAttachmentFeedbackLoopEnableEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask) {
	_pre_call_vulkan_callback("vkCmdSetAttachmentFeedbackLoopEnableEXT",
	                          (GLADapiproc)glad_vkCmdSetAttachmentFeedbackLoopEnableEXT,
	                          2,
	                          commandBuffer,
	                          aspectMask);
	glad_vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetAttachmentFeedbackLoopEnableEXT",
	                           (GLADapiproc)glad_vkCmdSetAttachmentFeedbackLoopEnableEXT,
	                           2,
	                           commandBuffer,
	                           aspectMask);
}
PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT glad_debug_vkCmdSetAttachmentFeedbackLoopEnableEXT = glad_debug_impl_vkCmdSetAttachmentFeedbackLoopEnableEXT;
PFN_vkCmdSetBlendConstants                  glad_vkCmdSetBlendConstants = NULL;
static void GLAD_API_PTR                    glad_debug_impl_vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4]) {
        _pre_call_vulkan_callback("vkCmdSetBlendConstants", (GLADapiproc)glad_vkCmdSetBlendConstants, 2, commandBuffer, blendConstants);
        glad_vkCmdSetBlendConstants(commandBuffer, blendConstants);
        _post_call_vulkan_callback(NULL, "vkCmdSetBlendConstants", (GLADapiproc)glad_vkCmdSetBlendConstants, 2, commandBuffer, blendConstants);
}
PFN_vkCmdSetBlendConstants glad_debug_vkCmdSetBlendConstants = glad_debug_impl_vkCmdSetBlendConstants;
PFN_vkCmdSetCheckpointNV   glad_vkCmdSetCheckpointNV = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void *pCheckpointMarker) {
        _pre_call_vulkan_callback("vkCmdSetCheckpointNV", (GLADapiproc)glad_vkCmdSetCheckpointNV, 2, commandBuffer, pCheckpointMarker);
        glad_vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
        _post_call_vulkan_callback(NULL, "vkCmdSetCheckpointNV", (GLADapiproc)glad_vkCmdSetCheckpointNV, 2, commandBuffer, pCheckpointMarker);
}
PFN_vkCmdSetCheckpointNV        glad_debug_vkCmdSetCheckpointNV = glad_debug_impl_vkCmdSetCheckpointNV;
PFN_vkCmdSetCoarseSampleOrderNV glad_vkCmdSetCoarseSampleOrderNV = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkCmdSetCoarseSampleOrderNV(VkCommandBuffer                    commandBuffer,
                                                                            VkCoarseSampleOrderTypeNV          sampleOrderType,
                                                                            uint32_t                           customSampleOrderCount,
                                                                            const VkCoarseSampleOrderCustomNV *pCustomSampleOrders) {
        _pre_call_vulkan_callback("vkCmdSetCoarseSampleOrderNV",
                                  (GLADapiproc)glad_vkCmdSetCoarseSampleOrderNV,
                                  4,
                                  commandBuffer,
                                  sampleOrderType,
                                  customSampleOrderCount,
                                  pCustomSampleOrders);
        glad_vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetCoarseSampleOrderNV",
                                   (GLADapiproc)glad_vkCmdSetCoarseSampleOrderNV,
                                   4,
                                   commandBuffer,
                                   sampleOrderType,
                                   customSampleOrderCount,
                                   pCustomSampleOrders);
}
PFN_vkCmdSetCoarseSampleOrderNV   glad_debug_vkCmdSetCoarseSampleOrderNV = glad_debug_impl_vkCmdSetCoarseSampleOrderNV;
PFN_vkCmdSetColorBlendAdvancedEXT glad_vkCmdSetColorBlendAdvancedEXT = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer                commandBuffer,
                                                                                uint32_t                       firstAttachment,
                                                                                uint32_t                       attachmentCount,
                                                                                const VkColorBlendAdvancedEXT *pColorBlendAdvanced) {
        _pre_call_vulkan_callback("vkCmdSetColorBlendAdvancedEXT",
                                  (GLADapiproc)glad_vkCmdSetColorBlendAdvancedEXT,
                                  4,
                                  commandBuffer,
                                  firstAttachment,
                                  attachmentCount,
                                  pColorBlendAdvanced);
        glad_vkCmdSetColorBlendAdvancedEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetColorBlendAdvancedEXT",
                                   (GLADapiproc)glad_vkCmdSetColorBlendAdvancedEXT,
                                   4,
                                   commandBuffer,
                                   firstAttachment,
                                   attachmentCount,
                                   pColorBlendAdvanced);
}
PFN_vkCmdSetColorBlendAdvancedEXT glad_debug_vkCmdSetColorBlendAdvancedEXT = glad_debug_impl_vkCmdSetColorBlendAdvancedEXT;
PFN_vkCmdSetColorBlendEnableEXT   glad_vkCmdSetColorBlendEnableEXT = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer,
                                                                              uint32_t        firstAttachment,
                                                                              uint32_t        attachmentCount,
                                                                              const VkBool32 *pColorBlendEnables) {
        _pre_call_vulkan_callback("vkCmdSetColorBlendEnableEXT",
                                  (GLADapiproc)glad_vkCmdSetColorBlendEnableEXT,
                                  4,
                                  commandBuffer,
                                  firstAttachment,
                                  attachmentCount,
                                  pColorBlendEnables);
        glad_vkCmdSetColorBlendEnableEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetColorBlendEnableEXT",
                                   (GLADapiproc)glad_vkCmdSetColorBlendEnableEXT,
                                   4,
                                   commandBuffer,
                                   firstAttachment,
                                   attachmentCount,
                                   pColorBlendEnables);
}
PFN_vkCmdSetColorBlendEnableEXT   glad_debug_vkCmdSetColorBlendEnableEXT = glad_debug_impl_vkCmdSetColorBlendEnableEXT;
PFN_vkCmdSetColorBlendEquationEXT glad_vkCmdSetColorBlendEquationEXT = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdSetColorBlendEquationEXT(VkCommandBuffer                commandBuffer,
                                                                                uint32_t                       firstAttachment,
                                                                                uint32_t                       attachmentCount,
                                                                                const VkColorBlendEquationEXT *pColorBlendEquations) {
        _pre_call_vulkan_callback("vkCmdSetColorBlendEquationEXT",
                                  (GLADapiproc)glad_vkCmdSetColorBlendEquationEXT,
                                  4,
                                  commandBuffer,
                                  firstAttachment,
                                  attachmentCount,
                                  pColorBlendEquations);
        glad_vkCmdSetColorBlendEquationEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetColorBlendEquationEXT",
                                   (GLADapiproc)glad_vkCmdSetColorBlendEquationEXT,
                                   4,
                                   commandBuffer,
                                   firstAttachment,
                                   attachmentCount,
                                   pColorBlendEquations);
}
PFN_vkCmdSetColorBlendEquationEXT glad_debug_vkCmdSetColorBlendEquationEXT = glad_debug_impl_vkCmdSetColorBlendEquationEXT;
PFN_vkCmdSetColorWriteEnableEXT   glad_vkCmdSetColorWriteEnableEXT = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer,
                                                                              uint32_t        attachmentCount,
                                                                              const VkBool32 *pColorWriteEnables) {
        _pre_call_vulkan_callback("vkCmdSetColorWriteEnableEXT",
                                  (GLADapiproc)glad_vkCmdSetColorWriteEnableEXT,
                                  3,
                                  commandBuffer,
                                  attachmentCount,
                                  pColorWriteEnables);
        glad_vkCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetColorWriteEnableEXT",
                                   (GLADapiproc)glad_vkCmdSetColorWriteEnableEXT,
                                   3,
                                   commandBuffer,
                                   attachmentCount,
                                   pColorWriteEnables);
}
PFN_vkCmdSetColorWriteEnableEXT glad_debug_vkCmdSetColorWriteEnableEXT = glad_debug_impl_vkCmdSetColorWriteEnableEXT;
PFN_vkCmdSetColorWriteMaskEXT   glad_vkCmdSetColorWriteMaskEXT = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkCmdSetColorWriteMaskEXT(VkCommandBuffer              commandBuffer,
                                                                          uint32_t                     firstAttachment,
                                                                          uint32_t                     attachmentCount,
                                                                          const VkColorComponentFlags *pColorWriteMasks) {
        _pre_call_vulkan_callback("vkCmdSetColorWriteMaskEXT",
                                  (GLADapiproc)glad_vkCmdSetColorWriteMaskEXT,
                                  4,
                                  commandBuffer,
                                  firstAttachment,
                                  attachmentCount,
                                  pColorWriteMasks);
        glad_vkCmdSetColorWriteMaskEXT(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetColorWriteMaskEXT",
                                   (GLADapiproc)glad_vkCmdSetColorWriteMaskEXT,
                                   4,
                                   commandBuffer,
                                   firstAttachment,
                                   attachmentCount,
                                   pColorWriteMasks);
}
PFN_vkCmdSetColorWriteMaskEXT                glad_debug_vkCmdSetColorWriteMaskEXT = glad_debug_impl_vkCmdSetColorWriteMaskEXT;
PFN_vkCmdSetConservativeRasterizationModeEXT glad_vkCmdSetConservativeRasterizationModeEXT = NULL;
static void GLAD_API_PTR                     glad_debug_impl_vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer                    commandBuffer,
                                                                                                      VkConservativeRasterizationModeEXT conservativeRasterizationMode) {
        _pre_call_vulkan_callback("vkCmdSetConservativeRasterizationModeEXT",
                                  (GLADapiproc)glad_vkCmdSetConservativeRasterizationModeEXT,
                                  2,
                                  commandBuffer,
                                  conservativeRasterizationMode);
        glad_vkCmdSetConservativeRasterizationModeEXT(commandBuffer, conservativeRasterizationMode);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetConservativeRasterizationModeEXT",
                                   (GLADapiproc)glad_vkCmdSetConservativeRasterizationModeEXT,
                                   2,
                                   commandBuffer,
                                   conservativeRasterizationMode);
}
PFN_vkCmdSetConservativeRasterizationModeEXT glad_debug_vkCmdSetConservativeRasterizationModeEXT = glad_debug_impl_vkCmdSetConservativeRasterizationModeEXT;
PFN_vkCmdSetCoverageModulationModeNV         glad_vkCmdSetCoverageModulationModeNV = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode) {
	_pre_call_vulkan_callback("vkCmdSetCoverageModulationModeNV",
	                          (GLADapiproc)glad_vkCmdSetCoverageModulationModeNV,
	                          2,
	                          commandBuffer,
	                          coverageModulationMode);
	glad_vkCmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetCoverageModulationModeNV",
	                           (GLADapiproc)glad_vkCmdSetCoverageModulationModeNV,
	                           2,
	                           commandBuffer,
	                           coverageModulationMode);
}
PFN_vkCmdSetCoverageModulationModeNV        glad_debug_vkCmdSetCoverageModulationModeNV = glad_debug_impl_vkCmdSetCoverageModulationModeNV;
PFN_vkCmdSetCoverageModulationTableEnableNV glad_vkCmdSetCoverageModulationTableEnableNV = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable) {
	_pre_call_vulkan_callback("vkCmdSetCoverageModulationTableEnableNV",
	                          (GLADapiproc)glad_vkCmdSetCoverageModulationTableEnableNV,
	                          2,
	                          commandBuffer,
	                          coverageModulationTableEnable);
	glad_vkCmdSetCoverageModulationTableEnableNV(commandBuffer, coverageModulationTableEnable);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetCoverageModulationTableEnableNV",
	                           (GLADapiproc)glad_vkCmdSetCoverageModulationTableEnableNV,
	                           2,
	                           commandBuffer,
	                           coverageModulationTableEnable);
}
PFN_vkCmdSetCoverageModulationTableEnableNV glad_debug_vkCmdSetCoverageModulationTableEnableNV = glad_debug_impl_vkCmdSetCoverageModulationTableEnableNV;
PFN_vkCmdSetCoverageModulationTableNV       glad_vkCmdSetCoverageModulationTableNV = NULL;
static void GLAD_API_PTR                    glad_debug_impl_vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer,
                                                                                              uint32_t        coverageModulationTableCount,
                                                                                              const float    *pCoverageModulationTable) {
        _pre_call_vulkan_callback("vkCmdSetCoverageModulationTableNV",
                                  (GLADapiproc)glad_vkCmdSetCoverageModulationTableNV,
                                  3,
                                  commandBuffer,
                                  coverageModulationTableCount,
                                  pCoverageModulationTable);
        glad_vkCmdSetCoverageModulationTableNV(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetCoverageModulationTableNV",
                                   (GLADapiproc)glad_vkCmdSetCoverageModulationTableNV,
                                   3,
                                   commandBuffer,
                                   coverageModulationTableCount,
                                   pCoverageModulationTable);
}
PFN_vkCmdSetCoverageModulationTableNV glad_debug_vkCmdSetCoverageModulationTableNV = glad_debug_impl_vkCmdSetCoverageModulationTableNV;
PFN_vkCmdSetCoverageReductionModeNV   glad_vkCmdSetCoverageReductionModeNV = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode) {
	_pre_call_vulkan_callback("vkCmdSetCoverageReductionModeNV",
	                          (GLADapiproc)glad_vkCmdSetCoverageReductionModeNV,
	                          2,
	                          commandBuffer,
	                          coverageReductionMode);
	glad_vkCmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetCoverageReductionModeNV",
	                           (GLADapiproc)glad_vkCmdSetCoverageReductionModeNV,
	                           2,
	                           commandBuffer,
	                           coverageReductionMode);
}
PFN_vkCmdSetCoverageReductionModeNV glad_debug_vkCmdSetCoverageReductionModeNV = glad_debug_impl_vkCmdSetCoverageReductionModeNV;
PFN_vkCmdSetCoverageToColorEnableNV glad_vkCmdSetCoverageToColorEnableNV = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable) {
        _pre_call_vulkan_callback("vkCmdSetCoverageToColorEnableNV",
                                  (GLADapiproc)glad_vkCmdSetCoverageToColorEnableNV,
                                  2,
                                  commandBuffer,
                                  coverageToColorEnable);
        glad_vkCmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetCoverageToColorEnableNV",
                                   (GLADapiproc)glad_vkCmdSetCoverageToColorEnableNV,
                                   2,
                                   commandBuffer,
                                   coverageToColorEnable);
}
PFN_vkCmdSetCoverageToColorEnableNV   glad_debug_vkCmdSetCoverageToColorEnableNV = glad_debug_impl_vkCmdSetCoverageToColorEnableNV;
PFN_vkCmdSetCoverageToColorLocationNV glad_vkCmdSetCoverageToColorLocationNV = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation) {
        _pre_call_vulkan_callback("vkCmdSetCoverageToColorLocationNV",
                                  (GLADapiproc)glad_vkCmdSetCoverageToColorLocationNV,
                                  2,
                                  commandBuffer,
                                  coverageToColorLocation);
        glad_vkCmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetCoverageToColorLocationNV",
                                   (GLADapiproc)glad_vkCmdSetCoverageToColorLocationNV,
                                   2,
                                   commandBuffer,
                                   coverageToColorLocation);
}
PFN_vkCmdSetCoverageToColorLocationNV glad_debug_vkCmdSetCoverageToColorLocationNV = glad_debug_impl_vkCmdSetCoverageToColorLocationNV;
PFN_vkCmdSetCullMode                  glad_vkCmdSetCullMode = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) {
        _pre_call_vulkan_callback("vkCmdSetCullMode", (GLADapiproc)glad_vkCmdSetCullMode, 2, commandBuffer, cullMode);
        glad_vkCmdSetCullMode(commandBuffer, cullMode);
        _post_call_vulkan_callback(NULL, "vkCmdSetCullMode", (GLADapiproc)glad_vkCmdSetCullMode, 2, commandBuffer, cullMode);
}
PFN_vkCmdSetCullMode     glad_debug_vkCmdSetCullMode = glad_debug_impl_vkCmdSetCullMode;
PFN_vkCmdSetCullModeEXT  glad_vkCmdSetCullModeEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) {
	_pre_call_vulkan_callback("vkCmdSetCullModeEXT", (GLADapiproc)glad_vkCmdSetCullModeEXT, 2, commandBuffer, cullMode);
	glad_vkCmdSetCullModeEXT(commandBuffer, cullMode);
	_post_call_vulkan_callback(NULL, "vkCmdSetCullModeEXT", (GLADapiproc)glad_vkCmdSetCullModeEXT, 2, commandBuffer, cullMode);
}
PFN_vkCmdSetCullModeEXT  glad_debug_vkCmdSetCullModeEXT = glad_debug_impl_vkCmdSetCullModeEXT;
PFN_vkCmdSetDepthBias    glad_vkCmdSetDepthBias = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetDepthBias(VkCommandBuffer commandBuffer,
                                                           float           depthBiasConstantFactor,
                                                           float           depthBiasClamp,
                                                           float           depthBiasSlopeFactor) {
	_pre_call_vulkan_callback("vkCmdSetDepthBias",
	                          (GLADapiproc)glad_vkCmdSetDepthBias,
	                          4,
	                          commandBuffer,
	                          depthBiasConstantFactor,
	                          depthBiasClamp,
	                          depthBiasSlopeFactor);
	glad_vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetDepthBias",
	                           (GLADapiproc)glad_vkCmdSetDepthBias,
	                           4,
	                           commandBuffer,
	                           depthBiasConstantFactor,
	                           depthBiasClamp,
	                           depthBiasSlopeFactor);
}
PFN_vkCmdSetDepthBias     glad_debug_vkCmdSetDepthBias = glad_debug_impl_vkCmdSetDepthBias;
PFN_vkCmdSetDepthBias2EXT glad_vkCmdSetDepthBias2EXT = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT *pDepthBiasInfo) {
        _pre_call_vulkan_callback("vkCmdSetDepthBias2EXT", (GLADapiproc)glad_vkCmdSetDepthBias2EXT, 2, commandBuffer, pDepthBiasInfo);
        glad_vkCmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthBias2EXT", (GLADapiproc)glad_vkCmdSetDepthBias2EXT, 2, commandBuffer, pDepthBiasInfo);
}
PFN_vkCmdSetDepthBias2EXT   glad_debug_vkCmdSetDepthBias2EXT = glad_debug_impl_vkCmdSetDepthBias2EXT;
PFN_vkCmdSetDepthBiasEnable glad_vkCmdSetDepthBiasEnable = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthBiasEnable", (GLADapiproc)glad_vkCmdSetDepthBiasEnable, 2, commandBuffer, depthBiasEnable);
        glad_vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthBiasEnable", (GLADapiproc)glad_vkCmdSetDepthBiasEnable, 2, commandBuffer, depthBiasEnable);
}
PFN_vkCmdSetDepthBiasEnable    glad_debug_vkCmdSetDepthBiasEnable = glad_debug_impl_vkCmdSetDepthBiasEnable;
PFN_vkCmdSetDepthBiasEnableEXT glad_vkCmdSetDepthBiasEnableEXT = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthBiasEnableEXT", (GLADapiproc)glad_vkCmdSetDepthBiasEnableEXT, 2, commandBuffer, depthBiasEnable);
        glad_vkCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthBiasEnableEXT", (GLADapiproc)glad_vkCmdSetDepthBiasEnableEXT, 2, commandBuffer, depthBiasEnable);
}
PFN_vkCmdSetDepthBiasEnableEXT glad_debug_vkCmdSetDepthBiasEnableEXT = glad_debug_impl_vkCmdSetDepthBiasEnableEXT;
PFN_vkCmdSetDepthBounds        glad_vkCmdSetDepthBounds = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) {
        _pre_call_vulkan_callback("vkCmdSetDepthBounds", (GLADapiproc)glad_vkCmdSetDepthBounds, 3, commandBuffer, minDepthBounds, maxDepthBounds);
        glad_vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthBounds", (GLADapiproc)glad_vkCmdSetDepthBounds, 3, commandBuffer, minDepthBounds, maxDepthBounds);
}
PFN_vkCmdSetDepthBounds           glad_debug_vkCmdSetDepthBounds = glad_debug_impl_vkCmdSetDepthBounds;
PFN_vkCmdSetDepthBoundsTestEnable glad_vkCmdSetDepthBoundsTestEnable = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthBoundsTestEnable", (GLADapiproc)glad_vkCmdSetDepthBoundsTestEnable, 2, commandBuffer, depthBoundsTestEnable);
        glad_vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetDepthBoundsTestEnable",
                                   (GLADapiproc)glad_vkCmdSetDepthBoundsTestEnable,
                                   2,
                                   commandBuffer,
                                   depthBoundsTestEnable);
}
PFN_vkCmdSetDepthBoundsTestEnable    glad_debug_vkCmdSetDepthBoundsTestEnable = glad_debug_impl_vkCmdSetDepthBoundsTestEnable;
PFN_vkCmdSetDepthBoundsTestEnableEXT glad_vkCmdSetDepthBoundsTestEnableEXT = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthBoundsTestEnableEXT",
                                  (GLADapiproc)glad_vkCmdSetDepthBoundsTestEnableEXT,
                                  2,
                                  commandBuffer,
                                  depthBoundsTestEnable);
        glad_vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetDepthBoundsTestEnableEXT",
                                   (GLADapiproc)glad_vkCmdSetDepthBoundsTestEnableEXT,
                                   2,
                                   commandBuffer,
                                   depthBoundsTestEnable);
}
PFN_vkCmdSetDepthBoundsTestEnableEXT glad_debug_vkCmdSetDepthBoundsTestEnableEXT = glad_debug_impl_vkCmdSetDepthBoundsTestEnableEXT;
PFN_vkCmdSetDepthClampEnableEXT      glad_vkCmdSetDepthClampEnableEXT = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthClampEnableEXT", (GLADapiproc)glad_vkCmdSetDepthClampEnableEXT, 2, commandBuffer, depthClampEnable);
        glad_vkCmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthClampEnableEXT", (GLADapiproc)glad_vkCmdSetDepthClampEnableEXT, 2, commandBuffer, depthClampEnable);
}
PFN_vkCmdSetDepthClampEnableEXT glad_debug_vkCmdSetDepthClampEnableEXT = glad_debug_impl_vkCmdSetDepthClampEnableEXT;
PFN_vkCmdSetDepthClipEnableEXT  glad_vkCmdSetDepthClipEnableEXT = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthClipEnableEXT", (GLADapiproc)glad_vkCmdSetDepthClipEnableEXT, 2, commandBuffer, depthClipEnable);
        glad_vkCmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthClipEnableEXT", (GLADapiproc)glad_vkCmdSetDepthClipEnableEXT, 2, commandBuffer, depthClipEnable);
}
PFN_vkCmdSetDepthClipEnableEXT           glad_debug_vkCmdSetDepthClipEnableEXT = glad_debug_impl_vkCmdSetDepthClipEnableEXT;
PFN_vkCmdSetDepthClipNegativeOneToOneEXT glad_vkCmdSetDepthClipNegativeOneToOneEXT = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne) {
        _pre_call_vulkan_callback("vkCmdSetDepthClipNegativeOneToOneEXT",
                                  (GLADapiproc)glad_vkCmdSetDepthClipNegativeOneToOneEXT,
                                  2,
                                  commandBuffer,
                                  negativeOneToOne);
        glad_vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetDepthClipNegativeOneToOneEXT",
                                   (GLADapiproc)glad_vkCmdSetDepthClipNegativeOneToOneEXT,
                                   2,
                                   commandBuffer,
                                   negativeOneToOne);
}
PFN_vkCmdSetDepthClipNegativeOneToOneEXT glad_debug_vkCmdSetDepthClipNegativeOneToOneEXT = glad_debug_impl_vkCmdSetDepthClipNegativeOneToOneEXT;
PFN_vkCmdSetDepthCompareOp               glad_vkCmdSetDepthCompareOp = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) {
        _pre_call_vulkan_callback("vkCmdSetDepthCompareOp", (GLADapiproc)glad_vkCmdSetDepthCompareOp, 2, commandBuffer, depthCompareOp);
        glad_vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthCompareOp", (GLADapiproc)glad_vkCmdSetDepthCompareOp, 2, commandBuffer, depthCompareOp);
}
PFN_vkCmdSetDepthCompareOp    glad_debug_vkCmdSetDepthCompareOp = glad_debug_impl_vkCmdSetDepthCompareOp;
PFN_vkCmdSetDepthCompareOpEXT glad_vkCmdSetDepthCompareOpEXT = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) {
        _pre_call_vulkan_callback("vkCmdSetDepthCompareOpEXT", (GLADapiproc)glad_vkCmdSetDepthCompareOpEXT, 2, commandBuffer, depthCompareOp);
        glad_vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthCompareOpEXT", (GLADapiproc)glad_vkCmdSetDepthCompareOpEXT, 2, commandBuffer, depthCompareOp);
}
PFN_vkCmdSetDepthCompareOpEXT glad_debug_vkCmdSetDepthCompareOpEXT = glad_debug_impl_vkCmdSetDepthCompareOpEXT;
PFN_vkCmdSetDepthTestEnable   glad_vkCmdSetDepthTestEnable = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthTestEnable", (GLADapiproc)glad_vkCmdSetDepthTestEnable, 2, commandBuffer, depthTestEnable);
        glad_vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthTestEnable", (GLADapiproc)glad_vkCmdSetDepthTestEnable, 2, commandBuffer, depthTestEnable);
}
PFN_vkCmdSetDepthTestEnable    glad_debug_vkCmdSetDepthTestEnable = glad_debug_impl_vkCmdSetDepthTestEnable;
PFN_vkCmdSetDepthTestEnableEXT glad_vkCmdSetDepthTestEnableEXT = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthTestEnableEXT", (GLADapiproc)glad_vkCmdSetDepthTestEnableEXT, 2, commandBuffer, depthTestEnable);
        glad_vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthTestEnableEXT", (GLADapiproc)glad_vkCmdSetDepthTestEnableEXT, 2, commandBuffer, depthTestEnable);
}
PFN_vkCmdSetDepthTestEnableEXT glad_debug_vkCmdSetDepthTestEnableEXT = glad_debug_impl_vkCmdSetDepthTestEnableEXT;
PFN_vkCmdSetDepthWriteEnable   glad_vkCmdSetDepthWriteEnable = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthWriteEnable", (GLADapiproc)glad_vkCmdSetDepthWriteEnable, 2, commandBuffer, depthWriteEnable);
        glad_vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthWriteEnable", (GLADapiproc)glad_vkCmdSetDepthWriteEnable, 2, commandBuffer, depthWriteEnable);
}
PFN_vkCmdSetDepthWriteEnable    glad_debug_vkCmdSetDepthWriteEnable = glad_debug_impl_vkCmdSetDepthWriteEnable;
PFN_vkCmdSetDepthWriteEnableEXT glad_vkCmdSetDepthWriteEnableEXT = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) {
        _pre_call_vulkan_callback("vkCmdSetDepthWriteEnableEXT", (GLADapiproc)glad_vkCmdSetDepthWriteEnableEXT, 2, commandBuffer, depthWriteEnable);
        glad_vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetDepthWriteEnableEXT", (GLADapiproc)glad_vkCmdSetDepthWriteEnableEXT, 2, commandBuffer, depthWriteEnable);
}
PFN_vkCmdSetDepthWriteEnableEXT        glad_debug_vkCmdSetDepthWriteEnableEXT = glad_debug_impl_vkCmdSetDepthWriteEnableEXT;
PFN_vkCmdSetDescriptorBufferOffsetsEXT glad_vkCmdSetDescriptorBufferOffsetsEXT = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer     commandBuffer,
                                                                                          VkPipelineBindPoint pipelineBindPoint,
                                                                                          VkPipelineLayout    layout,
                                                                                          uint32_t            firstSet,
                                                                                          uint32_t            setCount,
                                                                                          const uint32_t     *pBufferIndices,
                                                                                          const VkDeviceSize *pOffsets) {
        _pre_call_vulkan_callback("vkCmdSetDescriptorBufferOffsetsEXT",
                                  (GLADapiproc)glad_vkCmdSetDescriptorBufferOffsetsEXT,
                                  7,
                                  commandBuffer,
                                  pipelineBindPoint,
                                  layout,
                                  firstSet,
                                  setCount,
                                  pBufferIndices,
                                  pOffsets);
        glad_vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetDescriptorBufferOffsetsEXT",
                                   (GLADapiproc)glad_vkCmdSetDescriptorBufferOffsetsEXT,
                                   7,
                                   commandBuffer,
                                   pipelineBindPoint,
                                   layout,
                                   firstSet,
                                   setCount,
                                   pBufferIndices,
                                   pOffsets);
}
PFN_vkCmdSetDescriptorBufferOffsetsEXT glad_debug_vkCmdSetDescriptorBufferOffsetsEXT = glad_debug_impl_vkCmdSetDescriptorBufferOffsetsEXT;
PFN_vkCmdSetDeviceMask                 glad_vkCmdSetDeviceMask = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask) {
        _pre_call_vulkan_callback("vkCmdSetDeviceMask", (GLADapiproc)glad_vkCmdSetDeviceMask, 2, commandBuffer, deviceMask);
        glad_vkCmdSetDeviceMask(commandBuffer, deviceMask);
        _post_call_vulkan_callback(NULL, "vkCmdSetDeviceMask", (GLADapiproc)glad_vkCmdSetDeviceMask, 2, commandBuffer, deviceMask);
}
PFN_vkCmdSetDeviceMask    glad_debug_vkCmdSetDeviceMask = glad_debug_impl_vkCmdSetDeviceMask;
PFN_vkCmdSetDeviceMaskKHR glad_vkCmdSetDeviceMaskKHR = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask) {
        _pre_call_vulkan_callback("vkCmdSetDeviceMaskKHR", (GLADapiproc)glad_vkCmdSetDeviceMaskKHR, 2, commandBuffer, deviceMask);
        glad_vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
        _post_call_vulkan_callback(NULL, "vkCmdSetDeviceMaskKHR", (GLADapiproc)glad_vkCmdSetDeviceMaskKHR, 2, commandBuffer, deviceMask);
}
PFN_vkCmdSetDeviceMaskKHR       glad_debug_vkCmdSetDeviceMaskKHR = glad_debug_impl_vkCmdSetDeviceMaskKHR;
PFN_vkCmdSetDiscardRectangleEXT glad_vkCmdSetDiscardRectangleEXT = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer,
                                                                            uint32_t        firstDiscardRectangle,
                                                                            uint32_t        discardRectangleCount,
                                                                            const VkRect2D *pDiscardRectangles) {
        _pre_call_vulkan_callback("vkCmdSetDiscardRectangleEXT",
                                  (GLADapiproc)glad_vkCmdSetDiscardRectangleEXT,
                                  4,
                                  commandBuffer,
                                  firstDiscardRectangle,
                                  discardRectangleCount,
                                  pDiscardRectangles);
        glad_vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetDiscardRectangleEXT",
                                   (GLADapiproc)glad_vkCmdSetDiscardRectangleEXT,
                                   4,
                                   commandBuffer,
                                   firstDiscardRectangle,
                                   discardRectangleCount,
                                   pDiscardRectangles);
}
PFN_vkCmdSetDiscardRectangleEXT       glad_debug_vkCmdSetDiscardRectangleEXT = glad_debug_impl_vkCmdSetDiscardRectangleEXT;
PFN_vkCmdSetDiscardRectangleEnableEXT glad_vkCmdSetDiscardRectangleEnableEXT = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable) {
        _pre_call_vulkan_callback("vkCmdSetDiscardRectangleEnableEXT",
                                  (GLADapiproc)glad_vkCmdSetDiscardRectangleEnableEXT,
                                  2,
                                  commandBuffer,
                                  discardRectangleEnable);
        glad_vkCmdSetDiscardRectangleEnableEXT(commandBuffer, discardRectangleEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetDiscardRectangleEnableEXT",
                                   (GLADapiproc)glad_vkCmdSetDiscardRectangleEnableEXT,
                                   2,
                                   commandBuffer,
                                   discardRectangleEnable);
}
PFN_vkCmdSetDiscardRectangleEnableEXT glad_debug_vkCmdSetDiscardRectangleEnableEXT = glad_debug_impl_vkCmdSetDiscardRectangleEnableEXT;
PFN_vkCmdSetDiscardRectangleModeEXT   glad_vkCmdSetDiscardRectangleModeEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode) {
	_pre_call_vulkan_callback("vkCmdSetDiscardRectangleModeEXT", (GLADapiproc)glad_vkCmdSetDiscardRectangleModeEXT, 2, commandBuffer, discardRectangleMode);
	glad_vkCmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetDiscardRectangleModeEXT",
	                           (GLADapiproc)glad_vkCmdSetDiscardRectangleModeEXT,
	                           2,
	                           commandBuffer,
	                           discardRectangleMode);
}
PFN_vkCmdSetDiscardRectangleModeEXT glad_debug_vkCmdSetDiscardRectangleModeEXT = glad_debug_impl_vkCmdSetDiscardRectangleModeEXT;
PFN_vkCmdSetEvent                   glad_vkCmdSetEvent = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
        _pre_call_vulkan_callback("vkCmdSetEvent", (GLADapiproc)glad_vkCmdSetEvent, 3, commandBuffer, event, stageMask);
        glad_vkCmdSetEvent(commandBuffer, event, stageMask);
        _post_call_vulkan_callback(NULL, "vkCmdSetEvent", (GLADapiproc)glad_vkCmdSetEvent, 3, commandBuffer, event, stageMask);
}
PFN_vkCmdSetEvent        glad_debug_vkCmdSetEvent = glad_debug_impl_vkCmdSetEvent;
PFN_vkCmdSetEvent2       glad_vkCmdSetEvent2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo) {
	_pre_call_vulkan_callback("vkCmdSetEvent2", (GLADapiproc)glad_vkCmdSetEvent2, 3, commandBuffer, event, pDependencyInfo);
	glad_vkCmdSetEvent2(commandBuffer, event, pDependencyInfo);
	_post_call_vulkan_callback(NULL, "vkCmdSetEvent2", (GLADapiproc)glad_vkCmdSetEvent2, 3, commandBuffer, event, pDependencyInfo);
}
PFN_vkCmdSetEvent2       glad_debug_vkCmdSetEvent2 = glad_debug_impl_vkCmdSetEvent2;
PFN_vkCmdSetEvent2KHR    glad_vkCmdSetEvent2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo) {
	_pre_call_vulkan_callback("vkCmdSetEvent2KHR", (GLADapiproc)glad_vkCmdSetEvent2KHR, 3, commandBuffer, event, pDependencyInfo);
	glad_vkCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
	_post_call_vulkan_callback(NULL, "vkCmdSetEvent2KHR", (GLADapiproc)glad_vkCmdSetEvent2KHR, 3, commandBuffer, event, pDependencyInfo);
}
PFN_vkCmdSetEvent2KHR                glad_debug_vkCmdSetEvent2KHR = glad_debug_impl_vkCmdSetEvent2KHR;
PFN_vkCmdSetExclusiveScissorEnableNV glad_vkCmdSetExclusiveScissorEnableNV = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer,
                                                                                      uint32_t        firstExclusiveScissor,
                                                                                      uint32_t        exclusiveScissorCount,
                                                                                      const VkBool32 *pExclusiveScissorEnables) {
        _pre_call_vulkan_callback("vkCmdSetExclusiveScissorEnableNV",
                                  (GLADapiproc)glad_vkCmdSetExclusiveScissorEnableNV,
                                  4,
                                  commandBuffer,
                                  firstExclusiveScissor,
                                  exclusiveScissorCount,
                                  pExclusiveScissorEnables);
        glad_vkCmdSetExclusiveScissorEnableNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetExclusiveScissorEnableNV",
                                   (GLADapiproc)glad_vkCmdSetExclusiveScissorEnableNV,
                                   4,
                                   commandBuffer,
                                   firstExclusiveScissor,
                                   exclusiveScissorCount,
                                   pExclusiveScissorEnables);
}
PFN_vkCmdSetExclusiveScissorEnableNV glad_debug_vkCmdSetExclusiveScissorEnableNV = glad_debug_impl_vkCmdSetExclusiveScissorEnableNV;
PFN_vkCmdSetExclusiveScissorNV       glad_vkCmdSetExclusiveScissorNV = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer,
                                                                                uint32_t        firstExclusiveScissor,
                                                                                uint32_t        exclusiveScissorCount,
                                                                                const VkRect2D *pExclusiveScissors) {
        _pre_call_vulkan_callback("vkCmdSetExclusiveScissorNV",
                                  (GLADapiproc)glad_vkCmdSetExclusiveScissorNV,
                                  4,
                                  commandBuffer,
                                  firstExclusiveScissor,
                                  exclusiveScissorCount,
                                  pExclusiveScissors);
        glad_vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetExclusiveScissorNV",
                                   (GLADapiproc)glad_vkCmdSetExclusiveScissorNV,
                                   4,
                                   commandBuffer,
                                   firstExclusiveScissor,
                                   exclusiveScissorCount,
                                   pExclusiveScissors);
}
PFN_vkCmdSetExclusiveScissorNV                  glad_debug_vkCmdSetExclusiveScissorNV = glad_debug_impl_vkCmdSetExclusiveScissorNV;
PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT glad_vkCmdSetExtraPrimitiveOverestimationSizeEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize) {
	_pre_call_vulkan_callback("vkCmdSetExtraPrimitiveOverestimationSizeEXT",
	                          (GLADapiproc)glad_vkCmdSetExtraPrimitiveOverestimationSizeEXT,
	                          2,
	                          commandBuffer,
	                          extraPrimitiveOverestimationSize);
	glad_vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer, extraPrimitiveOverestimationSize);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetExtraPrimitiveOverestimationSizeEXT",
	                           (GLADapiproc)glad_vkCmdSetExtraPrimitiveOverestimationSizeEXT,
	                           2,
	                           commandBuffer,
	                           extraPrimitiveOverestimationSize);
}
PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT glad_debug_vkCmdSetExtraPrimitiveOverestimationSizeEXT =
	glad_debug_impl_vkCmdSetExtraPrimitiveOverestimationSizeEXT;
PFN_vkCmdSetFragmentShadingRateEnumNV glad_vkCmdSetFragmentShadingRateEnumNV = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer                          commandBuffer,
                                                                                        VkFragmentShadingRateNV                  shadingRate,
                                                                                        const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) {
        _pre_call_vulkan_callback("vkCmdSetFragmentShadingRateEnumNV",
                                  (GLADapiproc)glad_vkCmdSetFragmentShadingRateEnumNV,
                                  3,
                                  commandBuffer,
                                  shadingRate,
                                  combinerOps);
        glad_vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetFragmentShadingRateEnumNV",
                                   (GLADapiproc)glad_vkCmdSetFragmentShadingRateEnumNV,
                                   3,
                                   commandBuffer,
                                   shadingRate,
                                   combinerOps);
}
PFN_vkCmdSetFragmentShadingRateEnumNV glad_debug_vkCmdSetFragmentShadingRateEnumNV = glad_debug_impl_vkCmdSetFragmentShadingRateEnumNV;
PFN_vkCmdSetFragmentShadingRateKHR    glad_vkCmdSetFragmentShadingRateKHR = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdSetFragmentShadingRateKHR(VkCommandBuffer                          commandBuffer,
                                                                                     const VkExtent2D                        *pFragmentSize,
                                                                                     const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) {
        _pre_call_vulkan_callback("vkCmdSetFragmentShadingRateKHR",
                                  (GLADapiproc)glad_vkCmdSetFragmentShadingRateKHR,
                                  3,
                                  commandBuffer,
                                  pFragmentSize,
                                  combinerOps);
        glad_vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetFragmentShadingRateKHR",
                                   (GLADapiproc)glad_vkCmdSetFragmentShadingRateKHR,
                                   3,
                                   commandBuffer,
                                   pFragmentSize,
                                   combinerOps);
}
PFN_vkCmdSetFragmentShadingRateKHR glad_debug_vkCmdSetFragmentShadingRateKHR = glad_debug_impl_vkCmdSetFragmentShadingRateKHR;
PFN_vkCmdSetFrontFace              glad_vkCmdSetFrontFace = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace) {
        _pre_call_vulkan_callback("vkCmdSetFrontFace", (GLADapiproc)glad_vkCmdSetFrontFace, 2, commandBuffer, frontFace);
        glad_vkCmdSetFrontFace(commandBuffer, frontFace);
        _post_call_vulkan_callback(NULL, "vkCmdSetFrontFace", (GLADapiproc)glad_vkCmdSetFrontFace, 2, commandBuffer, frontFace);
}
PFN_vkCmdSetFrontFace    glad_debug_vkCmdSetFrontFace = glad_debug_impl_vkCmdSetFrontFace;
PFN_vkCmdSetFrontFaceEXT glad_vkCmdSetFrontFaceEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace) {
	_pre_call_vulkan_callback("vkCmdSetFrontFaceEXT", (GLADapiproc)glad_vkCmdSetFrontFaceEXT, 2, commandBuffer, frontFace);
	glad_vkCmdSetFrontFaceEXT(commandBuffer, frontFace);
	_post_call_vulkan_callback(NULL, "vkCmdSetFrontFaceEXT", (GLADapiproc)glad_vkCmdSetFrontFaceEXT, 2, commandBuffer, frontFace);
}
PFN_vkCmdSetFrontFaceEXT             glad_debug_vkCmdSetFrontFaceEXT = glad_debug_impl_vkCmdSetFrontFaceEXT;
PFN_vkCmdSetLineRasterizationModeEXT glad_vkCmdSetLineRasterizationModeEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode) {
	_pre_call_vulkan_callback("vkCmdSetLineRasterizationModeEXT",
	                          (GLADapiproc)glad_vkCmdSetLineRasterizationModeEXT,
	                          2,
	                          commandBuffer,
	                          lineRasterizationMode);
	glad_vkCmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetLineRasterizationModeEXT",
	                           (GLADapiproc)glad_vkCmdSetLineRasterizationModeEXT,
	                           2,
	                           commandBuffer,
	                           lineRasterizationMode);
}
PFN_vkCmdSetLineRasterizationModeEXT glad_debug_vkCmdSetLineRasterizationModeEXT = glad_debug_impl_vkCmdSetLineRasterizationModeEXT;
PFN_vkCmdSetLineStippleEXT           glad_vkCmdSetLineStippleEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) {
	_pre_call_vulkan_callback("vkCmdSetLineStippleEXT", (GLADapiproc)glad_vkCmdSetLineStippleEXT, 3, commandBuffer, lineStippleFactor, lineStipplePattern);
	glad_vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetLineStippleEXT",
	                           (GLADapiproc)glad_vkCmdSetLineStippleEXT,
	                           3,
	                           commandBuffer,
	                           lineStippleFactor,
	                           lineStipplePattern);
}
PFN_vkCmdSetLineStippleEXT       glad_debug_vkCmdSetLineStippleEXT = glad_debug_impl_vkCmdSetLineStippleEXT;
PFN_vkCmdSetLineStippleEnableEXT glad_vkCmdSetLineStippleEnableEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable) {
        _pre_call_vulkan_callback("vkCmdSetLineStippleEnableEXT", (GLADapiproc)glad_vkCmdSetLineStippleEnableEXT, 2, commandBuffer, stippledLineEnable);
        glad_vkCmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetLineStippleEnableEXT", (GLADapiproc)glad_vkCmdSetLineStippleEnableEXT, 2, commandBuffer, stippledLineEnable);
}
PFN_vkCmdSetLineStippleEnableEXT glad_debug_vkCmdSetLineStippleEnableEXT = glad_debug_impl_vkCmdSetLineStippleEnableEXT;
PFN_vkCmdSetLineWidth            glad_vkCmdSetLineWidth = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) {
        _pre_call_vulkan_callback("vkCmdSetLineWidth", (GLADapiproc)glad_vkCmdSetLineWidth, 2, commandBuffer, lineWidth);
        glad_vkCmdSetLineWidth(commandBuffer, lineWidth);
        _post_call_vulkan_callback(NULL, "vkCmdSetLineWidth", (GLADapiproc)glad_vkCmdSetLineWidth, 2, commandBuffer, lineWidth);
}
PFN_vkCmdSetLineWidth    glad_debug_vkCmdSetLineWidth = glad_debug_impl_vkCmdSetLineWidth;
PFN_vkCmdSetLogicOpEXT   glad_vkCmdSetLogicOpEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp) {
	_pre_call_vulkan_callback("vkCmdSetLogicOpEXT", (GLADapiproc)glad_vkCmdSetLogicOpEXT, 2, commandBuffer, logicOp);
	glad_vkCmdSetLogicOpEXT(commandBuffer, logicOp);
	_post_call_vulkan_callback(NULL, "vkCmdSetLogicOpEXT", (GLADapiproc)glad_vkCmdSetLogicOpEXT, 2, commandBuffer, logicOp);
}
PFN_vkCmdSetLogicOpEXT       glad_debug_vkCmdSetLogicOpEXT = glad_debug_impl_vkCmdSetLogicOpEXT;
PFN_vkCmdSetLogicOpEnableEXT glad_vkCmdSetLogicOpEnableEXT = NULL;
static void GLAD_API_PTR     glad_debug_impl_vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable) {
        _pre_call_vulkan_callback("vkCmdSetLogicOpEnableEXT", (GLADapiproc)glad_vkCmdSetLogicOpEnableEXT, 2, commandBuffer, logicOpEnable);
        glad_vkCmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetLogicOpEnableEXT", (GLADapiproc)glad_vkCmdSetLogicOpEnableEXT, 2, commandBuffer, logicOpEnable);
}
PFN_vkCmdSetLogicOpEnableEXT      glad_debug_vkCmdSetLogicOpEnableEXT = glad_debug_impl_vkCmdSetLogicOpEnableEXT;
PFN_vkCmdSetPatchControlPointsEXT glad_vkCmdSetPatchControlPointsEXT = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints) {
        _pre_call_vulkan_callback("vkCmdSetPatchControlPointsEXT", (GLADapiproc)glad_vkCmdSetPatchControlPointsEXT, 2, commandBuffer, patchControlPoints);
        glad_vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetPatchControlPointsEXT",
                                   (GLADapiproc)glad_vkCmdSetPatchControlPointsEXT,
                                   2,
                                   commandBuffer,
                                   patchControlPoints);
}
PFN_vkCmdSetPatchControlPointsEXT  glad_debug_vkCmdSetPatchControlPointsEXT = glad_debug_impl_vkCmdSetPatchControlPointsEXT;
PFN_vkCmdSetPerformanceMarkerINTEL glad_vkCmdSetPerformanceMarkerINTEL = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL *pMarkerInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCmdSetPerformanceMarkerINTEL", (GLADapiproc)glad_vkCmdSetPerformanceMarkerINTEL, 2, commandBuffer, pMarkerInfo);
	ret = glad_vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCmdSetPerformanceMarkerINTEL",
	                           (GLADapiproc)glad_vkCmdSetPerformanceMarkerINTEL,
	                           2,
	                           commandBuffer,
	                           pMarkerInfo);
	return ret;
}
PFN_vkCmdSetPerformanceMarkerINTEL   glad_debug_vkCmdSetPerformanceMarkerINTEL = glad_debug_impl_vkCmdSetPerformanceMarkerINTEL;
PFN_vkCmdSetPerformanceOverrideINTEL glad_vkCmdSetPerformanceOverrideINTEL = NULL;
static VkResult GLAD_API_PTR         glad_debug_impl_vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer                       commandBuffer,
                                                                                      const VkPerformanceOverrideInfoINTEL *pOverrideInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCmdSetPerformanceOverrideINTEL", (GLADapiproc)glad_vkCmdSetPerformanceOverrideINTEL, 2, commandBuffer, pOverrideInfo);
        ret = glad_vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCmdSetPerformanceOverrideINTEL",
                                   (GLADapiproc)glad_vkCmdSetPerformanceOverrideINTEL,
                                   2,
                                   commandBuffer,
                                   pOverrideInfo);
        return ret;
}
PFN_vkCmdSetPerformanceOverrideINTEL     glad_debug_vkCmdSetPerformanceOverrideINTEL = glad_debug_impl_vkCmdSetPerformanceOverrideINTEL;
PFN_vkCmdSetPerformanceStreamMarkerINTEL glad_vkCmdSetPerformanceStreamMarkerINTEL = NULL;
static VkResult GLAD_API_PTR             glad_debug_impl_vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer                           commandBuffer,
                                                                                              const VkPerformanceStreamMarkerInfoINTEL *pMarkerInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCmdSetPerformanceStreamMarkerINTEL",
                                  (GLADapiproc)glad_vkCmdSetPerformanceStreamMarkerINTEL,
                                  2,
                                  commandBuffer,
                                  pMarkerInfo);
        ret = glad_vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCmdSetPerformanceStreamMarkerINTEL",
                                   (GLADapiproc)glad_vkCmdSetPerformanceStreamMarkerINTEL,
                                   2,
                                   commandBuffer,
                                   pMarkerInfo);
        return ret;
}
PFN_vkCmdSetPerformanceStreamMarkerINTEL glad_debug_vkCmdSetPerformanceStreamMarkerINTEL = glad_debug_impl_vkCmdSetPerformanceStreamMarkerINTEL;
PFN_vkCmdSetPolygonModeEXT               glad_vkCmdSetPolygonModeEXT = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode) {
        _pre_call_vulkan_callback("vkCmdSetPolygonModeEXT", (GLADapiproc)glad_vkCmdSetPolygonModeEXT, 2, commandBuffer, polygonMode);
        glad_vkCmdSetPolygonModeEXT(commandBuffer, polygonMode);
        _post_call_vulkan_callback(NULL, "vkCmdSetPolygonModeEXT", (GLADapiproc)glad_vkCmdSetPolygonModeEXT, 2, commandBuffer, polygonMode);
}
PFN_vkCmdSetPolygonModeEXT         glad_debug_vkCmdSetPolygonModeEXT = glad_debug_impl_vkCmdSetPolygonModeEXT;
PFN_vkCmdSetPrimitiveRestartEnable glad_vkCmdSetPrimitiveRestartEnable = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) {
        _pre_call_vulkan_callback("vkCmdSetPrimitiveRestartEnable", (GLADapiproc)glad_vkCmdSetPrimitiveRestartEnable, 2, commandBuffer, primitiveRestartEnable);
        glad_vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetPrimitiveRestartEnable",
                                   (GLADapiproc)glad_vkCmdSetPrimitiveRestartEnable,
                                   2,
                                   commandBuffer,
                                   primitiveRestartEnable);
}
PFN_vkCmdSetPrimitiveRestartEnable    glad_debug_vkCmdSetPrimitiveRestartEnable = glad_debug_impl_vkCmdSetPrimitiveRestartEnable;
PFN_vkCmdSetPrimitiveRestartEnableEXT glad_vkCmdSetPrimitiveRestartEnableEXT = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) {
        _pre_call_vulkan_callback("vkCmdSetPrimitiveRestartEnableEXT",
                                  (GLADapiproc)glad_vkCmdSetPrimitiveRestartEnableEXT,
                                  2,
                                  commandBuffer,
                                  primitiveRestartEnable);
        glad_vkCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetPrimitiveRestartEnableEXT",
                                   (GLADapiproc)glad_vkCmdSetPrimitiveRestartEnableEXT,
                                   2,
                                   commandBuffer,
                                   primitiveRestartEnable);
}
PFN_vkCmdSetPrimitiveRestartEnableEXT glad_debug_vkCmdSetPrimitiveRestartEnableEXT = glad_debug_impl_vkCmdSetPrimitiveRestartEnableEXT;
PFN_vkCmdSetPrimitiveTopology         glad_vkCmdSetPrimitiveTopology = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) {
        _pre_call_vulkan_callback("vkCmdSetPrimitiveTopology", (GLADapiproc)glad_vkCmdSetPrimitiveTopology, 2, commandBuffer, primitiveTopology);
        glad_vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
        _post_call_vulkan_callback(NULL, "vkCmdSetPrimitiveTopology", (GLADapiproc)glad_vkCmdSetPrimitiveTopology, 2, commandBuffer, primitiveTopology);
}
PFN_vkCmdSetPrimitiveTopology    glad_debug_vkCmdSetPrimitiveTopology = glad_debug_impl_vkCmdSetPrimitiveTopology;
PFN_vkCmdSetPrimitiveTopologyEXT glad_vkCmdSetPrimitiveTopologyEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) {
        _pre_call_vulkan_callback("vkCmdSetPrimitiveTopologyEXT", (GLADapiproc)glad_vkCmdSetPrimitiveTopologyEXT, 2, commandBuffer, primitiveTopology);
        glad_vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
        _post_call_vulkan_callback(NULL, "vkCmdSetPrimitiveTopologyEXT", (GLADapiproc)glad_vkCmdSetPrimitiveTopologyEXT, 2, commandBuffer, primitiveTopology);
}
PFN_vkCmdSetPrimitiveTopologyEXT   glad_debug_vkCmdSetPrimitiveTopologyEXT = glad_debug_impl_vkCmdSetPrimitiveTopologyEXT;
PFN_vkCmdSetProvokingVertexModeEXT glad_vkCmdSetProvokingVertexModeEXT = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode) {
        _pre_call_vulkan_callback("vkCmdSetProvokingVertexModeEXT", (GLADapiproc)glad_vkCmdSetProvokingVertexModeEXT, 2, commandBuffer, provokingVertexMode);
        glad_vkCmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetProvokingVertexModeEXT",
                                   (GLADapiproc)glad_vkCmdSetProvokingVertexModeEXT,
                                   2,
                                   commandBuffer,
                                   provokingVertexMode);
}
PFN_vkCmdSetProvokingVertexModeEXT  glad_debug_vkCmdSetProvokingVertexModeEXT = glad_debug_impl_vkCmdSetProvokingVertexModeEXT;
PFN_vkCmdSetRasterizationSamplesEXT glad_vkCmdSetRasterizationSamplesEXT = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples) {
        _pre_call_vulkan_callback("vkCmdSetRasterizationSamplesEXT", (GLADapiproc)glad_vkCmdSetRasterizationSamplesEXT, 2, commandBuffer, rasterizationSamples);
        glad_vkCmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetRasterizationSamplesEXT",
                                   (GLADapiproc)glad_vkCmdSetRasterizationSamplesEXT,
                                   2,
                                   commandBuffer,
                                   rasterizationSamples);
}
PFN_vkCmdSetRasterizationSamplesEXT glad_debug_vkCmdSetRasterizationSamplesEXT = glad_debug_impl_vkCmdSetRasterizationSamplesEXT;
PFN_vkCmdSetRasterizationStreamEXT  glad_vkCmdSetRasterizationStreamEXT = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream) {
        _pre_call_vulkan_callback("vkCmdSetRasterizationStreamEXT", (GLADapiproc)glad_vkCmdSetRasterizationStreamEXT, 2, commandBuffer, rasterizationStream);
        glad_vkCmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetRasterizationStreamEXT",
                                   (GLADapiproc)glad_vkCmdSetRasterizationStreamEXT,
                                   2,
                                   commandBuffer,
                                   rasterizationStream);
}
PFN_vkCmdSetRasterizationStreamEXT  glad_debug_vkCmdSetRasterizationStreamEXT = glad_debug_impl_vkCmdSetRasterizationStreamEXT;
PFN_vkCmdSetRasterizerDiscardEnable glad_vkCmdSetRasterizerDiscardEnable = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) {
        _pre_call_vulkan_callback("vkCmdSetRasterizerDiscardEnable",
                                  (GLADapiproc)glad_vkCmdSetRasterizerDiscardEnable,
                                  2,
                                  commandBuffer,
                                  rasterizerDiscardEnable);
        glad_vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetRasterizerDiscardEnable",
                                   (GLADapiproc)glad_vkCmdSetRasterizerDiscardEnable,
                                   2,
                                   commandBuffer,
                                   rasterizerDiscardEnable);
}
PFN_vkCmdSetRasterizerDiscardEnable    glad_debug_vkCmdSetRasterizerDiscardEnable = glad_debug_impl_vkCmdSetRasterizerDiscardEnable;
PFN_vkCmdSetRasterizerDiscardEnableEXT glad_vkCmdSetRasterizerDiscardEnableEXT = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) {
        _pre_call_vulkan_callback("vkCmdSetRasterizerDiscardEnableEXT",
                                  (GLADapiproc)glad_vkCmdSetRasterizerDiscardEnableEXT,
                                  2,
                                  commandBuffer,
                                  rasterizerDiscardEnable);
        glad_vkCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetRasterizerDiscardEnableEXT",
                                   (GLADapiproc)glad_vkCmdSetRasterizerDiscardEnableEXT,
                                   2,
                                   commandBuffer,
                                   rasterizerDiscardEnable);
}
PFN_vkCmdSetRasterizerDiscardEnableEXT     glad_debug_vkCmdSetRasterizerDiscardEnableEXT = glad_debug_impl_vkCmdSetRasterizerDiscardEnableEXT;
PFN_vkCmdSetRayTracingPipelineStackSizeKHR glad_vkCmdSetRayTracingPipelineStackSizeKHR = NULL;
static void GLAD_API_PTR                   glad_debug_impl_vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize) {
        _pre_call_vulkan_callback("vkCmdSetRayTracingPipelineStackSizeKHR",
                                  (GLADapiproc)glad_vkCmdSetRayTracingPipelineStackSizeKHR,
                                  2,
                                  commandBuffer,
                                  pipelineStackSize);
        glad_vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetRayTracingPipelineStackSizeKHR",
                                   (GLADapiproc)glad_vkCmdSetRayTracingPipelineStackSizeKHR,
                                   2,
                                   commandBuffer,
                                   pipelineStackSize);
}
PFN_vkCmdSetRayTracingPipelineStackSizeKHR     glad_debug_vkCmdSetRayTracingPipelineStackSizeKHR = glad_debug_impl_vkCmdSetRayTracingPipelineStackSizeKHR;
PFN_vkCmdSetRepresentativeFragmentTestEnableNV glad_vkCmdSetRepresentativeFragmentTestEnableNV = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable) {
	_pre_call_vulkan_callback("vkCmdSetRepresentativeFragmentTestEnableNV",
	                          (GLADapiproc)glad_vkCmdSetRepresentativeFragmentTestEnableNV,
	                          2,
	                          commandBuffer,
	                          representativeFragmentTestEnable);
	glad_vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer, representativeFragmentTestEnable);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetRepresentativeFragmentTestEnableNV",
	                           (GLADapiproc)glad_vkCmdSetRepresentativeFragmentTestEnableNV,
	                           2,
	                           commandBuffer,
	                           representativeFragmentTestEnable);
}
PFN_vkCmdSetRepresentativeFragmentTestEnableNV glad_debug_vkCmdSetRepresentativeFragmentTestEnableNV =
	glad_debug_impl_vkCmdSetRepresentativeFragmentTestEnableNV;
PFN_vkCmdSetSampleLocationsEXT glad_vkCmdSetSampleLocationsEXT = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT *pSampleLocationsInfo) {
        _pre_call_vulkan_callback("vkCmdSetSampleLocationsEXT", (GLADapiproc)glad_vkCmdSetSampleLocationsEXT, 2, commandBuffer, pSampleLocationsInfo);
        glad_vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
        _post_call_vulkan_callback(NULL, "vkCmdSetSampleLocationsEXT", (GLADapiproc)glad_vkCmdSetSampleLocationsEXT, 2, commandBuffer, pSampleLocationsInfo);
}
PFN_vkCmdSetSampleLocationsEXT       glad_debug_vkCmdSetSampleLocationsEXT = glad_debug_impl_vkCmdSetSampleLocationsEXT;
PFN_vkCmdSetSampleLocationsEnableEXT glad_vkCmdSetSampleLocationsEnableEXT = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable) {
        _pre_call_vulkan_callback("vkCmdSetSampleLocationsEnableEXT",
                                  (GLADapiproc)glad_vkCmdSetSampleLocationsEnableEXT,
                                  2,
                                  commandBuffer,
                                  sampleLocationsEnable);
        glad_vkCmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetSampleLocationsEnableEXT",
                                   (GLADapiproc)glad_vkCmdSetSampleLocationsEnableEXT,
                                   2,
                                   commandBuffer,
                                   sampleLocationsEnable);
}
PFN_vkCmdSetSampleLocationsEnableEXT glad_debug_vkCmdSetSampleLocationsEnableEXT = glad_debug_impl_vkCmdSetSampleLocationsEnableEXT;
PFN_vkCmdSetSampleMaskEXT            glad_vkCmdSetSampleMaskEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask *pSampleMask) {
	_pre_call_vulkan_callback("vkCmdSetSampleMaskEXT", (GLADapiproc)glad_vkCmdSetSampleMaskEXT, 3, commandBuffer, samples, pSampleMask);
	glad_vkCmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);
	_post_call_vulkan_callback(NULL, "vkCmdSetSampleMaskEXT", (GLADapiproc)glad_vkCmdSetSampleMaskEXT, 3, commandBuffer, samples, pSampleMask);
}
PFN_vkCmdSetSampleMaskEXT glad_debug_vkCmdSetSampleMaskEXT = glad_debug_impl_vkCmdSetSampleMaskEXT;
PFN_vkCmdSetScissor       glad_vkCmdSetScissor = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkCmdSetScissor(VkCommandBuffer commandBuffer,
                                                          uint32_t        firstScissor,
                                                          uint32_t        scissorCount,
                                                          const VkRect2D *pScissors) {
        _pre_call_vulkan_callback("vkCmdSetScissor", (GLADapiproc)glad_vkCmdSetScissor, 4, commandBuffer, firstScissor, scissorCount, pScissors);
        glad_vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
        _post_call_vulkan_callback(NULL, "vkCmdSetScissor", (GLADapiproc)glad_vkCmdSetScissor, 4, commandBuffer, firstScissor, scissorCount, pScissors);
}
PFN_vkCmdSetScissor          glad_debug_vkCmdSetScissor = glad_debug_impl_vkCmdSetScissor;
PFN_vkCmdSetScissorWithCount glad_vkCmdSetScissorWithCount = NULL;
static void GLAD_API_PTR     glad_debug_impl_vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors) {
        _pre_call_vulkan_callback("vkCmdSetScissorWithCount", (GLADapiproc)glad_vkCmdSetScissorWithCount, 3, commandBuffer, scissorCount, pScissors);
        glad_vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);
        _post_call_vulkan_callback(NULL, "vkCmdSetScissorWithCount", (GLADapiproc)glad_vkCmdSetScissorWithCount, 3, commandBuffer, scissorCount, pScissors);
}
PFN_vkCmdSetScissorWithCount    glad_debug_vkCmdSetScissorWithCount = glad_debug_impl_vkCmdSetScissorWithCount;
PFN_vkCmdSetScissorWithCountEXT glad_vkCmdSetScissorWithCountEXT = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors) {
        _pre_call_vulkan_callback("vkCmdSetScissorWithCountEXT", (GLADapiproc)glad_vkCmdSetScissorWithCountEXT, 3, commandBuffer, scissorCount, pScissors);
        glad_vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetScissorWithCountEXT",
                                   (GLADapiproc)glad_vkCmdSetScissorWithCountEXT,
                                   3,
                                   commandBuffer,
                                   scissorCount,
                                   pScissors);
}
PFN_vkCmdSetScissorWithCountEXT      glad_debug_vkCmdSetScissorWithCountEXT = glad_debug_impl_vkCmdSetScissorWithCountEXT;
PFN_vkCmdSetShadingRateImageEnableNV glad_vkCmdSetShadingRateImageEnableNV = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable) {
        _pre_call_vulkan_callback("vkCmdSetShadingRateImageEnableNV",
                                  (GLADapiproc)glad_vkCmdSetShadingRateImageEnableNV,
                                  2,
                                  commandBuffer,
                                  shadingRateImageEnable);
        glad_vkCmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetShadingRateImageEnableNV",
                                   (GLADapiproc)glad_vkCmdSetShadingRateImageEnableNV,
                                   2,
                                   commandBuffer,
                                   shadingRateImageEnable);
}
PFN_vkCmdSetShadingRateImageEnableNV glad_debug_vkCmdSetShadingRateImageEnableNV = glad_debug_impl_vkCmdSetShadingRateImageEnableNV;
PFN_vkCmdSetStencilCompareMask       glad_vkCmdSetStencilCompareMask = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) {
	_pre_call_vulkan_callback("vkCmdSetStencilCompareMask", (GLADapiproc)glad_vkCmdSetStencilCompareMask, 3, commandBuffer, faceMask, compareMask);
	glad_vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
	_post_call_vulkan_callback(NULL, "vkCmdSetStencilCompareMask", (GLADapiproc)glad_vkCmdSetStencilCompareMask, 3, commandBuffer, faceMask, compareMask);
}
PFN_vkCmdSetStencilCompareMask glad_debug_vkCmdSetStencilCompareMask = glad_debug_impl_vkCmdSetStencilCompareMask;
PFN_vkCmdSetStencilOp          glad_vkCmdSetStencilOp = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdSetStencilOp(VkCommandBuffer    commandBuffer,
                                                                 VkStencilFaceFlags faceMask,
                                                                 VkStencilOp        failOp,
                                                                 VkStencilOp        passOp,
                                                                 VkStencilOp        depthFailOp,
                                                                 VkCompareOp        compareOp) {
        _pre_call_vulkan_callback("vkCmdSetStencilOp", (GLADapiproc)glad_vkCmdSetStencilOp, 6, commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
        glad_vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetStencilOp",
                                   (GLADapiproc)glad_vkCmdSetStencilOp,
                                   6,
                                   commandBuffer,
                                   faceMask,
                                   failOp,
                                   passOp,
                                   depthFailOp,
                                   compareOp);
}
PFN_vkCmdSetStencilOp    glad_debug_vkCmdSetStencilOp = glad_debug_impl_vkCmdSetStencilOp;
PFN_vkCmdSetStencilOpEXT glad_vkCmdSetStencilOpEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetStencilOpEXT(VkCommandBuffer    commandBuffer,
                                                              VkStencilFaceFlags faceMask,
                                                              VkStencilOp        failOp,
                                                              VkStencilOp        passOp,
                                                              VkStencilOp        depthFailOp,
                                                              VkCompareOp        compareOp) {
	_pre_call_vulkan_callback("vkCmdSetStencilOpEXT",
	                          (GLADapiproc)glad_vkCmdSetStencilOpEXT,
	                          6,
	                          commandBuffer,
	                          faceMask,
	                          failOp,
	                          passOp,
	                          depthFailOp,
	                          compareOp);
	glad_vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetStencilOpEXT",
	                           (GLADapiproc)glad_vkCmdSetStencilOpEXT,
	                           6,
	                           commandBuffer,
	                           faceMask,
	                           failOp,
	                           passOp,
	                           depthFailOp,
	                           compareOp);
}
PFN_vkCmdSetStencilOpEXT     glad_debug_vkCmdSetStencilOpEXT = glad_debug_impl_vkCmdSetStencilOpEXT;
PFN_vkCmdSetStencilReference glad_vkCmdSetStencilReference = NULL;
static void GLAD_API_PTR     glad_debug_impl_vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) {
        _pre_call_vulkan_callback("vkCmdSetStencilReference", (GLADapiproc)glad_vkCmdSetStencilReference, 3, commandBuffer, faceMask, reference);
        glad_vkCmdSetStencilReference(commandBuffer, faceMask, reference);
        _post_call_vulkan_callback(NULL, "vkCmdSetStencilReference", (GLADapiproc)glad_vkCmdSetStencilReference, 3, commandBuffer, faceMask, reference);
}
PFN_vkCmdSetStencilReference  glad_debug_vkCmdSetStencilReference = glad_debug_impl_vkCmdSetStencilReference;
PFN_vkCmdSetStencilTestEnable glad_vkCmdSetStencilTestEnable = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) {
        _pre_call_vulkan_callback("vkCmdSetStencilTestEnable", (GLADapiproc)glad_vkCmdSetStencilTestEnable, 2, commandBuffer, stencilTestEnable);
        glad_vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetStencilTestEnable", (GLADapiproc)glad_vkCmdSetStencilTestEnable, 2, commandBuffer, stencilTestEnable);
}
PFN_vkCmdSetStencilTestEnable    glad_debug_vkCmdSetStencilTestEnable = glad_debug_impl_vkCmdSetStencilTestEnable;
PFN_vkCmdSetStencilTestEnableEXT glad_vkCmdSetStencilTestEnableEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) {
        _pre_call_vulkan_callback("vkCmdSetStencilTestEnableEXT", (GLADapiproc)glad_vkCmdSetStencilTestEnableEXT, 2, commandBuffer, stencilTestEnable);
        glad_vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
        _post_call_vulkan_callback(NULL, "vkCmdSetStencilTestEnableEXT", (GLADapiproc)glad_vkCmdSetStencilTestEnableEXT, 2, commandBuffer, stencilTestEnable);
}
PFN_vkCmdSetStencilTestEnableEXT glad_debug_vkCmdSetStencilTestEnableEXT = glad_debug_impl_vkCmdSetStencilTestEnableEXT;
PFN_vkCmdSetStencilWriteMask     glad_vkCmdSetStencilWriteMask = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) {
        _pre_call_vulkan_callback("vkCmdSetStencilWriteMask", (GLADapiproc)glad_vkCmdSetStencilWriteMask, 3, commandBuffer, faceMask, writeMask);
        glad_vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
        _post_call_vulkan_callback(NULL, "vkCmdSetStencilWriteMask", (GLADapiproc)glad_vkCmdSetStencilWriteMask, 3, commandBuffer, faceMask, writeMask);
}
PFN_vkCmdSetStencilWriteMask            glad_debug_vkCmdSetStencilWriteMask = glad_debug_impl_vkCmdSetStencilWriteMask;
PFN_vkCmdSetTessellationDomainOriginEXT glad_vkCmdSetTessellationDomainOriginEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin) {
	_pre_call_vulkan_callback("vkCmdSetTessellationDomainOriginEXT", (GLADapiproc)glad_vkCmdSetTessellationDomainOriginEXT, 2, commandBuffer, domainOrigin);
	glad_vkCmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetTessellationDomainOriginEXT",
	                           (GLADapiproc)glad_vkCmdSetTessellationDomainOriginEXT,
	                           2,
	                           commandBuffer,
	                           domainOrigin);
}
PFN_vkCmdSetTessellationDomainOriginEXT glad_debug_vkCmdSetTessellationDomainOriginEXT = glad_debug_impl_vkCmdSetTessellationDomainOriginEXT;
PFN_vkCmdSetVertexInputEXT              glad_vkCmdSetVertexInputEXT = NULL;
static void GLAD_API_PTR                glad_debug_impl_vkCmdSetVertexInputEXT(VkCommandBuffer                              commandBuffer,
                                                                               uint32_t                                     vertexBindingDescriptionCount,
                                                                               const VkVertexInputBindingDescription2EXT   *pVertexBindingDescriptions,
                                                                               uint32_t                                     vertexAttributeDescriptionCount,
                                                                               const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions) {
        _pre_call_vulkan_callback("vkCmdSetVertexInputEXT",
                                  (GLADapiproc)glad_vkCmdSetVertexInputEXT,
                                  5,
                                  commandBuffer,
                                  vertexBindingDescriptionCount,
                                  pVertexBindingDescriptions,
                                  vertexAttributeDescriptionCount,
                                  pVertexAttributeDescriptions);
        glad_vkCmdSetVertexInputEXT(commandBuffer,
                                    vertexBindingDescriptionCount,
                                    pVertexBindingDescriptions,
                                    vertexAttributeDescriptionCount,
                                    pVertexAttributeDescriptions);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetVertexInputEXT",
                                   (GLADapiproc)glad_vkCmdSetVertexInputEXT,
                                   5,
                                   commandBuffer,
                                   vertexBindingDescriptionCount,
                                   pVertexBindingDescriptions,
                                   vertexAttributeDescriptionCount,
                                   pVertexAttributeDescriptions);
}
PFN_vkCmdSetVertexInputEXT glad_debug_vkCmdSetVertexInputEXT = glad_debug_impl_vkCmdSetVertexInputEXT;
PFN_vkCmdSetViewport       glad_vkCmdSetViewport = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkCmdSetViewport(VkCommandBuffer   commandBuffer,
                                                            uint32_t          firstViewport,
                                                            uint32_t          viewportCount,
                                                            const VkViewport *pViewports) {
        _pre_call_vulkan_callback("vkCmdSetViewport", (GLADapiproc)glad_vkCmdSetViewport, 4, commandBuffer, firstViewport, viewportCount, pViewports);
        glad_vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
        _post_call_vulkan_callback(NULL, "vkCmdSetViewport", (GLADapiproc)glad_vkCmdSetViewport, 4, commandBuffer, firstViewport, viewportCount, pViewports);
}
PFN_vkCmdSetViewport                     glad_debug_vkCmdSetViewport = glad_debug_impl_vkCmdSetViewport;
PFN_vkCmdSetViewportShadingRatePaletteNV glad_vkCmdSetViewportShadingRatePaletteNV = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer               commandBuffer,
                                                                                              uint32_t                      firstViewport,
                                                                                              uint32_t                      viewportCount,
                                                                                              const VkShadingRatePaletteNV *pShadingRatePalettes) {
        _pre_call_vulkan_callback("vkCmdSetViewportShadingRatePaletteNV",
                                  (GLADapiproc)glad_vkCmdSetViewportShadingRatePaletteNV,
                                  4,
                                  commandBuffer,
                                  firstViewport,
                                  viewportCount,
                                  pShadingRatePalettes);
        glad_vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetViewportShadingRatePaletteNV",
                                   (GLADapiproc)glad_vkCmdSetViewportShadingRatePaletteNV,
                                   4,
                                   commandBuffer,
                                   firstViewport,
                                   viewportCount,
                                   pShadingRatePalettes);
}
PFN_vkCmdSetViewportShadingRatePaletteNV glad_debug_vkCmdSetViewportShadingRatePaletteNV = glad_debug_impl_vkCmdSetViewportShadingRatePaletteNV;
PFN_vkCmdSetViewportSwizzleNV            glad_vkCmdSetViewportSwizzleNV = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkCmdSetViewportSwizzleNV(VkCommandBuffer            commandBuffer,
                                                                                   uint32_t                   firstViewport,
                                                                                   uint32_t                   viewportCount,
                                                                                   const VkViewportSwizzleNV *pViewportSwizzles) {
        _pre_call_vulkan_callback("vkCmdSetViewportSwizzleNV",
                                  (GLADapiproc)glad_vkCmdSetViewportSwizzleNV,
                                  4,
                                  commandBuffer,
                                  firstViewport,
                                  viewportCount,
                                  pViewportSwizzles);
        glad_vkCmdSetViewportSwizzleNV(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetViewportSwizzleNV",
                                   (GLADapiproc)glad_vkCmdSetViewportSwizzleNV,
                                   4,
                                   commandBuffer,
                                   firstViewport,
                                   viewportCount,
                                   pViewportSwizzles);
}
PFN_vkCmdSetViewportSwizzleNV        glad_debug_vkCmdSetViewportSwizzleNV = glad_debug_impl_vkCmdSetViewportSwizzleNV;
PFN_vkCmdSetViewportWScalingEnableNV glad_vkCmdSetViewportWScalingEnableNV = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable) {
        _pre_call_vulkan_callback("vkCmdSetViewportWScalingEnableNV",
                                  (GLADapiproc)glad_vkCmdSetViewportWScalingEnableNV,
                                  2,
                                  commandBuffer,
                                  viewportWScalingEnable);
        glad_vkCmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetViewportWScalingEnableNV",
                                   (GLADapiproc)glad_vkCmdSetViewportWScalingEnableNV,
                                   2,
                                   commandBuffer,
                                   viewportWScalingEnable);
}
PFN_vkCmdSetViewportWScalingEnableNV glad_debug_vkCmdSetViewportWScalingEnableNV = glad_debug_impl_vkCmdSetViewportWScalingEnableNV;
PFN_vkCmdSetViewportWScalingNV       glad_vkCmdSetViewportWScalingNV = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdSetViewportWScalingNV(VkCommandBuffer             commandBuffer,
                                                                                uint32_t                    firstViewport,
                                                                                uint32_t                    viewportCount,
                                                                                const VkViewportWScalingNV *pViewportWScalings) {
        _pre_call_vulkan_callback("vkCmdSetViewportWScalingNV",
                                  (GLADapiproc)glad_vkCmdSetViewportWScalingNV,
                                  4,
                                  commandBuffer,
                                  firstViewport,
                                  viewportCount,
                                  pViewportWScalings);
        glad_vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdSetViewportWScalingNV",
                                   (GLADapiproc)glad_vkCmdSetViewportWScalingNV,
                                   4,
                                   commandBuffer,
                                   firstViewport,
                                   viewportCount,
                                   pViewportWScalings);
}
PFN_vkCmdSetViewportWScalingNV glad_debug_vkCmdSetViewportWScalingNV = glad_debug_impl_vkCmdSetViewportWScalingNV;
PFN_vkCmdSetViewportWithCount  glad_vkCmdSetViewportWithCount = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports) {
        _pre_call_vulkan_callback("vkCmdSetViewportWithCount", (GLADapiproc)glad_vkCmdSetViewportWithCount, 3, commandBuffer, viewportCount, pViewports);
        glad_vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);
        _post_call_vulkan_callback(NULL, "vkCmdSetViewportWithCount", (GLADapiproc)glad_vkCmdSetViewportWithCount, 3, commandBuffer, viewportCount, pViewports);
}
PFN_vkCmdSetViewportWithCount    glad_debug_vkCmdSetViewportWithCount = glad_debug_impl_vkCmdSetViewportWithCount;
PFN_vkCmdSetViewportWithCountEXT glad_vkCmdSetViewportWithCountEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports) {
	_pre_call_vulkan_callback("vkCmdSetViewportWithCountEXT", (GLADapiproc)glad_vkCmdSetViewportWithCountEXT, 3, commandBuffer, viewportCount, pViewports);
	glad_vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdSetViewportWithCountEXT",
	                           (GLADapiproc)glad_vkCmdSetViewportWithCountEXT,
	                           3,
	                           commandBuffer,
	                           viewportCount,
	                           pViewports);
}
PFN_vkCmdSetViewportWithCountEXT glad_debug_vkCmdSetViewportWithCountEXT = glad_debug_impl_vkCmdSetViewportWithCountEXT;
PFN_vkCmdSubpassShadingHUAWEI    glad_vkCmdSubpassShadingHUAWEI = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer) {
        _pre_call_vulkan_callback("vkCmdSubpassShadingHUAWEI", (GLADapiproc)glad_vkCmdSubpassShadingHUAWEI, 1, commandBuffer);
        glad_vkCmdSubpassShadingHUAWEI(commandBuffer);
        _post_call_vulkan_callback(NULL, "vkCmdSubpassShadingHUAWEI", (GLADapiproc)glad_vkCmdSubpassShadingHUAWEI, 1, commandBuffer);
}
PFN_vkCmdSubpassShadingHUAWEI  glad_debug_vkCmdSubpassShadingHUAWEI = glad_debug_impl_vkCmdSubpassShadingHUAWEI;
PFN_vkCmdTraceRaysIndirect2KHR glad_vkCmdTraceRaysIndirect2KHR = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress) {
        _pre_call_vulkan_callback("vkCmdTraceRaysIndirect2KHR", (GLADapiproc)glad_vkCmdTraceRaysIndirect2KHR, 2, commandBuffer, indirectDeviceAddress);
        glad_vkCmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);
        _post_call_vulkan_callback(NULL, "vkCmdTraceRaysIndirect2KHR", (GLADapiproc)glad_vkCmdTraceRaysIndirect2KHR, 2, commandBuffer, indirectDeviceAddress);
}
PFN_vkCmdTraceRaysIndirect2KHR glad_debug_vkCmdTraceRaysIndirect2KHR = glad_debug_impl_vkCmdTraceRaysIndirect2KHR;
PFN_vkCmdTraceRaysIndirectKHR  glad_vkCmdTraceRaysIndirectKHR = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdTraceRaysIndirectKHR(VkCommandBuffer                        commandBuffer,
                                                                         const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable,
                                                                         const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable,
                                                                         const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable,
                                                                         const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable,
                                                                         VkDeviceAddress                        indirectDeviceAddress) {
        _pre_call_vulkan_callback("vkCmdTraceRaysIndirectKHR",
                                  (GLADapiproc)glad_vkCmdTraceRaysIndirectKHR,
                                  6,
                                  commandBuffer,
                                  pRaygenShaderBindingTable,
                                  pMissShaderBindingTable,
                                  pHitShaderBindingTable,
                                  pCallableShaderBindingTable,
                                  indirectDeviceAddress);
        glad_vkCmdTraceRaysIndirectKHR(commandBuffer,
                                       pRaygenShaderBindingTable,
                                       pMissShaderBindingTable,
                                       pHitShaderBindingTable,
                                       pCallableShaderBindingTable,
                                       indirectDeviceAddress);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdTraceRaysIndirectKHR",
                                   (GLADapiproc)glad_vkCmdTraceRaysIndirectKHR,
                                   6,
                                   commandBuffer,
                                   pRaygenShaderBindingTable,
                                   pMissShaderBindingTable,
                                   pHitShaderBindingTable,
                                   pCallableShaderBindingTable,
                                   indirectDeviceAddress);
}
PFN_vkCmdTraceRaysIndirectKHR glad_debug_vkCmdTraceRaysIndirectKHR = glad_debug_impl_vkCmdTraceRaysIndirectKHR;
PFN_vkCmdTraceRaysKHR         glad_vkCmdTraceRaysKHR = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkCmdTraceRaysKHR(VkCommandBuffer                        commandBuffer,
                                                                const VkStridedDeviceAddressRegionKHR *pRaygenShaderBindingTable,
                                                                const VkStridedDeviceAddressRegionKHR *pMissShaderBindingTable,
                                                                const VkStridedDeviceAddressRegionKHR *pHitShaderBindingTable,
                                                                const VkStridedDeviceAddressRegionKHR *pCallableShaderBindingTable,
                                                                uint32_t                               width,
                                                                uint32_t                               height,
                                                                uint32_t                               depth) {
        _pre_call_vulkan_callback("vkCmdTraceRaysKHR",
                                  (GLADapiproc)glad_vkCmdTraceRaysKHR,
                                  8,
                                  commandBuffer,
                                  pRaygenShaderBindingTable,
                                  pMissShaderBindingTable,
                                  pHitShaderBindingTable,
                                  pCallableShaderBindingTable,
                                  width,
                                  height,
                                  depth);
        glad_vkCmdTraceRaysKHR(commandBuffer,
                               pRaygenShaderBindingTable,
                               pMissShaderBindingTable,
                               pHitShaderBindingTable,
                               pCallableShaderBindingTable,
                               width,
                               height,
                               depth);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdTraceRaysKHR",
                                   (GLADapiproc)glad_vkCmdTraceRaysKHR,
                                   8,
                                   commandBuffer,
                                   pRaygenShaderBindingTable,
                                   pMissShaderBindingTable,
                                   pHitShaderBindingTable,
                                   pCallableShaderBindingTable,
                                   width,
                                   height,
                                   depth);
}
PFN_vkCmdTraceRaysKHR    glad_debug_vkCmdTraceRaysKHR = glad_debug_impl_vkCmdTraceRaysKHR;
PFN_vkCmdTraceRaysNV     glad_vkCmdTraceRaysNV = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdTraceRaysNV(VkCommandBuffer commandBuffer,
                                                          VkBuffer        raygenShaderBindingTableBuffer,
                                                          VkDeviceSize    raygenShaderBindingOffset,
                                                          VkBuffer        missShaderBindingTableBuffer,
                                                          VkDeviceSize    missShaderBindingOffset,
                                                          VkDeviceSize    missShaderBindingStride,
                                                          VkBuffer        hitShaderBindingTableBuffer,
                                                          VkDeviceSize    hitShaderBindingOffset,
                                                          VkDeviceSize    hitShaderBindingStride,
                                                          VkBuffer        callableShaderBindingTableBuffer,
                                                          VkDeviceSize    callableShaderBindingOffset,
                                                          VkDeviceSize    callableShaderBindingStride,
                                                          uint32_t        width,
                                                          uint32_t        height,
                                                          uint32_t        depth) {
	_pre_call_vulkan_callback("vkCmdTraceRaysNV",
	                          (GLADapiproc)glad_vkCmdTraceRaysNV,
	                          15,
	                          commandBuffer,
	                          raygenShaderBindingTableBuffer,
	                          raygenShaderBindingOffset,
	                          missShaderBindingTableBuffer,
	                          missShaderBindingOffset,
	                          missShaderBindingStride,
	                          hitShaderBindingTableBuffer,
	                          hitShaderBindingOffset,
	                          hitShaderBindingStride,
	                          callableShaderBindingTableBuffer,
	                          callableShaderBindingOffset,
	                          callableShaderBindingStride,
	                          width,
	                          height,
	                          depth);
	glad_vkCmdTraceRaysNV(commandBuffer,
	                      raygenShaderBindingTableBuffer,
	                      raygenShaderBindingOffset,
	                      missShaderBindingTableBuffer,
	                      missShaderBindingOffset,
	                      missShaderBindingStride,
	                      hitShaderBindingTableBuffer,
	                      hitShaderBindingOffset,
	                      hitShaderBindingStride,
	                      callableShaderBindingTableBuffer,
	                      callableShaderBindingOffset,
	                      callableShaderBindingStride,
	                      width,
	                      height,
	                      depth);
	_post_call_vulkan_callback(NULL,
	                           "vkCmdTraceRaysNV",
	                           (GLADapiproc)glad_vkCmdTraceRaysNV,
	                           15,
	                           commandBuffer,
	                           raygenShaderBindingTableBuffer,
	                           raygenShaderBindingOffset,
	                           missShaderBindingTableBuffer,
	                           missShaderBindingOffset,
	                           missShaderBindingStride,
	                           hitShaderBindingTableBuffer,
	                           hitShaderBindingOffset,
	                           hitShaderBindingStride,
	                           callableShaderBindingTableBuffer,
	                           callableShaderBindingOffset,
	                           callableShaderBindingStride,
	                           width,
	                           height,
	                           depth);
}
PFN_vkCmdTraceRaysNV  glad_debug_vkCmdTraceRaysNV = glad_debug_impl_vkCmdTraceRaysNV;
PFN_vkCmdUpdateBuffer glad_vkCmdUpdateBuffer = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void *pData) {
	_pre_call_vulkan_callback("vkCmdUpdateBuffer", (GLADapiproc)glad_vkCmdUpdateBuffer, 5, commandBuffer, dstBuffer, dstOffset, dataSize, pData);
	glad_vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
	_post_call_vulkan_callback(NULL, "vkCmdUpdateBuffer", (GLADapiproc)glad_vkCmdUpdateBuffer, 5, commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}
PFN_vkCmdUpdateBuffer                   glad_debug_vkCmdUpdateBuffer = glad_debug_impl_vkCmdUpdateBuffer;
PFN_vkCmdUpdatePipelineIndirectBufferNV glad_vkCmdUpdatePipelineIndirectBufferNV = NULL;
static void GLAD_API_PTR                glad_debug_impl_vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer     commandBuffer,
                                                                                            VkPipelineBindPoint pipelineBindPoint,
                                                                                            VkPipeline          pipeline) {
        _pre_call_vulkan_callback("vkCmdUpdatePipelineIndirectBufferNV",
                                  (GLADapiproc)glad_vkCmdUpdatePipelineIndirectBufferNV,
                                  3,
                                  commandBuffer,
                                  pipelineBindPoint,
                                  pipeline);
        glad_vkCmdUpdatePipelineIndirectBufferNV(commandBuffer, pipelineBindPoint, pipeline);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdUpdatePipelineIndirectBufferNV",
                                   (GLADapiproc)glad_vkCmdUpdatePipelineIndirectBufferNV,
                                   3,
                                   commandBuffer,
                                   pipelineBindPoint,
                                   pipeline);
}
PFN_vkCmdUpdatePipelineIndirectBufferNV glad_debug_vkCmdUpdatePipelineIndirectBufferNV = glad_debug_impl_vkCmdUpdatePipelineIndirectBufferNV;
PFN_vkCmdWaitEvents                     glad_vkCmdWaitEvents = NULL;
static void GLAD_API_PTR                glad_debug_impl_vkCmdWaitEvents(VkCommandBuffer              commandBuffer,
                                                                        uint32_t                     eventCount,
                                                                        const VkEvent               *pEvents,
                                                                        VkPipelineStageFlags         srcStageMask,
                                                                        VkPipelineStageFlags         dstStageMask,
                                                                        uint32_t                     memoryBarrierCount,
                                                                        const VkMemoryBarrier       *pMemoryBarriers,
                                                                        uint32_t                     bufferMemoryBarrierCount,
                                                                        const VkBufferMemoryBarrier *pBufferMemoryBarriers,
                                                                        uint32_t                     imageMemoryBarrierCount,
                                                                        const VkImageMemoryBarrier  *pImageMemoryBarriers) {
        _pre_call_vulkan_callback("vkCmdWaitEvents",
                                  (GLADapiproc)glad_vkCmdWaitEvents,
                                  11,
                                  commandBuffer,
                                  eventCount,
                                  pEvents,
                                  srcStageMask,
                                  dstStageMask,
                                  memoryBarrierCount,
                                  pMemoryBarriers,
                                  bufferMemoryBarrierCount,
                                  pBufferMemoryBarriers,
                                  imageMemoryBarrierCount,
                                  pImageMemoryBarriers);
        glad_vkCmdWaitEvents(commandBuffer,
                             eventCount,
                             pEvents,
                             srcStageMask,
                             dstStageMask,
                             memoryBarrierCount,
                             pMemoryBarriers,
                             bufferMemoryBarrierCount,
                             pBufferMemoryBarriers,
                             imageMemoryBarrierCount,
                             pImageMemoryBarriers);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdWaitEvents",
                                   (GLADapiproc)glad_vkCmdWaitEvents,
                                   11,
                                   commandBuffer,
                                   eventCount,
                                   pEvents,
                                   srcStageMask,
                                   dstStageMask,
                                   memoryBarrierCount,
                                   pMemoryBarriers,
                                   bufferMemoryBarrierCount,
                                   pBufferMemoryBarriers,
                                   imageMemoryBarrierCount,
                                   pImageMemoryBarriers);
}
PFN_vkCmdWaitEvents      glad_debug_vkCmdWaitEvents = glad_debug_impl_vkCmdWaitEvents;
PFN_vkCmdWaitEvents2     glad_vkCmdWaitEvents2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdWaitEvents2(VkCommandBuffer         commandBuffer,
                                                          uint32_t                eventCount,
                                                          const VkEvent          *pEvents,
                                                          const VkDependencyInfo *pDependencyInfos) {
	_pre_call_vulkan_callback("vkCmdWaitEvents2", (GLADapiproc)glad_vkCmdWaitEvents2, 4, commandBuffer, eventCount, pEvents, pDependencyInfos);
	glad_vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);
	_post_call_vulkan_callback(NULL, "vkCmdWaitEvents2", (GLADapiproc)glad_vkCmdWaitEvents2, 4, commandBuffer, eventCount, pEvents, pDependencyInfos);
}
PFN_vkCmdWaitEvents2     glad_debug_vkCmdWaitEvents2 = glad_debug_impl_vkCmdWaitEvents2;
PFN_vkCmdWaitEvents2KHR  glad_vkCmdWaitEvents2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdWaitEvents2KHR(VkCommandBuffer         commandBuffer,
                                                             uint32_t                eventCount,
                                                             const VkEvent          *pEvents,
                                                             const VkDependencyInfo *pDependencyInfos) {
	_pre_call_vulkan_callback("vkCmdWaitEvents2KHR", (GLADapiproc)glad_vkCmdWaitEvents2KHR, 4, commandBuffer, eventCount, pEvents, pDependencyInfos);
	glad_vkCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
	_post_call_vulkan_callback(NULL, "vkCmdWaitEvents2KHR", (GLADapiproc)glad_vkCmdWaitEvents2KHR, 4, commandBuffer, eventCount, pEvents, pDependencyInfos);
}
PFN_vkCmdWaitEvents2KHR                           glad_debug_vkCmdWaitEvents2KHR = glad_debug_impl_vkCmdWaitEvents2KHR;
PFN_vkCmdWriteAccelerationStructuresPropertiesKHR glad_vkCmdWriteAccelerationStructuresPropertiesKHR = NULL;
static void GLAD_API_PTR                          glad_debug_impl_vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer                   commandBuffer,
                                                                                                                uint32_t                          accelerationStructureCount,
                                                                                                                const VkAccelerationStructureKHR *pAccelerationStructures,
                                                                                                                VkQueryType                       queryType,
                                                                                                                VkQueryPool                       queryPool,
                                                                                                                uint32_t                          firstQuery) {
        _pre_call_vulkan_callback("vkCmdWriteAccelerationStructuresPropertiesKHR",
                                  (GLADapiproc)glad_vkCmdWriteAccelerationStructuresPropertiesKHR,
                                  6,
                                  commandBuffer,
                                  accelerationStructureCount,
                                  pAccelerationStructures,
                                  queryType,
                                  queryPool,
                                  firstQuery);
        glad_vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer,
                                                           accelerationStructureCount,
                                                           pAccelerationStructures,
                                                           queryType,
                                                           queryPool,
                                                           firstQuery);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdWriteAccelerationStructuresPropertiesKHR",
                                   (GLADapiproc)glad_vkCmdWriteAccelerationStructuresPropertiesKHR,
                                   6,
                                   commandBuffer,
                                   accelerationStructureCount,
                                   pAccelerationStructures,
                                   queryType,
                                   queryPool,
                                   firstQuery);
}
PFN_vkCmdWriteAccelerationStructuresPropertiesKHR glad_debug_vkCmdWriteAccelerationStructuresPropertiesKHR =
	glad_debug_impl_vkCmdWriteAccelerationStructuresPropertiesKHR;
PFN_vkCmdWriteAccelerationStructuresPropertiesNV glad_vkCmdWriteAccelerationStructuresPropertiesNV = NULL;
static void GLAD_API_PTR                         glad_debug_impl_vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer                  commandBuffer,
                                                                                                              uint32_t                         accelerationStructureCount,
                                                                                                              const VkAccelerationStructureNV *pAccelerationStructures,
                                                                                                              VkQueryType                      queryType,
                                                                                                              VkQueryPool                      queryPool,
                                                                                                              uint32_t                         firstQuery) {
        _pre_call_vulkan_callback("vkCmdWriteAccelerationStructuresPropertiesNV",
                                  (GLADapiproc)glad_vkCmdWriteAccelerationStructuresPropertiesNV,
                                  6,
                                  commandBuffer,
                                  accelerationStructureCount,
                                  pAccelerationStructures,
                                  queryType,
                                  queryPool,
                                  firstQuery);
        glad_vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdWriteAccelerationStructuresPropertiesNV",
                                   (GLADapiproc)glad_vkCmdWriteAccelerationStructuresPropertiesNV,
                                   6,
                                   commandBuffer,
                                   accelerationStructureCount,
                                   pAccelerationStructures,
                                   queryType,
                                   queryPool,
                                   firstQuery);
}
PFN_vkCmdWriteAccelerationStructuresPropertiesNV glad_debug_vkCmdWriteAccelerationStructuresPropertiesNV =
	glad_debug_impl_vkCmdWriteAccelerationStructuresPropertiesNV;
PFN_vkCmdWriteBufferMarker2AMD glad_vkCmdWriteBufferMarker2AMD = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdWriteBufferMarker2AMD(VkCommandBuffer       commandBuffer,
                                                                          VkPipelineStageFlags2 stage,
                                                                          VkBuffer              dstBuffer,
                                                                          VkDeviceSize          dstOffset,
                                                                          uint32_t              marker) {
        _pre_call_vulkan_callback("vkCmdWriteBufferMarker2AMD",
                                  (GLADapiproc)glad_vkCmdWriteBufferMarker2AMD,
                                  5,
                                  commandBuffer,
                                  stage,
                                  dstBuffer,
                                  dstOffset,
                                  marker);
        glad_vkCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdWriteBufferMarker2AMD",
                                   (GLADapiproc)glad_vkCmdWriteBufferMarker2AMD,
                                   5,
                                   commandBuffer,
                                   stage,
                                   dstBuffer,
                                   dstOffset,
                                   marker);
}
PFN_vkCmdWriteBufferMarker2AMD glad_debug_vkCmdWriteBufferMarker2AMD = glad_debug_impl_vkCmdWriteBufferMarker2AMD;
PFN_vkCmdWriteBufferMarkerAMD  glad_vkCmdWriteBufferMarkerAMD = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkCmdWriteBufferMarkerAMD(VkCommandBuffer         commandBuffer,
                                                                         VkPipelineStageFlagBits pipelineStage,
                                                                         VkBuffer                dstBuffer,
                                                                         VkDeviceSize            dstOffset,
                                                                         uint32_t                marker) {
        _pre_call_vulkan_callback("vkCmdWriteBufferMarkerAMD",
                                  (GLADapiproc)glad_vkCmdWriteBufferMarkerAMD,
                                  5,
                                  commandBuffer,
                                  pipelineStage,
                                  dstBuffer,
                                  dstOffset,
                                  marker);
        glad_vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdWriteBufferMarkerAMD",
                                   (GLADapiproc)glad_vkCmdWriteBufferMarkerAMD,
                                   5,
                                   commandBuffer,
                                   pipelineStage,
                                   dstBuffer,
                                   dstOffset,
                                   marker);
}
PFN_vkCmdWriteBufferMarkerAMD        glad_debug_vkCmdWriteBufferMarkerAMD = glad_debug_impl_vkCmdWriteBufferMarkerAMD;
PFN_vkCmdWriteMicromapsPropertiesEXT glad_vkCmdWriteMicromapsPropertiesEXT = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer      commandBuffer,
                                                                                      uint32_t             micromapCount,
                                                                                      const VkMicromapEXT *pMicromaps,
                                                                                      VkQueryType          queryType,
                                                                                      VkQueryPool          queryPool,
                                                                                      uint32_t             firstQuery) {
        _pre_call_vulkan_callback("vkCmdWriteMicromapsPropertiesEXT",
                                  (GLADapiproc)glad_vkCmdWriteMicromapsPropertiesEXT,
                                  6,
                                  commandBuffer,
                                  micromapCount,
                                  pMicromaps,
                                  queryType,
                                  queryPool,
                                  firstQuery);
        glad_vkCmdWriteMicromapsPropertiesEXT(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
        _post_call_vulkan_callback(NULL,
                                   "vkCmdWriteMicromapsPropertiesEXT",
                                   (GLADapiproc)glad_vkCmdWriteMicromapsPropertiesEXT,
                                   6,
                                   commandBuffer,
                                   micromapCount,
                                   pMicromaps,
                                   queryType,
                                   queryPool,
                                   firstQuery);
}
PFN_vkCmdWriteMicromapsPropertiesEXT glad_debug_vkCmdWriteMicromapsPropertiesEXT = glad_debug_impl_vkCmdWriteMicromapsPropertiesEXT;
PFN_vkCmdWriteTimestamp              glad_vkCmdWriteTimestamp = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkCmdWriteTimestamp(VkCommandBuffer         commandBuffer,
                                                                         VkPipelineStageFlagBits pipelineStage,
                                                                         VkQueryPool             queryPool,
                                                                         uint32_t                query) {
        _pre_call_vulkan_callback("vkCmdWriteTimestamp", (GLADapiproc)glad_vkCmdWriteTimestamp, 4, commandBuffer, pipelineStage, queryPool, query);
        glad_vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
        _post_call_vulkan_callback(NULL, "vkCmdWriteTimestamp", (GLADapiproc)glad_vkCmdWriteTimestamp, 4, commandBuffer, pipelineStage, queryPool, query);
}
PFN_vkCmdWriteTimestamp  glad_debug_vkCmdWriteTimestamp = glad_debug_impl_vkCmdWriteTimestamp;
PFN_vkCmdWriteTimestamp2 glad_vkCmdWriteTimestamp2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkCmdWriteTimestamp2(VkCommandBuffer       commandBuffer,
                                                              VkPipelineStageFlags2 stage,
                                                              VkQueryPool           queryPool,
                                                              uint32_t              query) {
	_pre_call_vulkan_callback("vkCmdWriteTimestamp2", (GLADapiproc)glad_vkCmdWriteTimestamp2, 4, commandBuffer, stage, queryPool, query);
	glad_vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
	_post_call_vulkan_callback(NULL, "vkCmdWriteTimestamp2", (GLADapiproc)glad_vkCmdWriteTimestamp2, 4, commandBuffer, stage, queryPool, query);
}
PFN_vkCmdWriteTimestamp2    glad_debug_vkCmdWriteTimestamp2 = glad_debug_impl_vkCmdWriteTimestamp2;
PFN_vkCmdWriteTimestamp2KHR glad_vkCmdWriteTimestamp2KHR = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkCmdWriteTimestamp2KHR(VkCommandBuffer       commandBuffer,
                                                                    VkPipelineStageFlags2 stage,
                                                                    VkQueryPool           queryPool,
                                                                    uint32_t              query) {
        _pre_call_vulkan_callback("vkCmdWriteTimestamp2KHR", (GLADapiproc)glad_vkCmdWriteTimestamp2KHR, 4, commandBuffer, stage, queryPool, query);
        glad_vkCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
        _post_call_vulkan_callback(NULL, "vkCmdWriteTimestamp2KHR", (GLADapiproc)glad_vkCmdWriteTimestamp2KHR, 4, commandBuffer, stage, queryPool, query);
}
PFN_vkCmdWriteTimestamp2KHR  glad_debug_vkCmdWriteTimestamp2KHR = glad_debug_impl_vkCmdWriteTimestamp2KHR;
PFN_vkCompileDeferredNV      glad_vkCompileDeferredNV = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCompileDeferredNV", (GLADapiproc)glad_vkCompileDeferredNV, 3, device, pipeline, shader);
	ret = glad_vkCompileDeferredNV(device, pipeline, shader);
	_post_call_vulkan_callback((void *)&ret, "vkCompileDeferredNV", (GLADapiproc)glad_vkCompileDeferredNV, 3, device, pipeline, shader);
	return ret;
}
PFN_vkCompileDeferredNV            glad_debug_vkCompileDeferredNV = glad_debug_impl_vkCompileDeferredNV;
PFN_vkCopyAccelerationStructureKHR glad_vkCopyAccelerationStructureKHR = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkCopyAccelerationStructureKHR(VkDevice                                  device,
                                                                                  VkDeferredOperationKHR                    deferredOperation,
                                                                                  const VkCopyAccelerationStructureInfoKHR *pInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCopyAccelerationStructureKHR", (GLADapiproc)glad_vkCopyAccelerationStructureKHR, 3, device, deferredOperation, pInfo);
        ret = glad_vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCopyAccelerationStructureKHR",
                                   (GLADapiproc)glad_vkCopyAccelerationStructureKHR,
                                   3,
                                   device,
                                   deferredOperation,
                                   pInfo);
        return ret;
}
PFN_vkCopyAccelerationStructureKHR         glad_debug_vkCopyAccelerationStructureKHR = glad_debug_impl_vkCopyAccelerationStructureKHR;
PFN_vkCopyAccelerationStructureToMemoryKHR glad_vkCopyAccelerationStructureToMemoryKHR = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkCopyAccelerationStructureToMemoryKHR(VkDevice                                          device,
                                                                                                  VkDeferredOperationKHR                            deferredOperation,
                                                                                                  const VkCopyAccelerationStructureToMemoryInfoKHR *pInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCopyAccelerationStructureToMemoryKHR",
                                  (GLADapiproc)glad_vkCopyAccelerationStructureToMemoryKHR,
                                  3,
                                  device,
                                  deferredOperation,
                                  pInfo);
        ret = glad_vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCopyAccelerationStructureToMemoryKHR",
                                   (GLADapiproc)glad_vkCopyAccelerationStructureToMemoryKHR,
                                   3,
                                   device,
                                   deferredOperation,
                                   pInfo);
        return ret;
}
PFN_vkCopyAccelerationStructureToMemoryKHR glad_debug_vkCopyAccelerationStructureToMemoryKHR = glad_debug_impl_vkCopyAccelerationStructureToMemoryKHR;
PFN_vkCopyImageToImageEXT                  glad_vkCopyImageToImageEXT = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT *pCopyImageToImageInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCopyImageToImageEXT", (GLADapiproc)glad_vkCopyImageToImageEXT, 2, device, pCopyImageToImageInfo);
        ret = glad_vkCopyImageToImageEXT(device, pCopyImageToImageInfo);
        _post_call_vulkan_callback((void *)&ret, "vkCopyImageToImageEXT", (GLADapiproc)glad_vkCopyImageToImageEXT, 2, device, pCopyImageToImageInfo);
        return ret;
}
PFN_vkCopyImageToImageEXT    glad_debug_vkCopyImageToImageEXT = glad_debug_impl_vkCopyImageToImageEXT;
PFN_vkCopyImageToMemoryEXT   glad_vkCopyImageToMemoryEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfoEXT *pCopyImageToMemoryInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCopyImageToMemoryEXT", (GLADapiproc)glad_vkCopyImageToMemoryEXT, 2, device, pCopyImageToMemoryInfo);
	ret = glad_vkCopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);
	_post_call_vulkan_callback((void *)&ret, "vkCopyImageToMemoryEXT", (GLADapiproc)glad_vkCopyImageToMemoryEXT, 2, device, pCopyImageToMemoryInfo);
	return ret;
}
PFN_vkCopyImageToMemoryEXT                 glad_debug_vkCopyImageToMemoryEXT = glad_debug_impl_vkCopyImageToMemoryEXT;
PFN_vkCopyMemoryToAccelerationStructureKHR glad_vkCopyMemoryToAccelerationStructureKHR = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkCopyMemoryToAccelerationStructureKHR(VkDevice                                          device,
                                                                                                  VkDeferredOperationKHR                            deferredOperation,
                                                                                                  const VkCopyMemoryToAccelerationStructureInfoKHR *pInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCopyMemoryToAccelerationStructureKHR",
                                  (GLADapiproc)glad_vkCopyMemoryToAccelerationStructureKHR,
                                  3,
                                  device,
                                  deferredOperation,
                                  pInfo);
        ret = glad_vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCopyMemoryToAccelerationStructureKHR",
                                   (GLADapiproc)glad_vkCopyMemoryToAccelerationStructureKHR,
                                   3,
                                   device,
                                   deferredOperation,
                                   pInfo);
        return ret;
}
PFN_vkCopyMemoryToAccelerationStructureKHR glad_debug_vkCopyMemoryToAccelerationStructureKHR = glad_debug_impl_vkCopyMemoryToAccelerationStructureKHR;
PFN_vkCopyMemoryToImageEXT                 glad_vkCopyMemoryToImageEXT = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfoEXT *pCopyMemoryToImageInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCopyMemoryToImageEXT", (GLADapiproc)glad_vkCopyMemoryToImageEXT, 2, device, pCopyMemoryToImageInfo);
        ret = glad_vkCopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);
        _post_call_vulkan_callback((void *)&ret, "vkCopyMemoryToImageEXT", (GLADapiproc)glad_vkCopyMemoryToImageEXT, 2, device, pCopyMemoryToImageInfo);
        return ret;
}
PFN_vkCopyMemoryToImageEXT    glad_debug_vkCopyMemoryToImageEXT = glad_debug_impl_vkCopyMemoryToImageEXT;
PFN_vkCopyMemoryToMicromapEXT glad_vkCopyMemoryToMicromapEXT = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkCopyMemoryToMicromapEXT(VkDevice                             device,
                                                                        VkDeferredOperationKHR               deferredOperation,
                                                                        const VkCopyMemoryToMicromapInfoEXT *pInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCopyMemoryToMicromapEXT", (GLADapiproc)glad_vkCopyMemoryToMicromapEXT, 3, device, deferredOperation, pInfo);
        ret = glad_vkCopyMemoryToMicromapEXT(device, deferredOperation, pInfo);
        _post_call_vulkan_callback((void *)&ret, "vkCopyMemoryToMicromapEXT", (GLADapiproc)glad_vkCopyMemoryToMicromapEXT, 3, device, deferredOperation, pInfo);
        return ret;
}
PFN_vkCopyMemoryToMicromapEXT glad_debug_vkCopyMemoryToMicromapEXT = glad_debug_impl_vkCopyMemoryToMicromapEXT;
PFN_vkCopyMicromapEXT         glad_vkCopyMicromapEXT = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT *pInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCopyMicromapEXT", (GLADapiproc)glad_vkCopyMicromapEXT, 3, device, deferredOperation, pInfo);
        ret = glad_vkCopyMicromapEXT(device, deferredOperation, pInfo);
        _post_call_vulkan_callback((void *)&ret, "vkCopyMicromapEXT", (GLADapiproc)glad_vkCopyMicromapEXT, 3, device, deferredOperation, pInfo);
        return ret;
}
PFN_vkCopyMicromapEXT         glad_debug_vkCopyMicromapEXT = glad_debug_impl_vkCopyMicromapEXT;
PFN_vkCopyMicromapToMemoryEXT glad_vkCopyMicromapToMemoryEXT = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkCopyMicromapToMemoryEXT(VkDevice                             device,
                                                                        VkDeferredOperationKHR               deferredOperation,
                                                                        const VkCopyMicromapToMemoryInfoEXT *pInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCopyMicromapToMemoryEXT", (GLADapiproc)glad_vkCopyMicromapToMemoryEXT, 3, device, deferredOperation, pInfo);
        ret = glad_vkCopyMicromapToMemoryEXT(device, deferredOperation, pInfo);
        _post_call_vulkan_callback((void *)&ret, "vkCopyMicromapToMemoryEXT", (GLADapiproc)glad_vkCopyMicromapToMemoryEXT, 3, device, deferredOperation, pInfo);
        return ret;
}
PFN_vkCopyMicromapToMemoryEXT        glad_debug_vkCopyMicromapToMemoryEXT = glad_debug_impl_vkCopyMicromapToMemoryEXT;
PFN_vkCreateAccelerationStructureKHR glad_vkCreateAccelerationStructureKHR = NULL;
static VkResult GLAD_API_PTR         glad_debug_impl_vkCreateAccelerationStructureKHR(VkDevice                                    device,
                                                                                      const VkAccelerationStructureCreateInfoKHR *pCreateInfo,
                                                                                      const VkAllocationCallbacks                *pAllocator,
                                                                                      VkAccelerationStructureKHR                 *pAccelerationStructure) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateAccelerationStructureKHR",
                                  (GLADapiproc)glad_vkCreateAccelerationStructureKHR,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pAccelerationStructure);
        ret = glad_vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateAccelerationStructureKHR",
                                   (GLADapiproc)glad_vkCreateAccelerationStructureKHR,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pAccelerationStructure);
        return ret;
}
PFN_vkCreateAccelerationStructureKHR glad_debug_vkCreateAccelerationStructureKHR = glad_debug_impl_vkCreateAccelerationStructureKHR;
PFN_vkCreateAccelerationStructureNV  glad_vkCreateAccelerationStructureNV = NULL;
static VkResult GLAD_API_PTR         glad_debug_impl_vkCreateAccelerationStructureNV(VkDevice                                   device,
                                                                                     const VkAccelerationStructureCreateInfoNV *pCreateInfo,
                                                                                     const VkAllocationCallbacks               *pAllocator,
                                                                                     VkAccelerationStructureNV                 *pAccelerationStructure) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateAccelerationStructureNV",
                                  (GLADapiproc)glad_vkCreateAccelerationStructureNV,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pAccelerationStructure);
        ret = glad_vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateAccelerationStructureNV",
                                   (GLADapiproc)glad_vkCreateAccelerationStructureNV,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pAccelerationStructure);
        return ret;
}
PFN_vkCreateAccelerationStructureNV glad_debug_vkCreateAccelerationStructureNV = glad_debug_impl_vkCreateAccelerationStructureNV;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
PFN_vkCreateAndroidSurfaceKHR glad_vkCreateAndroidSurfaceKHR = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkCreateAndroidSurfaceKHR(VkInstance                           instance,
                                                                        const VkAndroidSurfaceCreateInfoKHR *pCreateInfo,
                                                                        const VkAllocationCallbacks         *pAllocator,
                                                                        VkSurfaceKHR                        *pSurface) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateAndroidSurfaceKHR", (GLADapiproc)glad_vkCreateAndroidSurfaceKHR, 4, instance, pCreateInfo, pAllocator, pSurface);
        ret = glad_vkCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateAndroidSurfaceKHR",
                                   (GLADapiproc)glad_vkCreateAndroidSurfaceKHR,
                                   4,
                                   instance,
                                   pCreateInfo,
                                   pAllocator,
                                   pSurface);
        return ret;
}
PFN_vkCreateAndroidSurfaceKHR glad_debug_vkCreateAndroidSurfaceKHR = glad_debug_impl_vkCreateAndroidSurfaceKHR;

#endif
PFN_vkCreateBuffer           glad_vkCreateBuffer = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateBuffer(VkDevice                     device,
                                                            const VkBufferCreateInfo    *pCreateInfo,
                                                            const VkAllocationCallbacks *pAllocator,
                                                            VkBuffer                    *pBuffer) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateBuffer", (GLADapiproc)glad_vkCreateBuffer, 4, device, pCreateInfo, pAllocator, pBuffer);
	ret = glad_vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
	_post_call_vulkan_callback((void *)&ret, "vkCreateBuffer", (GLADapiproc)glad_vkCreateBuffer, 4, device, pCreateInfo, pAllocator, pBuffer);
	return ret;
}
PFN_vkCreateBuffer glad_debug_vkCreateBuffer = glad_debug_impl_vkCreateBuffer;
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkCreateBufferCollectionFUCHSIA glad_vkCreateBufferCollectionFUCHSIA = NULL;
static VkResult GLAD_API_PTR        glad_debug_impl_vkCreateBufferCollectionFUCHSIA(VkDevice                                   device,
                                                                                    const VkBufferCollectionCreateInfoFUCHSIA *pCreateInfo,
                                                                                    const VkAllocationCallbacks               *pAllocator,
                                                                                    VkBufferCollectionFUCHSIA                 *pCollection) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateBufferCollectionFUCHSIA",
                                  (GLADapiproc)glad_vkCreateBufferCollectionFUCHSIA,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pCollection);
        ret = glad_vkCreateBufferCollectionFUCHSIA(device, pCreateInfo, pAllocator, pCollection);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateBufferCollectionFUCHSIA",
                                   (GLADapiproc)glad_vkCreateBufferCollectionFUCHSIA,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pCollection);
        return ret;
}
PFN_vkCreateBufferCollectionFUCHSIA glad_debug_vkCreateBufferCollectionFUCHSIA = glad_debug_impl_vkCreateBufferCollectionFUCHSIA;

#endif
PFN_vkCreateBufferView       glad_vkCreateBufferView = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateBufferView(VkDevice                      device,
                                                                const VkBufferViewCreateInfo *pCreateInfo,
                                                                const VkAllocationCallbacks  *pAllocator,
                                                                VkBufferView                 *pView) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateBufferView", (GLADapiproc)glad_vkCreateBufferView, 4, device, pCreateInfo, pAllocator, pView);
	ret = glad_vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
	_post_call_vulkan_callback((void *)&ret, "vkCreateBufferView", (GLADapiproc)glad_vkCreateBufferView, 4, device, pCreateInfo, pAllocator, pView);
	return ret;
}
PFN_vkCreateBufferView       glad_debug_vkCreateBufferView = glad_debug_impl_vkCreateBufferView;
PFN_vkCreateCommandPool      glad_vkCreateCommandPool = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateCommandPool(VkDevice                       device,
                                                                 const VkCommandPoolCreateInfo *pCreateInfo,
                                                                 const VkAllocationCallbacks   *pAllocator,
                                                                 VkCommandPool                 *pCommandPool) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateCommandPool", (GLADapiproc)glad_vkCreateCommandPool, 4, device, pCreateInfo, pAllocator, pCommandPool);
	ret = glad_vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateCommandPool",
	                           (GLADapiproc)glad_vkCreateCommandPool,
	                           4,
	                           device,
	                           pCreateInfo,
	                           pAllocator,
	                           pCommandPool);
	return ret;
}
PFN_vkCreateCommandPool      glad_debug_vkCreateCommandPool = glad_debug_impl_vkCreateCommandPool;
PFN_vkCreateComputePipelines glad_vkCreateComputePipelines = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateComputePipelines(VkDevice                           device,
                                                                      VkPipelineCache                    pipelineCache,
                                                                      uint32_t                           createInfoCount,
                                                                      const VkComputePipelineCreateInfo *pCreateInfos,
                                                                      const VkAllocationCallbacks       *pAllocator,
                                                                      VkPipeline                        *pPipelines) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateComputePipelines",
	                          (GLADapiproc)glad_vkCreateComputePipelines,
	                          6,
	                          device,
	                          pipelineCache,
	                          createInfoCount,
	                          pCreateInfos,
	                          pAllocator,
	                          pPipelines);
	ret = glad_vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateComputePipelines",
	                           (GLADapiproc)glad_vkCreateComputePipelines,
	                           6,
	                           device,
	                           pipelineCache,
	                           createInfoCount,
	                           pCreateInfos,
	                           pAllocator,
	                           pPipelines);
	return ret;
}
PFN_vkCreateComputePipelines glad_debug_vkCreateComputePipelines = glad_debug_impl_vkCreateComputePipelines;
PFN_vkCreateCuFunctionNVX    glad_vkCreateCuFunctionNVX = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateCuFunctionNVX(VkDevice                         device,
                                                                   const VkCuFunctionCreateInfoNVX *pCreateInfo,
                                                                   const VkAllocationCallbacks     *pAllocator,
                                                                   VkCuFunctionNVX                 *pFunction) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateCuFunctionNVX", (GLADapiproc)glad_vkCreateCuFunctionNVX, 4, device, pCreateInfo, pAllocator, pFunction);
	ret = glad_vkCreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateCuFunctionNVX",
	                           (GLADapiproc)glad_vkCreateCuFunctionNVX,
	                           4,
	                           device,
	                           pCreateInfo,
	                           pAllocator,
	                           pFunction);
	return ret;
}
PFN_vkCreateCuFunctionNVX    glad_debug_vkCreateCuFunctionNVX = glad_debug_impl_vkCreateCuFunctionNVX;
PFN_vkCreateCuModuleNVX      glad_vkCreateCuModuleNVX = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateCuModuleNVX(VkDevice                       device,
                                                                 const VkCuModuleCreateInfoNVX *pCreateInfo,
                                                                 const VkAllocationCallbacks   *pAllocator,
                                                                 VkCuModuleNVX                 *pModule) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateCuModuleNVX", (GLADapiproc)glad_vkCreateCuModuleNVX, 4, device, pCreateInfo, pAllocator, pModule);
	ret = glad_vkCreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);
	_post_call_vulkan_callback((void *)&ret, "vkCreateCuModuleNVX", (GLADapiproc)glad_vkCreateCuModuleNVX, 4, device, pCreateInfo, pAllocator, pModule);
	return ret;
}
PFN_vkCreateCuModuleNVX            glad_debug_vkCreateCuModuleNVX = glad_debug_impl_vkCreateCuModuleNVX;
PFN_vkCreateDebugReportCallbackEXT glad_vkCreateDebugReportCallbackEXT = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkCreateDebugReportCallbackEXT(VkInstance                                instance,
                                                                                  const VkDebugReportCallbackCreateInfoEXT *pCreateInfo,
                                                                                  const VkAllocationCallbacks              *pAllocator,
                                                                                  VkDebugReportCallbackEXT                 *pCallback) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDebugReportCallbackEXT",
                                  (GLADapiproc)glad_vkCreateDebugReportCallbackEXT,
                                  4,
                                  instance,
                                  pCreateInfo,
                                  pAllocator,
                                  pCallback);
        ret = glad_vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateDebugReportCallbackEXT",
                                   (GLADapiproc)glad_vkCreateDebugReportCallbackEXT,
                                   4,
                                   instance,
                                   pCreateInfo,
                                   pAllocator,
                                   pCallback);
        return ret;
}
PFN_vkCreateDebugReportCallbackEXT glad_debug_vkCreateDebugReportCallbackEXT = glad_debug_impl_vkCreateDebugReportCallbackEXT;
PFN_vkCreateDebugUtilsMessengerEXT glad_vkCreateDebugUtilsMessengerEXT = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkCreateDebugUtilsMessengerEXT(VkInstance                                instance,
                                                                                  const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo,
                                                                                  const VkAllocationCallbacks              *pAllocator,
                                                                                  VkDebugUtilsMessengerEXT                 *pMessenger) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDebugUtilsMessengerEXT",
                                  (GLADapiproc)glad_vkCreateDebugUtilsMessengerEXT,
                                  4,
                                  instance,
                                  pCreateInfo,
                                  pAllocator,
                                  pMessenger);
        ret = glad_vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateDebugUtilsMessengerEXT",
                                   (GLADapiproc)glad_vkCreateDebugUtilsMessengerEXT,
                                   4,
                                   instance,
                                   pCreateInfo,
                                   pAllocator,
                                   pMessenger);
        return ret;
}
PFN_vkCreateDebugUtilsMessengerEXT glad_debug_vkCreateDebugUtilsMessengerEXT = glad_debug_impl_vkCreateDebugUtilsMessengerEXT;
PFN_vkCreateDeferredOperationKHR   glad_vkCreateDeferredOperationKHR = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkCreateDeferredOperationKHR(VkDevice                     device,
                                                                                const VkAllocationCallbacks *pAllocator,
                                                                                VkDeferredOperationKHR      *pDeferredOperation) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDeferredOperationKHR", (GLADapiproc)glad_vkCreateDeferredOperationKHR, 3, device, pAllocator, pDeferredOperation);
        ret = glad_vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateDeferredOperationKHR",
                                   (GLADapiproc)glad_vkCreateDeferredOperationKHR,
                                   3,
                                   device,
                                   pAllocator,
                                   pDeferredOperation);
        return ret;
}
PFN_vkCreateDeferredOperationKHR glad_debug_vkCreateDeferredOperationKHR = glad_debug_impl_vkCreateDeferredOperationKHR;
PFN_vkCreateDescriptorPool       glad_vkCreateDescriptorPool = NULL;
static VkResult GLAD_API_PTR     glad_debug_impl_vkCreateDescriptorPool(VkDevice                          device,
                                                                        const VkDescriptorPoolCreateInfo *pCreateInfo,
                                                                        const VkAllocationCallbacks      *pAllocator,
                                                                        VkDescriptorPool                 *pDescriptorPool) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDescriptorPool", (GLADapiproc)glad_vkCreateDescriptorPool, 4, device, pCreateInfo, pAllocator, pDescriptorPool);
        ret = glad_vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateDescriptorPool",
                                   (GLADapiproc)glad_vkCreateDescriptorPool,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pDescriptorPool);
        return ret;
}
PFN_vkCreateDescriptorPool      glad_debug_vkCreateDescriptorPool = glad_debug_impl_vkCreateDescriptorPool;
PFN_vkCreateDescriptorSetLayout glad_vkCreateDescriptorSetLayout = NULL;
static VkResult GLAD_API_PTR    glad_debug_impl_vkCreateDescriptorSetLayout(VkDevice                               device,
                                                                            const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
                                                                            const VkAllocationCallbacks           *pAllocator,
                                                                            VkDescriptorSetLayout                 *pSetLayout) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDescriptorSetLayout", (GLADapiproc)glad_vkCreateDescriptorSetLayout, 4, device, pCreateInfo, pAllocator, pSetLayout);
        ret = glad_vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateDescriptorSetLayout",
                                   (GLADapiproc)glad_vkCreateDescriptorSetLayout,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pSetLayout);
        return ret;
}
PFN_vkCreateDescriptorSetLayout      glad_debug_vkCreateDescriptorSetLayout = glad_debug_impl_vkCreateDescriptorSetLayout;
PFN_vkCreateDescriptorUpdateTemplate glad_vkCreateDescriptorUpdateTemplate = NULL;
static VkResult GLAD_API_PTR         glad_debug_impl_vkCreateDescriptorUpdateTemplate(VkDevice                                    device,
                                                                                      const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo,
                                                                                      const VkAllocationCallbacks                *pAllocator,
                                                                                      VkDescriptorUpdateTemplate                 *pDescriptorUpdateTemplate) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDescriptorUpdateTemplate",
                                  (GLADapiproc)glad_vkCreateDescriptorUpdateTemplate,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pDescriptorUpdateTemplate);
        ret = glad_vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateDescriptorUpdateTemplate",
                                   (GLADapiproc)glad_vkCreateDescriptorUpdateTemplate,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pDescriptorUpdateTemplate);
        return ret;
}
PFN_vkCreateDescriptorUpdateTemplate    glad_debug_vkCreateDescriptorUpdateTemplate = glad_debug_impl_vkCreateDescriptorUpdateTemplate;
PFN_vkCreateDescriptorUpdateTemplateKHR glad_vkCreateDescriptorUpdateTemplateKHR = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkCreateDescriptorUpdateTemplateKHR(VkDevice                                    device,
                                                                                            const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo,
                                                                                            const VkAllocationCallbacks                *pAllocator,
                                                                                            VkDescriptorUpdateTemplate                 *pDescriptorUpdateTemplate) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDescriptorUpdateTemplateKHR",
                                  (GLADapiproc)glad_vkCreateDescriptorUpdateTemplateKHR,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pDescriptorUpdateTemplate);
        ret = glad_vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateDescriptorUpdateTemplateKHR",
                                   (GLADapiproc)glad_vkCreateDescriptorUpdateTemplateKHR,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pDescriptorUpdateTemplate);
        return ret;
}
PFN_vkCreateDescriptorUpdateTemplateKHR glad_debug_vkCreateDescriptorUpdateTemplateKHR = glad_debug_impl_vkCreateDescriptorUpdateTemplateKHR;
PFN_vkCreateDevice                      glad_vkCreateDevice = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkCreateDevice(VkPhysicalDevice             physicalDevice,
                                                                       const VkDeviceCreateInfo    *pCreateInfo,
                                                                       const VkAllocationCallbacks *pAllocator,
                                                                       VkDevice                    *pDevice) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDevice", (GLADapiproc)glad_vkCreateDevice, 4, physicalDevice, pCreateInfo, pAllocator, pDevice);
        ret = glad_vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
        _post_call_vulkan_callback((void *)&ret, "vkCreateDevice", (GLADapiproc)glad_vkCreateDevice, 4, physicalDevice, pCreateInfo, pAllocator, pDevice);
        return ret;
}
PFN_vkCreateDevice glad_debug_vkCreateDevice = glad_debug_impl_vkCreateDevice;
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
PFN_vkCreateDirectFBSurfaceEXT glad_vkCreateDirectFBSurfaceEXT = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkCreateDirectFBSurfaceEXT(VkInstance                            instance,
                                                                          const VkDirectFBSurfaceCreateInfoEXT *pCreateInfo,
                                                                          const VkAllocationCallbacks          *pAllocator,
                                                                          VkSurfaceKHR                         *pSurface) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDirectFBSurfaceEXT", (GLADapiproc)glad_vkCreateDirectFBSurfaceEXT, 4, instance, pCreateInfo, pAllocator, pSurface);
        ret = glad_vkCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateDirectFBSurfaceEXT",
                                   (GLADapiproc)glad_vkCreateDirectFBSurfaceEXT,
                                   4,
                                   instance,
                                   pCreateInfo,
                                   pAllocator,
                                   pSurface);
        return ret;
}
PFN_vkCreateDirectFBSurfaceEXT glad_debug_vkCreateDirectFBSurfaceEXT = glad_debug_impl_vkCreateDirectFBSurfaceEXT;

#endif
PFN_vkCreateDisplayModeKHR   glad_vkCreateDisplayModeKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateDisplayModeKHR(VkPhysicalDevice                  physicalDevice,
                                                                    VkDisplayKHR                      display,
                                                                    const VkDisplayModeCreateInfoKHR *pCreateInfo,
                                                                    const VkAllocationCallbacks      *pAllocator,
                                                                    VkDisplayModeKHR                 *pMode) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateDisplayModeKHR",
	                          (GLADapiproc)glad_vkCreateDisplayModeKHR,
	                          5,
	                          physicalDevice,
	                          display,
	                          pCreateInfo,
	                          pAllocator,
	                          pMode);
	ret = glad_vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateDisplayModeKHR",
	                           (GLADapiproc)glad_vkCreateDisplayModeKHR,
	                           5,
	                           physicalDevice,
	                           display,
	                           pCreateInfo,
	                           pAllocator,
	                           pMode);
	return ret;
}
PFN_vkCreateDisplayModeKHR         glad_debug_vkCreateDisplayModeKHR = glad_debug_impl_vkCreateDisplayModeKHR;
PFN_vkCreateDisplayPlaneSurfaceKHR glad_vkCreateDisplayPlaneSurfaceKHR = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkCreateDisplayPlaneSurfaceKHR(VkInstance                           instance,
                                                                                  const VkDisplaySurfaceCreateInfoKHR *pCreateInfo,
                                                                                  const VkAllocationCallbacks         *pAllocator,
                                                                                  VkSurfaceKHR                        *pSurface) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateDisplayPlaneSurfaceKHR",
                                  (GLADapiproc)glad_vkCreateDisplayPlaneSurfaceKHR,
                                  4,
                                  instance,
                                  pCreateInfo,
                                  pAllocator,
                                  pSurface);
        ret = glad_vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateDisplayPlaneSurfaceKHR",
                                   (GLADapiproc)glad_vkCreateDisplayPlaneSurfaceKHR,
                                   4,
                                   instance,
                                   pCreateInfo,
                                   pAllocator,
                                   pSurface);
        return ret;
}
PFN_vkCreateDisplayPlaneSurfaceKHR glad_debug_vkCreateDisplayPlaneSurfaceKHR = glad_debug_impl_vkCreateDisplayPlaneSurfaceKHR;
PFN_vkCreateEvent                  glad_vkCreateEvent = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkCreateEvent(VkDevice                     device,
                                                                 const VkEventCreateInfo     *pCreateInfo,
                                                                 const VkAllocationCallbacks *pAllocator,
                                                                 VkEvent                     *pEvent) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateEvent", (GLADapiproc)glad_vkCreateEvent, 4, device, pCreateInfo, pAllocator, pEvent);
        ret = glad_vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
        _post_call_vulkan_callback((void *)&ret, "vkCreateEvent", (GLADapiproc)glad_vkCreateEvent, 4, device, pCreateInfo, pAllocator, pEvent);
        return ret;
}
PFN_vkCreateEvent glad_debug_vkCreateEvent = glad_debug_impl_vkCreateEvent;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkCreateExecutionGraphPipelinesAMDX glad_vkCreateExecutionGraphPipelinesAMDX = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkCreateExecutionGraphPipelinesAMDX(VkDevice                                      device,
                                                                                            VkPipelineCache                               pipelineCache,
                                                                                            uint32_t                                      createInfoCount,
                                                                                            const VkExecutionGraphPipelineCreateInfoAMDX *pCreateInfos,
                                                                                            const VkAllocationCallbacks                  *pAllocator,
                                                                                            VkPipeline                                   *pPipelines) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateExecutionGraphPipelinesAMDX",
                                  (GLADapiproc)glad_vkCreateExecutionGraphPipelinesAMDX,
                                  6,
                                  device,
                                  pipelineCache,
                                  createInfoCount,
                                  pCreateInfos,
                                  pAllocator,
                                  pPipelines);
        ret = glad_vkCreateExecutionGraphPipelinesAMDX(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateExecutionGraphPipelinesAMDX",
                                   (GLADapiproc)glad_vkCreateExecutionGraphPipelinesAMDX,
                                   6,
                                   device,
                                   pipelineCache,
                                   createInfoCount,
                                   pCreateInfos,
                                   pAllocator,
                                   pPipelines);
        return ret;
}
PFN_vkCreateExecutionGraphPipelinesAMDX glad_debug_vkCreateExecutionGraphPipelinesAMDX = glad_debug_impl_vkCreateExecutionGraphPipelinesAMDX;

#endif
PFN_vkCreateFence            glad_vkCreateFence = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateFence(VkDevice                     device,
                                                           const VkFenceCreateInfo     *pCreateInfo,
                                                           const VkAllocationCallbacks *pAllocator,
                                                           VkFence                     *pFence) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateFence", (GLADapiproc)glad_vkCreateFence, 4, device, pCreateInfo, pAllocator, pFence);
	ret = glad_vkCreateFence(device, pCreateInfo, pAllocator, pFence);
	_post_call_vulkan_callback((void *)&ret, "vkCreateFence", (GLADapiproc)glad_vkCreateFence, 4, device, pCreateInfo, pAllocator, pFence);
	return ret;
}
PFN_vkCreateFence            glad_debug_vkCreateFence = glad_debug_impl_vkCreateFence;
PFN_vkCreateFramebuffer      glad_vkCreateFramebuffer = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateFramebuffer(VkDevice                       device,
                                                                 const VkFramebufferCreateInfo *pCreateInfo,
                                                                 const VkAllocationCallbacks   *pAllocator,
                                                                 VkFramebuffer                 *pFramebuffer) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateFramebuffer", (GLADapiproc)glad_vkCreateFramebuffer, 4, device, pCreateInfo, pAllocator, pFramebuffer);
	ret = glad_vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateFramebuffer",
	                           (GLADapiproc)glad_vkCreateFramebuffer,
	                           4,
	                           device,
	                           pCreateInfo,
	                           pAllocator,
	                           pFramebuffer);
	return ret;
}
PFN_vkCreateFramebuffer       glad_debug_vkCreateFramebuffer = glad_debug_impl_vkCreateFramebuffer;
PFN_vkCreateGraphicsPipelines glad_vkCreateGraphicsPipelines = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkCreateGraphicsPipelines(VkDevice                            device,
                                                                        VkPipelineCache                     pipelineCache,
                                                                        uint32_t                            createInfoCount,
                                                                        const VkGraphicsPipelineCreateInfo *pCreateInfos,
                                                                        const VkAllocationCallbacks        *pAllocator,
                                                                        VkPipeline                         *pPipelines) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateGraphicsPipelines",
                                  (GLADapiproc)glad_vkCreateGraphicsPipelines,
                                  6,
                                  device,
                                  pipelineCache,
                                  createInfoCount,
                                  pCreateInfos,
                                  pAllocator,
                                  pPipelines);
        ret = glad_vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateGraphicsPipelines",
                                   (GLADapiproc)glad_vkCreateGraphicsPipelines,
                                   6,
                                   device,
                                   pipelineCache,
                                   createInfoCount,
                                   pCreateInfos,
                                   pAllocator,
                                   pPipelines);
        return ret;
}
PFN_vkCreateGraphicsPipelines  glad_debug_vkCreateGraphicsPipelines = glad_debug_impl_vkCreateGraphicsPipelines;
PFN_vkCreateHeadlessSurfaceEXT glad_vkCreateHeadlessSurfaceEXT = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkCreateHeadlessSurfaceEXT(VkInstance                            instance,
                                                                          const VkHeadlessSurfaceCreateInfoEXT *pCreateInfo,
                                                                          const VkAllocationCallbacks          *pAllocator,
                                                                          VkSurfaceKHR                         *pSurface) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateHeadlessSurfaceEXT", (GLADapiproc)glad_vkCreateHeadlessSurfaceEXT, 4, instance, pCreateInfo, pAllocator, pSurface);
        ret = glad_vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateHeadlessSurfaceEXT",
                                   (GLADapiproc)glad_vkCreateHeadlessSurfaceEXT,
                                   4,
                                   instance,
                                   pCreateInfo,
                                   pAllocator,
                                   pSurface);
        return ret;
}
PFN_vkCreateHeadlessSurfaceEXT glad_debug_vkCreateHeadlessSurfaceEXT = glad_debug_impl_vkCreateHeadlessSurfaceEXT;
#if defined(VK_USE_PLATFORM_IOS_MVK)
PFN_vkCreateIOSSurfaceMVK    glad_vkCreateIOSSurfaceMVK = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateIOSSurfaceMVK(VkInstance                       instance,
                                                                   const VkIOSSurfaceCreateInfoMVK *pCreateInfo,
                                                                   const VkAllocationCallbacks     *pAllocator,
                                                                   VkSurfaceKHR                    *pSurface) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateIOSSurfaceMVK", (GLADapiproc)glad_vkCreateIOSSurfaceMVK, 4, instance, pCreateInfo, pAllocator, pSurface);
	ret = glad_vkCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateIOSSurfaceMVK",
	                           (GLADapiproc)glad_vkCreateIOSSurfaceMVK,
	                           4,
	                           instance,
	                           pCreateInfo,
	                           pAllocator,
	                           pSurface);
	return ret;
}
PFN_vkCreateIOSSurfaceMVK glad_debug_vkCreateIOSSurfaceMVK = glad_debug_impl_vkCreateIOSSurfaceMVK;

#endif
PFN_vkCreateImage            glad_vkCreateImage = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateImage(VkDevice                     device,
                                                           const VkImageCreateInfo     *pCreateInfo,
                                                           const VkAllocationCallbacks *pAllocator,
                                                           VkImage                     *pImage) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateImage", (GLADapiproc)glad_vkCreateImage, 4, device, pCreateInfo, pAllocator, pImage);
	ret = glad_vkCreateImage(device, pCreateInfo, pAllocator, pImage);
	_post_call_vulkan_callback((void *)&ret, "vkCreateImage", (GLADapiproc)glad_vkCreateImage, 4, device, pCreateInfo, pAllocator, pImage);
	return ret;
}
PFN_vkCreateImage glad_debug_vkCreateImage = glad_debug_impl_vkCreateImage;
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkCreateImagePipeSurfaceFUCHSIA glad_vkCreateImagePipeSurfaceFUCHSIA = NULL;
static VkResult GLAD_API_PTR        glad_debug_impl_vkCreateImagePipeSurfaceFUCHSIA(VkInstance                                 instance,
                                                                                    const VkImagePipeSurfaceCreateInfoFUCHSIA *pCreateInfo,
                                                                                    const VkAllocationCallbacks               *pAllocator,
                                                                                    VkSurfaceKHR                              *pSurface) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateImagePipeSurfaceFUCHSIA",
                                  (GLADapiproc)glad_vkCreateImagePipeSurfaceFUCHSIA,
                                  4,
                                  instance,
                                  pCreateInfo,
                                  pAllocator,
                                  pSurface);
        ret = glad_vkCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateImagePipeSurfaceFUCHSIA",
                                   (GLADapiproc)glad_vkCreateImagePipeSurfaceFUCHSIA,
                                   4,
                                   instance,
                                   pCreateInfo,
                                   pAllocator,
                                   pSurface);
        return ret;
}
PFN_vkCreateImagePipeSurfaceFUCHSIA glad_debug_vkCreateImagePipeSurfaceFUCHSIA = glad_debug_impl_vkCreateImagePipeSurfaceFUCHSIA;

#endif
PFN_vkCreateImageView        glad_vkCreateImageView = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateImageView(VkDevice                     device,
                                                               const VkImageViewCreateInfo *pCreateInfo,
                                                               const VkAllocationCallbacks *pAllocator,
                                                               VkImageView                 *pView) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateImageView", (GLADapiproc)glad_vkCreateImageView, 4, device, pCreateInfo, pAllocator, pView);
	ret = glad_vkCreateImageView(device, pCreateInfo, pAllocator, pView);
	_post_call_vulkan_callback((void *)&ret, "vkCreateImageView", (GLADapiproc)glad_vkCreateImageView, 4, device, pCreateInfo, pAllocator, pView);
	return ret;
}
PFN_vkCreateImageView                glad_debug_vkCreateImageView = glad_debug_impl_vkCreateImageView;
PFN_vkCreateIndirectCommandsLayoutNV glad_vkCreateIndirectCommandsLayoutNV = NULL;
static VkResult GLAD_API_PTR         glad_debug_impl_vkCreateIndirectCommandsLayoutNV(VkDevice                                    device,
                                                                                      const VkIndirectCommandsLayoutCreateInfoNV *pCreateInfo,
                                                                                      const VkAllocationCallbacks                *pAllocator,
                                                                                      VkIndirectCommandsLayoutNV                 *pIndirectCommandsLayout) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateIndirectCommandsLayoutNV",
                                  (GLADapiproc)glad_vkCreateIndirectCommandsLayoutNV,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pIndirectCommandsLayout);
        ret = glad_vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateIndirectCommandsLayoutNV",
                                   (GLADapiproc)glad_vkCreateIndirectCommandsLayoutNV,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pIndirectCommandsLayout);
        return ret;
}
PFN_vkCreateIndirectCommandsLayoutNV glad_debug_vkCreateIndirectCommandsLayoutNV = glad_debug_impl_vkCreateIndirectCommandsLayoutNV;
PFN_vkCreateInstance                 glad_vkCreateInstance = NULL;
static VkResult GLAD_API_PTR         glad_debug_impl_vkCreateInstance(const VkInstanceCreateInfo  *pCreateInfo,
                                                                      const VkAllocationCallbacks *pAllocator,
                                                                      VkInstance                  *pInstance) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateInstance", (GLADapiproc)glad_vkCreateInstance, 3, pCreateInfo, pAllocator, pInstance);
        ret = glad_vkCreateInstance(pCreateInfo, pAllocator, pInstance);
        _post_call_vulkan_callback((void *)&ret, "vkCreateInstance", (GLADapiproc)glad_vkCreateInstance, 3, pCreateInfo, pAllocator, pInstance);
        return ret;
}
PFN_vkCreateInstance glad_debug_vkCreateInstance = glad_debug_impl_vkCreateInstance;
#if defined(VK_USE_PLATFORM_MACOS_MVK)
PFN_vkCreateMacOSSurfaceMVK  glad_vkCreateMacOSSurfaceMVK = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateMacOSSurfaceMVK(VkInstance                         instance,
                                                                     const VkMacOSSurfaceCreateInfoMVK *pCreateInfo,
                                                                     const VkAllocationCallbacks       *pAllocator,
                                                                     VkSurfaceKHR                      *pSurface) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateMacOSSurfaceMVK", (GLADapiproc)glad_vkCreateMacOSSurfaceMVK, 4, instance, pCreateInfo, pAllocator, pSurface);
	ret = glad_vkCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateMacOSSurfaceMVK",
	                           (GLADapiproc)glad_vkCreateMacOSSurfaceMVK,
	                           4,
	                           instance,
	                           pCreateInfo,
	                           pAllocator,
	                           pSurface);
	return ret;
}
PFN_vkCreateMacOSSurfaceMVK glad_debug_vkCreateMacOSSurfaceMVK = glad_debug_impl_vkCreateMacOSSurfaceMVK;

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
PFN_vkCreateMetalSurfaceEXT  glad_vkCreateMetalSurfaceEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateMetalSurfaceEXT(VkInstance                         instance,
                                                                     const VkMetalSurfaceCreateInfoEXT *pCreateInfo,
                                                                     const VkAllocationCallbacks       *pAllocator,
                                                                     VkSurfaceKHR                      *pSurface) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateMetalSurfaceEXT", (GLADapiproc)glad_vkCreateMetalSurfaceEXT, 4, instance, pCreateInfo, pAllocator, pSurface);
	ret = glad_vkCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateMetalSurfaceEXT",
	                           (GLADapiproc)glad_vkCreateMetalSurfaceEXT,
	                           4,
	                           instance,
	                           pCreateInfo,
	                           pAllocator,
	                           pSurface);
	return ret;
}
PFN_vkCreateMetalSurfaceEXT glad_debug_vkCreateMetalSurfaceEXT = glad_debug_impl_vkCreateMetalSurfaceEXT;

#endif
PFN_vkCreateMicromapEXT      glad_vkCreateMicromapEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateMicromapEXT(VkDevice                       device,
                                                                 const VkMicromapCreateInfoEXT *pCreateInfo,
                                                                 const VkAllocationCallbacks   *pAllocator,
                                                                 VkMicromapEXT                 *pMicromap) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateMicromapEXT", (GLADapiproc)glad_vkCreateMicromapEXT, 4, device, pCreateInfo, pAllocator, pMicromap);
	ret = glad_vkCreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);
	_post_call_vulkan_callback((void *)&ret, "vkCreateMicromapEXT", (GLADapiproc)glad_vkCreateMicromapEXT, 4, device, pCreateInfo, pAllocator, pMicromap);
	return ret;
}
PFN_vkCreateMicromapEXT          glad_debug_vkCreateMicromapEXT = glad_debug_impl_vkCreateMicromapEXT;
PFN_vkCreateOpticalFlowSessionNV glad_vkCreateOpticalFlowSessionNV = NULL;
static VkResult GLAD_API_PTR     glad_debug_impl_vkCreateOpticalFlowSessionNV(VkDevice                                device,
                                                                              const VkOpticalFlowSessionCreateInfoNV *pCreateInfo,
                                                                              const VkAllocationCallbacks            *pAllocator,
                                                                              VkOpticalFlowSessionNV                 *pSession) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateOpticalFlowSessionNV", (GLADapiproc)glad_vkCreateOpticalFlowSessionNV, 4, device, pCreateInfo, pAllocator, pSession);
        ret = glad_vkCreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateOpticalFlowSessionNV",
                                   (GLADapiproc)glad_vkCreateOpticalFlowSessionNV,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pSession);
        return ret;
}
PFN_vkCreateOpticalFlowSessionNV glad_debug_vkCreateOpticalFlowSessionNV = glad_debug_impl_vkCreateOpticalFlowSessionNV;
PFN_vkCreatePipelineCache        glad_vkCreatePipelineCache = NULL;
static VkResult GLAD_API_PTR     glad_debug_impl_vkCreatePipelineCache(VkDevice                         device,
                                                                       const VkPipelineCacheCreateInfo *pCreateInfo,
                                                                       const VkAllocationCallbacks     *pAllocator,
                                                                       VkPipelineCache                 *pPipelineCache) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreatePipelineCache", (GLADapiproc)glad_vkCreatePipelineCache, 4, device, pCreateInfo, pAllocator, pPipelineCache);
        ret = glad_vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreatePipelineCache",
                                   (GLADapiproc)glad_vkCreatePipelineCache,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pPipelineCache);
        return ret;
}
PFN_vkCreatePipelineCache    glad_debug_vkCreatePipelineCache = glad_debug_impl_vkCreatePipelineCache;
PFN_vkCreatePipelineLayout   glad_vkCreatePipelineLayout = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreatePipelineLayout(VkDevice                          device,
                                                                    const VkPipelineLayoutCreateInfo *pCreateInfo,
                                                                    const VkAllocationCallbacks      *pAllocator,
                                                                    VkPipelineLayout                 *pPipelineLayout) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreatePipelineLayout", (GLADapiproc)glad_vkCreatePipelineLayout, 4, device, pCreateInfo, pAllocator, pPipelineLayout);
	ret = glad_vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreatePipelineLayout",
	                           (GLADapiproc)glad_vkCreatePipelineLayout,
	                           4,
	                           device,
	                           pCreateInfo,
	                           pAllocator,
	                           pPipelineLayout);
	return ret;
}
PFN_vkCreatePipelineLayout   glad_debug_vkCreatePipelineLayout = glad_debug_impl_vkCreatePipelineLayout;
PFN_vkCreatePrivateDataSlot  glad_vkCreatePrivateDataSlot = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreatePrivateDataSlot(VkDevice                           device,
                                                                     const VkPrivateDataSlotCreateInfo *pCreateInfo,
                                                                     const VkAllocationCallbacks       *pAllocator,
                                                                     VkPrivateDataSlot                 *pPrivateDataSlot) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreatePrivateDataSlot", (GLADapiproc)glad_vkCreatePrivateDataSlot, 4, device, pCreateInfo, pAllocator, pPrivateDataSlot);
	ret = glad_vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreatePrivateDataSlot",
	                           (GLADapiproc)glad_vkCreatePrivateDataSlot,
	                           4,
	                           device,
	                           pCreateInfo,
	                           pAllocator,
	                           pPrivateDataSlot);
	return ret;
}
PFN_vkCreatePrivateDataSlot    glad_debug_vkCreatePrivateDataSlot = glad_debug_impl_vkCreatePrivateDataSlot;
PFN_vkCreatePrivateDataSlotEXT glad_vkCreatePrivateDataSlotEXT = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkCreatePrivateDataSlotEXT(VkDevice                           device,
                                                                          const VkPrivateDataSlotCreateInfo *pCreateInfo,
                                                                          const VkAllocationCallbacks       *pAllocator,
                                                                          VkPrivateDataSlot                 *pPrivateDataSlot) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreatePrivateDataSlotEXT",
                                  (GLADapiproc)glad_vkCreatePrivateDataSlotEXT,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pPrivateDataSlot);
        ret = glad_vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreatePrivateDataSlotEXT",
                                   (GLADapiproc)glad_vkCreatePrivateDataSlotEXT,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pPrivateDataSlot);
        return ret;
}
PFN_vkCreatePrivateDataSlotEXT glad_debug_vkCreatePrivateDataSlotEXT = glad_debug_impl_vkCreatePrivateDataSlotEXT;
PFN_vkCreateQueryPool          glad_vkCreateQueryPool = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkCreateQueryPool(VkDevice                     device,
                                                                 const VkQueryPoolCreateInfo *pCreateInfo,
                                                                 const VkAllocationCallbacks *pAllocator,
                                                                 VkQueryPool                 *pQueryPool) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateQueryPool", (GLADapiproc)glad_vkCreateQueryPool, 4, device, pCreateInfo, pAllocator, pQueryPool);
        ret = glad_vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
        _post_call_vulkan_callback((void *)&ret, "vkCreateQueryPool", (GLADapiproc)glad_vkCreateQueryPool, 4, device, pCreateInfo, pAllocator, pQueryPool);
        return ret;
}
PFN_vkCreateQueryPool              glad_debug_vkCreateQueryPool = glad_debug_impl_vkCreateQueryPool;
PFN_vkCreateRayTracingPipelinesKHR glad_vkCreateRayTracingPipelinesKHR = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkCreateRayTracingPipelinesKHR(VkDevice                                 device,
                                                                                  VkDeferredOperationKHR                   deferredOperation,
                                                                                  VkPipelineCache                          pipelineCache,
                                                                                  uint32_t                                 createInfoCount,
                                                                                  const VkRayTracingPipelineCreateInfoKHR *pCreateInfos,
                                                                                  const VkAllocationCallbacks             *pAllocator,
                                                                                  VkPipeline                              *pPipelines) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateRayTracingPipelinesKHR",
                                  (GLADapiproc)glad_vkCreateRayTracingPipelinesKHR,
                                  7,
                                  device,
                                  deferredOperation,
                                  pipelineCache,
                                  createInfoCount,
                                  pCreateInfos,
                                  pAllocator,
                                  pPipelines);
        ret = glad_vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateRayTracingPipelinesKHR",
                                   (GLADapiproc)glad_vkCreateRayTracingPipelinesKHR,
                                   7,
                                   device,
                                   deferredOperation,
                                   pipelineCache,
                                   createInfoCount,
                                   pCreateInfos,
                                   pAllocator,
                                   pPipelines);
        return ret;
}
PFN_vkCreateRayTracingPipelinesKHR glad_debug_vkCreateRayTracingPipelinesKHR = glad_debug_impl_vkCreateRayTracingPipelinesKHR;
PFN_vkCreateRayTracingPipelinesNV  glad_vkCreateRayTracingPipelinesNV = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkCreateRayTracingPipelinesNV(VkDevice                                device,
                                                                                 VkPipelineCache                         pipelineCache,
                                                                                 uint32_t                                createInfoCount,
                                                                                 const VkRayTracingPipelineCreateInfoNV *pCreateInfos,
                                                                                 const VkAllocationCallbacks            *pAllocator,
                                                                                 VkPipeline                             *pPipelines) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateRayTracingPipelinesNV",
                                  (GLADapiproc)glad_vkCreateRayTracingPipelinesNV,
                                  6,
                                  device,
                                  pipelineCache,
                                  createInfoCount,
                                  pCreateInfos,
                                  pAllocator,
                                  pPipelines);
        ret = glad_vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateRayTracingPipelinesNV",
                                   (GLADapiproc)glad_vkCreateRayTracingPipelinesNV,
                                   6,
                                   device,
                                   pipelineCache,
                                   createInfoCount,
                                   pCreateInfos,
                                   pAllocator,
                                   pPipelines);
        return ret;
}
PFN_vkCreateRayTracingPipelinesNV glad_debug_vkCreateRayTracingPipelinesNV = glad_debug_impl_vkCreateRayTracingPipelinesNV;
PFN_vkCreateRenderPass            glad_vkCreateRenderPass = NULL;
static VkResult GLAD_API_PTR      glad_debug_impl_vkCreateRenderPass(VkDevice                      device,
                                                                     const VkRenderPassCreateInfo *pCreateInfo,
                                                                     const VkAllocationCallbacks  *pAllocator,
                                                                     VkRenderPass                 *pRenderPass) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateRenderPass", (GLADapiproc)glad_vkCreateRenderPass, 4, device, pCreateInfo, pAllocator, pRenderPass);
        ret = glad_vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
        _post_call_vulkan_callback((void *)&ret, "vkCreateRenderPass", (GLADapiproc)glad_vkCreateRenderPass, 4, device, pCreateInfo, pAllocator, pRenderPass);
        return ret;
}
PFN_vkCreateRenderPass       glad_debug_vkCreateRenderPass = glad_debug_impl_vkCreateRenderPass;
PFN_vkCreateRenderPass2      glad_vkCreateRenderPass2 = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateRenderPass2(VkDevice                       device,
                                                                 const VkRenderPassCreateInfo2 *pCreateInfo,
                                                                 const VkAllocationCallbacks   *pAllocator,
                                                                 VkRenderPass                  *pRenderPass) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateRenderPass2", (GLADapiproc)glad_vkCreateRenderPass2, 4, device, pCreateInfo, pAllocator, pRenderPass);
	ret = glad_vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
	_post_call_vulkan_callback((void *)&ret, "vkCreateRenderPass2", (GLADapiproc)glad_vkCreateRenderPass2, 4, device, pCreateInfo, pAllocator, pRenderPass);
	return ret;
}
PFN_vkCreateRenderPass2      glad_debug_vkCreateRenderPass2 = glad_debug_impl_vkCreateRenderPass2;
PFN_vkCreateRenderPass2KHR   glad_vkCreateRenderPass2KHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateRenderPass2KHR(VkDevice                       device,
                                                                    const VkRenderPassCreateInfo2 *pCreateInfo,
                                                                    const VkAllocationCallbacks   *pAllocator,
                                                                    VkRenderPass                  *pRenderPass) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateRenderPass2KHR", (GLADapiproc)glad_vkCreateRenderPass2KHR, 4, device, pCreateInfo, pAllocator, pRenderPass);
	ret = glad_vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateRenderPass2KHR",
	                           (GLADapiproc)glad_vkCreateRenderPass2KHR,
	                           4,
	                           device,
	                           pCreateInfo,
	                           pAllocator,
	                           pRenderPass);
	return ret;
}
PFN_vkCreateRenderPass2KHR   glad_debug_vkCreateRenderPass2KHR = glad_debug_impl_vkCreateRenderPass2KHR;
PFN_vkCreateSampler          glad_vkCreateSampler = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateSampler(VkDevice                     device,
                                                             const VkSamplerCreateInfo   *pCreateInfo,
                                                             const VkAllocationCallbacks *pAllocator,
                                                             VkSampler                   *pSampler) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateSampler", (GLADapiproc)glad_vkCreateSampler, 4, device, pCreateInfo, pAllocator, pSampler);
	ret = glad_vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
	_post_call_vulkan_callback((void *)&ret, "vkCreateSampler", (GLADapiproc)glad_vkCreateSampler, 4, device, pCreateInfo, pAllocator, pSampler);
	return ret;
}
PFN_vkCreateSampler                glad_debug_vkCreateSampler = glad_debug_impl_vkCreateSampler;
PFN_vkCreateSamplerYcbcrConversion glad_vkCreateSamplerYcbcrConversion = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkCreateSamplerYcbcrConversion(VkDevice                                  device,
                                                                                  const VkSamplerYcbcrConversionCreateInfo *pCreateInfo,
                                                                                  const VkAllocationCallbacks              *pAllocator,
                                                                                  VkSamplerYcbcrConversion                 *pYcbcrConversion) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateSamplerYcbcrConversion",
                                  (GLADapiproc)glad_vkCreateSamplerYcbcrConversion,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pYcbcrConversion);
        ret = glad_vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateSamplerYcbcrConversion",
                                   (GLADapiproc)glad_vkCreateSamplerYcbcrConversion,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pYcbcrConversion);
        return ret;
}
PFN_vkCreateSamplerYcbcrConversion    glad_debug_vkCreateSamplerYcbcrConversion = glad_debug_impl_vkCreateSamplerYcbcrConversion;
PFN_vkCreateSamplerYcbcrConversionKHR glad_vkCreateSamplerYcbcrConversionKHR = NULL;
static VkResult GLAD_API_PTR          glad_debug_impl_vkCreateSamplerYcbcrConversionKHR(VkDevice                                  device,
                                                                                        const VkSamplerYcbcrConversionCreateInfo *pCreateInfo,
                                                                                        const VkAllocationCallbacks              *pAllocator,
                                                                                        VkSamplerYcbcrConversion                 *pYcbcrConversion) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateSamplerYcbcrConversionKHR",
                                  (GLADapiproc)glad_vkCreateSamplerYcbcrConversionKHR,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pYcbcrConversion);
        ret = glad_vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateSamplerYcbcrConversionKHR",
                                   (GLADapiproc)glad_vkCreateSamplerYcbcrConversionKHR,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pYcbcrConversion);
        return ret;
}
PFN_vkCreateSamplerYcbcrConversionKHR glad_debug_vkCreateSamplerYcbcrConversionKHR = glad_debug_impl_vkCreateSamplerYcbcrConversionKHR;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
PFN_vkCreateScreenSurfaceQNX glad_vkCreateScreenSurfaceQNX = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateScreenSurfaceQNX(VkInstance                          instance,
                                                                      const VkScreenSurfaceCreateInfoQNX *pCreateInfo,
                                                                      const VkAllocationCallbacks        *pAllocator,
                                                                      VkSurfaceKHR                       *pSurface) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateScreenSurfaceQNX", (GLADapiproc)glad_vkCreateScreenSurfaceQNX, 4, instance, pCreateInfo, pAllocator, pSurface);
	ret = glad_vkCreateScreenSurfaceQNX(instance, pCreateInfo, pAllocator, pSurface);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateScreenSurfaceQNX",
	                           (GLADapiproc)glad_vkCreateScreenSurfaceQNX,
	                           4,
	                           instance,
	                           pCreateInfo,
	                           pAllocator,
	                           pSurface);
	return ret;
}
PFN_vkCreateScreenSurfaceQNX glad_debug_vkCreateScreenSurfaceQNX = glad_debug_impl_vkCreateScreenSurfaceQNX;

#endif
PFN_vkCreateSemaphore        glad_vkCreateSemaphore = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateSemaphore(VkDevice                     device,
                                                               const VkSemaphoreCreateInfo *pCreateInfo,
                                                               const VkAllocationCallbacks *pAllocator,
                                                               VkSemaphore                 *pSemaphore) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateSemaphore", (GLADapiproc)glad_vkCreateSemaphore, 4, device, pCreateInfo, pAllocator, pSemaphore);
	ret = glad_vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
	_post_call_vulkan_callback((void *)&ret, "vkCreateSemaphore", (GLADapiproc)glad_vkCreateSemaphore, 4, device, pCreateInfo, pAllocator, pSemaphore);
	return ret;
}
PFN_vkCreateSemaphore        glad_debug_vkCreateSemaphore = glad_debug_impl_vkCreateSemaphore;
PFN_vkCreateShaderModule     glad_vkCreateShaderModule = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateShaderModule(VkDevice                        device,
                                                                  const VkShaderModuleCreateInfo *pCreateInfo,
                                                                  const VkAllocationCallbacks    *pAllocator,
                                                                  VkShaderModule                 *pShaderModule) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateShaderModule", (GLADapiproc)glad_vkCreateShaderModule, 4, device, pCreateInfo, pAllocator, pShaderModule);
	ret = glad_vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateShaderModule",
	                           (GLADapiproc)glad_vkCreateShaderModule,
	                           4,
	                           device,
	                           pCreateInfo,
	                           pAllocator,
	                           pShaderModule);
	return ret;
}
PFN_vkCreateShaderModule     glad_debug_vkCreateShaderModule = glad_debug_impl_vkCreateShaderModule;
PFN_vkCreateShadersEXT       glad_vkCreateShadersEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateShadersEXT(VkDevice                     device,
                                                                uint32_t                     createInfoCount,
                                                                const VkShaderCreateInfoEXT *pCreateInfos,
                                                                const VkAllocationCallbacks *pAllocator,
                                                                VkShaderEXT                 *pShaders) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateShadersEXT", (GLADapiproc)glad_vkCreateShadersEXT, 5, device, createInfoCount, pCreateInfos, pAllocator, pShaders);
	ret = glad_vkCreateShadersEXT(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateShadersEXT",
	                           (GLADapiproc)glad_vkCreateShadersEXT,
	                           5,
	                           device,
	                           createInfoCount,
	                           pCreateInfos,
	                           pAllocator,
	                           pShaders);
	return ret;
}
PFN_vkCreateShadersEXT          glad_debug_vkCreateShadersEXT = glad_debug_impl_vkCreateShadersEXT;
PFN_vkCreateSharedSwapchainsKHR glad_vkCreateSharedSwapchainsKHR = NULL;
static VkResult GLAD_API_PTR    glad_debug_impl_vkCreateSharedSwapchainsKHR(VkDevice                        device,
                                                                            uint32_t                        swapchainCount,
                                                                            const VkSwapchainCreateInfoKHR *pCreateInfos,
                                                                            const VkAllocationCallbacks    *pAllocator,
                                                                            VkSwapchainKHR                 *pSwapchains) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateSharedSwapchainsKHR",
                                  (GLADapiproc)glad_vkCreateSharedSwapchainsKHR,
                                  5,
                                  device,
                                  swapchainCount,
                                  pCreateInfos,
                                  pAllocator,
                                  pSwapchains);
        ret = glad_vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateSharedSwapchainsKHR",
                                   (GLADapiproc)glad_vkCreateSharedSwapchainsKHR,
                                   5,
                                   device,
                                   swapchainCount,
                                   pCreateInfos,
                                   pAllocator,
                                   pSwapchains);
        return ret;
}
PFN_vkCreateSharedSwapchainsKHR glad_debug_vkCreateSharedSwapchainsKHR = glad_debug_impl_vkCreateSharedSwapchainsKHR;
#if defined(VK_USE_PLATFORM_GGP)
PFN_vkCreateStreamDescriptorSurfaceGGP glad_vkCreateStreamDescriptorSurfaceGGP = NULL;
static VkResult GLAD_API_PTR           glad_debug_impl_vkCreateStreamDescriptorSurfaceGGP(VkInstance                                    instance,
                                                                                          const VkStreamDescriptorSurfaceCreateInfoGGP *pCreateInfo,
                                                                                          const VkAllocationCallbacks                  *pAllocator,
                                                                                          VkSurfaceKHR                                 *pSurface) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateStreamDescriptorSurfaceGGP",
                                  (GLADapiproc)glad_vkCreateStreamDescriptorSurfaceGGP,
                                  4,
                                  instance,
                                  pCreateInfo,
                                  pAllocator,
                                  pSurface);
        ret = glad_vkCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateStreamDescriptorSurfaceGGP",
                                   (GLADapiproc)glad_vkCreateStreamDescriptorSurfaceGGP,
                                   4,
                                   instance,
                                   pCreateInfo,
                                   pAllocator,
                                   pSurface);
        return ret;
}
PFN_vkCreateStreamDescriptorSurfaceGGP glad_debug_vkCreateStreamDescriptorSurfaceGGP = glad_debug_impl_vkCreateStreamDescriptorSurfaceGGP;

#endif
PFN_vkCreateSwapchainKHR     glad_vkCreateSwapchainKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateSwapchainKHR(VkDevice                        device,
                                                                  const VkSwapchainCreateInfoKHR *pCreateInfo,
                                                                  const VkAllocationCallbacks    *pAllocator,
                                                                  VkSwapchainKHR                 *pSwapchain) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateSwapchainKHR", (GLADapiproc)glad_vkCreateSwapchainKHR, 4, device, pCreateInfo, pAllocator, pSwapchain);
	ret = glad_vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateSwapchainKHR",
	                           (GLADapiproc)glad_vkCreateSwapchainKHR,
	                           4,
	                           device,
	                           pCreateInfo,
	                           pAllocator,
	                           pSwapchain);
	return ret;
}
PFN_vkCreateSwapchainKHR       glad_debug_vkCreateSwapchainKHR = glad_debug_impl_vkCreateSwapchainKHR;
PFN_vkCreateValidationCacheEXT glad_vkCreateValidationCacheEXT = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkCreateValidationCacheEXT(VkDevice                              device,
                                                                          const VkValidationCacheCreateInfoEXT *pCreateInfo,
                                                                          const VkAllocationCallbacks          *pAllocator,
                                                                          VkValidationCacheEXT                 *pValidationCache) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateValidationCacheEXT",
                                  (GLADapiproc)glad_vkCreateValidationCacheEXT,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pValidationCache);
        ret = glad_vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateValidationCacheEXT",
                                   (GLADapiproc)glad_vkCreateValidationCacheEXT,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pValidationCache);
        return ret;
}
PFN_vkCreateValidationCacheEXT glad_debug_vkCreateValidationCacheEXT = glad_debug_impl_vkCreateValidationCacheEXT;
#if defined(VK_USE_PLATFORM_VI_NN)
PFN_vkCreateViSurfaceNN      glad_vkCreateViSurfaceNN = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateViSurfaceNN(VkInstance                     instance,
                                                                 const VkViSurfaceCreateInfoNN *pCreateInfo,
                                                                 const VkAllocationCallbacks   *pAllocator,
                                                                 VkSurfaceKHR                  *pSurface) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateViSurfaceNN", (GLADapiproc)glad_vkCreateViSurfaceNN, 4, instance, pCreateInfo, pAllocator, pSurface);
	ret = glad_vkCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
	_post_call_vulkan_callback((void *)&ret, "vkCreateViSurfaceNN", (GLADapiproc)glad_vkCreateViSurfaceNN, 4, instance, pCreateInfo, pAllocator, pSurface);
	return ret;
}
PFN_vkCreateViSurfaceNN glad_debug_vkCreateViSurfaceNN = glad_debug_impl_vkCreateViSurfaceNN;

#endif
PFN_vkCreateVideoSessionKHR  glad_vkCreateVideoSessionKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateVideoSessionKHR(VkDevice                           device,
                                                                     const VkVideoSessionCreateInfoKHR *pCreateInfo,
                                                                     const VkAllocationCallbacks       *pAllocator,
                                                                     VkVideoSessionKHR                 *pVideoSession) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateVideoSessionKHR", (GLADapiproc)glad_vkCreateVideoSessionKHR, 4, device, pCreateInfo, pAllocator, pVideoSession);
	ret = glad_vkCreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateVideoSessionKHR",
	                           (GLADapiproc)glad_vkCreateVideoSessionKHR,
	                           4,
	                           device,
	                           pCreateInfo,
	                           pAllocator,
	                           pVideoSession);
	return ret;
}
PFN_vkCreateVideoSessionKHR           glad_debug_vkCreateVideoSessionKHR = glad_debug_impl_vkCreateVideoSessionKHR;
PFN_vkCreateVideoSessionParametersKHR glad_vkCreateVideoSessionParametersKHR = NULL;
static VkResult GLAD_API_PTR          glad_debug_impl_vkCreateVideoSessionParametersKHR(VkDevice                                     device,
                                                                                        const VkVideoSessionParametersCreateInfoKHR *pCreateInfo,
                                                                                        const VkAllocationCallbacks                 *pAllocator,
                                                                                        VkVideoSessionParametersKHR                 *pVideoSessionParameters) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateVideoSessionParametersKHR",
                                  (GLADapiproc)glad_vkCreateVideoSessionParametersKHR,
                                  4,
                                  device,
                                  pCreateInfo,
                                  pAllocator,
                                  pVideoSessionParameters);
        ret = glad_vkCreateVideoSessionParametersKHR(device, pCreateInfo, pAllocator, pVideoSessionParameters);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateVideoSessionParametersKHR",
                                   (GLADapiproc)glad_vkCreateVideoSessionParametersKHR,
                                   4,
                                   device,
                                   pCreateInfo,
                                   pAllocator,
                                   pVideoSessionParameters);
        return ret;
}
PFN_vkCreateVideoSessionParametersKHR glad_debug_vkCreateVideoSessionParametersKHR = glad_debug_impl_vkCreateVideoSessionParametersKHR;
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
PFN_vkCreateWaylandSurfaceKHR glad_vkCreateWaylandSurfaceKHR = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkCreateWaylandSurfaceKHR(VkInstance                           instance,
                                                                        const VkWaylandSurfaceCreateInfoKHR *pCreateInfo,
                                                                        const VkAllocationCallbacks         *pAllocator,
                                                                        VkSurfaceKHR                        *pSurface) {
        VkResult ret;
        _pre_call_vulkan_callback("vkCreateWaylandSurfaceKHR", (GLADapiproc)glad_vkCreateWaylandSurfaceKHR, 4, instance, pCreateInfo, pAllocator, pSurface);
        ret = glad_vkCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkCreateWaylandSurfaceKHR",
                                   (GLADapiproc)glad_vkCreateWaylandSurfaceKHR,
                                   4,
                                   instance,
                                   pCreateInfo,
                                   pAllocator,
                                   pSurface);
        return ret;
}
PFN_vkCreateWaylandSurfaceKHR glad_debug_vkCreateWaylandSurfaceKHR = glad_debug_impl_vkCreateWaylandSurfaceKHR;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkCreateWin32SurfaceKHR  glad_vkCreateWin32SurfaceKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateWin32SurfaceKHR(VkInstance                         instance,
                                                                     const VkWin32SurfaceCreateInfoKHR *pCreateInfo,
                                                                     const VkAllocationCallbacks       *pAllocator,
                                                                     VkSurfaceKHR                      *pSurface) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateWin32SurfaceKHR", (GLADapiproc)glad_vkCreateWin32SurfaceKHR, 4, instance, pCreateInfo, pAllocator, pSurface);
	ret = glad_vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateWin32SurfaceKHR",
	                           (GLADapiproc)glad_vkCreateWin32SurfaceKHR,
	                           4,
	                           instance,
	                           pCreateInfo,
	                           pAllocator,
	                           pSurface);
	return ret;
}
PFN_vkCreateWin32SurfaceKHR glad_debug_vkCreateWin32SurfaceKHR = glad_debug_impl_vkCreateWin32SurfaceKHR;

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
PFN_vkCreateXcbSurfaceKHR    glad_vkCreateXcbSurfaceKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateXcbSurfaceKHR(VkInstance                       instance,
                                                                   const VkXcbSurfaceCreateInfoKHR *pCreateInfo,
                                                                   const VkAllocationCallbacks     *pAllocator,
                                                                   VkSurfaceKHR                    *pSurface) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateXcbSurfaceKHR", (GLADapiproc)glad_vkCreateXcbSurfaceKHR, 4, instance, pCreateInfo, pAllocator, pSurface);
	ret = glad_vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateXcbSurfaceKHR",
	                           (GLADapiproc)glad_vkCreateXcbSurfaceKHR,
	                           4,
	                           instance,
	                           pCreateInfo,
	                           pAllocator,
	                           pSurface);
	return ret;
}
PFN_vkCreateXcbSurfaceKHR glad_debug_vkCreateXcbSurfaceKHR = glad_debug_impl_vkCreateXcbSurfaceKHR;

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
PFN_vkCreateXlibSurfaceKHR   glad_vkCreateXlibSurfaceKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkCreateXlibSurfaceKHR(VkInstance                        instance,
                                                                    const VkXlibSurfaceCreateInfoKHR *pCreateInfo,
                                                                    const VkAllocationCallbacks      *pAllocator,
                                                                    VkSurfaceKHR                     *pSurface) {
	VkResult ret;
	_pre_call_vulkan_callback("vkCreateXlibSurfaceKHR", (GLADapiproc)glad_vkCreateXlibSurfaceKHR, 4, instance, pCreateInfo, pAllocator, pSurface);
	ret = glad_vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkCreateXlibSurfaceKHR",
	                           (GLADapiproc)glad_vkCreateXlibSurfaceKHR,
	                           4,
	                           instance,
	                           pCreateInfo,
	                           pAllocator,
	                           pSurface);
	return ret;
}
PFN_vkCreateXlibSurfaceKHR glad_debug_vkCreateXlibSurfaceKHR = glad_debug_impl_vkCreateXlibSurfaceKHR;

#endif
PFN_vkDebugMarkerSetObjectNameEXT glad_vkDebugMarkerSetObjectNameEXT = NULL;
static VkResult GLAD_API_PTR      glad_debug_impl_vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT *pNameInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkDebugMarkerSetObjectNameEXT", (GLADapiproc)glad_vkDebugMarkerSetObjectNameEXT, 2, device, pNameInfo);
        ret = glad_vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
        _post_call_vulkan_callback((void *)&ret, "vkDebugMarkerSetObjectNameEXT", (GLADapiproc)glad_vkDebugMarkerSetObjectNameEXT, 2, device, pNameInfo);
        return ret;
}
PFN_vkDebugMarkerSetObjectNameEXT glad_debug_vkDebugMarkerSetObjectNameEXT = glad_debug_impl_vkDebugMarkerSetObjectNameEXT;
PFN_vkDebugMarkerSetObjectTagEXT  glad_vkDebugMarkerSetObjectTagEXT = NULL;
static VkResult GLAD_API_PTR      glad_debug_impl_vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT *pTagInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkDebugMarkerSetObjectTagEXT", (GLADapiproc)glad_vkDebugMarkerSetObjectTagEXT, 2, device, pTagInfo);
        ret = glad_vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
        _post_call_vulkan_callback((void *)&ret, "vkDebugMarkerSetObjectTagEXT", (GLADapiproc)glad_vkDebugMarkerSetObjectTagEXT, 2, device, pTagInfo);
        return ret;
}
PFN_vkDebugMarkerSetObjectTagEXT glad_debug_vkDebugMarkerSetObjectTagEXT = glad_debug_impl_vkDebugMarkerSetObjectTagEXT;
PFN_vkDebugReportMessageEXT      glad_vkDebugReportMessageEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkDebugReportMessageEXT(VkInstance                 instance,
                                                                         VkDebugReportFlagsEXT      flags,
                                                                         VkDebugReportObjectTypeEXT objectType,
                                                                         uint64_t                   object,
                                                                         size_t                     location,
                                                                         int32_t                    messageCode,
                                                                         const char                *pLayerPrefix,
                                                                         const char                *pMessage) {
        _pre_call_vulkan_callback("vkDebugReportMessageEXT",
                                  (GLADapiproc)glad_vkDebugReportMessageEXT,
                                  8,
                                  instance,
                                  flags,
                                  objectType,
                                  object,
                                  location,
                                  messageCode,
                                  pLayerPrefix,
                                  pMessage);
        glad_vkDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
        _post_call_vulkan_callback(NULL,
                                   "vkDebugReportMessageEXT",
                                   (GLADapiproc)glad_vkDebugReportMessageEXT,
                                   8,
                                   instance,
                                   flags,
                                   objectType,
                                   object,
                                   location,
                                   messageCode,
                                   pLayerPrefix,
                                   pMessage);
}
PFN_vkDebugReportMessageEXT    glad_debug_vkDebugReportMessageEXT = glad_debug_impl_vkDebugReportMessageEXT;
PFN_vkDeferredOperationJoinKHR glad_vkDeferredOperationJoinKHR = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation) {
        VkResult ret;
        _pre_call_vulkan_callback("vkDeferredOperationJoinKHR", (GLADapiproc)glad_vkDeferredOperationJoinKHR, 2, device, operation);
        ret = glad_vkDeferredOperationJoinKHR(device, operation);
        _post_call_vulkan_callback((void *)&ret, "vkDeferredOperationJoinKHR", (GLADapiproc)glad_vkDeferredOperationJoinKHR, 2, device, operation);
        return ret;
}
PFN_vkDeferredOperationJoinKHR        glad_debug_vkDeferredOperationJoinKHR = glad_debug_impl_vkDeferredOperationJoinKHR;
PFN_vkDestroyAccelerationStructureKHR glad_vkDestroyAccelerationStructureKHR = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkDestroyAccelerationStructureKHR(VkDevice                     device,
                                                                                        VkAccelerationStructureKHR   accelerationStructure,
                                                                                        const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyAccelerationStructureKHR",
                                  (GLADapiproc)glad_vkDestroyAccelerationStructureKHR,
                                  3,
                                  device,
                                  accelerationStructure,
                                  pAllocator);
        glad_vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyAccelerationStructureKHR",
                                   (GLADapiproc)glad_vkDestroyAccelerationStructureKHR,
                                   3,
                                   device,
                                   accelerationStructure,
                                   pAllocator);
}
PFN_vkDestroyAccelerationStructureKHR glad_debug_vkDestroyAccelerationStructureKHR = glad_debug_impl_vkDestroyAccelerationStructureKHR;
PFN_vkDestroyAccelerationStructureNV  glad_vkDestroyAccelerationStructureNV = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkDestroyAccelerationStructureNV(VkDevice                     device,
                                                                                       VkAccelerationStructureNV    accelerationStructure,
                                                                                       const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyAccelerationStructureNV",
                                  (GLADapiproc)glad_vkDestroyAccelerationStructureNV,
                                  3,
                                  device,
                                  accelerationStructure,
                                  pAllocator);
        glad_vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyAccelerationStructureNV",
                                   (GLADapiproc)glad_vkDestroyAccelerationStructureNV,
                                   3,
                                   device,
                                   accelerationStructure,
                                   pAllocator);
}
PFN_vkDestroyAccelerationStructureNV glad_debug_vkDestroyAccelerationStructureNV = glad_debug_impl_vkDestroyAccelerationStructureNV;
PFN_vkDestroyBuffer                  glad_vkDestroyBuffer = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyBuffer", (GLADapiproc)glad_vkDestroyBuffer, 3, device, buffer, pAllocator);
        glad_vkDestroyBuffer(device, buffer, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyBuffer", (GLADapiproc)glad_vkDestroyBuffer, 3, device, buffer, pAllocator);
}
PFN_vkDestroyBuffer glad_debug_vkDestroyBuffer = glad_debug_impl_vkDestroyBuffer;
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkDestroyBufferCollectionFUCHSIA glad_vkDestroyBufferCollectionFUCHSIA = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkDestroyBufferCollectionFUCHSIA(VkDevice                     device,
                                                                                      VkBufferCollectionFUCHSIA    collection,
                                                                                      const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyBufferCollectionFUCHSIA", (GLADapiproc)glad_vkDestroyBufferCollectionFUCHSIA, 3, device, collection, pAllocator);
        glad_vkDestroyBufferCollectionFUCHSIA(device, collection, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyBufferCollectionFUCHSIA",
                                   (GLADapiproc)glad_vkDestroyBufferCollectionFUCHSIA,
                                   3,
                                   device,
                                   collection,
                                   pAllocator);
}
PFN_vkDestroyBufferCollectionFUCHSIA glad_debug_vkDestroyBufferCollectionFUCHSIA = glad_debug_impl_vkDestroyBufferCollectionFUCHSIA;

#endif
PFN_vkDestroyBufferView  glad_vkDestroyBufferView = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyBufferView", (GLADapiproc)glad_vkDestroyBufferView, 3, device, bufferView, pAllocator);
	glad_vkDestroyBufferView(device, bufferView, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyBufferView", (GLADapiproc)glad_vkDestroyBufferView, 3, device, bufferView, pAllocator);
}
PFN_vkDestroyBufferView  glad_debug_vkDestroyBufferView = glad_debug_impl_vkDestroyBufferView;
PFN_vkDestroyCommandPool glad_vkDestroyCommandPool = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyCommandPool", (GLADapiproc)glad_vkDestroyCommandPool, 3, device, commandPool, pAllocator);
	glad_vkDestroyCommandPool(device, commandPool, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyCommandPool", (GLADapiproc)glad_vkDestroyCommandPool, 3, device, commandPool, pAllocator);
}
PFN_vkDestroyCommandPool   glad_debug_vkDestroyCommandPool = glad_debug_impl_vkDestroyCommandPool;
PFN_vkDestroyCuFunctionNVX glad_vkDestroyCuFunctionNVX = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyCuFunctionNVX", (GLADapiproc)glad_vkDestroyCuFunctionNVX, 3, device, function, pAllocator);
        glad_vkDestroyCuFunctionNVX(device, function, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyCuFunctionNVX", (GLADapiproc)glad_vkDestroyCuFunctionNVX, 3, device, function, pAllocator);
}
PFN_vkDestroyCuFunctionNVX glad_debug_vkDestroyCuFunctionNVX = glad_debug_impl_vkDestroyCuFunctionNVX;
PFN_vkDestroyCuModuleNVX   glad_vkDestroyCuModuleNVX = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyCuModuleNVX", (GLADapiproc)glad_vkDestroyCuModuleNVX, 3, device, module, pAllocator);
        glad_vkDestroyCuModuleNVX(device, module, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyCuModuleNVX", (GLADapiproc)glad_vkDestroyCuModuleNVX, 3, device, module, pAllocator);
}
PFN_vkDestroyCuModuleNVX            glad_debug_vkDestroyCuModuleNVX = glad_debug_impl_vkDestroyCuModuleNVX;
PFN_vkDestroyDebugReportCallbackEXT glad_vkDestroyDebugReportCallbackEXT = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkDestroyDebugReportCallbackEXT(VkInstance                   instance,
                                                                                    VkDebugReportCallbackEXT     callback,
                                                                                    const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyDebugReportCallbackEXT", (GLADapiproc)glad_vkDestroyDebugReportCallbackEXT, 3, instance, callback, pAllocator);
        glad_vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyDebugReportCallbackEXT",
                                   (GLADapiproc)glad_vkDestroyDebugReportCallbackEXT,
                                   3,
                                   instance,
                                   callback,
                                   pAllocator);
}
PFN_vkDestroyDebugReportCallbackEXT glad_debug_vkDestroyDebugReportCallbackEXT = glad_debug_impl_vkDestroyDebugReportCallbackEXT;
PFN_vkDestroyDebugUtilsMessengerEXT glad_vkDestroyDebugUtilsMessengerEXT = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkDestroyDebugUtilsMessengerEXT(VkInstance                   instance,
                                                                                    VkDebugUtilsMessengerEXT     messenger,
                                                                                    const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyDebugUtilsMessengerEXT", (GLADapiproc)glad_vkDestroyDebugUtilsMessengerEXT, 3, instance, messenger, pAllocator);
        glad_vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyDebugUtilsMessengerEXT",
                                   (GLADapiproc)glad_vkDestroyDebugUtilsMessengerEXT,
                                   3,
                                   instance,
                                   messenger,
                                   pAllocator);
}
PFN_vkDestroyDebugUtilsMessengerEXT glad_debug_vkDestroyDebugUtilsMessengerEXT = glad_debug_impl_vkDestroyDebugUtilsMessengerEXT;
PFN_vkDestroyDeferredOperationKHR   glad_vkDestroyDeferredOperationKHR = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkDestroyDeferredOperationKHR(VkDevice                     device,
                                                                                  VkDeferredOperationKHR       operation,
                                                                                  const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyDeferredOperationKHR", (GLADapiproc)glad_vkDestroyDeferredOperationKHR, 3, device, operation, pAllocator);
        glad_vkDestroyDeferredOperationKHR(device, operation, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyDeferredOperationKHR", (GLADapiproc)glad_vkDestroyDeferredOperationKHR, 3, device, operation, pAllocator);
}
PFN_vkDestroyDeferredOperationKHR glad_debug_vkDestroyDeferredOperationKHR = glad_debug_impl_vkDestroyDeferredOperationKHR;
PFN_vkDestroyDescriptorPool       glad_vkDestroyDescriptorPool = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyDescriptorPool", (GLADapiproc)glad_vkDestroyDescriptorPool, 3, device, descriptorPool, pAllocator);
	glad_vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyDescriptorPool", (GLADapiproc)glad_vkDestroyDescriptorPool, 3, device, descriptorPool, pAllocator);
}
PFN_vkDestroyDescriptorPool      glad_debug_vkDestroyDescriptorPool = glad_debug_impl_vkDestroyDescriptorPool;
PFN_vkDestroyDescriptorSetLayout glad_vkDestroyDescriptorSetLayout = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkDestroyDescriptorSetLayout(VkDevice                     device,
                                                                              VkDescriptorSetLayout        descriptorSetLayout,
                                                                              const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyDescriptorSetLayout", (GLADapiproc)glad_vkDestroyDescriptorSetLayout, 3, device, descriptorSetLayout, pAllocator);
        glad_vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyDescriptorSetLayout",
                                   (GLADapiproc)glad_vkDestroyDescriptorSetLayout,
                                   3,
                                   device,
                                   descriptorSetLayout,
                                   pAllocator);
}
PFN_vkDestroyDescriptorSetLayout      glad_debug_vkDestroyDescriptorSetLayout = glad_debug_impl_vkDestroyDescriptorSetLayout;
PFN_vkDestroyDescriptorUpdateTemplate glad_vkDestroyDescriptorUpdateTemplate = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkDestroyDescriptorUpdateTemplate(VkDevice                     device,
                                                                                        VkDescriptorUpdateTemplate   descriptorUpdateTemplate,
                                                                                        const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyDescriptorUpdateTemplate",
                                  (GLADapiproc)glad_vkDestroyDescriptorUpdateTemplate,
                                  3,
                                  device,
                                  descriptorUpdateTemplate,
                                  pAllocator);
        glad_vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyDescriptorUpdateTemplate",
                                   (GLADapiproc)glad_vkDestroyDescriptorUpdateTemplate,
                                   3,
                                   device,
                                   descriptorUpdateTemplate,
                                   pAllocator);
}
PFN_vkDestroyDescriptorUpdateTemplate    glad_debug_vkDestroyDescriptorUpdateTemplate = glad_debug_impl_vkDestroyDescriptorUpdateTemplate;
PFN_vkDestroyDescriptorUpdateTemplateKHR glad_vkDestroyDescriptorUpdateTemplateKHR = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkDestroyDescriptorUpdateTemplateKHR(VkDevice                     device,
                                                                                              VkDescriptorUpdateTemplate   descriptorUpdateTemplate,
                                                                                              const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyDescriptorUpdateTemplateKHR",
                                  (GLADapiproc)glad_vkDestroyDescriptorUpdateTemplateKHR,
                                  3,
                                  device,
                                  descriptorUpdateTemplate,
                                  pAllocator);
        glad_vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyDescriptorUpdateTemplateKHR",
                                   (GLADapiproc)glad_vkDestroyDescriptorUpdateTemplateKHR,
                                   3,
                                   device,
                                   descriptorUpdateTemplate,
                                   pAllocator);
}
PFN_vkDestroyDescriptorUpdateTemplateKHR glad_debug_vkDestroyDescriptorUpdateTemplateKHR = glad_debug_impl_vkDestroyDescriptorUpdateTemplateKHR;
PFN_vkDestroyDevice                      glad_vkDestroyDevice = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkDestroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyDevice", (GLADapiproc)glad_vkDestroyDevice, 2, device, pAllocator);
        glad_vkDestroyDevice(device, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyDevice", (GLADapiproc)glad_vkDestroyDevice, 2, device, pAllocator);
}
PFN_vkDestroyDevice      glad_debug_vkDestroyDevice = glad_debug_impl_vkDestroyDevice;
PFN_vkDestroyEvent       glad_vkDestroyEvent = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyEvent", (GLADapiproc)glad_vkDestroyEvent, 3, device, event, pAllocator);
	glad_vkDestroyEvent(device, event, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyEvent", (GLADapiproc)glad_vkDestroyEvent, 3, device, event, pAllocator);
}
PFN_vkDestroyEvent       glad_debug_vkDestroyEvent = glad_debug_impl_vkDestroyEvent;
PFN_vkDestroyFence       glad_vkDestroyFence = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyFence", (GLADapiproc)glad_vkDestroyFence, 3, device, fence, pAllocator);
	glad_vkDestroyFence(device, fence, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyFence", (GLADapiproc)glad_vkDestroyFence, 3, device, fence, pAllocator);
}
PFN_vkDestroyFence       glad_debug_vkDestroyFence = glad_debug_impl_vkDestroyFence;
PFN_vkDestroyFramebuffer glad_vkDestroyFramebuffer = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyFramebuffer", (GLADapiproc)glad_vkDestroyFramebuffer, 3, device, framebuffer, pAllocator);
	glad_vkDestroyFramebuffer(device, framebuffer, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyFramebuffer", (GLADapiproc)glad_vkDestroyFramebuffer, 3, device, framebuffer, pAllocator);
}
PFN_vkDestroyFramebuffer glad_debug_vkDestroyFramebuffer = glad_debug_impl_vkDestroyFramebuffer;
PFN_vkDestroyImage       glad_vkDestroyImage = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyImage", (GLADapiproc)glad_vkDestroyImage, 3, device, image, pAllocator);
	glad_vkDestroyImage(device, image, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyImage", (GLADapiproc)glad_vkDestroyImage, 3, device, image, pAllocator);
}
PFN_vkDestroyImage       glad_debug_vkDestroyImage = glad_debug_impl_vkDestroyImage;
PFN_vkDestroyImageView   glad_vkDestroyImageView = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyImageView", (GLADapiproc)glad_vkDestroyImageView, 3, device, imageView, pAllocator);
	glad_vkDestroyImageView(device, imageView, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyImageView", (GLADapiproc)glad_vkDestroyImageView, 3, device, imageView, pAllocator);
}
PFN_vkDestroyImageView                glad_debug_vkDestroyImageView = glad_debug_impl_vkDestroyImageView;
PFN_vkDestroyIndirectCommandsLayoutNV glad_vkDestroyIndirectCommandsLayoutNV = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkDestroyIndirectCommandsLayoutNV(VkDevice                     device,
                                                                                        VkIndirectCommandsLayoutNV   indirectCommandsLayout,
                                                                                        const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyIndirectCommandsLayoutNV",
                                  (GLADapiproc)glad_vkDestroyIndirectCommandsLayoutNV,
                                  3,
                                  device,
                                  indirectCommandsLayout,
                                  pAllocator);
        glad_vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyIndirectCommandsLayoutNV",
                                   (GLADapiproc)glad_vkDestroyIndirectCommandsLayoutNV,
                                   3,
                                   device,
                                   indirectCommandsLayout,
                                   pAllocator);
}
PFN_vkDestroyIndirectCommandsLayoutNV glad_debug_vkDestroyIndirectCommandsLayoutNV = glad_debug_impl_vkDestroyIndirectCommandsLayoutNV;
PFN_vkDestroyInstance                 glad_vkDestroyInstance = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyInstance", (GLADapiproc)glad_vkDestroyInstance, 2, instance, pAllocator);
        glad_vkDestroyInstance(instance, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyInstance", (GLADapiproc)glad_vkDestroyInstance, 2, instance, pAllocator);
}
PFN_vkDestroyInstance    glad_debug_vkDestroyInstance = glad_debug_impl_vkDestroyInstance;
PFN_vkDestroyMicromapEXT glad_vkDestroyMicromapEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyMicromapEXT", (GLADapiproc)glad_vkDestroyMicromapEXT, 3, device, micromap, pAllocator);
	glad_vkDestroyMicromapEXT(device, micromap, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyMicromapEXT", (GLADapiproc)glad_vkDestroyMicromapEXT, 3, device, micromap, pAllocator);
}
PFN_vkDestroyMicromapEXT          glad_debug_vkDestroyMicromapEXT = glad_debug_impl_vkDestroyMicromapEXT;
PFN_vkDestroyOpticalFlowSessionNV glad_vkDestroyOpticalFlowSessionNV = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkDestroyOpticalFlowSessionNV(VkDevice                     device,
                                                                                VkOpticalFlowSessionNV       session,
                                                                                const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyOpticalFlowSessionNV", (GLADapiproc)glad_vkDestroyOpticalFlowSessionNV, 3, device, session, pAllocator);
        glad_vkDestroyOpticalFlowSessionNV(device, session, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyOpticalFlowSessionNV", (GLADapiproc)glad_vkDestroyOpticalFlowSessionNV, 3, device, session, pAllocator);
}
PFN_vkDestroyOpticalFlowSessionNV glad_debug_vkDestroyOpticalFlowSessionNV = glad_debug_impl_vkDestroyOpticalFlowSessionNV;
PFN_vkDestroyPipeline             glad_vkDestroyPipeline = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyPipeline", (GLADapiproc)glad_vkDestroyPipeline, 3, device, pipeline, pAllocator);
        glad_vkDestroyPipeline(device, pipeline, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyPipeline", (GLADapiproc)glad_vkDestroyPipeline, 3, device, pipeline, pAllocator);
}
PFN_vkDestroyPipeline      glad_debug_vkDestroyPipeline = glad_debug_impl_vkDestroyPipeline;
PFN_vkDestroyPipelineCache glad_vkDestroyPipelineCache = NULL;
static void GLAD_API_PTR   glad_debug_impl_vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyPipelineCache", (GLADapiproc)glad_vkDestroyPipelineCache, 3, device, pipelineCache, pAllocator);
        glad_vkDestroyPipelineCache(device, pipelineCache, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyPipelineCache", (GLADapiproc)glad_vkDestroyPipelineCache, 3, device, pipelineCache, pAllocator);
}
PFN_vkDestroyPipelineCache  glad_debug_vkDestroyPipelineCache = glad_debug_impl_vkDestroyPipelineCache;
PFN_vkDestroyPipelineLayout glad_vkDestroyPipelineLayout = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyPipelineLayout", (GLADapiproc)glad_vkDestroyPipelineLayout, 3, device, pipelineLayout, pAllocator);
        glad_vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyPipelineLayout", (GLADapiproc)glad_vkDestroyPipelineLayout, 3, device, pipelineLayout, pAllocator);
}
PFN_vkDestroyPipelineLayout  glad_debug_vkDestroyPipelineLayout = glad_debug_impl_vkDestroyPipelineLayout;
PFN_vkDestroyPrivateDataSlot glad_vkDestroyPrivateDataSlot = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyPrivateDataSlot", (GLADapiproc)glad_vkDestroyPrivateDataSlot, 3, device, privateDataSlot, pAllocator);
	glad_vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyPrivateDataSlot", (GLADapiproc)glad_vkDestroyPrivateDataSlot, 3, device, privateDataSlot, pAllocator);
}
PFN_vkDestroyPrivateDataSlot    glad_debug_vkDestroyPrivateDataSlot = glad_debug_impl_vkDestroyPrivateDataSlot;
PFN_vkDestroyPrivateDataSlotEXT glad_vkDestroyPrivateDataSlotEXT = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkDestroyPrivateDataSlotEXT(VkDevice                     device,
                                                                            VkPrivateDataSlot            privateDataSlot,
                                                                            const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyPrivateDataSlotEXT", (GLADapiproc)glad_vkDestroyPrivateDataSlotEXT, 3, device, privateDataSlot, pAllocator);
        glad_vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyPrivateDataSlotEXT", (GLADapiproc)glad_vkDestroyPrivateDataSlotEXT, 3, device, privateDataSlot, pAllocator);
}
PFN_vkDestroyPrivateDataSlotEXT glad_debug_vkDestroyPrivateDataSlotEXT = glad_debug_impl_vkDestroyPrivateDataSlotEXT;
PFN_vkDestroyQueryPool          glad_vkDestroyQueryPool = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyQueryPool", (GLADapiproc)glad_vkDestroyQueryPool, 3, device, queryPool, pAllocator);
        glad_vkDestroyQueryPool(device, queryPool, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyQueryPool", (GLADapiproc)glad_vkDestroyQueryPool, 3, device, queryPool, pAllocator);
}
PFN_vkDestroyQueryPool   glad_debug_vkDestroyQueryPool = glad_debug_impl_vkDestroyQueryPool;
PFN_vkDestroyRenderPass  glad_vkDestroyRenderPass = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyRenderPass", (GLADapiproc)glad_vkDestroyRenderPass, 3, device, renderPass, pAllocator);
	glad_vkDestroyRenderPass(device, renderPass, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyRenderPass", (GLADapiproc)glad_vkDestroyRenderPass, 3, device, renderPass, pAllocator);
}
PFN_vkDestroyRenderPass  glad_debug_vkDestroyRenderPass = glad_debug_impl_vkDestroyRenderPass;
PFN_vkDestroySampler     glad_vkDestroySampler = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroySampler", (GLADapiproc)glad_vkDestroySampler, 3, device, sampler, pAllocator);
	glad_vkDestroySampler(device, sampler, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroySampler", (GLADapiproc)glad_vkDestroySampler, 3, device, sampler, pAllocator);
}
PFN_vkDestroySampler                glad_debug_vkDestroySampler = glad_debug_impl_vkDestroySampler;
PFN_vkDestroySamplerYcbcrConversion glad_vkDestroySamplerYcbcrConversion = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkDestroySamplerYcbcrConversion(VkDevice                     device,
                                                                                    VkSamplerYcbcrConversion     ycbcrConversion,
                                                                                    const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroySamplerYcbcrConversion", (GLADapiproc)glad_vkDestroySamplerYcbcrConversion, 3, device, ycbcrConversion, pAllocator);
        glad_vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroySamplerYcbcrConversion",
                                   (GLADapiproc)glad_vkDestroySamplerYcbcrConversion,
                                   3,
                                   device,
                                   ycbcrConversion,
                                   pAllocator);
}
PFN_vkDestroySamplerYcbcrConversion    glad_debug_vkDestroySamplerYcbcrConversion = glad_debug_impl_vkDestroySamplerYcbcrConversion;
PFN_vkDestroySamplerYcbcrConversionKHR glad_vkDestroySamplerYcbcrConversionKHR = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkDestroySamplerYcbcrConversionKHR(VkDevice                     device,
                                                                                          VkSamplerYcbcrConversion     ycbcrConversion,
                                                                                          const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroySamplerYcbcrConversionKHR",
                                  (GLADapiproc)glad_vkDestroySamplerYcbcrConversionKHR,
                                  3,
                                  device,
                                  ycbcrConversion,
                                  pAllocator);
        glad_vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroySamplerYcbcrConversionKHR",
                                   (GLADapiproc)glad_vkDestroySamplerYcbcrConversionKHR,
                                   3,
                                   device,
                                   ycbcrConversion,
                                   pAllocator);
}
PFN_vkDestroySamplerYcbcrConversionKHR glad_debug_vkDestroySamplerYcbcrConversionKHR = glad_debug_impl_vkDestroySamplerYcbcrConversionKHR;
PFN_vkDestroySemaphore                 glad_vkDestroySemaphore = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroySemaphore", (GLADapiproc)glad_vkDestroySemaphore, 3, device, semaphore, pAllocator);
        glad_vkDestroySemaphore(device, semaphore, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroySemaphore", (GLADapiproc)glad_vkDestroySemaphore, 3, device, semaphore, pAllocator);
}
PFN_vkDestroySemaphore   glad_debug_vkDestroySemaphore = glad_debug_impl_vkDestroySemaphore;
PFN_vkDestroyShaderEXT   glad_vkDestroyShaderEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyShaderEXT", (GLADapiproc)glad_vkDestroyShaderEXT, 3, device, shader, pAllocator);
	glad_vkDestroyShaderEXT(device, shader, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyShaderEXT", (GLADapiproc)glad_vkDestroyShaderEXT, 3, device, shader, pAllocator);
}
PFN_vkDestroyShaderEXT    glad_debug_vkDestroyShaderEXT = glad_debug_impl_vkDestroyShaderEXT;
PFN_vkDestroyShaderModule glad_vkDestroyShaderModule = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyShaderModule", (GLADapiproc)glad_vkDestroyShaderModule, 3, device, shaderModule, pAllocator);
        glad_vkDestroyShaderModule(device, shaderModule, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyShaderModule", (GLADapiproc)glad_vkDestroyShaderModule, 3, device, shaderModule, pAllocator);
}
PFN_vkDestroyShaderModule glad_debug_vkDestroyShaderModule = glad_debug_impl_vkDestroyShaderModule;
PFN_vkDestroySurfaceKHR   glad_vkDestroySurfaceKHR = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroySurfaceKHR", (GLADapiproc)glad_vkDestroySurfaceKHR, 3, instance, surface, pAllocator);
        glad_vkDestroySurfaceKHR(instance, surface, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroySurfaceKHR", (GLADapiproc)glad_vkDestroySurfaceKHR, 3, instance, surface, pAllocator);
}
PFN_vkDestroySurfaceKHR   glad_debug_vkDestroySurfaceKHR = glad_debug_impl_vkDestroySurfaceKHR;
PFN_vkDestroySwapchainKHR glad_vkDestroySwapchainKHR = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroySwapchainKHR", (GLADapiproc)glad_vkDestroySwapchainKHR, 3, device, swapchain, pAllocator);
        glad_vkDestroySwapchainKHR(device, swapchain, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroySwapchainKHR", (GLADapiproc)glad_vkDestroySwapchainKHR, 3, device, swapchain, pAllocator);
}
PFN_vkDestroySwapchainKHR       glad_debug_vkDestroySwapchainKHR = glad_debug_impl_vkDestroySwapchainKHR;
PFN_vkDestroyValidationCacheEXT glad_vkDestroyValidationCacheEXT = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkDestroyValidationCacheEXT(VkDevice                     device,
                                                                            VkValidationCacheEXT         validationCache,
                                                                            const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyValidationCacheEXT", (GLADapiproc)glad_vkDestroyValidationCacheEXT, 3, device, validationCache, pAllocator);
        glad_vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
        _post_call_vulkan_callback(NULL, "vkDestroyValidationCacheEXT", (GLADapiproc)glad_vkDestroyValidationCacheEXT, 3, device, validationCache, pAllocator);
}
PFN_vkDestroyValidationCacheEXT glad_debug_vkDestroyValidationCacheEXT = glad_debug_impl_vkDestroyValidationCacheEXT;
PFN_vkDestroyVideoSessionKHR    glad_vkDestroyVideoSessionKHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkDestroyVideoSessionKHR", (GLADapiproc)glad_vkDestroyVideoSessionKHR, 3, device, videoSession, pAllocator);
	glad_vkDestroyVideoSessionKHR(device, videoSession, pAllocator);
	_post_call_vulkan_callback(NULL, "vkDestroyVideoSessionKHR", (GLADapiproc)glad_vkDestroyVideoSessionKHR, 3, device, videoSession, pAllocator);
}
PFN_vkDestroyVideoSessionKHR           glad_debug_vkDestroyVideoSessionKHR = glad_debug_impl_vkDestroyVideoSessionKHR;
PFN_vkDestroyVideoSessionParametersKHR glad_vkDestroyVideoSessionParametersKHR = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkDestroyVideoSessionParametersKHR(VkDevice                     device,
                                                                                          VkVideoSessionParametersKHR  videoSessionParameters,
                                                                                          const VkAllocationCallbacks *pAllocator) {
        _pre_call_vulkan_callback("vkDestroyVideoSessionParametersKHR",
                                  (GLADapiproc)glad_vkDestroyVideoSessionParametersKHR,
                                  3,
                                  device,
                                  videoSessionParameters,
                                  pAllocator);
        glad_vkDestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);
        _post_call_vulkan_callback(NULL,
                                   "vkDestroyVideoSessionParametersKHR",
                                   (GLADapiproc)glad_vkDestroyVideoSessionParametersKHR,
                                   3,
                                   device,
                                   videoSessionParameters,
                                   pAllocator);
}
PFN_vkDestroyVideoSessionParametersKHR glad_debug_vkDestroyVideoSessionParametersKHR = glad_debug_impl_vkDestroyVideoSessionParametersKHR;
PFN_vkDeviceWaitIdle                   glad_vkDeviceWaitIdle = NULL;
static VkResult GLAD_API_PTR           glad_debug_impl_vkDeviceWaitIdle(VkDevice device) {
        VkResult ret;
        _pre_call_vulkan_callback("vkDeviceWaitIdle", (GLADapiproc)glad_vkDeviceWaitIdle, 1, device);
        ret = glad_vkDeviceWaitIdle(device);
        _post_call_vulkan_callback((void *)&ret, "vkDeviceWaitIdle", (GLADapiproc)glad_vkDeviceWaitIdle, 1, device);
        return ret;
}
PFN_vkDeviceWaitIdle         glad_debug_vkDeviceWaitIdle = glad_debug_impl_vkDeviceWaitIdle;
PFN_vkDisplayPowerControlEXT glad_vkDisplayPowerControlEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT *pDisplayPowerInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkDisplayPowerControlEXT", (GLADapiproc)glad_vkDisplayPowerControlEXT, 3, device, display, pDisplayPowerInfo);
	ret = glad_vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
	_post_call_vulkan_callback((void *)&ret, "vkDisplayPowerControlEXT", (GLADapiproc)glad_vkDisplayPowerControlEXT, 3, device, display, pDisplayPowerInfo);
	return ret;
}
PFN_vkDisplayPowerControlEXT glad_debug_vkDisplayPowerControlEXT = glad_debug_impl_vkDisplayPowerControlEXT;
PFN_vkEndCommandBuffer       glad_vkEndCommandBuffer = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkEndCommandBuffer(VkCommandBuffer commandBuffer) {
	VkResult ret;
	_pre_call_vulkan_callback("vkEndCommandBuffer", (GLADapiproc)glad_vkEndCommandBuffer, 1, commandBuffer);
	ret = glad_vkEndCommandBuffer(commandBuffer);
	_post_call_vulkan_callback((void *)&ret, "vkEndCommandBuffer", (GLADapiproc)glad_vkEndCommandBuffer, 1, commandBuffer);
	return ret;
}
PFN_vkEndCommandBuffer                   glad_debug_vkEndCommandBuffer = glad_debug_impl_vkEndCommandBuffer;
PFN_vkEnumerateDeviceExtensionProperties glad_vkEnumerateDeviceExtensionProperties = NULL;
static VkResult GLAD_API_PTR             glad_debug_impl_vkEnumerateDeviceExtensionProperties(VkPhysicalDevice       physicalDevice,
                                                                                              const char            *pLayerName,
                                                                                              uint32_t              *pPropertyCount,
                                                                                              VkExtensionProperties *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkEnumerateDeviceExtensionProperties",
                                  (GLADapiproc)glad_vkEnumerateDeviceExtensionProperties,
                                  4,
                                  physicalDevice,
                                  pLayerName,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkEnumerateDeviceExtensionProperties",
                                   (GLADapiproc)glad_vkEnumerateDeviceExtensionProperties,
                                   4,
                                   physicalDevice,
                                   pLayerName,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkEnumerateDeviceExtensionProperties glad_debug_vkEnumerateDeviceExtensionProperties = glad_debug_impl_vkEnumerateDeviceExtensionProperties;
PFN_vkEnumerateDeviceLayerProperties     glad_vkEnumerateDeviceLayerProperties = NULL;
static VkResult GLAD_API_PTR             glad_debug_impl_vkEnumerateDeviceLayerProperties(VkPhysicalDevice   physicalDevice,
                                                                                          uint32_t          *pPropertyCount,
                                                                                          VkLayerProperties *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkEnumerateDeviceLayerProperties",
                                  (GLADapiproc)glad_vkEnumerateDeviceLayerProperties,
                                  3,
                                  physicalDevice,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkEnumerateDeviceLayerProperties",
                                   (GLADapiproc)glad_vkEnumerateDeviceLayerProperties,
                                   3,
                                   physicalDevice,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkEnumerateDeviceLayerProperties       glad_debug_vkEnumerateDeviceLayerProperties = glad_debug_impl_vkEnumerateDeviceLayerProperties;
PFN_vkEnumerateInstanceExtensionProperties glad_vkEnumerateInstanceExtensionProperties = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkEnumerateInstanceExtensionProperties(const char            *pLayerName,
                                                                                                  uint32_t              *pPropertyCount,
                                                                                                  VkExtensionProperties *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkEnumerateInstanceExtensionProperties",
                                  (GLADapiproc)glad_vkEnumerateInstanceExtensionProperties,
                                  3,
                                  pLayerName,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkEnumerateInstanceExtensionProperties",
                                   (GLADapiproc)glad_vkEnumerateInstanceExtensionProperties,
                                   3,
                                   pLayerName,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkEnumerateInstanceExtensionProperties glad_debug_vkEnumerateInstanceExtensionProperties = glad_debug_impl_vkEnumerateInstanceExtensionProperties;
PFN_vkEnumerateInstanceLayerProperties     glad_vkEnumerateInstanceLayerProperties = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkEnumerateInstanceLayerProperties(uint32_t *pPropertyCount, VkLayerProperties *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkEnumerateInstanceLayerProperties", (GLADapiproc)glad_vkEnumerateInstanceLayerProperties, 2, pPropertyCount, pProperties);
        ret = glad_vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkEnumerateInstanceLayerProperties",
                                   (GLADapiproc)glad_vkEnumerateInstanceLayerProperties,
                                   2,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkEnumerateInstanceLayerProperties glad_debug_vkEnumerateInstanceLayerProperties = glad_debug_impl_vkEnumerateInstanceLayerProperties;
PFN_vkEnumerateInstanceVersion         glad_vkEnumerateInstanceVersion = NULL;
static VkResult GLAD_API_PTR           glad_debug_impl_vkEnumerateInstanceVersion(uint32_t *pApiVersion) {
        VkResult ret;
        _pre_call_vulkan_callback("vkEnumerateInstanceVersion", (GLADapiproc)glad_vkEnumerateInstanceVersion, 1, pApiVersion);
        ret = glad_vkEnumerateInstanceVersion(pApiVersion);
        _post_call_vulkan_callback((void *)&ret, "vkEnumerateInstanceVersion", (GLADapiproc)glad_vkEnumerateInstanceVersion, 1, pApiVersion);
        return ret;
}
PFN_vkEnumerateInstanceVersion      glad_debug_vkEnumerateInstanceVersion = glad_debug_impl_vkEnumerateInstanceVersion;
PFN_vkEnumeratePhysicalDeviceGroups glad_vkEnumeratePhysicalDeviceGroups = NULL;
static VkResult GLAD_API_PTR        glad_debug_impl_vkEnumeratePhysicalDeviceGroups(VkInstance                       instance,
                                                                                    uint32_t                        *pPhysicalDeviceGroupCount,
                                                                                    VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkEnumeratePhysicalDeviceGroups",
                                  (GLADapiproc)glad_vkEnumeratePhysicalDeviceGroups,
                                  3,
                                  instance,
                                  pPhysicalDeviceGroupCount,
                                  pPhysicalDeviceGroupProperties);
        ret = glad_vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkEnumeratePhysicalDeviceGroups",
                                   (GLADapiproc)glad_vkEnumeratePhysicalDeviceGroups,
                                   3,
                                   instance,
                                   pPhysicalDeviceGroupCount,
                                   pPhysicalDeviceGroupProperties);
        return ret;
}
PFN_vkEnumeratePhysicalDeviceGroups    glad_debug_vkEnumeratePhysicalDeviceGroups = glad_debug_impl_vkEnumeratePhysicalDeviceGroups;
PFN_vkEnumeratePhysicalDeviceGroupsKHR glad_vkEnumeratePhysicalDeviceGroupsKHR = NULL;
static VkResult GLAD_API_PTR           glad_debug_impl_vkEnumeratePhysicalDeviceGroupsKHR(VkInstance                       instance,
                                                                                          uint32_t                        *pPhysicalDeviceGroupCount,
                                                                                          VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkEnumeratePhysicalDeviceGroupsKHR",
                                  (GLADapiproc)glad_vkEnumeratePhysicalDeviceGroupsKHR,
                                  3,
                                  instance,
                                  pPhysicalDeviceGroupCount,
                                  pPhysicalDeviceGroupProperties);
        ret = glad_vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkEnumeratePhysicalDeviceGroupsKHR",
                                   (GLADapiproc)glad_vkEnumeratePhysicalDeviceGroupsKHR,
                                   3,
                                   instance,
                                   pPhysicalDeviceGroupCount,
                                   pPhysicalDeviceGroupProperties);
        return ret;
}
PFN_vkEnumeratePhysicalDeviceGroupsKHR glad_debug_vkEnumeratePhysicalDeviceGroupsKHR = glad_debug_impl_vkEnumeratePhysicalDeviceGroupsKHR;
PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR glad_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice                    physicalDevice,
                                                                                uint32_t                            queueFamilyIndex,
                                                                                uint32_t                           *pCounterCount,
                                                                                VkPerformanceCounterKHR            *pCounters,
                                                                                VkPerformanceCounterDescriptionKHR *pCounterDescriptions) {
	VkResult ret;
	_pre_call_vulkan_callback("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR",
	                          (GLADapiproc)glad_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR,
	                          5,
	                          physicalDevice,
	                          queueFamilyIndex,
	                          pCounterCount,
	                          pCounters,
	                          pCounterDescriptions);
	ret = glad_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice,
	                                                                           queueFamilyIndex,
	                                                                           pCounterCount,
	                                                                           pCounters,
	                                                                           pCounterDescriptions);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR",
	                           (GLADapiproc)glad_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR,
	                           5,
	                           physicalDevice,
	                           queueFamilyIndex,
	                           pCounterCount,
	                           pCounters,
	                           pCounterDescriptions);
	return ret;
}
PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR glad_debug_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR =
	glad_debug_impl_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
PFN_vkEnumeratePhysicalDevices glad_vkEnumeratePhysicalDevices = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkEnumeratePhysicalDevices(VkInstance        instance,
                                                                          uint32_t         *pPhysicalDeviceCount,
                                                                          VkPhysicalDevice *pPhysicalDevices) {
        VkResult ret;
        _pre_call_vulkan_callback("vkEnumeratePhysicalDevices",
                                  (GLADapiproc)glad_vkEnumeratePhysicalDevices,
                                  3,
                                  instance,
                                  pPhysicalDeviceCount,
                                  pPhysicalDevices);
        ret = glad_vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkEnumeratePhysicalDevices",
                                   (GLADapiproc)glad_vkEnumeratePhysicalDevices,
                                   3,
                                   instance,
                                   pPhysicalDeviceCount,
                                   pPhysicalDevices);
        return ret;
}
PFN_vkEnumeratePhysicalDevices glad_debug_vkEnumeratePhysicalDevices = glad_debug_impl_vkEnumeratePhysicalDevices;
#if defined(VK_USE_PLATFORM_METAL_EXT)
PFN_vkExportMetalObjectsEXT glad_vkExportMetalObjectsEXT = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkExportMetalObjectsEXT(VkDevice device, VkExportMetalObjectsInfoEXT *pMetalObjectsInfo) {
        _pre_call_vulkan_callback("vkExportMetalObjectsEXT", (GLADapiproc)glad_vkExportMetalObjectsEXT, 2, device, pMetalObjectsInfo);
        glad_vkExportMetalObjectsEXT(device, pMetalObjectsInfo);
        _post_call_vulkan_callback(NULL, "vkExportMetalObjectsEXT", (GLADapiproc)glad_vkExportMetalObjectsEXT, 2, device, pMetalObjectsInfo);
}
PFN_vkExportMetalObjectsEXT glad_debug_vkExportMetalObjectsEXT = glad_debug_impl_vkExportMetalObjectsEXT;

#endif
PFN_vkFlushMappedMemoryRanges glad_vkFlushMappedMemoryRanges = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges) {
        VkResult ret;
        _pre_call_vulkan_callback("vkFlushMappedMemoryRanges", (GLADapiproc)glad_vkFlushMappedMemoryRanges, 3, device, memoryRangeCount, pMemoryRanges);
        ret = glad_vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkFlushMappedMemoryRanges",
                                   (GLADapiproc)glad_vkFlushMappedMemoryRanges,
                                   3,
                                   device,
                                   memoryRangeCount,
                                   pMemoryRanges);
        return ret;
}
PFN_vkFlushMappedMemoryRanges glad_debug_vkFlushMappedMemoryRanges = glad_debug_impl_vkFlushMappedMemoryRanges;
PFN_vkFreeCommandBuffers      glad_vkFreeCommandBuffers = NULL;
static void GLAD_API_PTR      glad_debug_impl_vkFreeCommandBuffers(VkDevice               device,
                                                                   VkCommandPool          commandPool,
                                                                   uint32_t               commandBufferCount,
                                                                   const VkCommandBuffer *pCommandBuffers) {
        _pre_call_vulkan_callback("vkFreeCommandBuffers", (GLADapiproc)glad_vkFreeCommandBuffers, 4, device, commandPool, commandBufferCount, pCommandBuffers);
        glad_vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
        _post_call_vulkan_callback(NULL,
                                   "vkFreeCommandBuffers",
                                   (GLADapiproc)glad_vkFreeCommandBuffers,
                                   4,
                                   device,
                                   commandPool,
                                   commandBufferCount,
                                   pCommandBuffers);
}
PFN_vkFreeCommandBuffers     glad_debug_vkFreeCommandBuffers = glad_debug_impl_vkFreeCommandBuffers;
PFN_vkFreeDescriptorSets     glad_vkFreeDescriptorSets = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkFreeDescriptorSets(VkDevice               device,
                                                                  VkDescriptorPool       descriptorPool,
                                                                  uint32_t               descriptorSetCount,
                                                                  const VkDescriptorSet *pDescriptorSets) {
	VkResult ret;
	_pre_call_vulkan_callback("vkFreeDescriptorSets",
	                          (GLADapiproc)glad_vkFreeDescriptorSets,
	                          4,
	                          device,
	                          descriptorPool,
	                          descriptorSetCount,
	                          pDescriptorSets);
	ret = glad_vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkFreeDescriptorSets",
	                           (GLADapiproc)glad_vkFreeDescriptorSets,
	                           4,
	                           device,
	                           descriptorPool,
	                           descriptorSetCount,
	                           pDescriptorSets);
	return ret;
}
PFN_vkFreeDescriptorSets glad_debug_vkFreeDescriptorSets = glad_debug_impl_vkFreeDescriptorSets;
PFN_vkFreeMemory         glad_vkFreeMemory = NULL;
static void GLAD_API_PTR glad_debug_impl_vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks *pAllocator) {
	_pre_call_vulkan_callback("vkFreeMemory", (GLADapiproc)glad_vkFreeMemory, 3, device, memory, pAllocator);
	glad_vkFreeMemory(device, memory, pAllocator);
	_post_call_vulkan_callback(NULL, "vkFreeMemory", (GLADapiproc)glad_vkFreeMemory, 3, device, memory, pAllocator);
}
PFN_vkFreeMemory                            glad_debug_vkFreeMemory = glad_debug_impl_vkFreeMemory;
PFN_vkGetAccelerationStructureBuildSizesKHR glad_vkGetAccelerationStructureBuildSizesKHR = NULL;
static void GLAD_API_PTR                    glad_debug_impl_vkGetAccelerationStructureBuildSizesKHR(VkDevice                                           device,
                                                                                                    VkAccelerationStructureBuildTypeKHR                buildType,
                                                                                                    const VkAccelerationStructureBuildGeometryInfoKHR *pBuildInfo,
                                                                                                    const uint32_t                                    *pMaxPrimitiveCounts,
                                                                                                    VkAccelerationStructureBuildSizesInfoKHR          *pSizeInfo) {
        _pre_call_vulkan_callback("vkGetAccelerationStructureBuildSizesKHR",
                                  (GLADapiproc)glad_vkGetAccelerationStructureBuildSizesKHR,
                                  5,
                                  device,
                                  buildType,
                                  pBuildInfo,
                                  pMaxPrimitiveCounts,
                                  pSizeInfo);
        glad_vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkGetAccelerationStructureBuildSizesKHR",
                                   (GLADapiproc)glad_vkGetAccelerationStructureBuildSizesKHR,
                                   5,
                                   device,
                                   buildType,
                                   pBuildInfo,
                                   pMaxPrimitiveCounts,
                                   pSizeInfo);
}
PFN_vkGetAccelerationStructureBuildSizesKHR    glad_debug_vkGetAccelerationStructureBuildSizesKHR = glad_debug_impl_vkGetAccelerationStructureBuildSizesKHR;
PFN_vkGetAccelerationStructureDeviceAddressKHR glad_vkGetAccelerationStructureDeviceAddressKHR = NULL;
static VkDeviceAddress GLAD_API_PTR            glad_debug_impl_vkGetAccelerationStructureDeviceAddressKHR(VkDevice                                           device,
                                                                                                          const VkAccelerationStructureDeviceAddressInfoKHR *pInfo) {
        VkDeviceAddress ret;
        _pre_call_vulkan_callback("vkGetAccelerationStructureDeviceAddressKHR", (GLADapiproc)glad_vkGetAccelerationStructureDeviceAddressKHR, 2, device, pInfo);
        ret = glad_vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetAccelerationStructureDeviceAddressKHR",
                                   (GLADapiproc)glad_vkGetAccelerationStructureDeviceAddressKHR,
                                   2,
                                   device,
                                   pInfo);
        return ret;
}
PFN_vkGetAccelerationStructureDeviceAddressKHR glad_debug_vkGetAccelerationStructureDeviceAddressKHR =
	glad_debug_impl_vkGetAccelerationStructureDeviceAddressKHR;
PFN_vkGetAccelerationStructureHandleNV glad_vkGetAccelerationStructureHandleNV = NULL;
static VkResult GLAD_API_PTR           glad_debug_impl_vkGetAccelerationStructureHandleNV(VkDevice                  device,
                                                                                          VkAccelerationStructureNV accelerationStructure,
                                                                                          size_t                    dataSize,
                                                                                          void                     *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetAccelerationStructureHandleNV",
                                  (GLADapiproc)glad_vkGetAccelerationStructureHandleNV,
                                  4,
                                  device,
                                  accelerationStructure,
                                  dataSize,
                                  pData);
        ret = glad_vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetAccelerationStructureHandleNV",
                                   (GLADapiproc)glad_vkGetAccelerationStructureHandleNV,
                                   4,
                                   device,
                                   accelerationStructure,
                                   dataSize,
                                   pData);
        return ret;
}
PFN_vkGetAccelerationStructureHandleNV             glad_debug_vkGetAccelerationStructureHandleNV = glad_debug_impl_vkGetAccelerationStructureHandleNV;
PFN_vkGetAccelerationStructureMemoryRequirementsNV glad_vkGetAccelerationStructureMemoryRequirementsNV = NULL;
static void GLAD_API_PTR                           glad_debug_impl_vkGetAccelerationStructureMemoryRequirementsNV(VkDevice                                               device,
                                                                                                                  const VkAccelerationStructureMemoryRequirementsInfoNV *pInfo,
                                                                                                                  VkMemoryRequirements2KHR *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetAccelerationStructureMemoryRequirementsNV",
                                  (GLADapiproc)glad_vkGetAccelerationStructureMemoryRequirementsNV,
                                  3,
                                  device,
                                  pInfo,
                                  pMemoryRequirements);
        glad_vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetAccelerationStructureMemoryRequirementsNV",
                                   (GLADapiproc)glad_vkGetAccelerationStructureMemoryRequirementsNV,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetAccelerationStructureMemoryRequirementsNV glad_debug_vkGetAccelerationStructureMemoryRequirementsNV =
	glad_debug_impl_vkGetAccelerationStructureMemoryRequirementsNV;
PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT glad_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice                                                   device,
                                                                         const VkAccelerationStructureCaptureDescriptorDataInfoEXT *pInfo,
                                                                         void                                                      *pData) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT",
	                          (GLADapiproc)glad_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT,
	                          3,
	                          device,
	                          pInfo,
	                          pData);
	ret = glad_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT",
	                           (GLADapiproc)glad_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT,
	                           3,
	                           device,
	                           pInfo,
	                           pData);
	return ret;
}
PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT glad_debug_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT =
	glad_debug_impl_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
PFN_vkGetAndroidHardwareBufferPropertiesANDROID glad_vkGetAndroidHardwareBufferPropertiesANDROID = NULL;
static VkResult GLAD_API_PTR                    glad_debug_impl_vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice                                  device,
                                                                                                            const struct AHardwareBuffer             *buffer,
                                                                                                            VkAndroidHardwareBufferPropertiesANDROID *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetAndroidHardwareBufferPropertiesANDROID",
                                  (GLADapiproc)glad_vkGetAndroidHardwareBufferPropertiesANDROID,
                                  3,
                                  device,
                                  buffer,
                                  pProperties);
        ret = glad_vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetAndroidHardwareBufferPropertiesANDROID",
                                   (GLADapiproc)glad_vkGetAndroidHardwareBufferPropertiesANDROID,
                                   3,
                                   device,
                                   buffer,
                                   pProperties);
        return ret;
}
PFN_vkGetAndroidHardwareBufferPropertiesANDROID glad_debug_vkGetAndroidHardwareBufferPropertiesANDROID =
	glad_debug_impl_vkGetAndroidHardwareBufferPropertiesANDROID;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkGetBufferCollectionPropertiesFUCHSIA glad_vkGetBufferCollectionPropertiesFUCHSIA = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkGetBufferCollectionPropertiesFUCHSIA(VkDevice                             device,
                                                                                                  VkBufferCollectionFUCHSIA            collection,
                                                                                                  VkBufferCollectionPropertiesFUCHSIA *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetBufferCollectionPropertiesFUCHSIA",
                                  (GLADapiproc)glad_vkGetBufferCollectionPropertiesFUCHSIA,
                                  3,
                                  device,
                                  collection,
                                  pProperties);
        ret = glad_vkGetBufferCollectionPropertiesFUCHSIA(device, collection, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetBufferCollectionPropertiesFUCHSIA",
                                   (GLADapiproc)glad_vkGetBufferCollectionPropertiesFUCHSIA,
                                   3,
                                   device,
                                   collection,
                                   pProperties);
        return ret;
}
PFN_vkGetBufferCollectionPropertiesFUCHSIA glad_debug_vkGetBufferCollectionPropertiesFUCHSIA = glad_debug_impl_vkGetBufferCollectionPropertiesFUCHSIA;

#endif
PFN_vkGetBufferDeviceAddress        glad_vkGetBufferDeviceAddress = NULL;
static VkDeviceAddress GLAD_API_PTR glad_debug_impl_vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo) {
	VkDeviceAddress ret;
	_pre_call_vulkan_callback("vkGetBufferDeviceAddress", (GLADapiproc)glad_vkGetBufferDeviceAddress, 2, device, pInfo);
	ret = glad_vkGetBufferDeviceAddress(device, pInfo);
	_post_call_vulkan_callback((void *)&ret, "vkGetBufferDeviceAddress", (GLADapiproc)glad_vkGetBufferDeviceAddress, 2, device, pInfo);
	return ret;
}
PFN_vkGetBufferDeviceAddress        glad_debug_vkGetBufferDeviceAddress = glad_debug_impl_vkGetBufferDeviceAddress;
PFN_vkGetBufferDeviceAddressEXT     glad_vkGetBufferDeviceAddressEXT = NULL;
static VkDeviceAddress GLAD_API_PTR glad_debug_impl_vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfo *pInfo) {
	VkDeviceAddress ret;
	_pre_call_vulkan_callback("vkGetBufferDeviceAddressEXT", (GLADapiproc)glad_vkGetBufferDeviceAddressEXT, 2, device, pInfo);
	ret = glad_vkGetBufferDeviceAddressEXT(device, pInfo);
	_post_call_vulkan_callback((void *)&ret, "vkGetBufferDeviceAddressEXT", (GLADapiproc)glad_vkGetBufferDeviceAddressEXT, 2, device, pInfo);
	return ret;
}
PFN_vkGetBufferDeviceAddressEXT     glad_debug_vkGetBufferDeviceAddressEXT = glad_debug_impl_vkGetBufferDeviceAddressEXT;
PFN_vkGetBufferDeviceAddressKHR     glad_vkGetBufferDeviceAddressKHR = NULL;
static VkDeviceAddress GLAD_API_PTR glad_debug_impl_vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo *pInfo) {
	VkDeviceAddress ret;
	_pre_call_vulkan_callback("vkGetBufferDeviceAddressKHR", (GLADapiproc)glad_vkGetBufferDeviceAddressKHR, 2, device, pInfo);
	ret = glad_vkGetBufferDeviceAddressKHR(device, pInfo);
	_post_call_vulkan_callback((void *)&ret, "vkGetBufferDeviceAddressKHR", (GLADapiproc)glad_vkGetBufferDeviceAddressKHR, 2, device, pInfo);
	return ret;
}
PFN_vkGetBufferDeviceAddressKHR   glad_debug_vkGetBufferDeviceAddressKHR = glad_debug_impl_vkGetBufferDeviceAddressKHR;
PFN_vkGetBufferMemoryRequirements glad_vkGetBufferMemoryRequirements = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetBufferMemoryRequirements", (GLADapiproc)glad_vkGetBufferMemoryRequirements, 3, device, buffer, pMemoryRequirements);
        glad_vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetBufferMemoryRequirements",
                                   (GLADapiproc)glad_vkGetBufferMemoryRequirements,
                                   3,
                                   device,
                                   buffer,
                                   pMemoryRequirements);
}
PFN_vkGetBufferMemoryRequirements  glad_debug_vkGetBufferMemoryRequirements = glad_debug_impl_vkGetBufferMemoryRequirements;
PFN_vkGetBufferMemoryRequirements2 glad_vkGetBufferMemoryRequirements2 = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkGetBufferMemoryRequirements2(VkDevice                               device,
                                                                                  const VkBufferMemoryRequirementsInfo2 *pInfo,
                                                                                  VkMemoryRequirements2                 *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetBufferMemoryRequirements2", (GLADapiproc)glad_vkGetBufferMemoryRequirements2, 3, device, pInfo, pMemoryRequirements);
        glad_vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetBufferMemoryRequirements2",
                                   (GLADapiproc)glad_vkGetBufferMemoryRequirements2,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetBufferMemoryRequirements2    glad_debug_vkGetBufferMemoryRequirements2 = glad_debug_impl_vkGetBufferMemoryRequirements2;
PFN_vkGetBufferMemoryRequirements2KHR glad_vkGetBufferMemoryRequirements2KHR = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkGetBufferMemoryRequirements2KHR(VkDevice                               device,
                                                                                        const VkBufferMemoryRequirementsInfo2 *pInfo,
                                                                                        VkMemoryRequirements2                 *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetBufferMemoryRequirements2KHR",
                                  (GLADapiproc)glad_vkGetBufferMemoryRequirements2KHR,
                                  3,
                                  device,
                                  pInfo,
                                  pMemoryRequirements);
        glad_vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetBufferMemoryRequirements2KHR",
                                   (GLADapiproc)glad_vkGetBufferMemoryRequirements2KHR,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetBufferMemoryRequirements2KHR glad_debug_vkGetBufferMemoryRequirements2KHR = glad_debug_impl_vkGetBufferMemoryRequirements2KHR;
PFN_vkGetBufferOpaqueCaptureAddress   glad_vkGetBufferOpaqueCaptureAddress = NULL;
static uint64_t GLAD_API_PTR          glad_debug_impl_vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo) {
        uint64_t ret;
        _pre_call_vulkan_callback("vkGetBufferOpaqueCaptureAddress", (GLADapiproc)glad_vkGetBufferOpaqueCaptureAddress, 2, device, pInfo);
        ret = glad_vkGetBufferOpaqueCaptureAddress(device, pInfo);
        _post_call_vulkan_callback((void *)&ret, "vkGetBufferOpaqueCaptureAddress", (GLADapiproc)glad_vkGetBufferOpaqueCaptureAddress, 2, device, pInfo);
        return ret;
}
PFN_vkGetBufferOpaqueCaptureAddress    glad_debug_vkGetBufferOpaqueCaptureAddress = glad_debug_impl_vkGetBufferOpaqueCaptureAddress;
PFN_vkGetBufferOpaqueCaptureAddressKHR glad_vkGetBufferOpaqueCaptureAddressKHR = NULL;
static uint64_t GLAD_API_PTR           glad_debug_impl_vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo *pInfo) {
        uint64_t ret;
        _pre_call_vulkan_callback("vkGetBufferOpaqueCaptureAddressKHR", (GLADapiproc)glad_vkGetBufferOpaqueCaptureAddressKHR, 2, device, pInfo);
        ret = glad_vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
        _post_call_vulkan_callback((void *)&ret, "vkGetBufferOpaqueCaptureAddressKHR", (GLADapiproc)glad_vkGetBufferOpaqueCaptureAddressKHR, 2, device, pInfo);
        return ret;
}
PFN_vkGetBufferOpaqueCaptureAddressKHR        glad_debug_vkGetBufferOpaqueCaptureAddressKHR = glad_debug_impl_vkGetBufferOpaqueCaptureAddressKHR;
PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT glad_vkGetBufferOpaqueCaptureDescriptorDataEXT = NULL;
static VkResult GLAD_API_PTR                  glad_debug_impl_vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice                                    device,
                                                                                                        const VkBufferCaptureDescriptorDataInfoEXT *pInfo,
                                                                                                        void                                       *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetBufferOpaqueCaptureDescriptorDataEXT",
                                  (GLADapiproc)glad_vkGetBufferOpaqueCaptureDescriptorDataEXT,
                                  3,
                                  device,
                                  pInfo,
                                  pData);
        ret = glad_vkGetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetBufferOpaqueCaptureDescriptorDataEXT",
                                   (GLADapiproc)glad_vkGetBufferOpaqueCaptureDescriptorDataEXT,
                                   3,
                                   device,
                                   pInfo,
                                   pData);
        return ret;
}
PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT glad_debug_vkGetBufferOpaqueCaptureDescriptorDataEXT = glad_debug_impl_vkGetBufferOpaqueCaptureDescriptorDataEXT;
PFN_vkGetCalibratedTimestampsEXT              glad_vkGetCalibratedTimestampsEXT = NULL;
static VkResult GLAD_API_PTR                  glad_debug_impl_vkGetCalibratedTimestampsEXT(VkDevice                            device,
                                                                                           uint32_t                            timestampCount,
                                                                                           const VkCalibratedTimestampInfoEXT *pTimestampInfos,
                                                                                           uint64_t                           *pTimestamps,
                                                                                           uint64_t                           *pMaxDeviation) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetCalibratedTimestampsEXT",
                                  (GLADapiproc)glad_vkGetCalibratedTimestampsEXT,
                                  5,
                                  device,
                                  timestampCount,
                                  pTimestampInfos,
                                  pTimestamps,
                                  pMaxDeviation);
        ret = glad_vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetCalibratedTimestampsEXT",
                                   (GLADapiproc)glad_vkGetCalibratedTimestampsEXT,
                                   5,
                                   device,
                                   timestampCount,
                                   pTimestampInfos,
                                   pTimestamps,
                                   pMaxDeviation);
        return ret;
}
PFN_vkGetCalibratedTimestampsEXT            glad_debug_vkGetCalibratedTimestampsEXT = glad_debug_impl_vkGetCalibratedTimestampsEXT;
PFN_vkGetDeferredOperationMaxConcurrencyKHR glad_vkGetDeferredOperationMaxConcurrencyKHR = NULL;
static uint32_t GLAD_API_PTR                glad_debug_impl_vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation) {
        uint32_t ret;
        _pre_call_vulkan_callback("vkGetDeferredOperationMaxConcurrencyKHR", (GLADapiproc)glad_vkGetDeferredOperationMaxConcurrencyKHR, 2, device, operation);
        ret = glad_vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDeferredOperationMaxConcurrencyKHR",
                                   (GLADapiproc)glad_vkGetDeferredOperationMaxConcurrencyKHR,
                                   2,
                                   device,
                                   operation);
        return ret;
}
PFN_vkGetDeferredOperationMaxConcurrencyKHR glad_debug_vkGetDeferredOperationMaxConcurrencyKHR = glad_debug_impl_vkGetDeferredOperationMaxConcurrencyKHR;
PFN_vkGetDeferredOperationResultKHR         glad_vkGetDeferredOperationResultKHR = NULL;
static VkResult GLAD_API_PTR                glad_debug_impl_vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDeferredOperationResultKHR", (GLADapiproc)glad_vkGetDeferredOperationResultKHR, 2, device, operation);
        ret = glad_vkGetDeferredOperationResultKHR(device, operation);
        _post_call_vulkan_callback((void *)&ret, "vkGetDeferredOperationResultKHR", (GLADapiproc)glad_vkGetDeferredOperationResultKHR, 2, device, operation);
        return ret;
}
PFN_vkGetDeferredOperationResultKHR glad_debug_vkGetDeferredOperationResultKHR = glad_debug_impl_vkGetDeferredOperationResultKHR;
PFN_vkGetDescriptorEXT              glad_vkGetDescriptorEXT = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkGetDescriptorEXT(VkDevice                      device,
                                                                       const VkDescriptorGetInfoEXT *pDescriptorInfo,
                                                                       size_t                        dataSize,
                                                                       void                         *pDescriptor) {
        _pre_call_vulkan_callback("vkGetDescriptorEXT", (GLADapiproc)glad_vkGetDescriptorEXT, 4, device, pDescriptorInfo, dataSize, pDescriptor);
        glad_vkGetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);
        _post_call_vulkan_callback(NULL, "vkGetDescriptorEXT", (GLADapiproc)glad_vkGetDescriptorEXT, 4, device, pDescriptorInfo, dataSize, pDescriptor);
}
PFN_vkGetDescriptorEXT                 glad_debug_vkGetDescriptorEXT = glad_debug_impl_vkGetDescriptorEXT;
PFN_vkGetDescriptorSetHostMappingVALVE glad_vkGetDescriptorSetHostMappingVALVE = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void **ppData) {
        _pre_call_vulkan_callback("vkGetDescriptorSetHostMappingVALVE", (GLADapiproc)glad_vkGetDescriptorSetHostMappingVALVE, 3, device, descriptorSet, ppData);
        glad_vkGetDescriptorSetHostMappingVALVE(device, descriptorSet, ppData);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDescriptorSetHostMappingVALVE",
                                   (GLADapiproc)glad_vkGetDescriptorSetHostMappingVALVE,
                                   3,
                                   device,
                                   descriptorSet,
                                   ppData);
}
PFN_vkGetDescriptorSetHostMappingVALVE       glad_debug_vkGetDescriptorSetHostMappingVALVE = glad_debug_impl_vkGetDescriptorSetHostMappingVALVE;
PFN_vkGetDescriptorSetLayoutBindingOffsetEXT glad_vkGetDescriptorSetLayoutBindingOffsetEXT = NULL;
static void GLAD_API_PTR                     glad_debug_impl_vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice              device,
                                                                                                      VkDescriptorSetLayout layout,
                                                                                                      uint32_t              binding,
                                                                                                      VkDeviceSize         *pOffset) {
        _pre_call_vulkan_callback("vkGetDescriptorSetLayoutBindingOffsetEXT",
                                  (GLADapiproc)glad_vkGetDescriptorSetLayoutBindingOffsetEXT,
                                  4,
                                  device,
                                  layout,
                                  binding,
                                  pOffset);
        glad_vkGetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, pOffset);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDescriptorSetLayoutBindingOffsetEXT",
                                   (GLADapiproc)glad_vkGetDescriptorSetLayoutBindingOffsetEXT,
                                   4,
                                   device,
                                   layout,
                                   binding,
                                   pOffset);
}
PFN_vkGetDescriptorSetLayoutBindingOffsetEXT     glad_debug_vkGetDescriptorSetLayoutBindingOffsetEXT = glad_debug_impl_vkGetDescriptorSetLayoutBindingOffsetEXT;
PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE glad_vkGetDescriptorSetLayoutHostMappingInfoVALVE = NULL;
static void GLAD_API_PTR                         glad_debug_impl_vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice                                    device,
                                                                                                              const VkDescriptorSetBindingReferenceVALVE *pBindingReference,
                                                                                                              VkDescriptorSetLayoutHostMappingInfoVALVE  *pHostMapping) {
        _pre_call_vulkan_callback("vkGetDescriptorSetLayoutHostMappingInfoVALVE",
                                  (GLADapiproc)glad_vkGetDescriptorSetLayoutHostMappingInfoVALVE,
                                  3,
                                  device,
                                  pBindingReference,
                                  pHostMapping);
        glad_vkGetDescriptorSetLayoutHostMappingInfoVALVE(device, pBindingReference, pHostMapping);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDescriptorSetLayoutHostMappingInfoVALVE",
                                   (GLADapiproc)glad_vkGetDescriptorSetLayoutHostMappingInfoVALVE,
                                   3,
                                   device,
                                   pBindingReference,
                                   pHostMapping);
}
PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE glad_debug_vkGetDescriptorSetLayoutHostMappingInfoVALVE =
	glad_debug_impl_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
PFN_vkGetDescriptorSetLayoutSizeEXT glad_vkGetDescriptorSetLayoutSizeEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize *pLayoutSizeInBytes) {
	_pre_call_vulkan_callback("vkGetDescriptorSetLayoutSizeEXT", (GLADapiproc)glad_vkGetDescriptorSetLayoutSizeEXT, 3, device, layout, pLayoutSizeInBytes);
	glad_vkGetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);
	_post_call_vulkan_callback(NULL,
	                           "vkGetDescriptorSetLayoutSizeEXT",
	                           (GLADapiproc)glad_vkGetDescriptorSetLayoutSizeEXT,
	                           3,
	                           device,
	                           layout,
	                           pLayoutSizeInBytes);
}
PFN_vkGetDescriptorSetLayoutSizeEXT glad_debug_vkGetDescriptorSetLayoutSizeEXT = glad_debug_impl_vkGetDescriptorSetLayoutSizeEXT;
PFN_vkGetDescriptorSetLayoutSupport glad_vkGetDescriptorSetLayoutSupport = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkGetDescriptorSetLayoutSupport(VkDevice                               device,
                                                                                    const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
                                                                                    VkDescriptorSetLayoutSupport          *pSupport) {
        _pre_call_vulkan_callback("vkGetDescriptorSetLayoutSupport", (GLADapiproc)glad_vkGetDescriptorSetLayoutSupport, 3, device, pCreateInfo, pSupport);
        glad_vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDescriptorSetLayoutSupport",
                                   (GLADapiproc)glad_vkGetDescriptorSetLayoutSupport,
                                   3,
                                   device,
                                   pCreateInfo,
                                   pSupport);
}
PFN_vkGetDescriptorSetLayoutSupport    glad_debug_vkGetDescriptorSetLayoutSupport = glad_debug_impl_vkGetDescriptorSetLayoutSupport;
PFN_vkGetDescriptorSetLayoutSupportKHR glad_vkGetDescriptorSetLayoutSupportKHR = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkGetDescriptorSetLayoutSupportKHR(VkDevice                               device,
                                                                                          const VkDescriptorSetLayoutCreateInfo *pCreateInfo,
                                                                                          VkDescriptorSetLayoutSupport          *pSupport) {
        _pre_call_vulkan_callback("vkGetDescriptorSetLayoutSupportKHR", (GLADapiproc)glad_vkGetDescriptorSetLayoutSupportKHR, 3, device, pCreateInfo, pSupport);
        glad_vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDescriptorSetLayoutSupportKHR",
                                   (GLADapiproc)glad_vkGetDescriptorSetLayoutSupportKHR,
                                   3,
                                   device,
                                   pCreateInfo,
                                   pSupport);
}
PFN_vkGetDescriptorSetLayoutSupportKHR               glad_debug_vkGetDescriptorSetLayoutSupportKHR = glad_debug_impl_vkGetDescriptorSetLayoutSupportKHR;
PFN_vkGetDeviceAccelerationStructureCompatibilityKHR glad_vkGetDeviceAccelerationStructureCompatibilityKHR = NULL;
static void GLAD_API_PTR                             glad_debug_impl_vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice                                     device,
                                                                                                                      const VkAccelerationStructureVersionInfoKHR *pVersionInfo,
                                                                                                                      VkAccelerationStructureCompatibilityKHR     *pCompatibility) {
        _pre_call_vulkan_callback("vkGetDeviceAccelerationStructureCompatibilityKHR",
                                  (GLADapiproc)glad_vkGetDeviceAccelerationStructureCompatibilityKHR,
                                  3,
                                  device,
                                  pVersionInfo,
                                  pCompatibility);
        glad_vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceAccelerationStructureCompatibilityKHR",
                                   (GLADapiproc)glad_vkGetDeviceAccelerationStructureCompatibilityKHR,
                                   3,
                                   device,
                                   pVersionInfo,
                                   pCompatibility);
}
PFN_vkGetDeviceAccelerationStructureCompatibilityKHR glad_debug_vkGetDeviceAccelerationStructureCompatibilityKHR =
	glad_debug_impl_vkGetDeviceAccelerationStructureCompatibilityKHR;
PFN_vkGetDeviceBufferMemoryRequirements glad_vkGetDeviceBufferMemoryRequirements = NULL;
static void GLAD_API_PTR                glad_debug_impl_vkGetDeviceBufferMemoryRequirements(VkDevice                                device,
                                                                                            const VkDeviceBufferMemoryRequirements *pInfo,
                                                                                            VkMemoryRequirements2                  *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetDeviceBufferMemoryRequirements",
                                  (GLADapiproc)glad_vkGetDeviceBufferMemoryRequirements,
                                  3,
                                  device,
                                  pInfo,
                                  pMemoryRequirements);
        glad_vkGetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceBufferMemoryRequirements",
                                   (GLADapiproc)glad_vkGetDeviceBufferMemoryRequirements,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetDeviceBufferMemoryRequirements    glad_debug_vkGetDeviceBufferMemoryRequirements = glad_debug_impl_vkGetDeviceBufferMemoryRequirements;
PFN_vkGetDeviceBufferMemoryRequirementsKHR glad_vkGetDeviceBufferMemoryRequirementsKHR = NULL;
static void GLAD_API_PTR                   glad_debug_impl_vkGetDeviceBufferMemoryRequirementsKHR(VkDevice                                device,
                                                                                                  const VkDeviceBufferMemoryRequirements *pInfo,
                                                                                                  VkMemoryRequirements2                  *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetDeviceBufferMemoryRequirementsKHR",
                                  (GLADapiproc)glad_vkGetDeviceBufferMemoryRequirementsKHR,
                                  3,
                                  device,
                                  pInfo,
                                  pMemoryRequirements);
        glad_vkGetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceBufferMemoryRequirementsKHR",
                                   (GLADapiproc)glad_vkGetDeviceBufferMemoryRequirementsKHR,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetDeviceBufferMemoryRequirementsKHR glad_debug_vkGetDeviceBufferMemoryRequirementsKHR = glad_debug_impl_vkGetDeviceBufferMemoryRequirementsKHR;
PFN_vkGetDeviceFaultInfoEXT                glad_vkGetDeviceFaultInfoEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT *pFaultCounts, VkDeviceFaultInfoEXT *pFaultInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetDeviceFaultInfoEXT", (GLADapiproc)glad_vkGetDeviceFaultInfoEXT, 3, device, pFaultCounts, pFaultInfo);
	ret = glad_vkGetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);
	_post_call_vulkan_callback((void *)&ret, "vkGetDeviceFaultInfoEXT", (GLADapiproc)glad_vkGetDeviceFaultInfoEXT, 3, device, pFaultCounts, pFaultInfo);
	return ret;
}
PFN_vkGetDeviceFaultInfoEXT            glad_debug_vkGetDeviceFaultInfoEXT = glad_debug_impl_vkGetDeviceFaultInfoEXT;
PFN_vkGetDeviceGroupPeerMemoryFeatures glad_vkGetDeviceGroupPeerMemoryFeatures = NULL;
static void GLAD_API_PTR               glad_debug_impl_vkGetDeviceGroupPeerMemoryFeatures(VkDevice                  device,
                                                                                          uint32_t                  heapIndex,
                                                                                          uint32_t                  localDeviceIndex,
                                                                                          uint32_t                  remoteDeviceIndex,
                                                                                          VkPeerMemoryFeatureFlags *pPeerMemoryFeatures) {
        _pre_call_vulkan_callback("vkGetDeviceGroupPeerMemoryFeatures",
                                  (GLADapiproc)glad_vkGetDeviceGroupPeerMemoryFeatures,
                                  5,
                                  device,
                                  heapIndex,
                                  localDeviceIndex,
                                  remoteDeviceIndex,
                                  pPeerMemoryFeatures);
        glad_vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceGroupPeerMemoryFeatures",
                                   (GLADapiproc)glad_vkGetDeviceGroupPeerMemoryFeatures,
                                   5,
                                   device,
                                   heapIndex,
                                   localDeviceIndex,
                                   remoteDeviceIndex,
                                   pPeerMemoryFeatures);
}
PFN_vkGetDeviceGroupPeerMemoryFeatures    glad_debug_vkGetDeviceGroupPeerMemoryFeatures = glad_debug_impl_vkGetDeviceGroupPeerMemoryFeatures;
PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR glad_vkGetDeviceGroupPeerMemoryFeaturesKHR = NULL;
static void GLAD_API_PTR                  glad_debug_impl_vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice                  device,
                                                                                                uint32_t                  heapIndex,
                                                                                                uint32_t                  localDeviceIndex,
                                                                                                uint32_t                  remoteDeviceIndex,
                                                                                                VkPeerMemoryFeatureFlags *pPeerMemoryFeatures) {
        _pre_call_vulkan_callback("vkGetDeviceGroupPeerMemoryFeaturesKHR",
                                  (GLADapiproc)glad_vkGetDeviceGroupPeerMemoryFeaturesKHR,
                                  5,
                                  device,
                                  heapIndex,
                                  localDeviceIndex,
                                  remoteDeviceIndex,
                                  pPeerMemoryFeatures);
        glad_vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceGroupPeerMemoryFeaturesKHR",
                                   (GLADapiproc)glad_vkGetDeviceGroupPeerMemoryFeaturesKHR,
                                   5,
                                   device,
                                   heapIndex,
                                   localDeviceIndex,
                                   remoteDeviceIndex,
                                   pPeerMemoryFeatures);
}
PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR  glad_debug_vkGetDeviceGroupPeerMemoryFeaturesKHR = glad_debug_impl_vkGetDeviceGroupPeerMemoryFeaturesKHR;
PFN_vkGetDeviceGroupPresentCapabilitiesKHR glad_vkGetDeviceGroupPresentCapabilitiesKHR = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice                             device,
                                                                                                  VkDeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDeviceGroupPresentCapabilitiesKHR",
                                  (GLADapiproc)glad_vkGetDeviceGroupPresentCapabilitiesKHR,
                                  2,
                                  device,
                                  pDeviceGroupPresentCapabilities);
        ret = glad_vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDeviceGroupPresentCapabilitiesKHR",
                                   (GLADapiproc)glad_vkGetDeviceGroupPresentCapabilitiesKHR,
                                   2,
                                   device,
                                   pDeviceGroupPresentCapabilities);
        return ret;
}
PFN_vkGetDeviceGroupPresentCapabilitiesKHR glad_debug_vkGetDeviceGroupPresentCapabilitiesKHR = glad_debug_impl_vkGetDeviceGroupPresentCapabilitiesKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkGetDeviceGroupSurfacePresentModes2EXT glad_vkGetDeviceGroupSurfacePresentModes2EXT = NULL;
static VkResult GLAD_API_PTR                glad_debug_impl_vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice                               device,
                                                                                                    const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                                                    VkDeviceGroupPresentModeFlagsKHR      *pModes) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDeviceGroupSurfacePresentModes2EXT",
                                  (GLADapiproc)glad_vkGetDeviceGroupSurfacePresentModes2EXT,
                                  3,
                                  device,
                                  pSurfaceInfo,
                                  pModes);
        ret = glad_vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDeviceGroupSurfacePresentModes2EXT",
                                   (GLADapiproc)glad_vkGetDeviceGroupSurfacePresentModes2EXT,
                                   3,
                                   device,
                                   pSurfaceInfo,
                                   pModes);
        return ret;
}
PFN_vkGetDeviceGroupSurfacePresentModes2EXT glad_debug_vkGetDeviceGroupSurfacePresentModes2EXT = glad_debug_impl_vkGetDeviceGroupSurfacePresentModes2EXT;

#endif
PFN_vkGetDeviceGroupSurfacePresentModesKHR glad_vkGetDeviceGroupSurfacePresentModesKHR = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkGetDeviceGroupSurfacePresentModesKHR(VkDevice                          device,
                                                                                                  VkSurfaceKHR                      surface,
                                                                                                  VkDeviceGroupPresentModeFlagsKHR *pModes) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDeviceGroupSurfacePresentModesKHR",
                                  (GLADapiproc)glad_vkGetDeviceGroupSurfacePresentModesKHR,
                                  3,
                                  device,
                                  surface,
                                  pModes);
        ret = glad_vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDeviceGroupSurfacePresentModesKHR",
                                   (GLADapiproc)glad_vkGetDeviceGroupSurfacePresentModesKHR,
                                   3,
                                   device,
                                   surface,
                                   pModes);
        return ret;
}
PFN_vkGetDeviceGroupSurfacePresentModesKHR glad_debug_vkGetDeviceGroupSurfacePresentModesKHR = glad_debug_impl_vkGetDeviceGroupSurfacePresentModesKHR;
PFN_vkGetDeviceImageMemoryRequirements     glad_vkGetDeviceImageMemoryRequirements = NULL;
static void GLAD_API_PTR                   glad_debug_impl_vkGetDeviceImageMemoryRequirements(VkDevice                               device,
                                                                                              const VkDeviceImageMemoryRequirements *pInfo,
                                                                                              VkMemoryRequirements2                 *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetDeviceImageMemoryRequirements",
                                  (GLADapiproc)glad_vkGetDeviceImageMemoryRequirements,
                                  3,
                                  device,
                                  pInfo,
                                  pMemoryRequirements);
        glad_vkGetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceImageMemoryRequirements",
                                   (GLADapiproc)glad_vkGetDeviceImageMemoryRequirements,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetDeviceImageMemoryRequirements    glad_debug_vkGetDeviceImageMemoryRequirements = glad_debug_impl_vkGetDeviceImageMemoryRequirements;
PFN_vkGetDeviceImageMemoryRequirementsKHR glad_vkGetDeviceImageMemoryRequirementsKHR = NULL;
static void GLAD_API_PTR                  glad_debug_impl_vkGetDeviceImageMemoryRequirementsKHR(VkDevice                               device,
                                                                                                const VkDeviceImageMemoryRequirements *pInfo,
                                                                                                VkMemoryRequirements2                 *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetDeviceImageMemoryRequirementsKHR",
                                  (GLADapiproc)glad_vkGetDeviceImageMemoryRequirementsKHR,
                                  3,
                                  device,
                                  pInfo,
                                  pMemoryRequirements);
        glad_vkGetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceImageMemoryRequirementsKHR",
                                   (GLADapiproc)glad_vkGetDeviceImageMemoryRequirementsKHR,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetDeviceImageMemoryRequirementsKHR    glad_debug_vkGetDeviceImageMemoryRequirementsKHR = glad_debug_impl_vkGetDeviceImageMemoryRequirementsKHR;
PFN_vkGetDeviceImageSparseMemoryRequirements glad_vkGetDeviceImageSparseMemoryRequirements = NULL;
static void GLAD_API_PTR                     glad_debug_impl_vkGetDeviceImageSparseMemoryRequirements(VkDevice                               device,
                                                                                                      const VkDeviceImageMemoryRequirements *pInfo,
                                                                                                      uint32_t                              *pSparseMemoryRequirementCount,
                                                                                                      VkSparseImageMemoryRequirements2      *pSparseMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetDeviceImageSparseMemoryRequirements",
                                  (GLADapiproc)glad_vkGetDeviceImageSparseMemoryRequirements,
                                  4,
                                  device,
                                  pInfo,
                                  pSparseMemoryRequirementCount,
                                  pSparseMemoryRequirements);
        glad_vkGetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceImageSparseMemoryRequirements",
                                   (GLADapiproc)glad_vkGetDeviceImageSparseMemoryRequirements,
                                   4,
                                   device,
                                   pInfo,
                                   pSparseMemoryRequirementCount,
                                   pSparseMemoryRequirements);
}
PFN_vkGetDeviceImageSparseMemoryRequirements    glad_debug_vkGetDeviceImageSparseMemoryRequirements = glad_debug_impl_vkGetDeviceImageSparseMemoryRequirements;
PFN_vkGetDeviceImageSparseMemoryRequirementsKHR glad_vkGetDeviceImageSparseMemoryRequirementsKHR = NULL;
static void GLAD_API_PTR                        glad_debug_impl_vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice                               device,
                                                                                                            const VkDeviceImageMemoryRequirements *pInfo,
                                                                                                            uint32_t                              *pSparseMemoryRequirementCount,
                                                                                                            VkSparseImageMemoryRequirements2      *pSparseMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetDeviceImageSparseMemoryRequirementsKHR",
                                  (GLADapiproc)glad_vkGetDeviceImageSparseMemoryRequirementsKHR,
                                  4,
                                  device,
                                  pInfo,
                                  pSparseMemoryRequirementCount,
                                  pSparseMemoryRequirements);
        glad_vkGetDeviceImageSparseMemoryRequirementsKHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceImageSparseMemoryRequirementsKHR",
                                   (GLADapiproc)glad_vkGetDeviceImageSparseMemoryRequirementsKHR,
                                   4,
                                   device,
                                   pInfo,
                                   pSparseMemoryRequirementCount,
                                   pSparseMemoryRequirements);
}
PFN_vkGetDeviceImageSparseMemoryRequirementsKHR glad_debug_vkGetDeviceImageSparseMemoryRequirementsKHR =
	glad_debug_impl_vkGetDeviceImageSparseMemoryRequirementsKHR;
PFN_vkGetDeviceImageSubresourceLayoutKHR glad_vkGetDeviceImageSubresourceLayoutKHR = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkGetDeviceImageSubresourceLayoutKHR(VkDevice                               device,
                                                                                              const VkDeviceImageSubresourceInfoKHR *pInfo,
                                                                                              VkSubresourceLayout2KHR               *pLayout) {
        _pre_call_vulkan_callback("vkGetDeviceImageSubresourceLayoutKHR", (GLADapiproc)glad_vkGetDeviceImageSubresourceLayoutKHR, 3, device, pInfo, pLayout);
        glad_vkGetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceImageSubresourceLayoutKHR",
                                   (GLADapiproc)glad_vkGetDeviceImageSubresourceLayoutKHR,
                                   3,
                                   device,
                                   pInfo,
                                   pLayout);
}
PFN_vkGetDeviceImageSubresourceLayoutKHR glad_debug_vkGetDeviceImageSubresourceLayoutKHR = glad_debug_impl_vkGetDeviceImageSubresourceLayoutKHR;
PFN_vkGetDeviceMemoryCommitment          glad_vkGetDeviceMemoryCommitment = NULL;
static void GLAD_API_PTR glad_debug_impl_vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize *pCommittedMemoryInBytes) {
	_pre_call_vulkan_callback("vkGetDeviceMemoryCommitment", (GLADapiproc)glad_vkGetDeviceMemoryCommitment, 3, device, memory, pCommittedMemoryInBytes);
	glad_vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
	_post_call_vulkan_callback(NULL,
	                           "vkGetDeviceMemoryCommitment",
	                           (GLADapiproc)glad_vkGetDeviceMemoryCommitment,
	                           3,
	                           device,
	                           memory,
	                           pCommittedMemoryInBytes);
}
PFN_vkGetDeviceMemoryCommitment           glad_debug_vkGetDeviceMemoryCommitment = glad_debug_impl_vkGetDeviceMemoryCommitment;
PFN_vkGetDeviceMemoryOpaqueCaptureAddress glad_vkGetDeviceMemoryOpaqueCaptureAddress = NULL;
static uint64_t GLAD_API_PTR glad_debug_impl_vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo) {
	uint64_t ret;
	_pre_call_vulkan_callback("vkGetDeviceMemoryOpaqueCaptureAddress", (GLADapiproc)glad_vkGetDeviceMemoryOpaqueCaptureAddress, 2, device, pInfo);
	ret = glad_vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetDeviceMemoryOpaqueCaptureAddress",
	                           (GLADapiproc)glad_vkGetDeviceMemoryOpaqueCaptureAddress,
	                           2,
	                           device,
	                           pInfo);
	return ret;
}
PFN_vkGetDeviceMemoryOpaqueCaptureAddress    glad_debug_vkGetDeviceMemoryOpaqueCaptureAddress = glad_debug_impl_vkGetDeviceMemoryOpaqueCaptureAddress;
PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR = NULL;
static uint64_t GLAD_API_PTR glad_debug_impl_vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo) {
	uint64_t ret;
	_pre_call_vulkan_callback("vkGetDeviceMemoryOpaqueCaptureAddressKHR", (GLADapiproc)glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR, 2, device, pInfo);
	ret = glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetDeviceMemoryOpaqueCaptureAddressKHR",
	                           (GLADapiproc)glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR,
	                           2,
	                           device,
	                           pInfo);
	return ret;
}
PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR glad_debug_vkGetDeviceMemoryOpaqueCaptureAddressKHR = glad_debug_impl_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
PFN_vkGetDeviceMicromapCompatibilityEXT      glad_vkGetDeviceMicromapCompatibilityEXT = NULL;
static void GLAD_API_PTR                     glad_debug_impl_vkGetDeviceMicromapCompatibilityEXT(VkDevice                                 device,
                                                                                                 const VkMicromapVersionInfoEXT          *pVersionInfo,
                                                                                                 VkAccelerationStructureCompatibilityKHR *pCompatibility) {
        _pre_call_vulkan_callback("vkGetDeviceMicromapCompatibilityEXT",
                                  (GLADapiproc)glad_vkGetDeviceMicromapCompatibilityEXT,
                                  3,
                                  device,
                                  pVersionInfo,
                                  pCompatibility);
        glad_vkGetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);
        _post_call_vulkan_callback(NULL,
                                   "vkGetDeviceMicromapCompatibilityEXT",
                                   (GLADapiproc)glad_vkGetDeviceMicromapCompatibilityEXT,
                                   3,
                                   device,
                                   pVersionInfo,
                                   pCompatibility);
}
PFN_vkGetDeviceMicromapCompatibilityEXT glad_debug_vkGetDeviceMicromapCompatibilityEXT = glad_debug_impl_vkGetDeviceMicromapCompatibilityEXT;
PFN_vkGetDeviceProcAddr                 glad_vkGetDeviceProcAddr = NULL;
static PFN_vkVoidFunction GLAD_API_PTR  glad_debug_impl_vkGetDeviceProcAddr(VkDevice device, const char *pName) {
        PFN_vkVoidFunction ret;
        _pre_call_vulkan_callback("vkGetDeviceProcAddr", (GLADapiproc)glad_vkGetDeviceProcAddr, 2, device, pName);
        ret = glad_vkGetDeviceProcAddr(device, pName);
        _post_call_vulkan_callback((void *)&ret, "vkGetDeviceProcAddr", (GLADapiproc)glad_vkGetDeviceProcAddr, 2, device, pName);
        return ret;
}
PFN_vkGetDeviceProcAddr  glad_debug_vkGetDeviceProcAddr = glad_debug_impl_vkGetDeviceProcAddr;
PFN_vkGetDeviceQueue     glad_vkGetDeviceQueue = NULL;
static void GLAD_API_PTR glad_debug_impl_vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue *pQueue) {
	_pre_call_vulkan_callback("vkGetDeviceQueue", (GLADapiproc)glad_vkGetDeviceQueue, 4, device, queueFamilyIndex, queueIndex, pQueue);
	glad_vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
	_post_call_vulkan_callback(NULL, "vkGetDeviceQueue", (GLADapiproc)glad_vkGetDeviceQueue, 4, device, queueFamilyIndex, queueIndex, pQueue);
}
PFN_vkGetDeviceQueue     glad_debug_vkGetDeviceQueue = glad_debug_impl_vkGetDeviceQueue;
PFN_vkGetDeviceQueue2    glad_vkGetDeviceQueue2 = NULL;
static void GLAD_API_PTR glad_debug_impl_vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2 *pQueueInfo, VkQueue *pQueue) {
	_pre_call_vulkan_callback("vkGetDeviceQueue2", (GLADapiproc)glad_vkGetDeviceQueue2, 3, device, pQueueInfo, pQueue);
	glad_vkGetDeviceQueue2(device, pQueueInfo, pQueue);
	_post_call_vulkan_callback(NULL, "vkGetDeviceQueue2", (GLADapiproc)glad_vkGetDeviceQueue2, 3, device, pQueueInfo, pQueue);
}
PFN_vkGetDeviceQueue2                               glad_debug_vkGetDeviceQueue2 = glad_debug_impl_vkGetDeviceQueue2;
PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI glad_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = NULL;
static VkResult GLAD_API_PTR                        glad_debug_impl_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice     device,
                                                                                                                    VkRenderPass renderpass,
                                                                                                                    VkExtent2D  *pMaxWorkgroupSize) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI",
                                  (GLADapiproc)glad_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI,
                                  3,
                                  device,
                                  renderpass,
                                  pMaxWorkgroupSize);
        ret = glad_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device, renderpass, pMaxWorkgroupSize);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI",
                                   (GLADapiproc)glad_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI,
                                   3,
                                   device,
                                   renderpass,
                                   pMaxWorkgroupSize);
        return ret;
}
PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI glad_debug_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI =
	glad_debug_impl_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
PFN_vkGetDisplayModeProperties2KHR glad_vkGetDisplayModeProperties2KHR = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkGetDisplayModeProperties2KHR(VkPhysicalDevice             physicalDevice,
                                                                                  VkDisplayKHR                 display,
                                                                                  uint32_t                    *pPropertyCount,
                                                                                  VkDisplayModeProperties2KHR *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDisplayModeProperties2KHR",
                                  (GLADapiproc)glad_vkGetDisplayModeProperties2KHR,
                                  4,
                                  physicalDevice,
                                  display,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDisplayModeProperties2KHR",
                                   (GLADapiproc)glad_vkGetDisplayModeProperties2KHR,
                                   4,
                                   physicalDevice,
                                   display,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkGetDisplayModeProperties2KHR glad_debug_vkGetDisplayModeProperties2KHR = glad_debug_impl_vkGetDisplayModeProperties2KHR;
PFN_vkGetDisplayModePropertiesKHR  glad_vkGetDisplayModePropertiesKHR = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkGetDisplayModePropertiesKHR(VkPhysicalDevice            physicalDevice,
                                                                                 VkDisplayKHR                display,
                                                                                 uint32_t                   *pPropertyCount,
                                                                                 VkDisplayModePropertiesKHR *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDisplayModePropertiesKHR",
                                  (GLADapiproc)glad_vkGetDisplayModePropertiesKHR,
                                  4,
                                  physicalDevice,
                                  display,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDisplayModePropertiesKHR",
                                   (GLADapiproc)glad_vkGetDisplayModePropertiesKHR,
                                   4,
                                   physicalDevice,
                                   display,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkGetDisplayModePropertiesKHR     glad_debug_vkGetDisplayModePropertiesKHR = glad_debug_impl_vkGetDisplayModePropertiesKHR;
PFN_vkGetDisplayPlaneCapabilities2KHR glad_vkGetDisplayPlaneCapabilities2KHR = NULL;
static VkResult GLAD_API_PTR          glad_debug_impl_vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice                physicalDevice,
                                                                                        const VkDisplayPlaneInfo2KHR   *pDisplayPlaneInfo,
                                                                                        VkDisplayPlaneCapabilities2KHR *pCapabilities) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDisplayPlaneCapabilities2KHR",
                                  (GLADapiproc)glad_vkGetDisplayPlaneCapabilities2KHR,
                                  3,
                                  physicalDevice,
                                  pDisplayPlaneInfo,
                                  pCapabilities);
        ret = glad_vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDisplayPlaneCapabilities2KHR",
                                   (GLADapiproc)glad_vkGetDisplayPlaneCapabilities2KHR,
                                   3,
                                   physicalDevice,
                                   pDisplayPlaneInfo,
                                   pCapabilities);
        return ret;
}
PFN_vkGetDisplayPlaneCapabilities2KHR glad_debug_vkGetDisplayPlaneCapabilities2KHR = glad_debug_impl_vkGetDisplayPlaneCapabilities2KHR;
PFN_vkGetDisplayPlaneCapabilitiesKHR  glad_vkGetDisplayPlaneCapabilitiesKHR = NULL;
static VkResult GLAD_API_PTR          glad_debug_impl_vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice               physicalDevice,
                                                                                       VkDisplayModeKHR               mode,
                                                                                       uint32_t                       planeIndex,
                                                                                       VkDisplayPlaneCapabilitiesKHR *pCapabilities) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDisplayPlaneCapabilitiesKHR",
                                  (GLADapiproc)glad_vkGetDisplayPlaneCapabilitiesKHR,
                                  4,
                                  physicalDevice,
                                  mode,
                                  planeIndex,
                                  pCapabilities);
        ret = glad_vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDisplayPlaneCapabilitiesKHR",
                                   (GLADapiproc)glad_vkGetDisplayPlaneCapabilitiesKHR,
                                   4,
                                   physicalDevice,
                                   mode,
                                   planeIndex,
                                   pCapabilities);
        return ret;
}
PFN_vkGetDisplayPlaneCapabilitiesKHR      glad_debug_vkGetDisplayPlaneCapabilitiesKHR = glad_debug_impl_vkGetDisplayPlaneCapabilitiesKHR;
PFN_vkGetDisplayPlaneSupportedDisplaysKHR glad_vkGetDisplayPlaneSupportedDisplaysKHR = NULL;
static VkResult GLAD_API_PTR              glad_debug_impl_vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice,
                                                                                                uint32_t         planeIndex,
                                                                                                uint32_t        *pDisplayCount,
                                                                                                VkDisplayKHR    *pDisplays) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDisplayPlaneSupportedDisplaysKHR",
                                  (GLADapiproc)glad_vkGetDisplayPlaneSupportedDisplaysKHR,
                                  4,
                                  physicalDevice,
                                  planeIndex,
                                  pDisplayCount,
                                  pDisplays);
        ret = glad_vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDisplayPlaneSupportedDisplaysKHR",
                                   (GLADapiproc)glad_vkGetDisplayPlaneSupportedDisplaysKHR,
                                   4,
                                   physicalDevice,
                                   planeIndex,
                                   pDisplayCount,
                                   pDisplays);
        return ret;
}
PFN_vkGetDisplayPlaneSupportedDisplaysKHR glad_debug_vkGetDisplayPlaneSupportedDisplaysKHR = glad_debug_impl_vkGetDisplayPlaneSupportedDisplaysKHR;
PFN_vkGetDrmDisplayEXT                    glad_vkGetDrmDisplayEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR *display) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetDrmDisplayEXT", (GLADapiproc)glad_vkGetDrmDisplayEXT, 4, physicalDevice, drmFd, connectorId, display);
	ret = glad_vkGetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);
	_post_call_vulkan_callback((void *)&ret, "vkGetDrmDisplayEXT", (GLADapiproc)glad_vkGetDrmDisplayEXT, 4, physicalDevice, drmFd, connectorId, display);
	return ret;
}
PFN_vkGetDrmDisplayEXT                      glad_debug_vkGetDrmDisplayEXT = glad_debug_impl_vkGetDrmDisplayEXT;
PFN_vkGetDynamicRenderingTilePropertiesQCOM glad_vkGetDynamicRenderingTilePropertiesQCOM = NULL;
static VkResult GLAD_API_PTR                glad_debug_impl_vkGetDynamicRenderingTilePropertiesQCOM(VkDevice               device,
                                                                                                    const VkRenderingInfo *pRenderingInfo,
                                                                                                    VkTilePropertiesQCOM  *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetDynamicRenderingTilePropertiesQCOM",
                                  (GLADapiproc)glad_vkGetDynamicRenderingTilePropertiesQCOM,
                                  3,
                                  device,
                                  pRenderingInfo,
                                  pProperties);
        ret = glad_vkGetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetDynamicRenderingTilePropertiesQCOM",
                                   (GLADapiproc)glad_vkGetDynamicRenderingTilePropertiesQCOM,
                                   3,
                                   device,
                                   pRenderingInfo,
                                   pProperties);
        return ret;
}
PFN_vkGetDynamicRenderingTilePropertiesQCOM glad_debug_vkGetDynamicRenderingTilePropertiesQCOM = glad_debug_impl_vkGetDynamicRenderingTilePropertiesQCOM;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkGetEncodedVideoSessionParametersKHR glad_vkGetEncodedVideoSessionParametersKHR = NULL;
static VkResult GLAD_API_PTR              glad_debug_impl_vkGetEncodedVideoSessionParametersKHR(VkDevice                                        device,
                                                                                                const VkVideoEncodeSessionParametersGetInfoKHR *pVideoSessionParametersInfo,
                                                                                                VkVideoEncodeSessionParametersFeedbackInfoKHR  *pFeedbackInfo,
                                                                                                size_t                                         *pDataSize,
                                                                                                void                                           *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetEncodedVideoSessionParametersKHR",
                                  (GLADapiproc)glad_vkGetEncodedVideoSessionParametersKHR,
                                  5,
                                  device,
                                  pVideoSessionParametersInfo,
                                  pFeedbackInfo,
                                  pDataSize,
                                  pData);
        ret = glad_vkGetEncodedVideoSessionParametersKHR(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetEncodedVideoSessionParametersKHR",
                                   (GLADapiproc)glad_vkGetEncodedVideoSessionParametersKHR,
                                   5,
                                   device,
                                   pVideoSessionParametersInfo,
                                   pFeedbackInfo,
                                   pDataSize,
                                   pData);
        return ret;
}
PFN_vkGetEncodedVideoSessionParametersKHR glad_debug_vkGetEncodedVideoSessionParametersKHR = glad_debug_impl_vkGetEncodedVideoSessionParametersKHR;

#endif
PFN_vkGetEventStatus         glad_vkGetEventStatus = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetEventStatus(VkDevice device, VkEvent event) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetEventStatus", (GLADapiproc)glad_vkGetEventStatus, 2, device, event);
	ret = glad_vkGetEventStatus(device, event);
	_post_call_vulkan_callback((void *)&ret, "vkGetEventStatus", (GLADapiproc)glad_vkGetEventStatus, 2, device, event);
	return ret;
}
PFN_vkGetEventStatus glad_debug_vkGetEventStatus = glad_debug_impl_vkGetEventStatus;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkGetExecutionGraphPipelineNodeIndexAMDX glad_vkGetExecutionGraphPipelineNodeIndexAMDX = NULL;
static VkResult GLAD_API_PTR                 glad_debug_impl_vkGetExecutionGraphPipelineNodeIndexAMDX(VkDevice                                       device,
                                                                                                      VkPipeline                                     executionGraph,
                                                                                                      const VkPipelineShaderStageNodeCreateInfoAMDX *pNodeInfo,
                                                                                                      uint32_t                                      *pNodeIndex) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetExecutionGraphPipelineNodeIndexAMDX",
                                  (GLADapiproc)glad_vkGetExecutionGraphPipelineNodeIndexAMDX,
                                  4,
                                  device,
                                  executionGraph,
                                  pNodeInfo,
                                  pNodeIndex);
        ret = glad_vkGetExecutionGraphPipelineNodeIndexAMDX(device, executionGraph, pNodeInfo, pNodeIndex);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetExecutionGraphPipelineNodeIndexAMDX",
                                   (GLADapiproc)glad_vkGetExecutionGraphPipelineNodeIndexAMDX,
                                   4,
                                   device,
                                   executionGraph,
                                   pNodeInfo,
                                   pNodeIndex);
        return ret;
}
PFN_vkGetExecutionGraphPipelineNodeIndexAMDX glad_debug_vkGetExecutionGraphPipelineNodeIndexAMDX = glad_debug_impl_vkGetExecutionGraphPipelineNodeIndexAMDX;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkGetExecutionGraphPipelineScratchSizeAMDX glad_vkGetExecutionGraphPipelineScratchSizeAMDX = NULL;
static VkResult GLAD_API_PTR                   glad_debug_impl_vkGetExecutionGraphPipelineScratchSizeAMDX(VkDevice                                 device,
                                                                                                          VkPipeline                               executionGraph,
                                                                                                          VkExecutionGraphPipelineScratchSizeAMDX *pSizeInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetExecutionGraphPipelineScratchSizeAMDX",
                                  (GLADapiproc)glad_vkGetExecutionGraphPipelineScratchSizeAMDX,
                                  3,
                                  device,
                                  executionGraph,
                                  pSizeInfo);
        ret = glad_vkGetExecutionGraphPipelineScratchSizeAMDX(device, executionGraph, pSizeInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetExecutionGraphPipelineScratchSizeAMDX",
                                   (GLADapiproc)glad_vkGetExecutionGraphPipelineScratchSizeAMDX,
                                   3,
                                   device,
                                   executionGraph,
                                   pSizeInfo);
        return ret;
}
PFN_vkGetExecutionGraphPipelineScratchSizeAMDX glad_debug_vkGetExecutionGraphPipelineScratchSizeAMDX =
	glad_debug_impl_vkGetExecutionGraphPipelineScratchSizeAMDX;

#endif
PFN_vkGetFenceFdKHR          glad_vkGetFenceFdKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR *pGetFdInfo, int *pFd) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetFenceFdKHR", (GLADapiproc)glad_vkGetFenceFdKHR, 3, device, pGetFdInfo, pFd);
	ret = glad_vkGetFenceFdKHR(device, pGetFdInfo, pFd);
	_post_call_vulkan_callback((void *)&ret, "vkGetFenceFdKHR", (GLADapiproc)glad_vkGetFenceFdKHR, 3, device, pGetFdInfo, pFd);
	return ret;
}
PFN_vkGetFenceFdKHR          glad_debug_vkGetFenceFdKHR = glad_debug_impl_vkGetFenceFdKHR;
PFN_vkGetFenceStatus         glad_vkGetFenceStatus = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetFenceStatus(VkDevice device, VkFence fence) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetFenceStatus", (GLADapiproc)glad_vkGetFenceStatus, 2, device, fence);
	ret = glad_vkGetFenceStatus(device, fence);
	_post_call_vulkan_callback((void *)&ret, "vkGetFenceStatus", (GLADapiproc)glad_vkGetFenceStatus, 2, device, fence);
	return ret;
}
PFN_vkGetFenceStatus glad_debug_vkGetFenceStatus = glad_debug_impl_vkGetFenceStatus;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkGetFenceWin32HandleKHR glad_vkGetFenceWin32HandleKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetFenceWin32HandleKHR(VkDevice                            device,
                                                                      const VkFenceGetWin32HandleInfoKHR *pGetWin32HandleInfo,
                                                                      HANDLE                             *pHandle) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetFenceWin32HandleKHR", (GLADapiproc)glad_vkGetFenceWin32HandleKHR, 3, device, pGetWin32HandleInfo, pHandle);
	ret = glad_vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetFenceWin32HandleKHR",
	                           (GLADapiproc)glad_vkGetFenceWin32HandleKHR,
	                           3,
	                           device,
	                           pGetWin32HandleInfo,
	                           pHandle);
	return ret;
}
PFN_vkGetFenceWin32HandleKHR glad_debug_vkGetFenceWin32HandleKHR = glad_debug_impl_vkGetFenceWin32HandleKHR;

#endif
PFN_vkGetFramebufferTilePropertiesQCOM glad_vkGetFramebufferTilePropertiesQCOM = NULL;
static VkResult GLAD_API_PTR           glad_debug_impl_vkGetFramebufferTilePropertiesQCOM(VkDevice              device,
                                                                                          VkFramebuffer         framebuffer,
                                                                                          uint32_t             *pPropertiesCount,
                                                                                          VkTilePropertiesQCOM *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetFramebufferTilePropertiesQCOM",
                                  (GLADapiproc)glad_vkGetFramebufferTilePropertiesQCOM,
                                  4,
                                  device,
                                  framebuffer,
                                  pPropertiesCount,
                                  pProperties);
        ret = glad_vkGetFramebufferTilePropertiesQCOM(device, framebuffer, pPropertiesCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetFramebufferTilePropertiesQCOM",
                                   (GLADapiproc)glad_vkGetFramebufferTilePropertiesQCOM,
                                   4,
                                   device,
                                   framebuffer,
                                   pPropertiesCount,
                                   pProperties);
        return ret;
}
PFN_vkGetFramebufferTilePropertiesQCOM         glad_debug_vkGetFramebufferTilePropertiesQCOM = glad_debug_impl_vkGetFramebufferTilePropertiesQCOM;
PFN_vkGetGeneratedCommandsMemoryRequirementsNV glad_vkGetGeneratedCommandsMemoryRequirementsNV = NULL;
static void GLAD_API_PTR                       glad_debug_impl_vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice                                           device,
                                                                                                          const VkGeneratedCommandsMemoryRequirementsInfoNV *pInfo,
                                                                                                          VkMemoryRequirements2                             *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetGeneratedCommandsMemoryRequirementsNV",
                                  (GLADapiproc)glad_vkGetGeneratedCommandsMemoryRequirementsNV,
                                  3,
                                  device,
                                  pInfo,
                                  pMemoryRequirements);
        glad_vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetGeneratedCommandsMemoryRequirementsNV",
                                   (GLADapiproc)glad_vkGetGeneratedCommandsMemoryRequirementsNV,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetGeneratedCommandsMemoryRequirementsNV glad_debug_vkGetGeneratedCommandsMemoryRequirementsNV =
	glad_debug_impl_vkGetGeneratedCommandsMemoryRequirementsNV;
PFN_vkGetImageDrmFormatModifierPropertiesEXT glad_vkGetImageDrmFormatModifierPropertiesEXT = NULL;
static VkResult GLAD_API_PTR                 glad_debug_impl_vkGetImageDrmFormatModifierPropertiesEXT(VkDevice                               device,
                                                                                                      VkImage                                image,
                                                                                                      VkImageDrmFormatModifierPropertiesEXT *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetImageDrmFormatModifierPropertiesEXT",
                                  (GLADapiproc)glad_vkGetImageDrmFormatModifierPropertiesEXT,
                                  3,
                                  device,
                                  image,
                                  pProperties);
        ret = glad_vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetImageDrmFormatModifierPropertiesEXT",
                                   (GLADapiproc)glad_vkGetImageDrmFormatModifierPropertiesEXT,
                                   3,
                                   device,
                                   image,
                                   pProperties);
        return ret;
}
PFN_vkGetImageDrmFormatModifierPropertiesEXT glad_debug_vkGetImageDrmFormatModifierPropertiesEXT = glad_debug_impl_vkGetImageDrmFormatModifierPropertiesEXT;
PFN_vkGetImageMemoryRequirements             glad_vkGetImageMemoryRequirements = NULL;
static void GLAD_API_PTR glad_debug_impl_vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements *pMemoryRequirements) {
	_pre_call_vulkan_callback("vkGetImageMemoryRequirements", (GLADapiproc)glad_vkGetImageMemoryRequirements, 3, device, image, pMemoryRequirements);
	glad_vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
	_post_call_vulkan_callback(NULL, "vkGetImageMemoryRequirements", (GLADapiproc)glad_vkGetImageMemoryRequirements, 3, device, image, pMemoryRequirements);
}
PFN_vkGetImageMemoryRequirements  glad_debug_vkGetImageMemoryRequirements = glad_debug_impl_vkGetImageMemoryRequirements;
PFN_vkGetImageMemoryRequirements2 glad_vkGetImageMemoryRequirements2 = NULL;
static void GLAD_API_PTR          glad_debug_impl_vkGetImageMemoryRequirements2(VkDevice                              device,
                                                                                const VkImageMemoryRequirementsInfo2 *pInfo,
                                                                                VkMemoryRequirements2                *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetImageMemoryRequirements2", (GLADapiproc)glad_vkGetImageMemoryRequirements2, 3, device, pInfo, pMemoryRequirements);
        glad_vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetImageMemoryRequirements2",
                                   (GLADapiproc)glad_vkGetImageMemoryRequirements2,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetImageMemoryRequirements2    glad_debug_vkGetImageMemoryRequirements2 = glad_debug_impl_vkGetImageMemoryRequirements2;
PFN_vkGetImageMemoryRequirements2KHR glad_vkGetImageMemoryRequirements2KHR = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkGetImageMemoryRequirements2KHR(VkDevice                              device,
                                                                                      const VkImageMemoryRequirementsInfo2 *pInfo,
                                                                                      VkMemoryRequirements2                *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetImageMemoryRequirements2KHR",
                                  (GLADapiproc)glad_vkGetImageMemoryRequirements2KHR,
                                  3,
                                  device,
                                  pInfo,
                                  pMemoryRequirements);
        glad_vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetImageMemoryRequirements2KHR",
                                   (GLADapiproc)glad_vkGetImageMemoryRequirements2KHR,
                                   3,
                                   device,
                                   pInfo,
                                   pMemoryRequirements);
}
PFN_vkGetImageMemoryRequirements2KHR         glad_debug_vkGetImageMemoryRequirements2KHR = glad_debug_impl_vkGetImageMemoryRequirements2KHR;
PFN_vkGetImageOpaqueCaptureDescriptorDataEXT glad_vkGetImageOpaqueCaptureDescriptorDataEXT = NULL;
static VkResult GLAD_API_PTR                 glad_debug_impl_vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice                                   device,
                                                                                                      const VkImageCaptureDescriptorDataInfoEXT *pInfo,
                                                                                                      void                                      *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetImageOpaqueCaptureDescriptorDataEXT",
                                  (GLADapiproc)glad_vkGetImageOpaqueCaptureDescriptorDataEXT,
                                  3,
                                  device,
                                  pInfo,
                                  pData);
        ret = glad_vkGetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetImageOpaqueCaptureDescriptorDataEXT",
                                   (GLADapiproc)glad_vkGetImageOpaqueCaptureDescriptorDataEXT,
                                   3,
                                   device,
                                   pInfo,
                                   pData);
        return ret;
}
PFN_vkGetImageOpaqueCaptureDescriptorDataEXT glad_debug_vkGetImageOpaqueCaptureDescriptorDataEXT = glad_debug_impl_vkGetImageOpaqueCaptureDescriptorDataEXT;
PFN_vkGetImageSparseMemoryRequirements       glad_vkGetImageSparseMemoryRequirements = NULL;
static void GLAD_API_PTR                     glad_debug_impl_vkGetImageSparseMemoryRequirements(VkDevice                         device,
                                                                                                VkImage                          image,
                                                                                                uint32_t                        *pSparseMemoryRequirementCount,
                                                                                                VkSparseImageMemoryRequirements *pSparseMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetImageSparseMemoryRequirements",
                                  (GLADapiproc)glad_vkGetImageSparseMemoryRequirements,
                                  4,
                                  device,
                                  image,
                                  pSparseMemoryRequirementCount,
                                  pSparseMemoryRequirements);
        glad_vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetImageSparseMemoryRequirements",
                                   (GLADapiproc)glad_vkGetImageSparseMemoryRequirements,
                                   4,
                                   device,
                                   image,
                                   pSparseMemoryRequirementCount,
                                   pSparseMemoryRequirements);
}
PFN_vkGetImageSparseMemoryRequirements  glad_debug_vkGetImageSparseMemoryRequirements = glad_debug_impl_vkGetImageSparseMemoryRequirements;
PFN_vkGetImageSparseMemoryRequirements2 glad_vkGetImageSparseMemoryRequirements2 = NULL;
static void GLAD_API_PTR                glad_debug_impl_vkGetImageSparseMemoryRequirements2(VkDevice                                    device,
                                                                                            const VkImageSparseMemoryRequirementsInfo2 *pInfo,
                                                                                            uint32_t                                   *pSparseMemoryRequirementCount,
                                                                                            VkSparseImageMemoryRequirements2           *pSparseMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetImageSparseMemoryRequirements2",
                                  (GLADapiproc)glad_vkGetImageSparseMemoryRequirements2,
                                  4,
                                  device,
                                  pInfo,
                                  pSparseMemoryRequirementCount,
                                  pSparseMemoryRequirements);
        glad_vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetImageSparseMemoryRequirements2",
                                   (GLADapiproc)glad_vkGetImageSparseMemoryRequirements2,
                                   4,
                                   device,
                                   pInfo,
                                   pSparseMemoryRequirementCount,
                                   pSparseMemoryRequirements);
}
PFN_vkGetImageSparseMemoryRequirements2    glad_debug_vkGetImageSparseMemoryRequirements2 = glad_debug_impl_vkGetImageSparseMemoryRequirements2;
PFN_vkGetImageSparseMemoryRequirements2KHR glad_vkGetImageSparseMemoryRequirements2KHR = NULL;
static void GLAD_API_PTR                   glad_debug_impl_vkGetImageSparseMemoryRequirements2KHR(VkDevice                                    device,
                                                                                                  const VkImageSparseMemoryRequirementsInfo2 *pInfo,
                                                                                                  uint32_t                                   *pSparseMemoryRequirementCount,
                                                                                                  VkSparseImageMemoryRequirements2           *pSparseMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetImageSparseMemoryRequirements2KHR",
                                  (GLADapiproc)glad_vkGetImageSparseMemoryRequirements2KHR,
                                  4,
                                  device,
                                  pInfo,
                                  pSparseMemoryRequirementCount,
                                  pSparseMemoryRequirements);
        glad_vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetImageSparseMemoryRequirements2KHR",
                                   (GLADapiproc)glad_vkGetImageSparseMemoryRequirements2KHR,
                                   4,
                                   device,
                                   pInfo,
                                   pSparseMemoryRequirementCount,
                                   pSparseMemoryRequirements);
}
PFN_vkGetImageSparseMemoryRequirements2KHR glad_debug_vkGetImageSparseMemoryRequirements2KHR = glad_debug_impl_vkGetImageSparseMemoryRequirements2KHR;
PFN_vkGetImageSubresourceLayout            glad_vkGetImageSubresourceLayout = NULL;
static void GLAD_API_PTR                   glad_debug_impl_vkGetImageSubresourceLayout(VkDevice                  device,
                                                                                       VkImage                   image,
                                                                                       const VkImageSubresource *pSubresource,
                                                                                       VkSubresourceLayout      *pLayout) {
        _pre_call_vulkan_callback("vkGetImageSubresourceLayout", (GLADapiproc)glad_vkGetImageSubresourceLayout, 4, device, image, pSubresource, pLayout);
        glad_vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
        _post_call_vulkan_callback(NULL, "vkGetImageSubresourceLayout", (GLADapiproc)glad_vkGetImageSubresourceLayout, 4, device, image, pSubresource, pLayout);
}
PFN_vkGetImageSubresourceLayout     glad_debug_vkGetImageSubresourceLayout = glad_debug_impl_vkGetImageSubresourceLayout;
PFN_vkGetImageSubresourceLayout2EXT glad_vkGetImageSubresourceLayout2EXT = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkGetImageSubresourceLayout2EXT(VkDevice                      device,
                                                                                    VkImage                       image,
                                                                                    const VkImageSubresource2KHR *pSubresource,
                                                                                    VkSubresourceLayout2KHR      *pLayout) {
        _pre_call_vulkan_callback("vkGetImageSubresourceLayout2EXT",
                                  (GLADapiproc)glad_vkGetImageSubresourceLayout2EXT,
                                  4,
                                  device,
                                  image,
                                  pSubresource,
                                  pLayout);
        glad_vkGetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);
        _post_call_vulkan_callback(NULL,
                                   "vkGetImageSubresourceLayout2EXT",
                                   (GLADapiproc)glad_vkGetImageSubresourceLayout2EXT,
                                   4,
                                   device,
                                   image,
                                   pSubresource,
                                   pLayout);
}
PFN_vkGetImageSubresourceLayout2EXT glad_debug_vkGetImageSubresourceLayout2EXT = glad_debug_impl_vkGetImageSubresourceLayout2EXT;
PFN_vkGetImageSubresourceLayout2KHR glad_vkGetImageSubresourceLayout2KHR = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkGetImageSubresourceLayout2KHR(VkDevice                      device,
                                                                                    VkImage                       image,
                                                                                    const VkImageSubresource2KHR *pSubresource,
                                                                                    VkSubresourceLayout2KHR      *pLayout) {
        _pre_call_vulkan_callback("vkGetImageSubresourceLayout2KHR",
                                  (GLADapiproc)glad_vkGetImageSubresourceLayout2KHR,
                                  4,
                                  device,
                                  image,
                                  pSubresource,
                                  pLayout);
        glad_vkGetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);
        _post_call_vulkan_callback(NULL,
                                   "vkGetImageSubresourceLayout2KHR",
                                   (GLADapiproc)glad_vkGetImageSubresourceLayout2KHR,
                                   4,
                                   device,
                                   image,
                                   pSubresource,
                                   pLayout);
}
PFN_vkGetImageSubresourceLayout2KHR glad_debug_vkGetImageSubresourceLayout2KHR = glad_debug_impl_vkGetImageSubresourceLayout2KHR;
PFN_vkGetImageViewAddressNVX        glad_vkGetImageViewAddressNVX = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX *pProperties) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetImageViewAddressNVX", (GLADapiproc)glad_vkGetImageViewAddressNVX, 3, device, imageView, pProperties);
	ret = glad_vkGetImageViewAddressNVX(device, imageView, pProperties);
	_post_call_vulkan_callback((void *)&ret, "vkGetImageViewAddressNVX", (GLADapiproc)glad_vkGetImageViewAddressNVX, 3, device, imageView, pProperties);
	return ret;
}
PFN_vkGetImageViewAddressNVX glad_debug_vkGetImageViewAddressNVX = glad_debug_impl_vkGetImageViewAddressNVX;
PFN_vkGetImageViewHandleNVX  glad_vkGetImageViewHandleNVX = NULL;
static uint32_t GLAD_API_PTR glad_debug_impl_vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX *pInfo) {
	uint32_t ret;
	_pre_call_vulkan_callback("vkGetImageViewHandleNVX", (GLADapiproc)glad_vkGetImageViewHandleNVX, 2, device, pInfo);
	ret = glad_vkGetImageViewHandleNVX(device, pInfo);
	_post_call_vulkan_callback((void *)&ret, "vkGetImageViewHandleNVX", (GLADapiproc)glad_vkGetImageViewHandleNVX, 2, device, pInfo);
	return ret;
}
PFN_vkGetImageViewHandleNVX                      glad_debug_vkGetImageViewHandleNVX = glad_debug_impl_vkGetImageViewHandleNVX;
PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT glad_vkGetImageViewOpaqueCaptureDescriptorDataEXT = NULL;
static VkResult GLAD_API_PTR                     glad_debug_impl_vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice                                       device,
                                                                                                              const VkImageViewCaptureDescriptorDataInfoEXT *pInfo,
                                                                                                              void                                          *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetImageViewOpaqueCaptureDescriptorDataEXT",
                                  (GLADapiproc)glad_vkGetImageViewOpaqueCaptureDescriptorDataEXT,
                                  3,
                                  device,
                                  pInfo,
                                  pData);
        ret = glad_vkGetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetImageViewOpaqueCaptureDescriptorDataEXT",
                                   (GLADapiproc)glad_vkGetImageViewOpaqueCaptureDescriptorDataEXT,
                                   3,
                                   device,
                                   pInfo,
                                   pData);
        return ret;
}
PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT glad_debug_vkGetImageViewOpaqueCaptureDescriptorDataEXT =
	glad_debug_impl_vkGetImageViewOpaqueCaptureDescriptorDataEXT;
PFN_vkGetInstanceProcAddr              glad_vkGetInstanceProcAddr = NULL;
static PFN_vkVoidFunction GLAD_API_PTR glad_debug_impl_vkGetInstanceProcAddr(VkInstance instance, const char *pName) {
	PFN_vkVoidFunction ret;
	_pre_call_vulkan_callback("vkGetInstanceProcAddr", (GLADapiproc)glad_vkGetInstanceProcAddr, 2, instance, pName);
	ret = glad_vkGetInstanceProcAddr(instance, pName);
	_post_call_vulkan_callback((void *)&ret, "vkGetInstanceProcAddr", (GLADapiproc)glad_vkGetInstanceProcAddr, 2, instance, pName);
	return ret;
}
PFN_vkGetInstanceProcAddr glad_debug_vkGetInstanceProcAddr = glad_debug_impl_vkGetInstanceProcAddr;
PFN_vkGetLatencyTimingsNV glad_vkGetLatencyTimingsNV = NULL;
static void GLAD_API_PTR  glad_debug_impl_vkGetLatencyTimingsNV(VkDevice                  device,
                                                                VkSwapchainKHR            swapchain,
                                                                uint32_t                 *pTimingCount,
                                                                VkGetLatencyMarkerInfoNV *pLatencyMarkerInfo) {
        _pre_call_vulkan_callback("vkGetLatencyTimingsNV", (GLADapiproc)glad_vkGetLatencyTimingsNV, 4, device, swapchain, pTimingCount, pLatencyMarkerInfo);
        glad_vkGetLatencyTimingsNV(device, swapchain, pTimingCount, pLatencyMarkerInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkGetLatencyTimingsNV",
                                   (GLADapiproc)glad_vkGetLatencyTimingsNV,
                                   4,
                                   device,
                                   swapchain,
                                   pTimingCount,
                                   pLatencyMarkerInfo);
}
PFN_vkGetLatencyTimingsNV glad_debug_vkGetLatencyTimingsNV = glad_debug_impl_vkGetLatencyTimingsNV;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
PFN_vkGetMemoryAndroidHardwareBufferANDROID glad_vkGetMemoryAndroidHardwareBufferANDROID = NULL;
static VkResult GLAD_API_PTR                glad_debug_impl_vkGetMemoryAndroidHardwareBufferANDROID(VkDevice                                           device,
                                                                                                    const VkMemoryGetAndroidHardwareBufferInfoANDROID *pInfo,
                                                                                                    struct AHardwareBuffer                           **pBuffer) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetMemoryAndroidHardwareBufferANDROID",
                                  (GLADapiproc)glad_vkGetMemoryAndroidHardwareBufferANDROID,
                                  3,
                                  device,
                                  pInfo,
                                  pBuffer);
        ret = glad_vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetMemoryAndroidHardwareBufferANDROID",
                                   (GLADapiproc)glad_vkGetMemoryAndroidHardwareBufferANDROID,
                                   3,
                                   device,
                                   pInfo,
                                   pBuffer);
        return ret;
}
PFN_vkGetMemoryAndroidHardwareBufferANDROID glad_debug_vkGetMemoryAndroidHardwareBufferANDROID = glad_debug_impl_vkGetMemoryAndroidHardwareBufferANDROID;

#endif
PFN_vkGetMemoryFdKHR         glad_vkGetMemoryFdKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR *pGetFdInfo, int *pFd) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetMemoryFdKHR", (GLADapiproc)glad_vkGetMemoryFdKHR, 3, device, pGetFdInfo, pFd);
	ret = glad_vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
	_post_call_vulkan_callback((void *)&ret, "vkGetMemoryFdKHR", (GLADapiproc)glad_vkGetMemoryFdKHR, 3, device, pGetFdInfo, pFd);
	return ret;
}
PFN_vkGetMemoryFdKHR           glad_debug_vkGetMemoryFdKHR = glad_debug_impl_vkGetMemoryFdKHR;
PFN_vkGetMemoryFdPropertiesKHR glad_vkGetMemoryFdPropertiesKHR = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkGetMemoryFdPropertiesKHR(VkDevice                           device,
                                                                          VkExternalMemoryHandleTypeFlagBits handleType,
                                                                          int                                fd,
                                                                          VkMemoryFdPropertiesKHR           *pMemoryFdProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetMemoryFdPropertiesKHR", (GLADapiproc)glad_vkGetMemoryFdPropertiesKHR, 4, device, handleType, fd, pMemoryFdProperties);
        ret = glad_vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetMemoryFdPropertiesKHR",
                                   (GLADapiproc)glad_vkGetMemoryFdPropertiesKHR,
                                   4,
                                   device,
                                   handleType,
                                   fd,
                                   pMemoryFdProperties);
        return ret;
}
PFN_vkGetMemoryFdPropertiesKHR          glad_debug_vkGetMemoryFdPropertiesKHR = glad_debug_impl_vkGetMemoryFdPropertiesKHR;
PFN_vkGetMemoryHostPointerPropertiesEXT glad_vkGetMemoryHostPointerPropertiesEXT = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkGetMemoryHostPointerPropertiesEXT(VkDevice                           device,
                                                                                            VkExternalMemoryHandleTypeFlagBits handleType,
                                                                                            const void                        *pHostPointer,
                                                                                            VkMemoryHostPointerPropertiesEXT  *pMemoryHostPointerProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetMemoryHostPointerPropertiesEXT",
                                  (GLADapiproc)glad_vkGetMemoryHostPointerPropertiesEXT,
                                  4,
                                  device,
                                  handleType,
                                  pHostPointer,
                                  pMemoryHostPointerProperties);
        ret = glad_vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetMemoryHostPointerPropertiesEXT",
                                   (GLADapiproc)glad_vkGetMemoryHostPointerPropertiesEXT,
                                   4,
                                   device,
                                   handleType,
                                   pHostPointer,
                                   pMemoryHostPointerProperties);
        return ret;
}
PFN_vkGetMemoryHostPointerPropertiesEXT glad_debug_vkGetMemoryHostPointerPropertiesEXT = glad_debug_impl_vkGetMemoryHostPointerPropertiesEXT;
PFN_vkGetMemoryRemoteAddressNV          glad_vkGetMemoryRemoteAddressNV = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkGetMemoryRemoteAddressNV(VkDevice                              device,
                                                                                   const VkMemoryGetRemoteAddressInfoNV *pMemoryGetRemoteAddressInfo,
                                                                                   VkRemoteAddressNV                    *pAddress) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetMemoryRemoteAddressNV", (GLADapiproc)glad_vkGetMemoryRemoteAddressNV, 3, device, pMemoryGetRemoteAddressInfo, pAddress);
        ret = glad_vkGetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetMemoryRemoteAddressNV",
                                   (GLADapiproc)glad_vkGetMemoryRemoteAddressNV,
                                   3,
                                   device,
                                   pMemoryGetRemoteAddressInfo,
                                   pAddress);
        return ret;
}
PFN_vkGetMemoryRemoteAddressNV glad_debug_vkGetMemoryRemoteAddressNV = glad_debug_impl_vkGetMemoryRemoteAddressNV;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkGetMemoryWin32HandleKHR glad_vkGetMemoryWin32HandleKHR = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkGetMemoryWin32HandleKHR(VkDevice                             device,
                                                                        const VkMemoryGetWin32HandleInfoKHR *pGetWin32HandleInfo,
                                                                        HANDLE                              *pHandle) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetMemoryWin32HandleKHR", (GLADapiproc)glad_vkGetMemoryWin32HandleKHR, 3, device, pGetWin32HandleInfo, pHandle);
        ret = glad_vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetMemoryWin32HandleKHR",
                                   (GLADapiproc)glad_vkGetMemoryWin32HandleKHR,
                                   3,
                                   device,
                                   pGetWin32HandleInfo,
                                   pHandle);
        return ret;
}
PFN_vkGetMemoryWin32HandleKHR glad_debug_vkGetMemoryWin32HandleKHR = glad_debug_impl_vkGetMemoryWin32HandleKHR;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkGetMemoryWin32HandleNV glad_vkGetMemoryWin32HandleNV = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetMemoryWin32HandleNV(VkDevice                          device,
                                                                      VkDeviceMemory                    memory,
                                                                      VkExternalMemoryHandleTypeFlagsNV handleType,
                                                                      HANDLE                           *pHandle) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetMemoryWin32HandleNV", (GLADapiproc)glad_vkGetMemoryWin32HandleNV, 4, device, memory, handleType, pHandle);
	ret = glad_vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetMemoryWin32HandleNV",
	                           (GLADapiproc)glad_vkGetMemoryWin32HandleNV,
	                           4,
	                           device,
	                           memory,
	                           handleType,
	                           pHandle);
	return ret;
}
PFN_vkGetMemoryWin32HandleNV glad_debug_vkGetMemoryWin32HandleNV = glad_debug_impl_vkGetMemoryWin32HandleNV;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkGetMemoryWin32HandlePropertiesKHR glad_vkGetMemoryWin32HandlePropertiesKHR = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkGetMemoryWin32HandlePropertiesKHR(VkDevice                           device,
                                                                                            VkExternalMemoryHandleTypeFlagBits handleType,
                                                                                            HANDLE                             handle,
                                                                                            VkMemoryWin32HandlePropertiesKHR  *pMemoryWin32HandleProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetMemoryWin32HandlePropertiesKHR",
                                  (GLADapiproc)glad_vkGetMemoryWin32HandlePropertiesKHR,
                                  4,
                                  device,
                                  handleType,
                                  handle,
                                  pMemoryWin32HandleProperties);
        ret = glad_vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetMemoryWin32HandlePropertiesKHR",
                                   (GLADapiproc)glad_vkGetMemoryWin32HandlePropertiesKHR,
                                   4,
                                   device,
                                   handleType,
                                   handle,
                                   pMemoryWin32HandleProperties);
        return ret;
}
PFN_vkGetMemoryWin32HandlePropertiesKHR glad_debug_vkGetMemoryWin32HandlePropertiesKHR = glad_debug_impl_vkGetMemoryWin32HandlePropertiesKHR;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkGetMemoryZirconHandleFUCHSIA glad_vkGetMemoryZirconHandleFUCHSIA = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkGetMemoryZirconHandleFUCHSIA(VkDevice                                  device,
                                                                                  const VkMemoryGetZirconHandleInfoFUCHSIA *pGetZirconHandleInfo,
                                                                                  zx_handle_t                              *pZirconHandle) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetMemoryZirconHandleFUCHSIA",
                                  (GLADapiproc)glad_vkGetMemoryZirconHandleFUCHSIA,
                                  3,
                                  device,
                                  pGetZirconHandleInfo,
                                  pZirconHandle);
        ret = glad_vkGetMemoryZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetMemoryZirconHandleFUCHSIA",
                                   (GLADapiproc)glad_vkGetMemoryZirconHandleFUCHSIA,
                                   3,
                                   device,
                                   pGetZirconHandleInfo,
                                   pZirconHandle);
        return ret;
}
PFN_vkGetMemoryZirconHandleFUCHSIA glad_debug_vkGetMemoryZirconHandleFUCHSIA = glad_debug_impl_vkGetMemoryZirconHandleFUCHSIA;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA glad_vkGetMemoryZirconHandlePropertiesFUCHSIA = NULL;
static VkResult GLAD_API_PTR                 glad_debug_impl_vkGetMemoryZirconHandlePropertiesFUCHSIA(VkDevice                               device,
                                                                                                      VkExternalMemoryHandleTypeFlagBits     handleType,
                                                                                                      zx_handle_t                            zirconHandle,
                                                                                                      VkMemoryZirconHandlePropertiesFUCHSIA *pMemoryZirconHandleProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetMemoryZirconHandlePropertiesFUCHSIA",
                                  (GLADapiproc)glad_vkGetMemoryZirconHandlePropertiesFUCHSIA,
                                  4,
                                  device,
                                  handleType,
                                  zirconHandle,
                                  pMemoryZirconHandleProperties);
        ret = glad_vkGetMemoryZirconHandlePropertiesFUCHSIA(device, handleType, zirconHandle, pMemoryZirconHandleProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetMemoryZirconHandlePropertiesFUCHSIA",
                                   (GLADapiproc)glad_vkGetMemoryZirconHandlePropertiesFUCHSIA,
                                   4,
                                   device,
                                   handleType,
                                   zirconHandle,
                                   pMemoryZirconHandleProperties);
        return ret;
}
PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA glad_debug_vkGetMemoryZirconHandlePropertiesFUCHSIA = glad_debug_impl_vkGetMemoryZirconHandlePropertiesFUCHSIA;

#endif
PFN_vkGetMicromapBuildSizesEXT glad_vkGetMicromapBuildSizesEXT = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkGetMicromapBuildSizesEXT(VkDevice                            device,
                                                                          VkAccelerationStructureBuildTypeKHR buildType,
                                                                          const VkMicromapBuildInfoEXT       *pBuildInfo,
                                                                          VkMicromapBuildSizesInfoEXT        *pSizeInfo) {
        _pre_call_vulkan_callback("vkGetMicromapBuildSizesEXT", (GLADapiproc)glad_vkGetMicromapBuildSizesEXT, 4, device, buildType, pBuildInfo, pSizeInfo);
        glad_vkGetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);
        _post_call_vulkan_callback(NULL,
                                   "vkGetMicromapBuildSizesEXT",
                                   (GLADapiproc)glad_vkGetMicromapBuildSizesEXT,
                                   4,
                                   device,
                                   buildType,
                                   pBuildInfo,
                                   pSizeInfo);
}
PFN_vkGetMicromapBuildSizesEXT        glad_debug_vkGetMicromapBuildSizesEXT = glad_debug_impl_vkGetMicromapBuildSizesEXT;
PFN_vkGetPastPresentationTimingGOOGLE glad_vkGetPastPresentationTimingGOOGLE = NULL;
static VkResult GLAD_API_PTR          glad_debug_impl_vkGetPastPresentationTimingGOOGLE(VkDevice                        device,
                                                                                        VkSwapchainKHR                  swapchain,
                                                                                        uint32_t                       *pPresentationTimingCount,
                                                                                        VkPastPresentationTimingGOOGLE *pPresentationTimings) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPastPresentationTimingGOOGLE",
                                  (GLADapiproc)glad_vkGetPastPresentationTimingGOOGLE,
                                  4,
                                  device,
                                  swapchain,
                                  pPresentationTimingCount,
                                  pPresentationTimings);
        ret = glad_vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPastPresentationTimingGOOGLE",
                                   (GLADapiproc)glad_vkGetPastPresentationTimingGOOGLE,
                                   4,
                                   device,
                                   swapchain,
                                   pPresentationTimingCount,
                                   pPresentationTimings);
        return ret;
}
PFN_vkGetPastPresentationTimingGOOGLE glad_debug_vkGetPastPresentationTimingGOOGLE = glad_debug_impl_vkGetPastPresentationTimingGOOGLE;
PFN_vkGetPerformanceParameterINTEL    glad_vkGetPerformanceParameterINTEL = NULL;
static VkResult GLAD_API_PTR          glad_debug_impl_vkGetPerformanceParameterINTEL(VkDevice                        device,
                                                                                     VkPerformanceParameterTypeINTEL parameter,
                                                                                     VkPerformanceValueINTEL        *pValue) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPerformanceParameterINTEL", (GLADapiproc)glad_vkGetPerformanceParameterINTEL, 3, device, parameter, pValue);
        ret = glad_vkGetPerformanceParameterINTEL(device, parameter, pValue);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPerformanceParameterINTEL",
                                   (GLADapiproc)glad_vkGetPerformanceParameterINTEL,
                                   3,
                                   device,
                                   parameter,
                                   pValue);
        return ret;
}
PFN_vkGetPerformanceParameterINTEL                 glad_debug_vkGetPerformanceParameterINTEL = glad_debug_impl_vkGetPerformanceParameterINTEL;
PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT glad_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = NULL;
static VkResult GLAD_API_PTR                       glad_debug_impl_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice,
                                                                                                                  uint32_t        *pTimeDomainCount,
                                                                                                                  VkTimeDomainEXT *pTimeDomains) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT,
                                  3,
                                  physicalDevice,
                                  pTimeDomainCount,
                                  pTimeDomains);
        ret = glad_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT,
                                   3,
                                   physicalDevice,
                                   pTimeDomainCount,
                                   pTimeDomains);
        return ret;
}
PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT glad_debug_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT =
	glad_debug_impl_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = NULL;
static VkResult GLAD_API_PTR                          glad_debug_impl_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice                  physicalDevice,
                                                                                                                        uint32_t                         *pPropertyCount,
                                                                                                                        VkCooperativeMatrixPropertiesKHR *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR,
                                  3,
                                  physicalDevice,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR,
                                   3,
                                   physicalDevice,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR =
	glad_debug_impl_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = NULL;
static VkResult GLAD_API_PTR                         glad_debug_impl_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice                 physicalDevice,
                                                                                                                      uint32_t                        *pPropertyCount,
                                                                                                                      VkCooperativeMatrixPropertiesNV *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV,
                                  3,
                                  physicalDevice,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV,
                                   3,
                                   physicalDevice,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV =
	glad_debug_impl_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT glad_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = NULL;
static VkBool32 GLAD_API_PTR                          glad_debug_impl_vkGetPhysicalDeviceDirectFBPresentationSupportEXT(VkPhysicalDevice physicalDevice,
                                                                                                                        uint32_t         queueFamilyIndex,
                                                                                                                        IDirectFB       *dfb) {
        VkBool32 ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceDirectFBPresentationSupportEXT",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceDirectFBPresentationSupportEXT,
                                  3,
                                  physicalDevice,
                                  queueFamilyIndex,
                                  dfb);
        ret = glad_vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceDirectFBPresentationSupportEXT",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceDirectFBPresentationSupportEXT,
                                   3,
                                   physicalDevice,
                                   queueFamilyIndex,
                                   dfb);
        return ret;
}
PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT glad_debug_vkGetPhysicalDeviceDirectFBPresentationSupportEXT =
	glad_debug_impl_vkGetPhysicalDeviceDirectFBPresentationSupportEXT;

#endif
PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR glad_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = NULL;
static VkResult GLAD_API_PTR                      glad_debug_impl_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice              physicalDevice,
                                                                                                                uint32_t                     *pPropertyCount,
                                                                                                                VkDisplayPlaneProperties2KHR *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceDisplayPlaneProperties2KHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceDisplayPlaneProperties2KHR,
                                  3,
                                  physicalDevice,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceDisplayPlaneProperties2KHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceDisplayPlaneProperties2KHR,
                                   3,
                                   physicalDevice,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR glad_debug_vkGetPhysicalDeviceDisplayPlaneProperties2KHR =
	glad_debug_impl_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR glad_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = NULL;
static VkResult GLAD_API_PTR                     glad_debug_impl_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice             physicalDevice,
                                                                                                              uint32_t                    *pPropertyCount,
                                                                                                              VkDisplayPlanePropertiesKHR *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceDisplayPlanePropertiesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceDisplayPlanePropertiesKHR,
                                  3,
                                  physicalDevice,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceDisplayPlanePropertiesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceDisplayPlanePropertiesKHR,
                                   3,
                                   physicalDevice,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR glad_debug_vkGetPhysicalDeviceDisplayPlanePropertiesKHR =
	glad_debug_impl_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
PFN_vkGetPhysicalDeviceDisplayProperties2KHR glad_vkGetPhysicalDeviceDisplayProperties2KHR = NULL;
static VkResult GLAD_API_PTR                 glad_debug_impl_vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice         physicalDevice,
                                                                                                      uint32_t                *pPropertyCount,
                                                                                                      VkDisplayProperties2KHR *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceDisplayProperties2KHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceDisplayProperties2KHR,
                                  3,
                                  physicalDevice,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceDisplayProperties2KHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceDisplayProperties2KHR,
                                   3,
                                   physicalDevice,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceDisplayProperties2KHR glad_debug_vkGetPhysicalDeviceDisplayProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceDisplayProperties2KHR;
PFN_vkGetPhysicalDeviceDisplayPropertiesKHR  glad_vkGetPhysicalDeviceDisplayPropertiesKHR = NULL;
static VkResult GLAD_API_PTR                 glad_debug_impl_vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice        physicalDevice,
                                                                                                     uint32_t               *pPropertyCount,
                                                                                                     VkDisplayPropertiesKHR *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceDisplayPropertiesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceDisplayPropertiesKHR,
                                  3,
                                  physicalDevice,
                                  pPropertyCount,
                                  pProperties);
        ret = glad_vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceDisplayPropertiesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceDisplayPropertiesKHR,
                                   3,
                                   physicalDevice,
                                   pPropertyCount,
                                   pProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceDisplayPropertiesKHR     glad_debug_vkGetPhysicalDeviceDisplayPropertiesKHR = glad_debug_impl_vkGetPhysicalDeviceDisplayPropertiesKHR;
PFN_vkGetPhysicalDeviceExternalBufferProperties glad_vkGetPhysicalDeviceExternalBufferProperties = NULL;
static void GLAD_API_PTR                        glad_debug_impl_vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice                          physicalDevice,
                                                                                                            const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo,
                                                                                                            VkExternalBufferProperties               *pExternalBufferProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceExternalBufferProperties",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceExternalBufferProperties,
                                  3,
                                  physicalDevice,
                                  pExternalBufferInfo,
                                  pExternalBufferProperties);
        glad_vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceExternalBufferProperties",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceExternalBufferProperties,
                                   3,
                                   physicalDevice,
                                   pExternalBufferInfo,
                                   pExternalBufferProperties);
}
PFN_vkGetPhysicalDeviceExternalBufferProperties glad_debug_vkGetPhysicalDeviceExternalBufferProperties =
	glad_debug_impl_vkGetPhysicalDeviceExternalBufferProperties;
PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR = NULL;
static void GLAD_API_PTR                           glad_debug_impl_vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice                          physicalDevice,
                                                                                                                  const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo,
                                                                                                                  VkExternalBufferProperties               *pExternalBufferProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceExternalBufferPropertiesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR,
                                  3,
                                  physicalDevice,
                                  pExternalBufferInfo,
                                  pExternalBufferProperties);
        glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceExternalBufferPropertiesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR,
                                   3,
                                   physicalDevice,
                                   pExternalBufferInfo,
                                   pExternalBufferProperties);
}
PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR glad_debug_vkGetPhysicalDeviceExternalBufferPropertiesKHR =
	glad_debug_impl_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
PFN_vkGetPhysicalDeviceExternalFenceProperties glad_vkGetPhysicalDeviceExternalFenceProperties = NULL;
static void GLAD_API_PTR                       glad_debug_impl_vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice                         physicalDevice,
                                                                                                          const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo,
                                                                                                          VkExternalFenceProperties               *pExternalFenceProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceExternalFenceProperties",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceExternalFenceProperties,
                                  3,
                                  physicalDevice,
                                  pExternalFenceInfo,
                                  pExternalFenceProperties);
        glad_vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceExternalFenceProperties",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceExternalFenceProperties,
                                   3,
                                   physicalDevice,
                                   pExternalFenceInfo,
                                   pExternalFenceProperties);
}
PFN_vkGetPhysicalDeviceExternalFenceProperties glad_debug_vkGetPhysicalDeviceExternalFenceProperties =
	glad_debug_impl_vkGetPhysicalDeviceExternalFenceProperties;
PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR glad_vkGetPhysicalDeviceExternalFencePropertiesKHR = NULL;
static void GLAD_API_PTR                          glad_debug_impl_vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice                         physicalDevice,
                                                                                                                const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo,
                                                                                                                VkExternalFenceProperties               *pExternalFenceProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceExternalFencePropertiesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceExternalFencePropertiesKHR,
                                  3,
                                  physicalDevice,
                                  pExternalFenceInfo,
                                  pExternalFenceProperties);
        glad_vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceExternalFencePropertiesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceExternalFencePropertiesKHR,
                                   3,
                                   physicalDevice,
                                   pExternalFenceInfo,
                                   pExternalFenceProperties);
}
PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR glad_debug_vkGetPhysicalDeviceExternalFencePropertiesKHR =
	glad_debug_impl_vkGetPhysicalDeviceExternalFencePropertiesKHR;
PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV glad_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice                   physicalDevice,
                                                                   VkFormat                           format,
                                                                   VkImageType                        type,
                                                                   VkImageTiling                      tiling,
                                                                   VkImageUsageFlags                  usage,
                                                                   VkImageCreateFlags                 flags,
                                                                   VkExternalMemoryHandleTypeFlagsNV  externalHandleType,
                                                                   VkExternalImageFormatPropertiesNV *pExternalImageFormatProperties) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetPhysicalDeviceExternalImageFormatPropertiesNV",
	                          (GLADapiproc)glad_vkGetPhysicalDeviceExternalImageFormatPropertiesNV,
	                          8,
	                          physicalDevice,
	                          format,
	                          type,
	                          tiling,
	                          usage,
	                          flags,
	                          externalHandleType,
	                          pExternalImageFormatProperties);
	ret = glad_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice,
	                                                              format,
	                                                              type,
	                                                              tiling,
	                                                              usage,
	                                                              flags,
	                                                              externalHandleType,
	                                                              pExternalImageFormatProperties);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetPhysicalDeviceExternalImageFormatPropertiesNV",
	                           (GLADapiproc)glad_vkGetPhysicalDeviceExternalImageFormatPropertiesNV,
	                           8,
	                           physicalDevice,
	                           format,
	                           type,
	                           tiling,
	                           usage,
	                           flags,
	                           externalHandleType,
	                           pExternalImageFormatProperties);
	return ret;
}
PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV glad_debug_vkGetPhysicalDeviceExternalImageFormatPropertiesNV =
	glad_debug_impl_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
PFN_vkGetPhysicalDeviceExternalSemaphoreProperties glad_vkGetPhysicalDeviceExternalSemaphoreProperties = NULL;
static void GLAD_API_PTR                           glad_debug_impl_vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice                             physicalDevice,
                                                                                                                  const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo,
                                                                                                                  VkExternalSemaphoreProperties *pExternalSemaphoreProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceExternalSemaphoreProperties",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceExternalSemaphoreProperties,
                                  3,
                                  physicalDevice,
                                  pExternalSemaphoreInfo,
                                  pExternalSemaphoreProperties);
        glad_vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceExternalSemaphoreProperties",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceExternalSemaphoreProperties,
                                   3,
                                   physicalDevice,
                                   pExternalSemaphoreInfo,
                                   pExternalSemaphoreProperties);
}
PFN_vkGetPhysicalDeviceExternalSemaphoreProperties glad_debug_vkGetPhysicalDeviceExternalSemaphoreProperties =
	glad_debug_impl_vkGetPhysicalDeviceExternalSemaphoreProperties;
PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = NULL;
static void GLAD_API_PTR                              glad_debug_impl_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice                             physicalDevice,
                                                                                                                        const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo,
                                                                                                                        VkExternalSemaphoreProperties *pExternalSemaphoreProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR,
                                  3,
                                  physicalDevice,
                                  pExternalSemaphoreInfo,
                                  pExternalSemaphoreProperties);
        glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR,
                                   3,
                                   physicalDevice,
                                   pExternalSemaphoreInfo,
                                   pExternalSemaphoreProperties);
}
PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR glad_debug_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR =
	glad_debug_impl_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
PFN_vkGetPhysicalDeviceFeatures glad_vkGetPhysicalDeviceFeatures = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures *pFeatures) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceFeatures", (GLADapiproc)glad_vkGetPhysicalDeviceFeatures, 2, physicalDevice, pFeatures);
        glad_vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
        _post_call_vulkan_callback(NULL, "vkGetPhysicalDeviceFeatures", (GLADapiproc)glad_vkGetPhysicalDeviceFeatures, 2, physicalDevice, pFeatures);
}
PFN_vkGetPhysicalDeviceFeatures  glad_debug_vkGetPhysicalDeviceFeatures = glad_debug_impl_vkGetPhysicalDeviceFeatures;
PFN_vkGetPhysicalDeviceFeatures2 glad_vkGetPhysicalDeviceFeatures2 = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceFeatures2", (GLADapiproc)glad_vkGetPhysicalDeviceFeatures2, 2, physicalDevice, pFeatures);
        glad_vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
        _post_call_vulkan_callback(NULL, "vkGetPhysicalDeviceFeatures2", (GLADapiproc)glad_vkGetPhysicalDeviceFeatures2, 2, physicalDevice, pFeatures);
}
PFN_vkGetPhysicalDeviceFeatures2    glad_debug_vkGetPhysicalDeviceFeatures2 = glad_debug_impl_vkGetPhysicalDeviceFeatures2;
PFN_vkGetPhysicalDeviceFeatures2KHR glad_vkGetPhysicalDeviceFeatures2KHR = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceFeatures2KHR", (GLADapiproc)glad_vkGetPhysicalDeviceFeatures2KHR, 2, physicalDevice, pFeatures);
        glad_vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
        _post_call_vulkan_callback(NULL, "vkGetPhysicalDeviceFeatures2KHR", (GLADapiproc)glad_vkGetPhysicalDeviceFeatures2KHR, 2, physicalDevice, pFeatures);
}
PFN_vkGetPhysicalDeviceFeatures2KHR     glad_debug_vkGetPhysicalDeviceFeatures2KHR = glad_debug_impl_vkGetPhysicalDeviceFeatures2KHR;
PFN_vkGetPhysicalDeviceFormatProperties glad_vkGetPhysicalDeviceFormatProperties = NULL;
static void GLAD_API_PTR                glad_debug_impl_vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice    physicalDevice,
                                                                                            VkFormat            format,
                                                                                            VkFormatProperties *pFormatProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceFormatProperties",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceFormatProperties,
                                  3,
                                  physicalDevice,
                                  format,
                                  pFormatProperties);
        glad_vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceFormatProperties",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceFormatProperties,
                                   3,
                                   physicalDevice,
                                   format,
                                   pFormatProperties);
}
PFN_vkGetPhysicalDeviceFormatProperties  glad_debug_vkGetPhysicalDeviceFormatProperties = glad_debug_impl_vkGetPhysicalDeviceFormatProperties;
PFN_vkGetPhysicalDeviceFormatProperties2 glad_vkGetPhysicalDeviceFormatProperties2 = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice     physicalDevice,
                                                                                              VkFormat             format,
                                                                                              VkFormatProperties2 *pFormatProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceFormatProperties2",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceFormatProperties2,
                                  3,
                                  physicalDevice,
                                  format,
                                  pFormatProperties);
        glad_vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceFormatProperties2",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceFormatProperties2,
                                   3,
                                   physicalDevice,
                                   format,
                                   pFormatProperties);
}
PFN_vkGetPhysicalDeviceFormatProperties2    glad_debug_vkGetPhysicalDeviceFormatProperties2 = glad_debug_impl_vkGetPhysicalDeviceFormatProperties2;
PFN_vkGetPhysicalDeviceFormatProperties2KHR glad_vkGetPhysicalDeviceFormatProperties2KHR = NULL;
static void GLAD_API_PTR                    glad_debug_impl_vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice     physicalDevice,
                                                                                                    VkFormat             format,
                                                                                                    VkFormatProperties2 *pFormatProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceFormatProperties2KHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceFormatProperties2KHR,
                                  3,
                                  physicalDevice,
                                  format,
                                  pFormatProperties);
        glad_vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceFormatProperties2KHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceFormatProperties2KHR,
                                   3,
                                   physicalDevice,
                                   format,
                                   pFormatProperties);
}
PFN_vkGetPhysicalDeviceFormatProperties2KHR    glad_debug_vkGetPhysicalDeviceFormatProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceFormatProperties2KHR;
PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR glad_vkGetPhysicalDeviceFragmentShadingRatesKHR = NULL;
static VkResult GLAD_API_PTR                   glad_debug_impl_vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice                        physicalDevice,
                                                                                                          uint32_t                               *pFragmentShadingRateCount,
                                                                                                          VkPhysicalDeviceFragmentShadingRateKHR *pFragmentShadingRates) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceFragmentShadingRatesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceFragmentShadingRatesKHR,
                                  3,
                                  physicalDevice,
                                  pFragmentShadingRateCount,
                                  pFragmentShadingRates);
        ret = glad_vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceFragmentShadingRatesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceFragmentShadingRatesKHR,
                                   3,
                                   physicalDevice,
                                   pFragmentShadingRateCount,
                                   pFragmentShadingRates);
        return ret;
}
PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR glad_debug_vkGetPhysicalDeviceFragmentShadingRatesKHR =
	glad_debug_impl_vkGetPhysicalDeviceFragmentShadingRatesKHR;
PFN_vkGetPhysicalDeviceImageFormatProperties glad_vkGetPhysicalDeviceImageFormatProperties = NULL;
static VkResult GLAD_API_PTR                 glad_debug_impl_vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice         physicalDevice,
                                                                                                      VkFormat                 format,
                                                                                                      VkImageType              type,
                                                                                                      VkImageTiling            tiling,
                                                                                                      VkImageUsageFlags        usage,
                                                                                                      VkImageCreateFlags       flags,
                                                                                                      VkImageFormatProperties *pImageFormatProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceImageFormatProperties",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceImageFormatProperties,
                                  7,
                                  physicalDevice,
                                  format,
                                  type,
                                  tiling,
                                  usage,
                                  flags,
                                  pImageFormatProperties);
        ret = glad_vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceImageFormatProperties",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceImageFormatProperties,
                                   7,
                                   physicalDevice,
                                   format,
                                   type,
                                   tiling,
                                   usage,
                                   flags,
                                   pImageFormatProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceImageFormatProperties  glad_debug_vkGetPhysicalDeviceImageFormatProperties = glad_debug_impl_vkGetPhysicalDeviceImageFormatProperties;
PFN_vkGetPhysicalDeviceImageFormatProperties2 glad_vkGetPhysicalDeviceImageFormatProperties2 = NULL;
static VkResult GLAD_API_PTR                  glad_debug_impl_vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice                        physicalDevice,
                                                                                                        const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo,
                                                                                                        VkImageFormatProperties2               *pImageFormatProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceImageFormatProperties2",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceImageFormatProperties2,
                                  3,
                                  physicalDevice,
                                  pImageFormatInfo,
                                  pImageFormatProperties);
        ret = glad_vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceImageFormatProperties2",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceImageFormatProperties2,
                                   3,
                                   physicalDevice,
                                   pImageFormatInfo,
                                   pImageFormatProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceImageFormatProperties2 glad_debug_vkGetPhysicalDeviceImageFormatProperties2 = glad_debug_impl_vkGetPhysicalDeviceImageFormatProperties2;
PFN_vkGetPhysicalDeviceImageFormatProperties2KHR glad_vkGetPhysicalDeviceImageFormatProperties2KHR = NULL;
static VkResult GLAD_API_PTR                     glad_debug_impl_vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice                        physicalDevice,
                                                                                                              const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo,
                                                                                                              VkImageFormatProperties2               *pImageFormatProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceImageFormatProperties2KHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceImageFormatProperties2KHR,
                                  3,
                                  physicalDevice,
                                  pImageFormatInfo,
                                  pImageFormatProperties);
        ret = glad_vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceImageFormatProperties2KHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceImageFormatProperties2KHR,
                                   3,
                                   physicalDevice,
                                   pImageFormatInfo,
                                   pImageFormatProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceImageFormatProperties2KHR glad_debug_vkGetPhysicalDeviceImageFormatProperties2KHR =
	glad_debug_impl_vkGetPhysicalDeviceImageFormatProperties2KHR;
PFN_vkGetPhysicalDeviceMemoryProperties glad_vkGetPhysicalDeviceMemoryProperties = NULL;
static void GLAD_API_PTR                glad_debug_impl_vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice                  physicalDevice,
                                                                                            VkPhysicalDeviceMemoryProperties *pMemoryProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceMemoryProperties",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceMemoryProperties,
                                  2,
                                  physicalDevice,
                                  pMemoryProperties);
        glad_vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceMemoryProperties",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceMemoryProperties,
                                   2,
                                   physicalDevice,
                                   pMemoryProperties);
}
PFN_vkGetPhysicalDeviceMemoryProperties  glad_debug_vkGetPhysicalDeviceMemoryProperties = glad_debug_impl_vkGetPhysicalDeviceMemoryProperties;
PFN_vkGetPhysicalDeviceMemoryProperties2 glad_vkGetPhysicalDeviceMemoryProperties2 = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice                   physicalDevice,
                                                                                              VkPhysicalDeviceMemoryProperties2 *pMemoryProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceMemoryProperties2",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceMemoryProperties2,
                                  2,
                                  physicalDevice,
                                  pMemoryProperties);
        glad_vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceMemoryProperties2",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceMemoryProperties2,
                                   2,
                                   physicalDevice,
                                   pMemoryProperties);
}
PFN_vkGetPhysicalDeviceMemoryProperties2    glad_debug_vkGetPhysicalDeviceMemoryProperties2 = glad_debug_impl_vkGetPhysicalDeviceMemoryProperties2;
PFN_vkGetPhysicalDeviceMemoryProperties2KHR glad_vkGetPhysicalDeviceMemoryProperties2KHR = NULL;
static void GLAD_API_PTR                    glad_debug_impl_vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice                   physicalDevice,
                                                                                                    VkPhysicalDeviceMemoryProperties2 *pMemoryProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceMemoryProperties2KHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceMemoryProperties2KHR,
                                  2,
                                  physicalDevice,
                                  pMemoryProperties);
        glad_vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceMemoryProperties2KHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceMemoryProperties2KHR,
                                   2,
                                   physicalDevice,
                                   pMemoryProperties);
}
PFN_vkGetPhysicalDeviceMemoryProperties2KHR     glad_debug_vkGetPhysicalDeviceMemoryProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceMemoryProperties2KHR;
PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT glad_vkGetPhysicalDeviceMultisamplePropertiesEXT = NULL;
static void GLAD_API_PTR                        glad_debug_impl_vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice            physicalDevice,
                                                                                                            VkSampleCountFlagBits       samples,
                                                                                                            VkMultisamplePropertiesEXT *pMultisampleProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceMultisamplePropertiesEXT",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceMultisamplePropertiesEXT,
                                  3,
                                  physicalDevice,
                                  samples,
                                  pMultisampleProperties);
        glad_vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceMultisamplePropertiesEXT",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceMultisamplePropertiesEXT,
                                   3,
                                   physicalDevice,
                                   samples,
                                   pMultisampleProperties);
}
PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT glad_debug_vkGetPhysicalDeviceMultisamplePropertiesEXT =
	glad_debug_impl_vkGetPhysicalDeviceMultisamplePropertiesEXT;
PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV glad_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = NULL;
static VkResult GLAD_API_PTR                     glad_debug_impl_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice                      physicalDevice,
                                                                                                              const VkOpticalFlowImageFormatInfoNV *pOpticalFlowImageFormatInfo,
                                                                                                              uint32_t                             *pFormatCount,
                                                                                                              VkOpticalFlowImageFormatPropertiesNV *pImageFormatProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceOpticalFlowImageFormatsNV",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceOpticalFlowImageFormatsNV,
                                  4,
                                  physicalDevice,
                                  pOpticalFlowImageFormatInfo,
                                  pFormatCount,
                                  pImageFormatProperties);
        ret = glad_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceOpticalFlowImageFormatsNV",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceOpticalFlowImageFormatsNV,
                                   4,
                                   physicalDevice,
                                   pOpticalFlowImageFormatInfo,
                                   pFormatCount,
                                   pImageFormatProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV glad_debug_vkGetPhysicalDeviceOpticalFlowImageFormatsNV =
	glad_debug_impl_vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
PFN_vkGetPhysicalDevicePresentRectanglesKHR glad_vkGetPhysicalDevicePresentRectanglesKHR = NULL;
static VkResult GLAD_API_PTR                glad_debug_impl_vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice,
                                                                                                    VkSurfaceKHR     surface,
                                                                                                    uint32_t        *pRectCount,
                                                                                                    VkRect2D        *pRects) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDevicePresentRectanglesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDevicePresentRectanglesKHR,
                                  4,
                                  physicalDevice,
                                  surface,
                                  pRectCount,
                                  pRects);
        ret = glad_vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDevicePresentRectanglesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDevicePresentRectanglesKHR,
                                   4,
                                   physicalDevice,
                                   surface,
                                   pRectCount,
                                   pRects);
        return ret;
}
PFN_vkGetPhysicalDevicePresentRectanglesKHR glad_debug_vkGetPhysicalDevicePresentRectanglesKHR = glad_debug_impl_vkGetPhysicalDevicePresentRectanglesKHR;
PFN_vkGetPhysicalDeviceProperties           glad_vkGetPhysicalDeviceProperties = NULL;
static void GLAD_API_PTR glad_debug_impl_vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties *pProperties) {
	_pre_call_vulkan_callback("vkGetPhysicalDeviceProperties", (GLADapiproc)glad_vkGetPhysicalDeviceProperties, 2, physicalDevice, pProperties);
	glad_vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
	_post_call_vulkan_callback(NULL, "vkGetPhysicalDeviceProperties", (GLADapiproc)glad_vkGetPhysicalDeviceProperties, 2, physicalDevice, pProperties);
}
PFN_vkGetPhysicalDeviceProperties  glad_debug_vkGetPhysicalDeviceProperties = glad_debug_impl_vkGetPhysicalDeviceProperties;
PFN_vkGetPhysicalDeviceProperties2 glad_vkGetPhysicalDeviceProperties2 = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceProperties2", (GLADapiproc)glad_vkGetPhysicalDeviceProperties2, 2, physicalDevice, pProperties);
        glad_vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
        _post_call_vulkan_callback(NULL, "vkGetPhysicalDeviceProperties2", (GLADapiproc)glad_vkGetPhysicalDeviceProperties2, 2, physicalDevice, pProperties);
}
PFN_vkGetPhysicalDeviceProperties2    glad_debug_vkGetPhysicalDeviceProperties2 = glad_debug_impl_vkGetPhysicalDeviceProperties2;
PFN_vkGetPhysicalDeviceProperties2KHR glad_vkGetPhysicalDeviceProperties2KHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties) {
	_pre_call_vulkan_callback("vkGetPhysicalDeviceProperties2KHR", (GLADapiproc)glad_vkGetPhysicalDeviceProperties2KHR, 2, physicalDevice, pProperties);
	glad_vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
	_post_call_vulkan_callback(NULL,
	                           "vkGetPhysicalDeviceProperties2KHR",
	                           (GLADapiproc)glad_vkGetPhysicalDeviceProperties2KHR,
	                           2,
	                           physicalDevice,
	                           pProperties);
}
PFN_vkGetPhysicalDeviceProperties2KHR                       glad_debug_vkGetPhysicalDeviceProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceProperties2KHR;
PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR glad_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice                           physicalDevice,
                                                                        const VkQueryPoolPerformanceCreateInfoKHR *pPerformanceQueryCreateInfo,
                                                                        uint32_t                                  *pNumPasses) {
	_pre_call_vulkan_callback("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR",
	                          (GLADapiproc)glad_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR,
	                          3,
	                          physicalDevice,
	                          pPerformanceQueryCreateInfo,
	                          pNumPasses);
	glad_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
	_post_call_vulkan_callback(NULL,
	                           "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR",
	                           (GLADapiproc)glad_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR,
	                           3,
	                           physicalDevice,
	                           pPerformanceQueryCreateInfo,
	                           pNumPasses);
}
PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR glad_debug_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR =
	glad_debug_impl_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
PFN_vkGetPhysicalDeviceQueueFamilyProperties glad_vkGetPhysicalDeviceQueueFamilyProperties = NULL;
static void GLAD_API_PTR                     glad_debug_impl_vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice         physicalDevice,
                                                                                                      uint32_t                *pQueueFamilyPropertyCount,
                                                                                                      VkQueueFamilyProperties *pQueueFamilyProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceQueueFamilyProperties",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceQueueFamilyProperties,
                                  3,
                                  physicalDevice,
                                  pQueueFamilyPropertyCount,
                                  pQueueFamilyProperties);
        glad_vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceQueueFamilyProperties",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceQueueFamilyProperties,
                                   3,
                                   physicalDevice,
                                   pQueueFamilyPropertyCount,
                                   pQueueFamilyProperties);
}
PFN_vkGetPhysicalDeviceQueueFamilyProperties  glad_debug_vkGetPhysicalDeviceQueueFamilyProperties = glad_debug_impl_vkGetPhysicalDeviceQueueFamilyProperties;
PFN_vkGetPhysicalDeviceQueueFamilyProperties2 glad_vkGetPhysicalDeviceQueueFamilyProperties2 = NULL;
static void GLAD_API_PTR                      glad_debug_impl_vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice          physicalDevice,
                                                                                                        uint32_t                 *pQueueFamilyPropertyCount,
                                                                                                        VkQueueFamilyProperties2 *pQueueFamilyProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceQueueFamilyProperties2",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceQueueFamilyProperties2,
                                  3,
                                  physicalDevice,
                                  pQueueFamilyPropertyCount,
                                  pQueueFamilyProperties);
        glad_vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceQueueFamilyProperties2",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceQueueFamilyProperties2,
                                   3,
                                   physicalDevice,
                                   pQueueFamilyPropertyCount,
                                   pQueueFamilyProperties);
}
PFN_vkGetPhysicalDeviceQueueFamilyProperties2 glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2 = glad_debug_impl_vkGetPhysicalDeviceQueueFamilyProperties2;
PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR = NULL;
static void GLAD_API_PTR                         glad_debug_impl_vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice          physicalDevice,
                                                                                                              uint32_t                 *pQueueFamilyPropertyCount,
                                                                                                              VkQueueFamilyProperties2 *pQueueFamilyProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceQueueFamilyProperties2KHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR,
                                  3,
                                  physicalDevice,
                                  pQueueFamilyPropertyCount,
                                  pQueueFamilyProperties);
        glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceQueueFamilyProperties2KHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR,
                                   3,
                                   physicalDevice,
                                   pQueueFamilyPropertyCount,
                                   pQueueFamilyProperties);
}
PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2KHR =
	glad_debug_impl_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX glad_vkGetPhysicalDeviceScreenPresentationSupportQNX = NULL;
static VkBool32 GLAD_API_PTR                        glad_debug_impl_vkGetPhysicalDeviceScreenPresentationSupportQNX(VkPhysicalDevice       physicalDevice,
                                                                                                                    uint32_t               queueFamilyIndex,
                                                                                                                    struct _screen_window *window) {
        VkBool32 ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceScreenPresentationSupportQNX",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceScreenPresentationSupportQNX,
                                  3,
                                  physicalDevice,
                                  queueFamilyIndex,
                                  window);
        ret = glad_vkGetPhysicalDeviceScreenPresentationSupportQNX(physicalDevice, queueFamilyIndex, window);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceScreenPresentationSupportQNX",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceScreenPresentationSupportQNX,
                                   3,
                                   physicalDevice,
                                   queueFamilyIndex,
                                   window);
        return ret;
}
PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX glad_debug_vkGetPhysicalDeviceScreenPresentationSupportQNX =
	glad_debug_impl_vkGetPhysicalDeviceScreenPresentationSupportQNX;

#endif
PFN_vkGetPhysicalDeviceSparseImageFormatProperties glad_vkGetPhysicalDeviceSparseImageFormatProperties = NULL;
static void GLAD_API_PTR                           glad_debug_impl_vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice               physicalDevice,
                                                                                                                  VkFormat                       format,
                                                                                                                  VkImageType                    type,
                                                                                                                  VkSampleCountFlagBits          samples,
                                                                                                                  VkImageUsageFlags              usage,
                                                                                                                  VkImageTiling                  tiling,
                                                                                                                  uint32_t                      *pPropertyCount,
                                                                                                                  VkSparseImageFormatProperties *pProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSparseImageFormatProperties",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSparseImageFormatProperties,
                                  8,
                                  physicalDevice,
                                  format,
                                  type,
                                  samples,
                                  usage,
                                  tiling,
                                  pPropertyCount,
                                  pProperties);
        glad_vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceSparseImageFormatProperties",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSparseImageFormatProperties,
                                   8,
                                   physicalDevice,
                                   format,
                                   type,
                                   samples,
                                   usage,
                                   tiling,
                                   pPropertyCount,
                                   pProperties);
}
PFN_vkGetPhysicalDeviceSparseImageFormatProperties glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties =
	glad_debug_impl_vkGetPhysicalDeviceSparseImageFormatProperties;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 glad_vkGetPhysicalDeviceSparseImageFormatProperties2 = NULL;
static void GLAD_API_PTR                            glad_debug_impl_vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice                              physicalDevice,
                                                                                                                    const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo,
                                                                                                                    uint32_t                                     *pPropertyCount,
                                                                                                                    VkSparseImageFormatProperties2               *pProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSparseImageFormatProperties2",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSparseImageFormatProperties2,
                                  4,
                                  physicalDevice,
                                  pFormatInfo,
                                  pPropertyCount,
                                  pProperties);
        glad_vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceSparseImageFormatProperties2",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSparseImageFormatProperties2,
                                   4,
                                   physicalDevice,
                                   pFormatInfo,
                                   pPropertyCount,
                                   pProperties);
}
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2 =
	glad_debug_impl_vkGetPhysicalDeviceSparseImageFormatProperties2;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = NULL;
static void GLAD_API_PTR                               glad_debug_impl_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice                              physicalDevice,
                                                                                                                          const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo,
                                                                                                                          uint32_t                                     *pPropertyCount,
                                                                                                                          VkSparseImageFormatProperties2               *pProperties) {
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSparseImageFormatProperties2KHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR,
                                  4,
                                  physicalDevice,
                                  pFormatInfo,
                                  pPropertyCount,
                                  pProperties);
        glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPhysicalDeviceSparseImageFormatProperties2KHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR,
                                   4,
                                   physicalDevice,
                                   pFormatInfo,
                                   pPropertyCount,
                                   pProperties);
}
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2KHR =
	glad_debug_impl_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV glad_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice                        physicalDevice,
                                                                                  uint32_t                               *pCombinationCount,
                                                                                  VkFramebufferMixedSamplesCombinationNV *pCombinations) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV",
	                          (GLADapiproc)glad_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV,
	                          3,
	                          physicalDevice,
	                          pCombinationCount,
	                          pCombinations);
	ret = glad_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV",
	                           (GLADapiproc)glad_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV,
	                           3,
	                           physicalDevice,
	                           pCombinationCount,
	                           pCombinations);
	return ret;
}
PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV glad_debug_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV =
	glad_debug_impl_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT glad_vkGetPhysicalDeviceSurfaceCapabilities2EXT = NULL;
static VkResult GLAD_API_PTR                   glad_debug_impl_vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice           physicalDevice,
                                                                                                          VkSurfaceKHR               surface,
                                                                                                          VkSurfaceCapabilities2EXT *pSurfaceCapabilities) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSurfaceCapabilities2EXT",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceCapabilities2EXT,
                                  3,
                                  physicalDevice,
                                  surface,
                                  pSurfaceCapabilities);
        ret = glad_vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceSurfaceCapabilities2EXT",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceCapabilities2EXT,
                                   3,
                                   physicalDevice,
                                   surface,
                                   pSurfaceCapabilities);
        return ret;
}
PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2EXT =
	glad_debug_impl_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR glad_vkGetPhysicalDeviceSurfaceCapabilities2KHR = NULL;
static VkResult GLAD_API_PTR                   glad_debug_impl_vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice                       physicalDevice,
                                                                                                          const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                                                          VkSurfaceCapabilities2KHR             *pSurfaceCapabilities) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSurfaceCapabilities2KHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceCapabilities2KHR,
                                  3,
                                  physicalDevice,
                                  pSurfaceInfo,
                                  pSurfaceCapabilities);
        ret = glad_vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceSurfaceCapabilities2KHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceCapabilities2KHR,
                                   3,
                                   physicalDevice,
                                   pSurfaceInfo,
                                   pSurfaceCapabilities);
        return ret;
}
PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2KHR =
	glad_debug_impl_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = NULL;
static VkResult GLAD_API_PTR                  glad_debug_impl_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice          physicalDevice,
                                                                                                        VkSurfaceKHR              surface,
                                                                                                        VkSurfaceCapabilitiesKHR *pSurfaceCapabilities) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSurfaceCapabilitiesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
                                  3,
                                  physicalDevice,
                                  surface,
                                  pSurfaceCapabilities);
        ret = glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceSurfaceCapabilitiesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
                                   3,
                                   physicalDevice,
                                   surface,
                                   pSurfaceCapabilities);
        return ret;
}
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR glad_debug_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = glad_debug_impl_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
PFN_vkGetPhysicalDeviceSurfaceFormats2KHR     glad_vkGetPhysicalDeviceSurfaceFormats2KHR = NULL;
static VkResult GLAD_API_PTR                  glad_debug_impl_vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice                       physicalDevice,
                                                                                                    const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                                                    uint32_t                              *pSurfaceFormatCount,
                                                                                                    VkSurfaceFormat2KHR                   *pSurfaceFormats) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSurfaceFormats2KHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceFormats2KHR,
                                  4,
                                  physicalDevice,
                                  pSurfaceInfo,
                                  pSurfaceFormatCount,
                                  pSurfaceFormats);
        ret = glad_vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceSurfaceFormats2KHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceFormats2KHR,
                                   4,
                                   physicalDevice,
                                   pSurfaceInfo,
                                   pSurfaceFormatCount,
                                   pSurfaceFormats);
        return ret;
}
PFN_vkGetPhysicalDeviceSurfaceFormats2KHR glad_debug_vkGetPhysicalDeviceSurfaceFormats2KHR = glad_debug_impl_vkGetPhysicalDeviceSurfaceFormats2KHR;
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR  glad_vkGetPhysicalDeviceSurfaceFormatsKHR = NULL;
static VkResult GLAD_API_PTR              glad_debug_impl_vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice    physicalDevice,
                                                                                               VkSurfaceKHR        surface,
                                                                                               uint32_t           *pSurfaceFormatCount,
                                                                                               VkSurfaceFormatKHR *pSurfaceFormats) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSurfaceFormatsKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceFormatsKHR,
                                  4,
                                  physicalDevice,
                                  surface,
                                  pSurfaceFormatCount,
                                  pSurfaceFormats);
        ret = glad_vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceSurfaceFormatsKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceFormatsKHR,
                                   4,
                                   physicalDevice,
                                   surface,
                                   pSurfaceFormatCount,
                                   pSurfaceFormats);
        return ret;
}
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR glad_debug_vkGetPhysicalDeviceSurfaceFormatsKHR = glad_debug_impl_vkGetPhysicalDeviceSurfaceFormatsKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT glad_vkGetPhysicalDeviceSurfacePresentModes2EXT = NULL;
static VkResult GLAD_API_PTR                   glad_debug_impl_vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice                       physicalDevice,
                                                                                                          const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo,
                                                                                                          uint32_t                              *pPresentModeCount,
                                                                                                          VkPresentModeKHR                      *pPresentModes) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSurfacePresentModes2EXT",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSurfacePresentModes2EXT,
                                  4,
                                  physicalDevice,
                                  pSurfaceInfo,
                                  pPresentModeCount,
                                  pPresentModes);
        ret = glad_vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceSurfacePresentModes2EXT",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSurfacePresentModes2EXT,
                                   4,
                                   physicalDevice,
                                   pSurfaceInfo,
                                   pPresentModeCount,
                                   pPresentModes);
        return ret;
}
PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT glad_debug_vkGetPhysicalDeviceSurfacePresentModes2EXT =
	glad_debug_impl_vkGetPhysicalDeviceSurfacePresentModes2EXT;

#endif
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR glad_vkGetPhysicalDeviceSurfacePresentModesKHR = NULL;
static VkResult GLAD_API_PTR                  glad_debug_impl_vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice  physicalDevice,
                                                                                                        VkSurfaceKHR      surface,
                                                                                                        uint32_t         *pPresentModeCount,
                                                                                                        VkPresentModeKHR *pPresentModes) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSurfacePresentModesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSurfacePresentModesKHR,
                                  4,
                                  physicalDevice,
                                  surface,
                                  pPresentModeCount,
                                  pPresentModes);
        ret = glad_vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceSurfacePresentModesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSurfacePresentModesKHR,
                                   4,
                                   physicalDevice,
                                   surface,
                                   pPresentModeCount,
                                   pPresentModes);
        return ret;
}
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR glad_debug_vkGetPhysicalDeviceSurfacePresentModesKHR = glad_debug_impl_vkGetPhysicalDeviceSurfacePresentModesKHR;
PFN_vkGetPhysicalDeviceSurfaceSupportKHR      glad_vkGetPhysicalDeviceSurfaceSupportKHR = NULL;
static VkResult GLAD_API_PTR                  glad_debug_impl_vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice,
                                                                                                   uint32_t         queueFamilyIndex,
                                                                                                   VkSurfaceKHR     surface,
                                                                                                   VkBool32        *pSupported) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceSurfaceSupportKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceSupportKHR,
                                  4,
                                  physicalDevice,
                                  queueFamilyIndex,
                                  surface,
                                  pSupported);
        ret = glad_vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceSurfaceSupportKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceSurfaceSupportKHR,
                                   4,
                                   physicalDevice,
                                   queueFamilyIndex,
                                   surface,
                                   pSupported);
        return ret;
}
PFN_vkGetPhysicalDeviceSurfaceSupportKHR glad_debug_vkGetPhysicalDeviceSurfaceSupportKHR = glad_debug_impl_vkGetPhysicalDeviceSurfaceSupportKHR;
PFN_vkGetPhysicalDeviceToolProperties    glad_vkGetPhysicalDeviceToolProperties = NULL;
static VkResult GLAD_API_PTR             glad_debug_impl_vkGetPhysicalDeviceToolProperties(VkPhysicalDevice                physicalDevice,
                                                                                           uint32_t                       *pToolCount,
                                                                                           VkPhysicalDeviceToolProperties *pToolProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceToolProperties",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceToolProperties,
                                  3,
                                  physicalDevice,
                                  pToolCount,
                                  pToolProperties);
        ret = glad_vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceToolProperties",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceToolProperties,
                                   3,
                                   physicalDevice,
                                   pToolCount,
                                   pToolProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceToolProperties    glad_debug_vkGetPhysicalDeviceToolProperties = glad_debug_impl_vkGetPhysicalDeviceToolProperties;
PFN_vkGetPhysicalDeviceToolPropertiesEXT glad_vkGetPhysicalDeviceToolPropertiesEXT = NULL;
static VkResult GLAD_API_PTR             glad_debug_impl_vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice                physicalDevice,
                                                                                              uint32_t                       *pToolCount,
                                                                                              VkPhysicalDeviceToolProperties *pToolProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceToolPropertiesEXT",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceToolPropertiesEXT,
                                  3,
                                  physicalDevice,
                                  pToolCount,
                                  pToolProperties);
        ret = glad_vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceToolPropertiesEXT",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceToolPropertiesEXT,
                                   3,
                                   physicalDevice,
                                   pToolCount,
                                   pToolProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceToolPropertiesEXT    glad_debug_vkGetPhysicalDeviceToolPropertiesEXT = glad_debug_impl_vkGetPhysicalDeviceToolPropertiesEXT;
PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR glad_vkGetPhysicalDeviceVideoCapabilitiesKHR = NULL;
static VkResult GLAD_API_PTR                glad_debug_impl_vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice             physicalDevice,
                                                                                                    const VkVideoProfileInfoKHR *pVideoProfile,
                                                                                                    VkVideoCapabilitiesKHR      *pCapabilities) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceVideoCapabilitiesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceVideoCapabilitiesKHR,
                                  3,
                                  physicalDevice,
                                  pVideoProfile,
                                  pCapabilities);
        ret = glad_vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice, pVideoProfile, pCapabilities);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceVideoCapabilitiesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceVideoCapabilitiesKHR,
                                   3,
                                   physicalDevice,
                                   pVideoProfile,
                                   pCapabilities);
        return ret;
}
PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR glad_debug_vkGetPhysicalDeviceVideoCapabilitiesKHR = glad_debug_impl_vkGetPhysicalDeviceVideoCapabilitiesKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR glad_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice                                      physicalDevice,
                                                                        const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *pQualityLevelInfo,
                                                                        VkVideoEncodeQualityLevelPropertiesKHR               *pQualityLevelProperties) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR",
	                          (GLADapiproc)glad_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR,
	                          3,
	                          physicalDevice,
	                          pQualityLevelInfo,
	                          pQualityLevelProperties);
	ret = glad_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice, pQualityLevelInfo, pQualityLevelProperties);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR",
	                           (GLADapiproc)glad_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR,
	                           3,
	                           physicalDevice,
	                           pQualityLevelInfo,
	                           pQualityLevelProperties);
	return ret;
}
PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR glad_debug_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR =
	glad_debug_impl_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;

#endif
PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR glad_vkGetPhysicalDeviceVideoFormatPropertiesKHR = NULL;
static VkResult GLAD_API_PTR                    glad_debug_impl_vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice                          physicalDevice,
                                                                                                            const VkPhysicalDeviceVideoFormatInfoKHR *pVideoFormatInfo,
                                                                                                            uint32_t                                 *pVideoFormatPropertyCount,
                                                                                                            VkVideoFormatPropertiesKHR               *pVideoFormatProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceVideoFormatPropertiesKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceVideoFormatPropertiesKHR,
                                  4,
                                  physicalDevice,
                                  pVideoFormatInfo,
                                  pVideoFormatPropertyCount,
                                  pVideoFormatProperties);
        ret = glad_vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceVideoFormatPropertiesKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceVideoFormatPropertiesKHR,
                                   4,
                                   physicalDevice,
                                   pVideoFormatInfo,
                                   pVideoFormatPropertyCount,
                                   pVideoFormatProperties);
        return ret;
}
PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR glad_debug_vkGetPhysicalDeviceVideoFormatPropertiesKHR =
	glad_debug_impl_vkGetPhysicalDeviceVideoFormatPropertiesKHR;
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR glad_vkGetPhysicalDeviceWaylandPresentationSupportKHR = NULL;
static VkBool32 GLAD_API_PTR                         glad_debug_impl_vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice   physicalDevice,
                                                                                                                      uint32_t           queueFamilyIndex,
                                                                                                                      struct wl_display *display) {
        VkBool32 ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceWaylandPresentationSupportKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceWaylandPresentationSupportKHR,
                                  3,
                                  physicalDevice,
                                  queueFamilyIndex,
                                  display);
        ret = glad_vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceWaylandPresentationSupportKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceWaylandPresentationSupportKHR,
                                   3,
                                   physicalDevice,
                                   queueFamilyIndex,
                                   display);
        return ret;
}
PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR glad_debug_vkGetPhysicalDeviceWaylandPresentationSupportKHR =
	glad_debug_impl_vkGetPhysicalDeviceWaylandPresentationSupportKHR;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR glad_vkGetPhysicalDeviceWin32PresentationSupportKHR = NULL;
static VkBool32 GLAD_API_PTR glad_debug_impl_vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex) {
	VkBool32 ret;
	_pre_call_vulkan_callback("vkGetPhysicalDeviceWin32PresentationSupportKHR",
	                          (GLADapiproc)glad_vkGetPhysicalDeviceWin32PresentationSupportKHR,
	                          2,
	                          physicalDevice,
	                          queueFamilyIndex);
	ret = glad_vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetPhysicalDeviceWin32PresentationSupportKHR",
	                           (GLADapiproc)glad_vkGetPhysicalDeviceWin32PresentationSupportKHR,
	                           2,
	                           physicalDevice,
	                           queueFamilyIndex);
	return ret;
}
PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR glad_debug_vkGetPhysicalDeviceWin32PresentationSupportKHR =
	glad_debug_impl_vkGetPhysicalDeviceWin32PresentationSupportKHR;

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR glad_vkGetPhysicalDeviceXcbPresentationSupportKHR = NULL;
static VkBool32 GLAD_API_PTR                     glad_debug_impl_vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice  physicalDevice,
                                                                                                              uint32_t          queueFamilyIndex,
                                                                                                              xcb_connection_t *connection,
                                                                                                              xcb_visualid_t    visual_id) {
        VkBool32 ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceXcbPresentationSupportKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceXcbPresentationSupportKHR,
                                  4,
                                  physicalDevice,
                                  queueFamilyIndex,
                                  connection,
                                  visual_id);
        ret = glad_vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceXcbPresentationSupportKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceXcbPresentationSupportKHR,
                                   4,
                                   physicalDevice,
                                   queueFamilyIndex,
                                   connection,
                                   visual_id);
        return ret;
}
PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR glad_debug_vkGetPhysicalDeviceXcbPresentationSupportKHR =
	glad_debug_impl_vkGetPhysicalDeviceXcbPresentationSupportKHR;

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR glad_vkGetPhysicalDeviceXlibPresentationSupportKHR = NULL;
static VkBool32 GLAD_API_PTR                      glad_debug_impl_vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice,
                                                                                                                uint32_t         queueFamilyIndex,
                                                                                                                Display         *dpy,
                                                                                                                VisualID         visualID) {
        VkBool32 ret;
        _pre_call_vulkan_callback("vkGetPhysicalDeviceXlibPresentationSupportKHR",
                                  (GLADapiproc)glad_vkGetPhysicalDeviceXlibPresentationSupportKHR,
                                  4,
                                  physicalDevice,
                                  queueFamilyIndex,
                                  dpy,
                                  visualID);
        ret = glad_vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPhysicalDeviceXlibPresentationSupportKHR",
                                   (GLADapiproc)glad_vkGetPhysicalDeviceXlibPresentationSupportKHR,
                                   4,
                                   physicalDevice,
                                   queueFamilyIndex,
                                   dpy,
                                   visualID);
        return ret;
}
PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR glad_debug_vkGetPhysicalDeviceXlibPresentationSupportKHR =
	glad_debug_impl_vkGetPhysicalDeviceXlibPresentationSupportKHR;

#endif
PFN_vkGetPipelineCacheData   glad_vkGetPipelineCacheData = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t *pDataSize, void *pData) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetPipelineCacheData", (GLADapiproc)glad_vkGetPipelineCacheData, 4, device, pipelineCache, pDataSize, pData);
	ret = glad_vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetPipelineCacheData",
	                           (GLADapiproc)glad_vkGetPipelineCacheData,
	                           4,
	                           device,
	                           pipelineCache,
	                           pDataSize,
	                           pData);
	return ret;
}
PFN_vkGetPipelineCacheData                            glad_debug_vkGetPipelineCacheData = glad_debug_impl_vkGetPipelineCacheData;
PFN_vkGetPipelineExecutableInternalRepresentationsKHR glad_vkGetPipelineExecutableInternalRepresentationsKHR = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice                                       device,
                                                                  const VkPipelineExecutableInfoKHR             *pExecutableInfo,
                                                                  uint32_t                                      *pInternalRepresentationCount,
                                                                  VkPipelineExecutableInternalRepresentationKHR *pInternalRepresentations) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetPipelineExecutableInternalRepresentationsKHR",
	                          (GLADapiproc)glad_vkGetPipelineExecutableInternalRepresentationsKHR,
	                          4,
	                          device,
	                          pExecutableInfo,
	                          pInternalRepresentationCount,
	                          pInternalRepresentations);
	ret = glad_vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetPipelineExecutableInternalRepresentationsKHR",
	                           (GLADapiproc)glad_vkGetPipelineExecutableInternalRepresentationsKHR,
	                           4,
	                           device,
	                           pExecutableInfo,
	                           pInternalRepresentationCount,
	                           pInternalRepresentations);
	return ret;
}
PFN_vkGetPipelineExecutableInternalRepresentationsKHR glad_debug_vkGetPipelineExecutableInternalRepresentationsKHR =
	glad_debug_impl_vkGetPipelineExecutableInternalRepresentationsKHR;
PFN_vkGetPipelineExecutablePropertiesKHR glad_vkGetPipelineExecutablePropertiesKHR = NULL;
static VkResult GLAD_API_PTR             glad_debug_impl_vkGetPipelineExecutablePropertiesKHR(VkDevice                           device,
                                                                                              const VkPipelineInfoKHR           *pPipelineInfo,
                                                                                              uint32_t                          *pExecutableCount,
                                                                                              VkPipelineExecutablePropertiesKHR *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPipelineExecutablePropertiesKHR",
                                  (GLADapiproc)glad_vkGetPipelineExecutablePropertiesKHR,
                                  4,
                                  device,
                                  pPipelineInfo,
                                  pExecutableCount,
                                  pProperties);
        ret = glad_vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPipelineExecutablePropertiesKHR",
                                   (GLADapiproc)glad_vkGetPipelineExecutablePropertiesKHR,
                                   4,
                                   device,
                                   pPipelineInfo,
                                   pExecutableCount,
                                   pProperties);
        return ret;
}
PFN_vkGetPipelineExecutablePropertiesKHR glad_debug_vkGetPipelineExecutablePropertiesKHR = glad_debug_impl_vkGetPipelineExecutablePropertiesKHR;
PFN_vkGetPipelineExecutableStatisticsKHR glad_vkGetPipelineExecutableStatisticsKHR = NULL;
static VkResult GLAD_API_PTR             glad_debug_impl_vkGetPipelineExecutableStatisticsKHR(VkDevice                           device,
                                                                                              const VkPipelineExecutableInfoKHR *pExecutableInfo,
                                                                                              uint32_t                          *pStatisticCount,
                                                                                              VkPipelineExecutableStatisticKHR  *pStatistics) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPipelineExecutableStatisticsKHR",
                                  (GLADapiproc)glad_vkGetPipelineExecutableStatisticsKHR,
                                  4,
                                  device,
                                  pExecutableInfo,
                                  pStatisticCount,
                                  pStatistics);
        ret = glad_vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPipelineExecutableStatisticsKHR",
                                   (GLADapiproc)glad_vkGetPipelineExecutableStatisticsKHR,
                                   4,
                                   device,
                                   pExecutableInfo,
                                   pStatisticCount,
                                   pStatistics);
        return ret;
}
PFN_vkGetPipelineExecutableStatisticsKHR glad_debug_vkGetPipelineExecutableStatisticsKHR = glad_debug_impl_vkGetPipelineExecutableStatisticsKHR;
PFN_vkGetPipelineIndirectDeviceAddressNV glad_vkGetPipelineIndirectDeviceAddressNV = NULL;
static VkDeviceAddress GLAD_API_PTR glad_debug_impl_vkGetPipelineIndirectDeviceAddressNV(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV *pInfo) {
	VkDeviceAddress ret;
	_pre_call_vulkan_callback("vkGetPipelineIndirectDeviceAddressNV", (GLADapiproc)glad_vkGetPipelineIndirectDeviceAddressNV, 2, device, pInfo);
	ret = glad_vkGetPipelineIndirectDeviceAddressNV(device, pInfo);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetPipelineIndirectDeviceAddressNV",
	                           (GLADapiproc)glad_vkGetPipelineIndirectDeviceAddressNV,
	                           2,
	                           device,
	                           pInfo);
	return ret;
}
PFN_vkGetPipelineIndirectDeviceAddressNV      glad_debug_vkGetPipelineIndirectDeviceAddressNV = glad_debug_impl_vkGetPipelineIndirectDeviceAddressNV;
PFN_vkGetPipelineIndirectMemoryRequirementsNV glad_vkGetPipelineIndirectMemoryRequirementsNV = NULL;
static void GLAD_API_PTR                      glad_debug_impl_vkGetPipelineIndirectMemoryRequirementsNV(VkDevice                           device,
                                                                                                        const VkComputePipelineCreateInfo *pCreateInfo,
                                                                                                        VkMemoryRequirements2             *pMemoryRequirements) {
        _pre_call_vulkan_callback("vkGetPipelineIndirectMemoryRequirementsNV",
                                  (GLADapiproc)glad_vkGetPipelineIndirectMemoryRequirementsNV,
                                  3,
                                  device,
                                  pCreateInfo,
                                  pMemoryRequirements);
        glad_vkGetPipelineIndirectMemoryRequirementsNV(device, pCreateInfo, pMemoryRequirements);
        _post_call_vulkan_callback(NULL,
                                   "vkGetPipelineIndirectMemoryRequirementsNV",
                                   (GLADapiproc)glad_vkGetPipelineIndirectMemoryRequirementsNV,
                                   3,
                                   device,
                                   pCreateInfo,
                                   pMemoryRequirements);
}
PFN_vkGetPipelineIndirectMemoryRequirementsNV glad_debug_vkGetPipelineIndirectMemoryRequirementsNV = glad_debug_impl_vkGetPipelineIndirectMemoryRequirementsNV;
PFN_vkGetPipelinePropertiesEXT                glad_vkGetPipelinePropertiesEXT = NULL;
static VkResult GLAD_API_PTR                  glad_debug_impl_vkGetPipelinePropertiesEXT(VkDevice                 device,
                                                                                         const VkPipelineInfoEXT *pPipelineInfo,
                                                                                         VkBaseOutStructure      *pPipelineProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetPipelinePropertiesEXT", (GLADapiproc)glad_vkGetPipelinePropertiesEXT, 3, device, pPipelineInfo, pPipelineProperties);
        ret = glad_vkGetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetPipelinePropertiesEXT",
                                   (GLADapiproc)glad_vkGetPipelinePropertiesEXT,
                                   3,
                                   device,
                                   pPipelineInfo,
                                   pPipelineProperties);
        return ret;
}
PFN_vkGetPipelinePropertiesEXT glad_debug_vkGetPipelinePropertiesEXT = glad_debug_impl_vkGetPipelinePropertiesEXT;
PFN_vkGetPrivateData           glad_vkGetPrivateData = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData) {
	_pre_call_vulkan_callback("vkGetPrivateData", (GLADapiproc)glad_vkGetPrivateData, 5, device, objectType, objectHandle, privateDataSlot, pData);
	glad_vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);
	_post_call_vulkan_callback(NULL, "vkGetPrivateData", (GLADapiproc)glad_vkGetPrivateData, 5, device, objectType, objectHandle, privateDataSlot, pData);
}
PFN_vkGetPrivateData    glad_debug_vkGetPrivateData = glad_debug_impl_vkGetPrivateData;
PFN_vkGetPrivateDataEXT glad_vkGetPrivateDataEXT = NULL;
static void GLAD_API_PTR
glad_debug_impl_vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData) {
	_pre_call_vulkan_callback("vkGetPrivateDataEXT", (GLADapiproc)glad_vkGetPrivateDataEXT, 5, device, objectType, objectHandle, privateDataSlot, pData);
	glad_vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
	_post_call_vulkan_callback(NULL,
	                           "vkGetPrivateDataEXT",
	                           (GLADapiproc)glad_vkGetPrivateDataEXT,
	                           5,
	                           device,
	                           objectType,
	                           objectHandle,
	                           privateDataSlot,
	                           pData);
}
PFN_vkGetPrivateDataEXT      glad_debug_vkGetPrivateDataEXT = glad_debug_impl_vkGetPrivateDataEXT;
PFN_vkGetQueryPoolResults    glad_vkGetQueryPoolResults = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetQueryPoolResults(VkDevice           device,
                                                                   VkQueryPool        queryPool,
                                                                   uint32_t           firstQuery,
                                                                   uint32_t           queryCount,
                                                                   size_t             dataSize,
                                                                   void              *pData,
                                                                   VkDeviceSize       stride,
                                                                   VkQueryResultFlags flags) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetQueryPoolResults",
	                          (GLADapiproc)glad_vkGetQueryPoolResults,
	                          8,
	                          device,
	                          queryPool,
	                          firstQuery,
	                          queryCount,
	                          dataSize,
	                          pData,
	                          stride,
	                          flags);
	ret = glad_vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetQueryPoolResults",
	                           (GLADapiproc)glad_vkGetQueryPoolResults,
	                           8,
	                           device,
	                           queryPool,
	                           firstQuery,
	                           queryCount,
	                           dataSize,
	                           pData,
	                           stride,
	                           flags);
	return ret;
}
PFN_vkGetQueryPoolResults       glad_debug_vkGetQueryPoolResults = glad_debug_impl_vkGetQueryPoolResults;
PFN_vkGetQueueCheckpointData2NV glad_vkGetQueueCheckpointData2NV = NULL;
static void GLAD_API_PTR glad_debug_impl_vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointData2NV *pCheckpointData) {
	_pre_call_vulkan_callback("vkGetQueueCheckpointData2NV",
	                          (GLADapiproc)glad_vkGetQueueCheckpointData2NV,
	                          3,
	                          queue,
	                          pCheckpointDataCount,
	                          pCheckpointData);
	glad_vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);
	_post_call_vulkan_callback(NULL,
	                           "vkGetQueueCheckpointData2NV",
	                           (GLADapiproc)glad_vkGetQueueCheckpointData2NV,
	                           3,
	                           queue,
	                           pCheckpointDataCount,
	                           pCheckpointData);
}
PFN_vkGetQueueCheckpointData2NV glad_debug_vkGetQueueCheckpointData2NV = glad_debug_impl_vkGetQueueCheckpointData2NV;
PFN_vkGetQueueCheckpointDataNV  glad_vkGetQueueCheckpointDataNV = NULL;
static void GLAD_API_PTR        glad_debug_impl_vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointDataNV *pCheckpointData) {
        _pre_call_vulkan_callback("vkGetQueueCheckpointDataNV", (GLADapiproc)glad_vkGetQueueCheckpointDataNV, 3, queue, pCheckpointDataCount, pCheckpointData);
        glad_vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
        _post_call_vulkan_callback(NULL,
                                   "vkGetQueueCheckpointDataNV",
                                   (GLADapiproc)glad_vkGetQueueCheckpointDataNV,
                                   3,
                                   queue,
                                   pCheckpointDataCount,
                                   pCheckpointData);
}
PFN_vkGetQueueCheckpointDataNV glad_debug_vkGetQueueCheckpointDataNV = glad_debug_impl_vkGetQueueCheckpointDataNV;
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
PFN_vkGetRandROutputDisplayEXT glad_vkGetRandROutputDisplayEXT = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkGetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice,
                                                                          Display         *dpy,
                                                                          RROutput         rrOutput,
                                                                          VkDisplayKHR    *pDisplay) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetRandROutputDisplayEXT", (GLADapiproc)glad_vkGetRandROutputDisplayEXT, 4, physicalDevice, dpy, rrOutput, pDisplay);
        ret = glad_vkGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetRandROutputDisplayEXT",
                                   (GLADapiproc)glad_vkGetRandROutputDisplayEXT,
                                   4,
                                   physicalDevice,
                                   dpy,
                                   rrOutput,
                                   pDisplay);
        return ret;
}
PFN_vkGetRandROutputDisplayEXT glad_debug_vkGetRandROutputDisplayEXT = glad_debug_impl_vkGetRandROutputDisplayEXT;

#endif
PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR glad_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = NULL;
static VkResult GLAD_API_PTR                          glad_debug_impl_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice   device,
                                                                                                                        VkPipeline pipeline,
                                                                                                                        uint32_t   firstGroup,
                                                                                                                        uint32_t   groupCount,
                                                                                                                        size_t     dataSize,
                                                                                                                        void      *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR",
                                  (GLADapiproc)glad_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR,
                                  6,
                                  device,
                                  pipeline,
                                  firstGroup,
                                  groupCount,
                                  dataSize,
                                  pData);
        ret = glad_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR",
                                   (GLADapiproc)glad_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR,
                                   6,
                                   device,
                                   pipeline,
                                   firstGroup,
                                   groupCount,
                                   dataSize,
                                   pData);
        return ret;
}
PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR glad_debug_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR =
	glad_debug_impl_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
PFN_vkGetRayTracingShaderGroupHandlesKHR glad_vkGetRayTracingShaderGroupHandlesKHR = NULL;
static VkResult GLAD_API_PTR             glad_debug_impl_vkGetRayTracingShaderGroupHandlesKHR(VkDevice   device,
                                                                                              VkPipeline pipeline,
                                                                                              uint32_t   firstGroup,
                                                                                              uint32_t   groupCount,
                                                                                              size_t     dataSize,
                                                                                              void      *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetRayTracingShaderGroupHandlesKHR",
                                  (GLADapiproc)glad_vkGetRayTracingShaderGroupHandlesKHR,
                                  6,
                                  device,
                                  pipeline,
                                  firstGroup,
                                  groupCount,
                                  dataSize,
                                  pData);
        ret = glad_vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetRayTracingShaderGroupHandlesKHR",
                                   (GLADapiproc)glad_vkGetRayTracingShaderGroupHandlesKHR,
                                   6,
                                   device,
                                   pipeline,
                                   firstGroup,
                                   groupCount,
                                   dataSize,
                                   pData);
        return ret;
}
PFN_vkGetRayTracingShaderGroupHandlesKHR glad_debug_vkGetRayTracingShaderGroupHandlesKHR = glad_debug_impl_vkGetRayTracingShaderGroupHandlesKHR;
PFN_vkGetRayTracingShaderGroupHandlesNV  glad_vkGetRayTracingShaderGroupHandlesNV = NULL;
static VkResult GLAD_API_PTR             glad_debug_impl_vkGetRayTracingShaderGroupHandlesNV(VkDevice   device,
                                                                                             VkPipeline pipeline,
                                                                                             uint32_t   firstGroup,
                                                                                             uint32_t   groupCount,
                                                                                             size_t     dataSize,
                                                                                             void      *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetRayTracingShaderGroupHandlesNV",
                                  (GLADapiproc)glad_vkGetRayTracingShaderGroupHandlesNV,
                                  6,
                                  device,
                                  pipeline,
                                  firstGroup,
                                  groupCount,
                                  dataSize,
                                  pData);
        ret = glad_vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetRayTracingShaderGroupHandlesNV",
                                   (GLADapiproc)glad_vkGetRayTracingShaderGroupHandlesNV,
                                   6,
                                   device,
                                   pipeline,
                                   firstGroup,
                                   groupCount,
                                   dataSize,
                                   pData);
        return ret;
}
PFN_vkGetRayTracingShaderGroupHandlesNV    glad_debug_vkGetRayTracingShaderGroupHandlesNV = glad_debug_impl_vkGetRayTracingShaderGroupHandlesNV;
PFN_vkGetRayTracingShaderGroupStackSizeKHR glad_vkGetRayTracingShaderGroupStackSizeKHR = NULL;
static VkDeviceSize GLAD_API_PTR           glad_debug_impl_vkGetRayTracingShaderGroupStackSizeKHR(VkDevice               device,
                                                                                                  VkPipeline             pipeline,
                                                                                                  uint32_t               group,
                                                                                                  VkShaderGroupShaderKHR groupShader) {
        VkDeviceSize ret;
        _pre_call_vulkan_callback("vkGetRayTracingShaderGroupStackSizeKHR",
                                  (GLADapiproc)glad_vkGetRayTracingShaderGroupStackSizeKHR,
                                  4,
                                  device,
                                  pipeline,
                                  group,
                                  groupShader);
        ret = glad_vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetRayTracingShaderGroupStackSizeKHR",
                                   (GLADapiproc)glad_vkGetRayTracingShaderGroupStackSizeKHR,
                                   4,
                                   device,
                                   pipeline,
                                   group,
                                   groupShader);
        return ret;
}
PFN_vkGetRayTracingShaderGroupStackSizeKHR glad_debug_vkGetRayTracingShaderGroupStackSizeKHR = glad_debug_impl_vkGetRayTracingShaderGroupStackSizeKHR;
PFN_vkGetRefreshCycleDurationGOOGLE        glad_vkGetRefreshCycleDurationGOOGLE = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkGetRefreshCycleDurationGOOGLE(VkDevice                      device,
                                                                                           VkSwapchainKHR                swapchain,
                                                                                           VkRefreshCycleDurationGOOGLE *pDisplayTimingProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetRefreshCycleDurationGOOGLE",
                                  (GLADapiproc)glad_vkGetRefreshCycleDurationGOOGLE,
                                  3,
                                  device,
                                  swapchain,
                                  pDisplayTimingProperties);
        ret = glad_vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetRefreshCycleDurationGOOGLE",
                                   (GLADapiproc)glad_vkGetRefreshCycleDurationGOOGLE,
                                   3,
                                   device,
                                   swapchain,
                                   pDisplayTimingProperties);
        return ret;
}
PFN_vkGetRefreshCycleDurationGOOGLE glad_debug_vkGetRefreshCycleDurationGOOGLE = glad_debug_impl_vkGetRefreshCycleDurationGOOGLE;
PFN_vkGetRenderAreaGranularity      glad_vkGetRenderAreaGranularity = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D *pGranularity) {
        _pre_call_vulkan_callback("vkGetRenderAreaGranularity", (GLADapiproc)glad_vkGetRenderAreaGranularity, 3, device, renderPass, pGranularity);
        glad_vkGetRenderAreaGranularity(device, renderPass, pGranularity);
        _post_call_vulkan_callback(NULL, "vkGetRenderAreaGranularity", (GLADapiproc)glad_vkGetRenderAreaGranularity, 3, device, renderPass, pGranularity);
}
PFN_vkGetRenderAreaGranularity       glad_debug_vkGetRenderAreaGranularity = glad_debug_impl_vkGetRenderAreaGranularity;
PFN_vkGetRenderingAreaGranularityKHR glad_vkGetRenderingAreaGranularityKHR = NULL;
static void GLAD_API_PTR             glad_debug_impl_vkGetRenderingAreaGranularityKHR(VkDevice                      device,
                                                                                      const VkRenderingAreaInfoKHR *pRenderingAreaInfo,
                                                                                      VkExtent2D                   *pGranularity) {
        _pre_call_vulkan_callback("vkGetRenderingAreaGranularityKHR",
                                  (GLADapiproc)glad_vkGetRenderingAreaGranularityKHR,
                                  3,
                                  device,
                                  pRenderingAreaInfo,
                                  pGranularity);
        glad_vkGetRenderingAreaGranularityKHR(device, pRenderingAreaInfo, pGranularity);
        _post_call_vulkan_callback(NULL,
                                   "vkGetRenderingAreaGranularityKHR",
                                   (GLADapiproc)glad_vkGetRenderingAreaGranularityKHR,
                                   3,
                                   device,
                                   pRenderingAreaInfo,
                                   pGranularity);
}
PFN_vkGetRenderingAreaGranularityKHR           glad_debug_vkGetRenderingAreaGranularityKHR = glad_debug_impl_vkGetRenderingAreaGranularityKHR;
PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT glad_vkGetSamplerOpaqueCaptureDescriptorDataEXT = NULL;
static VkResult GLAD_API_PTR                   glad_debug_impl_vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice                                     device,
                                                                                                          const VkSamplerCaptureDescriptorDataInfoEXT *pInfo,
                                                                                                          void                                        *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetSamplerOpaqueCaptureDescriptorDataEXT",
                                  (GLADapiproc)glad_vkGetSamplerOpaqueCaptureDescriptorDataEXT,
                                  3,
                                  device,
                                  pInfo,
                                  pData);
        ret = glad_vkGetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetSamplerOpaqueCaptureDescriptorDataEXT",
                                   (GLADapiproc)glad_vkGetSamplerOpaqueCaptureDescriptorDataEXT,
                                   3,
                                   device,
                                   pInfo,
                                   pData);
        return ret;
}
PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT glad_debug_vkGetSamplerOpaqueCaptureDescriptorDataEXT =
	glad_debug_impl_vkGetSamplerOpaqueCaptureDescriptorDataEXT;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
PFN_vkGetScreenBufferPropertiesQNX glad_vkGetScreenBufferPropertiesQNX = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkGetScreenBufferPropertiesQNX(VkDevice                     device,
                                                                                  const struct _screen_buffer *buffer,
                                                                                  VkScreenBufferPropertiesQNX *pProperties) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetScreenBufferPropertiesQNX", (GLADapiproc)glad_vkGetScreenBufferPropertiesQNX, 3, device, buffer, pProperties);
        ret = glad_vkGetScreenBufferPropertiesQNX(device, buffer, pProperties);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetScreenBufferPropertiesQNX",
                                   (GLADapiproc)glad_vkGetScreenBufferPropertiesQNX,
                                   3,
                                   device,
                                   buffer,
                                   pProperties);
        return ret;
}
PFN_vkGetScreenBufferPropertiesQNX glad_debug_vkGetScreenBufferPropertiesQNX = glad_debug_impl_vkGetScreenBufferPropertiesQNX;

#endif
PFN_vkGetSemaphoreCounterValue glad_vkGetSemaphoreCounterValue = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t *pValue) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetSemaphoreCounterValue", (GLADapiproc)glad_vkGetSemaphoreCounterValue, 3, device, semaphore, pValue);
        ret = glad_vkGetSemaphoreCounterValue(device, semaphore, pValue);
        _post_call_vulkan_callback((void *)&ret, "vkGetSemaphoreCounterValue", (GLADapiproc)glad_vkGetSemaphoreCounterValue, 3, device, semaphore, pValue);
        return ret;
}
PFN_vkGetSemaphoreCounterValue    glad_debug_vkGetSemaphoreCounterValue = glad_debug_impl_vkGetSemaphoreCounterValue;
PFN_vkGetSemaphoreCounterValueKHR glad_vkGetSemaphoreCounterValueKHR = NULL;
static VkResult GLAD_API_PTR      glad_debug_impl_vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t *pValue) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetSemaphoreCounterValueKHR", (GLADapiproc)glad_vkGetSemaphoreCounterValueKHR, 3, device, semaphore, pValue);
        ret = glad_vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetSemaphoreCounterValueKHR",
                                   (GLADapiproc)glad_vkGetSemaphoreCounterValueKHR,
                                   3,
                                   device,
                                   semaphore,
                                   pValue);
        return ret;
}
PFN_vkGetSemaphoreCounterValueKHR glad_debug_vkGetSemaphoreCounterValueKHR = glad_debug_impl_vkGetSemaphoreCounterValueKHR;
PFN_vkGetSemaphoreFdKHR           glad_vkGetSemaphoreFdKHR = NULL;
static VkResult GLAD_API_PTR      glad_debug_impl_vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR *pGetFdInfo, int *pFd) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetSemaphoreFdKHR", (GLADapiproc)glad_vkGetSemaphoreFdKHR, 3, device, pGetFdInfo, pFd);
        ret = glad_vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
        _post_call_vulkan_callback((void *)&ret, "vkGetSemaphoreFdKHR", (GLADapiproc)glad_vkGetSemaphoreFdKHR, 3, device, pGetFdInfo, pFd);
        return ret;
}
PFN_vkGetSemaphoreFdKHR glad_debug_vkGetSemaphoreFdKHR = glad_debug_impl_vkGetSemaphoreFdKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkGetSemaphoreWin32HandleKHR glad_vkGetSemaphoreWin32HandleKHR = NULL;
static VkResult GLAD_API_PTR     glad_debug_impl_vkGetSemaphoreWin32HandleKHR(VkDevice                                device,
                                                                              const VkSemaphoreGetWin32HandleInfoKHR *pGetWin32HandleInfo,
                                                                              HANDLE                                 *pHandle) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetSemaphoreWin32HandleKHR", (GLADapiproc)glad_vkGetSemaphoreWin32HandleKHR, 3, device, pGetWin32HandleInfo, pHandle);
        ret = glad_vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetSemaphoreWin32HandleKHR",
                                   (GLADapiproc)glad_vkGetSemaphoreWin32HandleKHR,
                                   3,
                                   device,
                                   pGetWin32HandleInfo,
                                   pHandle);
        return ret;
}
PFN_vkGetSemaphoreWin32HandleKHR glad_debug_vkGetSemaphoreWin32HandleKHR = glad_debug_impl_vkGetSemaphoreWin32HandleKHR;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkGetSemaphoreZirconHandleFUCHSIA glad_vkGetSemaphoreZirconHandleFUCHSIA = NULL;
static VkResult GLAD_API_PTR          glad_debug_impl_vkGetSemaphoreZirconHandleFUCHSIA(VkDevice                                     device,
                                                                                        const VkSemaphoreGetZirconHandleInfoFUCHSIA *pGetZirconHandleInfo,
                                                                                        zx_handle_t                                 *pZirconHandle) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetSemaphoreZirconHandleFUCHSIA",
                                  (GLADapiproc)glad_vkGetSemaphoreZirconHandleFUCHSIA,
                                  3,
                                  device,
                                  pGetZirconHandleInfo,
                                  pZirconHandle);
        ret = glad_vkGetSemaphoreZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetSemaphoreZirconHandleFUCHSIA",
                                   (GLADapiproc)glad_vkGetSemaphoreZirconHandleFUCHSIA,
                                   3,
                                   device,
                                   pGetZirconHandleInfo,
                                   pZirconHandle);
        return ret;
}
PFN_vkGetSemaphoreZirconHandleFUCHSIA glad_debug_vkGetSemaphoreZirconHandleFUCHSIA = glad_debug_impl_vkGetSemaphoreZirconHandleFUCHSIA;

#endif
PFN_vkGetShaderBinaryDataEXT glad_vkGetShaderBinaryDataEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, size_t *pDataSize, void *pData) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetShaderBinaryDataEXT", (GLADapiproc)glad_vkGetShaderBinaryDataEXT, 4, device, shader, pDataSize, pData);
	ret = glad_vkGetShaderBinaryDataEXT(device, shader, pDataSize, pData);
	_post_call_vulkan_callback((void *)&ret, "vkGetShaderBinaryDataEXT", (GLADapiproc)glad_vkGetShaderBinaryDataEXT, 4, device, shader, pDataSize, pData);
	return ret;
}
PFN_vkGetShaderBinaryDataEXT glad_debug_vkGetShaderBinaryDataEXT = glad_debug_impl_vkGetShaderBinaryDataEXT;
PFN_vkGetShaderInfoAMD       glad_vkGetShaderInfoAMD = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetShaderInfoAMD(VkDevice              device,
                                                                VkPipeline            pipeline,
                                                                VkShaderStageFlagBits shaderStage,
                                                                VkShaderInfoTypeAMD   infoType,
                                                                size_t               *pInfoSize,
                                                                void                 *pInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetShaderInfoAMD", (GLADapiproc)glad_vkGetShaderInfoAMD, 6, device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
	ret = glad_vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetShaderInfoAMD",
	                           (GLADapiproc)glad_vkGetShaderInfoAMD,
	                           6,
	                           device,
	                           pipeline,
	                           shaderStage,
	                           infoType,
	                           pInfoSize,
	                           pInfo);
	return ret;
}
PFN_vkGetShaderInfoAMD                       glad_debug_vkGetShaderInfoAMD = glad_debug_impl_vkGetShaderInfoAMD;
PFN_vkGetShaderModuleCreateInfoIdentifierEXT glad_vkGetShaderModuleCreateInfoIdentifierEXT = NULL;
static void GLAD_API_PTR                     glad_debug_impl_vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice                        device,
                                                                                                      const VkShaderModuleCreateInfo *pCreateInfo,
                                                                                                      VkShaderModuleIdentifierEXT    *pIdentifier) {
        _pre_call_vulkan_callback("vkGetShaderModuleCreateInfoIdentifierEXT",
                                  (GLADapiproc)glad_vkGetShaderModuleCreateInfoIdentifierEXT,
                                  3,
                                  device,
                                  pCreateInfo,
                                  pIdentifier);
        glad_vkGetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);
        _post_call_vulkan_callback(NULL,
                                   "vkGetShaderModuleCreateInfoIdentifierEXT",
                                   (GLADapiproc)glad_vkGetShaderModuleCreateInfoIdentifierEXT,
                                   3,
                                   device,
                                   pCreateInfo,
                                   pIdentifier);
}
PFN_vkGetShaderModuleCreateInfoIdentifierEXT glad_debug_vkGetShaderModuleCreateInfoIdentifierEXT = glad_debug_impl_vkGetShaderModuleCreateInfoIdentifierEXT;
PFN_vkGetShaderModuleIdentifierEXT           glad_vkGetShaderModuleIdentifierEXT = NULL;
static void GLAD_API_PTR                     glad_debug_impl_vkGetShaderModuleIdentifierEXT(VkDevice                     device,
                                                                                            VkShaderModule               shaderModule,
                                                                                            VkShaderModuleIdentifierEXT *pIdentifier) {
        _pre_call_vulkan_callback("vkGetShaderModuleIdentifierEXT", (GLADapiproc)glad_vkGetShaderModuleIdentifierEXT, 3, device, shaderModule, pIdentifier);
        glad_vkGetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);
        _post_call_vulkan_callback(NULL,
                                   "vkGetShaderModuleIdentifierEXT",
                                   (GLADapiproc)glad_vkGetShaderModuleIdentifierEXT,
                                   3,
                                   device,
                                   shaderModule,
                                   pIdentifier);
}
PFN_vkGetShaderModuleIdentifierEXT glad_debug_vkGetShaderModuleIdentifierEXT = glad_debug_impl_vkGetShaderModuleIdentifierEXT;
PFN_vkGetSwapchainCounterEXT       glad_vkGetSwapchainCounterEXT = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkGetSwapchainCounterEXT(VkDevice                    device,
                                                                            VkSwapchainKHR              swapchain,
                                                                            VkSurfaceCounterFlagBitsEXT counter,
                                                                            uint64_t                   *pCounterValue) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetSwapchainCounterEXT", (GLADapiproc)glad_vkGetSwapchainCounterEXT, 4, device, swapchain, counter, pCounterValue);
        ret = glad_vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetSwapchainCounterEXT",
                                   (GLADapiproc)glad_vkGetSwapchainCounterEXT,
                                   4,
                                   device,
                                   swapchain,
                                   counter,
                                   pCounterValue);
        return ret;
}
PFN_vkGetSwapchainCounterEXT glad_debug_vkGetSwapchainCounterEXT = glad_debug_impl_vkGetSwapchainCounterEXT;
PFN_vkGetSwapchainImagesKHR  glad_vkGetSwapchainImagesKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetSwapchainImagesKHR(VkDevice       device,
                                                                     VkSwapchainKHR swapchain,
                                                                     uint32_t      *pSwapchainImageCount,
                                                                     VkImage       *pSwapchainImages) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetSwapchainImagesKHR",
	                          (GLADapiproc)glad_vkGetSwapchainImagesKHR,
	                          4,
	                          device,
	                          swapchain,
	                          pSwapchainImageCount,
	                          pSwapchainImages);
	ret = glad_vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkGetSwapchainImagesKHR",
	                           (GLADapiproc)glad_vkGetSwapchainImagesKHR,
	                           4,
	                           device,
	                           swapchain,
	                           pSwapchainImageCount,
	                           pSwapchainImages);
	return ret;
}
PFN_vkGetSwapchainImagesKHR  glad_debug_vkGetSwapchainImagesKHR = glad_debug_impl_vkGetSwapchainImagesKHR;
PFN_vkGetSwapchainStatusKHR  glad_vkGetSwapchainStatusKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetSwapchainStatusKHR", (GLADapiproc)glad_vkGetSwapchainStatusKHR, 2, device, swapchain);
	ret = glad_vkGetSwapchainStatusKHR(device, swapchain);
	_post_call_vulkan_callback((void *)&ret, "vkGetSwapchainStatusKHR", (GLADapiproc)glad_vkGetSwapchainStatusKHR, 2, device, swapchain);
	return ret;
}
PFN_vkGetSwapchainStatusKHR     glad_debug_vkGetSwapchainStatusKHR = glad_debug_impl_vkGetSwapchainStatusKHR;
PFN_vkGetValidationCacheDataEXT glad_vkGetValidationCacheDataEXT = NULL;
static VkResult GLAD_API_PTR    glad_debug_impl_vkGetValidationCacheDataEXT(VkDevice             device,
                                                                            VkValidationCacheEXT validationCache,
                                                                            size_t              *pDataSize,
                                                                            void                *pData) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetValidationCacheDataEXT", (GLADapiproc)glad_vkGetValidationCacheDataEXT, 4, device, validationCache, pDataSize, pData);
        ret = glad_vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetValidationCacheDataEXT",
                                   (GLADapiproc)glad_vkGetValidationCacheDataEXT,
                                   4,
                                   device,
                                   validationCache,
                                   pDataSize,
                                   pData);
        return ret;
}
PFN_vkGetValidationCacheDataEXT            glad_debug_vkGetValidationCacheDataEXT = glad_debug_impl_vkGetValidationCacheDataEXT;
PFN_vkGetVideoSessionMemoryRequirementsKHR glad_vkGetVideoSessionMemoryRequirementsKHR = NULL;
static VkResult GLAD_API_PTR               glad_debug_impl_vkGetVideoSessionMemoryRequirementsKHR(VkDevice                             device,
                                                                                                  VkVideoSessionKHR                    videoSession,
                                                                                                  uint32_t                            *pMemoryRequirementsCount,
                                                                                                  VkVideoSessionMemoryRequirementsKHR *pMemoryRequirements) {
        VkResult ret;
        _pre_call_vulkan_callback("vkGetVideoSessionMemoryRequirementsKHR",
                                  (GLADapiproc)glad_vkGetVideoSessionMemoryRequirementsKHR,
                                  4,
                                  device,
                                  videoSession,
                                  pMemoryRequirementsCount,
                                  pMemoryRequirements);
        ret = glad_vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkGetVideoSessionMemoryRequirementsKHR",
                                   (GLADapiproc)glad_vkGetVideoSessionMemoryRequirementsKHR,
                                   4,
                                   device,
                                   videoSession,
                                   pMemoryRequirementsCount,
                                   pMemoryRequirements);
        return ret;
}
PFN_vkGetVideoSessionMemoryRequirementsKHR glad_debug_vkGetVideoSessionMemoryRequirementsKHR = glad_debug_impl_vkGetVideoSessionMemoryRequirementsKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkGetWinrtDisplayNV      glad_vkGetWinrtDisplayNV = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkGetWinrtDisplayNV(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, VkDisplayKHR *pDisplay) {
	VkResult ret;
	_pre_call_vulkan_callback("vkGetWinrtDisplayNV", (GLADapiproc)glad_vkGetWinrtDisplayNV, 3, physicalDevice, deviceRelativeId, pDisplay);
	ret = glad_vkGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
	_post_call_vulkan_callback((void *)&ret, "vkGetWinrtDisplayNV", (GLADapiproc)glad_vkGetWinrtDisplayNV, 3, physicalDevice, deviceRelativeId, pDisplay);
	return ret;
}
PFN_vkGetWinrtDisplayNV glad_debug_vkGetWinrtDisplayNV = glad_debug_impl_vkGetWinrtDisplayNV;

#endif
PFN_vkImportFenceFdKHR       glad_vkImportFenceFdKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR *pImportFenceFdInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkImportFenceFdKHR", (GLADapiproc)glad_vkImportFenceFdKHR, 2, device, pImportFenceFdInfo);
	ret = glad_vkImportFenceFdKHR(device, pImportFenceFdInfo);
	_post_call_vulkan_callback((void *)&ret, "vkImportFenceFdKHR", (GLADapiproc)glad_vkImportFenceFdKHR, 2, device, pImportFenceFdInfo);
	return ret;
}
PFN_vkImportFenceFdKHR glad_debug_vkImportFenceFdKHR = glad_debug_impl_vkImportFenceFdKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkImportFenceWin32HandleKHR glad_vkImportFenceWin32HandleKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkImportFenceWin32HandleKHR(VkDevice device, const VkImportFenceWin32HandleInfoKHR *pImportFenceWin32HandleInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkImportFenceWin32HandleKHR", (GLADapiproc)glad_vkImportFenceWin32HandleKHR, 2, device, pImportFenceWin32HandleInfo);
	ret = glad_vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkImportFenceWin32HandleKHR",
	                           (GLADapiproc)glad_vkImportFenceWin32HandleKHR,
	                           2,
	                           device,
	                           pImportFenceWin32HandleInfo);
	return ret;
}
PFN_vkImportFenceWin32HandleKHR glad_debug_vkImportFenceWin32HandleKHR = glad_debug_impl_vkImportFenceWin32HandleKHR;

#endif
PFN_vkImportSemaphoreFdKHR   glad_vkImportSemaphoreFdKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR *pImportSemaphoreFdInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkImportSemaphoreFdKHR", (GLADapiproc)glad_vkImportSemaphoreFdKHR, 2, device, pImportSemaphoreFdInfo);
	ret = glad_vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
	_post_call_vulkan_callback((void *)&ret, "vkImportSemaphoreFdKHR", (GLADapiproc)glad_vkImportSemaphoreFdKHR, 2, device, pImportSemaphoreFdInfo);
	return ret;
}
PFN_vkImportSemaphoreFdKHR glad_debug_vkImportSemaphoreFdKHR = glad_debug_impl_vkImportSemaphoreFdKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkImportSemaphoreWin32HandleKHR glad_vkImportSemaphoreWin32HandleKHR = NULL;
static VkResult GLAD_API_PTR        glad_debug_impl_vkImportSemaphoreWin32HandleKHR(VkDevice                                   device,
                                                                                    const VkImportSemaphoreWin32HandleInfoKHR *pImportSemaphoreWin32HandleInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkImportSemaphoreWin32HandleKHR",
                                  (GLADapiproc)glad_vkImportSemaphoreWin32HandleKHR,
                                  2,
                                  device,
                                  pImportSemaphoreWin32HandleInfo);
        ret = glad_vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkImportSemaphoreWin32HandleKHR",
                                   (GLADapiproc)glad_vkImportSemaphoreWin32HandleKHR,
                                   2,
                                   device,
                                   pImportSemaphoreWin32HandleInfo);
        return ret;
}
PFN_vkImportSemaphoreWin32HandleKHR glad_debug_vkImportSemaphoreWin32HandleKHR = glad_debug_impl_vkImportSemaphoreWin32HandleKHR;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkImportSemaphoreZirconHandleFUCHSIA glad_vkImportSemaphoreZirconHandleFUCHSIA = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkImportSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkImportSemaphoreZirconHandleInfoFUCHSIA *pImportSemaphoreZirconHandleInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkImportSemaphoreZirconHandleFUCHSIA",
	                          (GLADapiproc)glad_vkImportSemaphoreZirconHandleFUCHSIA,
	                          2,
	                          device,
	                          pImportSemaphoreZirconHandleInfo);
	ret = glad_vkImportSemaphoreZirconHandleFUCHSIA(device, pImportSemaphoreZirconHandleInfo);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkImportSemaphoreZirconHandleFUCHSIA",
	                           (GLADapiproc)glad_vkImportSemaphoreZirconHandleFUCHSIA,
	                           2,
	                           device,
	                           pImportSemaphoreZirconHandleInfo);
	return ret;
}
PFN_vkImportSemaphoreZirconHandleFUCHSIA glad_debug_vkImportSemaphoreZirconHandleFUCHSIA = glad_debug_impl_vkImportSemaphoreZirconHandleFUCHSIA;

#endif
PFN_vkInitializePerformanceApiINTEL glad_vkInitializePerformanceApiINTEL = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL *pInitializeInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkInitializePerformanceApiINTEL", (GLADapiproc)glad_vkInitializePerformanceApiINTEL, 2, device, pInitializeInfo);
	ret = glad_vkInitializePerformanceApiINTEL(device, pInitializeInfo);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkInitializePerformanceApiINTEL",
	                           (GLADapiproc)glad_vkInitializePerformanceApiINTEL,
	                           2,
	                           device,
	                           pInitializeInfo);
	return ret;
}
PFN_vkInitializePerformanceApiINTEL glad_debug_vkInitializePerformanceApiINTEL = glad_debug_impl_vkInitializePerformanceApiINTEL;
PFN_vkInvalidateMappedMemoryRanges  glad_vkInvalidateMappedMemoryRanges = NULL;
static VkResult GLAD_API_PTR        glad_debug_impl_vkInvalidateMappedMemoryRanges(VkDevice                   device,
                                                                                   uint32_t                   memoryRangeCount,
                                                                                   const VkMappedMemoryRange *pMemoryRanges) {
        VkResult ret;
        _pre_call_vulkan_callback("vkInvalidateMappedMemoryRanges",
                                  (GLADapiproc)glad_vkInvalidateMappedMemoryRanges,
                                  3,
                                  device,
                                  memoryRangeCount,
                                  pMemoryRanges);
        ret = glad_vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkInvalidateMappedMemoryRanges",
                                   (GLADapiproc)glad_vkInvalidateMappedMemoryRanges,
                                   3,
                                   device,
                                   memoryRangeCount,
                                   pMemoryRanges);
        return ret;
}
PFN_vkInvalidateMappedMemoryRanges glad_debug_vkInvalidateMappedMemoryRanges = glad_debug_impl_vkInvalidateMappedMemoryRanges;
PFN_vkLatencySleepNV               glad_vkLatencySleepNV = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkLatencySleepNV(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepInfoNV *pSleepInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkLatencySleepNV", (GLADapiproc)glad_vkLatencySleepNV, 3, device, swapchain, pSleepInfo);
        ret = glad_vkLatencySleepNV(device, swapchain, pSleepInfo);
        _post_call_vulkan_callback((void *)&ret, "vkLatencySleepNV", (GLADapiproc)glad_vkLatencySleepNV, 3, device, swapchain, pSleepInfo);
        return ret;
}
PFN_vkLatencySleepNV glad_debug_vkLatencySleepNV = glad_debug_impl_vkLatencySleepNV;
PFN_vkMapMemory      glad_vkMapMemory = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void **ppData) {
	VkResult ret;
	_pre_call_vulkan_callback("vkMapMemory", (GLADapiproc)glad_vkMapMemory, 6, device, memory, offset, size, flags, ppData);
	ret = glad_vkMapMemory(device, memory, offset, size, flags, ppData);
	_post_call_vulkan_callback((void *)&ret, "vkMapMemory", (GLADapiproc)glad_vkMapMemory, 6, device, memory, offset, size, flags, ppData);
	return ret;
}
PFN_vkMapMemory              glad_debug_vkMapMemory = glad_debug_impl_vkMapMemory;
PFN_vkMapMemory2KHR          glad_vkMapMemory2KHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR *pMemoryMapInfo, void **ppData) {
	VkResult ret;
	_pre_call_vulkan_callback("vkMapMemory2KHR", (GLADapiproc)glad_vkMapMemory2KHR, 3, device, pMemoryMapInfo, ppData);
	ret = glad_vkMapMemory2KHR(device, pMemoryMapInfo, ppData);
	_post_call_vulkan_callback((void *)&ret, "vkMapMemory2KHR", (GLADapiproc)glad_vkMapMemory2KHR, 3, device, pMemoryMapInfo, ppData);
	return ret;
}
PFN_vkMapMemory2KHR          glad_debug_vkMapMemory2KHR = glad_debug_impl_vkMapMemory2KHR;
PFN_vkMergePipelineCaches    glad_vkMergePipelineCaches = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkMergePipelineCaches(VkDevice               device,
                                                                   VkPipelineCache        dstCache,
                                                                   uint32_t               srcCacheCount,
                                                                   const VkPipelineCache *pSrcCaches) {
	VkResult ret;
	_pre_call_vulkan_callback("vkMergePipelineCaches", (GLADapiproc)glad_vkMergePipelineCaches, 4, device, dstCache, srcCacheCount, pSrcCaches);
	ret = glad_vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkMergePipelineCaches",
	                           (GLADapiproc)glad_vkMergePipelineCaches,
	                           4,
	                           device,
	                           dstCache,
	                           srcCacheCount,
	                           pSrcCaches);
	return ret;
}
PFN_vkMergePipelineCaches      glad_debug_vkMergePipelineCaches = glad_debug_impl_vkMergePipelineCaches;
PFN_vkMergeValidationCachesEXT glad_vkMergeValidationCachesEXT = NULL;
static VkResult GLAD_API_PTR   glad_debug_impl_vkMergeValidationCachesEXT(VkDevice                    device,
                                                                          VkValidationCacheEXT        dstCache,
                                                                          uint32_t                    srcCacheCount,
                                                                          const VkValidationCacheEXT *pSrcCaches) {
        VkResult ret;
        _pre_call_vulkan_callback("vkMergeValidationCachesEXT", (GLADapiproc)glad_vkMergeValidationCachesEXT, 4, device, dstCache, srcCacheCount, pSrcCaches);
        ret = glad_vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkMergeValidationCachesEXT",
                                   (GLADapiproc)glad_vkMergeValidationCachesEXT,
                                   4,
                                   device,
                                   dstCache,
                                   srcCacheCount,
                                   pSrcCaches);
        return ret;
}
PFN_vkMergeValidationCachesEXT     glad_debug_vkMergeValidationCachesEXT = glad_debug_impl_vkMergeValidationCachesEXT;
PFN_vkQueueBeginDebugUtilsLabelEXT glad_vkQueueBeginDebugUtilsLabelEXT = NULL;
static void GLAD_API_PTR           glad_debug_impl_vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo) {
        _pre_call_vulkan_callback("vkQueueBeginDebugUtilsLabelEXT", (GLADapiproc)glad_vkQueueBeginDebugUtilsLabelEXT, 2, queue, pLabelInfo);
        glad_vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
        _post_call_vulkan_callback(NULL, "vkQueueBeginDebugUtilsLabelEXT", (GLADapiproc)glad_vkQueueBeginDebugUtilsLabelEXT, 2, queue, pLabelInfo);
}
PFN_vkQueueBeginDebugUtilsLabelEXT glad_debug_vkQueueBeginDebugUtilsLabelEXT = glad_debug_impl_vkQueueBeginDebugUtilsLabelEXT;
PFN_vkQueueBindSparse              glad_vkQueueBindSparse = NULL;
static VkResult GLAD_API_PTR       glad_debug_impl_vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo *pBindInfo, VkFence fence) {
        VkResult ret;
        _pre_call_vulkan_callback("vkQueueBindSparse", (GLADapiproc)glad_vkQueueBindSparse, 4, queue, bindInfoCount, pBindInfo, fence);
        ret = glad_vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
        _post_call_vulkan_callback((void *)&ret, "vkQueueBindSparse", (GLADapiproc)glad_vkQueueBindSparse, 4, queue, bindInfoCount, pBindInfo, fence);
        return ret;
}
PFN_vkQueueBindSparse            glad_debug_vkQueueBindSparse = glad_debug_impl_vkQueueBindSparse;
PFN_vkQueueEndDebugUtilsLabelEXT glad_vkQueueEndDebugUtilsLabelEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkQueueEndDebugUtilsLabelEXT(VkQueue queue) {
        _pre_call_vulkan_callback("vkQueueEndDebugUtilsLabelEXT", (GLADapiproc)glad_vkQueueEndDebugUtilsLabelEXT, 1, queue);
        glad_vkQueueEndDebugUtilsLabelEXT(queue);
        _post_call_vulkan_callback(NULL, "vkQueueEndDebugUtilsLabelEXT", (GLADapiproc)glad_vkQueueEndDebugUtilsLabelEXT, 1, queue);
}
PFN_vkQueueEndDebugUtilsLabelEXT    glad_debug_vkQueueEndDebugUtilsLabelEXT = glad_debug_impl_vkQueueEndDebugUtilsLabelEXT;
PFN_vkQueueInsertDebugUtilsLabelEXT glad_vkQueueInsertDebugUtilsLabelEXT = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo) {
        _pre_call_vulkan_callback("vkQueueInsertDebugUtilsLabelEXT", (GLADapiproc)glad_vkQueueInsertDebugUtilsLabelEXT, 2, queue, pLabelInfo);
        glad_vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
        _post_call_vulkan_callback(NULL, "vkQueueInsertDebugUtilsLabelEXT", (GLADapiproc)glad_vkQueueInsertDebugUtilsLabelEXT, 2, queue, pLabelInfo);
}
PFN_vkQueueInsertDebugUtilsLabelEXT glad_debug_vkQueueInsertDebugUtilsLabelEXT = glad_debug_impl_vkQueueInsertDebugUtilsLabelEXT;
PFN_vkQueueNotifyOutOfBandNV        glad_vkQueueNotifyOutOfBandNV = NULL;
static void GLAD_API_PTR            glad_debug_impl_vkQueueNotifyOutOfBandNV(VkQueue queue, VkOutOfBandQueueTypeInfoNV pQueueTypeInfo) {
        _pre_call_vulkan_callback("vkQueueNotifyOutOfBandNV", (GLADapiproc)glad_vkQueueNotifyOutOfBandNV, 2, queue, pQueueTypeInfo);
        glad_vkQueueNotifyOutOfBandNV(queue, pQueueTypeInfo);
        _post_call_vulkan_callback(NULL, "vkQueueNotifyOutOfBandNV", (GLADapiproc)glad_vkQueueNotifyOutOfBandNV, 2, queue, pQueueTypeInfo);
}
PFN_vkQueueNotifyOutOfBandNV glad_debug_vkQueueNotifyOutOfBandNV = glad_debug_impl_vkQueueNotifyOutOfBandNV;
PFN_vkQueuePresentKHR        glad_vkQueuePresentKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR *pPresentInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkQueuePresentKHR", (GLADapiproc)glad_vkQueuePresentKHR, 2, queue, pPresentInfo);
	ret = glad_vkQueuePresentKHR(queue, pPresentInfo);
	_post_call_vulkan_callback((void *)&ret, "vkQueuePresentKHR", (GLADapiproc)glad_vkQueuePresentKHR, 2, queue, pPresentInfo);
	return ret;
}
PFN_vkQueuePresentKHR                       glad_debug_vkQueuePresentKHR = glad_debug_impl_vkQueuePresentKHR;
PFN_vkQueueSetPerformanceConfigurationINTEL glad_vkQueueSetPerformanceConfigurationINTEL = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration) {
	VkResult ret;
	_pre_call_vulkan_callback("vkQueueSetPerformanceConfigurationINTEL",
	                          (GLADapiproc)glad_vkQueueSetPerformanceConfigurationINTEL,
	                          2,
	                          queue,
	                          configuration);
	ret = glad_vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkQueueSetPerformanceConfigurationINTEL",
	                           (GLADapiproc)glad_vkQueueSetPerformanceConfigurationINTEL,
	                           2,
	                           queue,
	                           configuration);
	return ret;
}
PFN_vkQueueSetPerformanceConfigurationINTEL glad_debug_vkQueueSetPerformanceConfigurationINTEL = glad_debug_impl_vkQueueSetPerformanceConfigurationINTEL;
PFN_vkQueueSubmit                           glad_vkQueueSubmit = NULL;
static VkResult GLAD_API_PTR                glad_debug_impl_vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo *pSubmits, VkFence fence) {
        VkResult ret;
        _pre_call_vulkan_callback("vkQueueSubmit", (GLADapiproc)glad_vkQueueSubmit, 4, queue, submitCount, pSubmits, fence);
        ret = glad_vkQueueSubmit(queue, submitCount, pSubmits, fence);
        _post_call_vulkan_callback((void *)&ret, "vkQueueSubmit", (GLADapiproc)glad_vkQueueSubmit, 4, queue, submitCount, pSubmits, fence);
        return ret;
}
PFN_vkQueueSubmit            glad_debug_vkQueueSubmit = glad_debug_impl_vkQueueSubmit;
PFN_vkQueueSubmit2           glad_vkQueueSubmit2 = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence) {
	VkResult ret;
	_pre_call_vulkan_callback("vkQueueSubmit2", (GLADapiproc)glad_vkQueueSubmit2, 4, queue, submitCount, pSubmits, fence);
	ret = glad_vkQueueSubmit2(queue, submitCount, pSubmits, fence);
	_post_call_vulkan_callback((void *)&ret, "vkQueueSubmit2", (GLADapiproc)glad_vkQueueSubmit2, 4, queue, submitCount, pSubmits, fence);
	return ret;
}
PFN_vkQueueSubmit2           glad_debug_vkQueueSubmit2 = glad_debug_impl_vkQueueSubmit2;
PFN_vkQueueSubmit2KHR        glad_vkQueueSubmit2KHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence) {
	VkResult ret;
	_pre_call_vulkan_callback("vkQueueSubmit2KHR", (GLADapiproc)glad_vkQueueSubmit2KHR, 4, queue, submitCount, pSubmits, fence);
	ret = glad_vkQueueSubmit2KHR(queue, submitCount, pSubmits, fence);
	_post_call_vulkan_callback((void *)&ret, "vkQueueSubmit2KHR", (GLADapiproc)glad_vkQueueSubmit2KHR, 4, queue, submitCount, pSubmits, fence);
	return ret;
}
PFN_vkQueueSubmit2KHR        glad_debug_vkQueueSubmit2KHR = glad_debug_impl_vkQueueSubmit2KHR;
PFN_vkQueueWaitIdle          glad_vkQueueWaitIdle = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkQueueWaitIdle(VkQueue queue) {
	VkResult ret;
	_pre_call_vulkan_callback("vkQueueWaitIdle", (GLADapiproc)glad_vkQueueWaitIdle, 1, queue);
	ret = glad_vkQueueWaitIdle(queue);
	_post_call_vulkan_callback((void *)&ret, "vkQueueWaitIdle", (GLADapiproc)glad_vkQueueWaitIdle, 1, queue);
	return ret;
}
PFN_vkQueueWaitIdle          glad_debug_vkQueueWaitIdle = glad_debug_impl_vkQueueWaitIdle;
PFN_vkRegisterDeviceEventEXT glad_vkRegisterDeviceEventEXT = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkRegisterDeviceEventEXT(VkDevice                     device,
                                                                      const VkDeviceEventInfoEXT  *pDeviceEventInfo,
                                                                      const VkAllocationCallbacks *pAllocator,
                                                                      VkFence                     *pFence) {
	VkResult ret;
	_pre_call_vulkan_callback("vkRegisterDeviceEventEXT", (GLADapiproc)glad_vkRegisterDeviceEventEXT, 4, device, pDeviceEventInfo, pAllocator, pFence);
	ret = glad_vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkRegisterDeviceEventEXT",
	                           (GLADapiproc)glad_vkRegisterDeviceEventEXT,
	                           4,
	                           device,
	                           pDeviceEventInfo,
	                           pAllocator,
	                           pFence);
	return ret;
}
PFN_vkRegisterDeviceEventEXT  glad_debug_vkRegisterDeviceEventEXT = glad_debug_impl_vkRegisterDeviceEventEXT;
PFN_vkRegisterDisplayEventEXT glad_vkRegisterDisplayEventEXT = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkRegisterDisplayEventEXT(VkDevice                     device,
                                                                        VkDisplayKHR                 display,
                                                                        const VkDisplayEventInfoEXT *pDisplayEventInfo,
                                                                        const VkAllocationCallbacks *pAllocator,
                                                                        VkFence                     *pFence) {
        VkResult ret;
        _pre_call_vulkan_callback("vkRegisterDisplayEventEXT",
                                  (GLADapiproc)glad_vkRegisterDisplayEventEXT,
                                  5,
                                  device,
                                  display,
                                  pDisplayEventInfo,
                                  pAllocator,
                                  pFence);
        ret = glad_vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkRegisterDisplayEventEXT",
                                   (GLADapiproc)glad_vkRegisterDisplayEventEXT,
                                   5,
                                   device,
                                   display,
                                   pDisplayEventInfo,
                                   pAllocator,
                                   pFence);
        return ret;
}
PFN_vkRegisterDisplayEventEXT glad_debug_vkRegisterDisplayEventEXT = glad_debug_impl_vkRegisterDisplayEventEXT;
PFN_vkReleaseDisplayEXT       glad_vkReleaseDisplayEXT = NULL;
static VkResult GLAD_API_PTR  glad_debug_impl_vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display) {
        VkResult ret;
        _pre_call_vulkan_callback("vkReleaseDisplayEXT", (GLADapiproc)glad_vkReleaseDisplayEXT, 2, physicalDevice, display);
        ret = glad_vkReleaseDisplayEXT(physicalDevice, display);
        _post_call_vulkan_callback((void *)&ret, "vkReleaseDisplayEXT", (GLADapiproc)glad_vkReleaseDisplayEXT, 2, physicalDevice, display);
        return ret;
}
PFN_vkReleaseDisplayEXT glad_debug_vkReleaseDisplayEXT = glad_debug_impl_vkReleaseDisplayEXT;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
PFN_vkReleaseFullScreenExclusiveModeEXT glad_vkReleaseFullScreenExclusiveModeEXT = NULL;
static VkResult GLAD_API_PTR            glad_debug_impl_vkReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) {
        VkResult ret;
        _pre_call_vulkan_callback("vkReleaseFullScreenExclusiveModeEXT", (GLADapiproc)glad_vkReleaseFullScreenExclusiveModeEXT, 2, device, swapchain);
        ret = glad_vkReleaseFullScreenExclusiveModeEXT(device, swapchain);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkReleaseFullScreenExclusiveModeEXT",
                                   (GLADapiproc)glad_vkReleaseFullScreenExclusiveModeEXT,
                                   2,
                                   device,
                                   swapchain);
        return ret;
}
PFN_vkReleaseFullScreenExclusiveModeEXT glad_debug_vkReleaseFullScreenExclusiveModeEXT = glad_debug_impl_vkReleaseFullScreenExclusiveModeEXT;

#endif
PFN_vkReleasePerformanceConfigurationINTEL glad_vkReleasePerformanceConfigurationINTEL = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration) {
	VkResult ret;
	_pre_call_vulkan_callback("vkReleasePerformanceConfigurationINTEL", (GLADapiproc)glad_vkReleasePerformanceConfigurationINTEL, 2, device, configuration);
	ret = glad_vkReleasePerformanceConfigurationINTEL(device, configuration);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkReleasePerformanceConfigurationINTEL",
	                           (GLADapiproc)glad_vkReleasePerformanceConfigurationINTEL,
	                           2,
	                           device,
	                           configuration);
	return ret;
}
PFN_vkReleasePerformanceConfigurationINTEL glad_debug_vkReleasePerformanceConfigurationINTEL = glad_debug_impl_vkReleasePerformanceConfigurationINTEL;
PFN_vkReleaseProfilingLockKHR              glad_vkReleaseProfilingLockKHR = NULL;
static void GLAD_API_PTR                   glad_debug_impl_vkReleaseProfilingLockKHR(VkDevice device) {
        _pre_call_vulkan_callback("vkReleaseProfilingLockKHR", (GLADapiproc)glad_vkReleaseProfilingLockKHR, 1, device);
        glad_vkReleaseProfilingLockKHR(device);
        _post_call_vulkan_callback(NULL, "vkReleaseProfilingLockKHR", (GLADapiproc)glad_vkReleaseProfilingLockKHR, 1, device);
}
PFN_vkReleaseProfilingLockKHR   glad_debug_vkReleaseProfilingLockKHR = glad_debug_impl_vkReleaseProfilingLockKHR;
PFN_vkReleaseSwapchainImagesEXT glad_vkReleaseSwapchainImagesEXT = NULL;
static VkResult GLAD_API_PTR    glad_debug_impl_vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT *pReleaseInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkReleaseSwapchainImagesEXT", (GLADapiproc)glad_vkReleaseSwapchainImagesEXT, 2, device, pReleaseInfo);
        ret = glad_vkReleaseSwapchainImagesEXT(device, pReleaseInfo);
        _post_call_vulkan_callback((void *)&ret, "vkReleaseSwapchainImagesEXT", (GLADapiproc)glad_vkReleaseSwapchainImagesEXT, 2, device, pReleaseInfo);
        return ret;
}
PFN_vkReleaseSwapchainImagesEXT glad_debug_vkReleaseSwapchainImagesEXT = glad_debug_impl_vkReleaseSwapchainImagesEXT;
PFN_vkResetCommandBuffer        glad_vkResetCommandBuffer = NULL;
static VkResult GLAD_API_PTR    glad_debug_impl_vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) {
        VkResult ret;
        _pre_call_vulkan_callback("vkResetCommandBuffer", (GLADapiproc)glad_vkResetCommandBuffer, 2, commandBuffer, flags);
        ret = glad_vkResetCommandBuffer(commandBuffer, flags);
        _post_call_vulkan_callback((void *)&ret, "vkResetCommandBuffer", (GLADapiproc)glad_vkResetCommandBuffer, 2, commandBuffer, flags);
        return ret;
}
PFN_vkResetCommandBuffer     glad_debug_vkResetCommandBuffer = glad_debug_impl_vkResetCommandBuffer;
PFN_vkResetCommandPool       glad_vkResetCommandPool = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) {
	VkResult ret;
	_pre_call_vulkan_callback("vkResetCommandPool", (GLADapiproc)glad_vkResetCommandPool, 3, device, commandPool, flags);
	ret = glad_vkResetCommandPool(device, commandPool, flags);
	_post_call_vulkan_callback((void *)&ret, "vkResetCommandPool", (GLADapiproc)glad_vkResetCommandPool, 3, device, commandPool, flags);
	return ret;
}
PFN_vkResetCommandPool       glad_debug_vkResetCommandPool = glad_debug_impl_vkResetCommandPool;
PFN_vkResetDescriptorPool    glad_vkResetDescriptorPool = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) {
	VkResult ret;
	_pre_call_vulkan_callback("vkResetDescriptorPool", (GLADapiproc)glad_vkResetDescriptorPool, 3, device, descriptorPool, flags);
	ret = glad_vkResetDescriptorPool(device, descriptorPool, flags);
	_post_call_vulkan_callback((void *)&ret, "vkResetDescriptorPool", (GLADapiproc)glad_vkResetDescriptorPool, 3, device, descriptorPool, flags);
	return ret;
}
PFN_vkResetDescriptorPool    glad_debug_vkResetDescriptorPool = glad_debug_impl_vkResetDescriptorPool;
PFN_vkResetEvent             glad_vkResetEvent = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkResetEvent(VkDevice device, VkEvent event) {
	VkResult ret;
	_pre_call_vulkan_callback("vkResetEvent", (GLADapiproc)glad_vkResetEvent, 2, device, event);
	ret = glad_vkResetEvent(device, event);
	_post_call_vulkan_callback((void *)&ret, "vkResetEvent", (GLADapiproc)glad_vkResetEvent, 2, device, event);
	return ret;
}
PFN_vkResetEvent             glad_debug_vkResetEvent = glad_debug_impl_vkResetEvent;
PFN_vkResetFences            glad_vkResetFences = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences) {
	VkResult ret;
	_pre_call_vulkan_callback("vkResetFences", (GLADapiproc)glad_vkResetFences, 3, device, fenceCount, pFences);
	ret = glad_vkResetFences(device, fenceCount, pFences);
	_post_call_vulkan_callback((void *)&ret, "vkResetFences", (GLADapiproc)glad_vkResetFences, 3, device, fenceCount, pFences);
	return ret;
}
PFN_vkResetFences        glad_debug_vkResetFences = glad_debug_impl_vkResetFences;
PFN_vkResetQueryPool     glad_vkResetQueryPool = NULL;
static void GLAD_API_PTR glad_debug_impl_vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	_pre_call_vulkan_callback("vkResetQueryPool", (GLADapiproc)glad_vkResetQueryPool, 4, device, queryPool, firstQuery, queryCount);
	glad_vkResetQueryPool(device, queryPool, firstQuery, queryCount);
	_post_call_vulkan_callback(NULL, "vkResetQueryPool", (GLADapiproc)glad_vkResetQueryPool, 4, device, queryPool, firstQuery, queryCount);
}
PFN_vkResetQueryPool     glad_debug_vkResetQueryPool = glad_debug_impl_vkResetQueryPool;
PFN_vkResetQueryPoolEXT  glad_vkResetQueryPoolEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	_pre_call_vulkan_callback("vkResetQueryPoolEXT", (GLADapiproc)glad_vkResetQueryPoolEXT, 4, device, queryPool, firstQuery, queryCount);
	glad_vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
	_post_call_vulkan_callback(NULL, "vkResetQueryPoolEXT", (GLADapiproc)glad_vkResetQueryPoolEXT, 4, device, queryPool, firstQuery, queryCount);
}
PFN_vkResetQueryPoolEXT glad_debug_vkResetQueryPoolEXT = glad_debug_impl_vkResetQueryPoolEXT;
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA glad_vkSetBufferCollectionBufferConstraintsFUCHSIA = NULL;
static VkResult GLAD_API_PTR                      glad_debug_impl_vkSetBufferCollectionBufferConstraintsFUCHSIA(VkDevice                              device,
                                                                                                                VkBufferCollectionFUCHSIA             collection,
                                                                                                                const VkBufferConstraintsInfoFUCHSIA *pBufferConstraintsInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkSetBufferCollectionBufferConstraintsFUCHSIA",
                                  (GLADapiproc)glad_vkSetBufferCollectionBufferConstraintsFUCHSIA,
                                  3,
                                  device,
                                  collection,
                                  pBufferConstraintsInfo);
        ret = glad_vkSetBufferCollectionBufferConstraintsFUCHSIA(device, collection, pBufferConstraintsInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkSetBufferCollectionBufferConstraintsFUCHSIA",
                                   (GLADapiproc)glad_vkSetBufferCollectionBufferConstraintsFUCHSIA,
                                   3,
                                   device,
                                   collection,
                                   pBufferConstraintsInfo);
        return ret;
}
PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA glad_debug_vkSetBufferCollectionBufferConstraintsFUCHSIA =
	glad_debug_impl_vkSetBufferCollectionBufferConstraintsFUCHSIA;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
PFN_vkSetBufferCollectionImageConstraintsFUCHSIA glad_vkSetBufferCollectionImageConstraintsFUCHSIA = NULL;
static VkResult GLAD_API_PTR                     glad_debug_impl_vkSetBufferCollectionImageConstraintsFUCHSIA(VkDevice                             device,
                                                                                                              VkBufferCollectionFUCHSIA            collection,
                                                                                                              const VkImageConstraintsInfoFUCHSIA *pImageConstraintsInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkSetBufferCollectionImageConstraintsFUCHSIA",
                                  (GLADapiproc)glad_vkSetBufferCollectionImageConstraintsFUCHSIA,
                                  3,
                                  device,
                                  collection,
                                  pImageConstraintsInfo);
        ret = glad_vkSetBufferCollectionImageConstraintsFUCHSIA(device, collection, pImageConstraintsInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkSetBufferCollectionImageConstraintsFUCHSIA",
                                   (GLADapiproc)glad_vkSetBufferCollectionImageConstraintsFUCHSIA,
                                   3,
                                   device,
                                   collection,
                                   pImageConstraintsInfo);
        return ret;
}
PFN_vkSetBufferCollectionImageConstraintsFUCHSIA glad_debug_vkSetBufferCollectionImageConstraintsFUCHSIA =
	glad_debug_impl_vkSetBufferCollectionImageConstraintsFUCHSIA;

#endif
PFN_vkSetDebugUtilsObjectNameEXT glad_vkSetDebugUtilsObjectNameEXT = NULL;
static VkResult GLAD_API_PTR     glad_debug_impl_vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT *pNameInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkSetDebugUtilsObjectNameEXT", (GLADapiproc)glad_vkSetDebugUtilsObjectNameEXT, 2, device, pNameInfo);
        ret = glad_vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
        _post_call_vulkan_callback((void *)&ret, "vkSetDebugUtilsObjectNameEXT", (GLADapiproc)glad_vkSetDebugUtilsObjectNameEXT, 2, device, pNameInfo);
        return ret;
}
PFN_vkSetDebugUtilsObjectNameEXT glad_debug_vkSetDebugUtilsObjectNameEXT = glad_debug_impl_vkSetDebugUtilsObjectNameEXT;
PFN_vkSetDebugUtilsObjectTagEXT  glad_vkSetDebugUtilsObjectTagEXT = NULL;
static VkResult GLAD_API_PTR     glad_debug_impl_vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT *pTagInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkSetDebugUtilsObjectTagEXT", (GLADapiproc)glad_vkSetDebugUtilsObjectTagEXT, 2, device, pTagInfo);
        ret = glad_vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
        _post_call_vulkan_callback((void *)&ret, "vkSetDebugUtilsObjectTagEXT", (GLADapiproc)glad_vkSetDebugUtilsObjectTagEXT, 2, device, pTagInfo);
        return ret;
}
PFN_vkSetDebugUtilsObjectTagEXT  glad_debug_vkSetDebugUtilsObjectTagEXT = glad_debug_impl_vkSetDebugUtilsObjectTagEXT;
PFN_vkSetDeviceMemoryPriorityEXT glad_vkSetDeviceMemoryPriorityEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority) {
        _pre_call_vulkan_callback("vkSetDeviceMemoryPriorityEXT", (GLADapiproc)glad_vkSetDeviceMemoryPriorityEXT, 3, device, memory, priority);
        glad_vkSetDeviceMemoryPriorityEXT(device, memory, priority);
        _post_call_vulkan_callback(NULL, "vkSetDeviceMemoryPriorityEXT", (GLADapiproc)glad_vkSetDeviceMemoryPriorityEXT, 3, device, memory, priority);
}
PFN_vkSetDeviceMemoryPriorityEXT glad_debug_vkSetDeviceMemoryPriorityEXT = glad_debug_impl_vkSetDeviceMemoryPriorityEXT;
PFN_vkSetEvent                   glad_vkSetEvent = NULL;
static VkResult GLAD_API_PTR     glad_debug_impl_vkSetEvent(VkDevice device, VkEvent event) {
        VkResult ret;
        _pre_call_vulkan_callback("vkSetEvent", (GLADapiproc)glad_vkSetEvent, 2, device, event);
        ret = glad_vkSetEvent(device, event);
        _post_call_vulkan_callback((void *)&ret, "vkSetEvent", (GLADapiproc)glad_vkSetEvent, 2, device, event);
        return ret;
}
PFN_vkSetEvent           glad_debug_vkSetEvent = glad_debug_impl_vkSetEvent;
PFN_vkSetHdrMetadataEXT  glad_vkSetHdrMetadataEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_vkSetHdrMetadataEXT(VkDevice                device,
                                                             uint32_t                swapchainCount,
                                                             const VkSwapchainKHR   *pSwapchains,
                                                             const VkHdrMetadataEXT *pMetadata) {
	_pre_call_vulkan_callback("vkSetHdrMetadataEXT", (GLADapiproc)glad_vkSetHdrMetadataEXT, 4, device, swapchainCount, pSwapchains, pMetadata);
	glad_vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
	_post_call_vulkan_callback(NULL, "vkSetHdrMetadataEXT", (GLADapiproc)glad_vkSetHdrMetadataEXT, 4, device, swapchainCount, pSwapchains, pMetadata);
}
PFN_vkSetHdrMetadataEXT  glad_debug_vkSetHdrMetadataEXT = glad_debug_impl_vkSetHdrMetadataEXT;
PFN_vkSetLatencyMarkerNV glad_vkSetLatencyMarkerNV = NULL;
static void GLAD_API_PTR glad_debug_impl_vkSetLatencyMarkerNV(VkDevice device, VkSwapchainKHR swapchain, VkSetLatencyMarkerInfoNV *pLatencyMarkerInfo) {
	_pre_call_vulkan_callback("vkSetLatencyMarkerNV", (GLADapiproc)glad_vkSetLatencyMarkerNV, 3, device, swapchain, pLatencyMarkerInfo);
	glad_vkSetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);
	_post_call_vulkan_callback(NULL, "vkSetLatencyMarkerNV", (GLADapiproc)glad_vkSetLatencyMarkerNV, 3, device, swapchain, pLatencyMarkerInfo);
}
PFN_vkSetLatencyMarkerNV     glad_debug_vkSetLatencyMarkerNV = glad_debug_impl_vkSetLatencyMarkerNV;
PFN_vkSetLatencySleepModeNV  glad_vkSetLatencySleepModeNV = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkSetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepModeInfoNV *pSleepModeInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkSetLatencySleepModeNV", (GLADapiproc)glad_vkSetLatencySleepModeNV, 3, device, swapchain, pSleepModeInfo);
	ret = glad_vkSetLatencySleepModeNV(device, swapchain, pSleepModeInfo);
	_post_call_vulkan_callback((void *)&ret, "vkSetLatencySleepModeNV", (GLADapiproc)glad_vkSetLatencySleepModeNV, 3, device, swapchain, pSleepModeInfo);
	return ret;
}
PFN_vkSetLatencySleepModeNV glad_debug_vkSetLatencySleepModeNV = glad_debug_impl_vkSetLatencySleepModeNV;
PFN_vkSetLocalDimmingAMD    glad_vkSetLocalDimmingAMD = NULL;
static void GLAD_API_PTR    glad_debug_impl_vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable) {
        _pre_call_vulkan_callback("vkSetLocalDimmingAMD", (GLADapiproc)glad_vkSetLocalDimmingAMD, 3, device, swapChain, localDimmingEnable);
        glad_vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
        _post_call_vulkan_callback(NULL, "vkSetLocalDimmingAMD", (GLADapiproc)glad_vkSetLocalDimmingAMD, 3, device, swapChain, localDimmingEnable);
}
PFN_vkSetLocalDimmingAMD glad_debug_vkSetLocalDimmingAMD = glad_debug_impl_vkSetLocalDimmingAMD;
PFN_vkSetPrivateData     glad_vkSetPrivateData = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data) {
	VkResult ret;
	_pre_call_vulkan_callback("vkSetPrivateData", (GLADapiproc)glad_vkSetPrivateData, 5, device, objectType, objectHandle, privateDataSlot, data);
	ret = glad_vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkSetPrivateData",
	                           (GLADapiproc)glad_vkSetPrivateData,
	                           5,
	                           device,
	                           objectType,
	                           objectHandle,
	                           privateDataSlot,
	                           data);
	return ret;
}
PFN_vkSetPrivateData    glad_debug_vkSetPrivateData = glad_debug_impl_vkSetPrivateData;
PFN_vkSetPrivateDataEXT glad_vkSetPrivateDataEXT = NULL;
static VkResult GLAD_API_PTR
glad_debug_impl_vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data) {
	VkResult ret;
	_pre_call_vulkan_callback("vkSetPrivateDataEXT", (GLADapiproc)glad_vkSetPrivateDataEXT, 5, device, objectType, objectHandle, privateDataSlot, data);
	ret = glad_vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
	_post_call_vulkan_callback((void *)&ret,
	                           "vkSetPrivateDataEXT",
	                           (GLADapiproc)glad_vkSetPrivateDataEXT,
	                           5,
	                           device,
	                           objectType,
	                           objectHandle,
	                           privateDataSlot,
	                           data);
	return ret;
}
PFN_vkSetPrivateDataEXT      glad_debug_vkSetPrivateDataEXT = glad_debug_impl_vkSetPrivateDataEXT;
PFN_vkSignalSemaphore        glad_vkSignalSemaphore = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkSignalSemaphore", (GLADapiproc)glad_vkSignalSemaphore, 2, device, pSignalInfo);
	ret = glad_vkSignalSemaphore(device, pSignalInfo);
	_post_call_vulkan_callback((void *)&ret, "vkSignalSemaphore", (GLADapiproc)glad_vkSignalSemaphore, 2, device, pSignalInfo);
	return ret;
}
PFN_vkSignalSemaphore        glad_debug_vkSignalSemaphore = glad_debug_impl_vkSignalSemaphore;
PFN_vkSignalSemaphoreKHR     glad_vkSignalSemaphoreKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkSignalSemaphoreKHR", (GLADapiproc)glad_vkSignalSemaphoreKHR, 2, device, pSignalInfo);
	ret = glad_vkSignalSemaphoreKHR(device, pSignalInfo);
	_post_call_vulkan_callback((void *)&ret, "vkSignalSemaphoreKHR", (GLADapiproc)glad_vkSignalSemaphoreKHR, 2, device, pSignalInfo);
	return ret;
}
PFN_vkSignalSemaphoreKHR         glad_debug_vkSignalSemaphoreKHR = glad_debug_impl_vkSignalSemaphoreKHR;
PFN_vkSubmitDebugUtilsMessageEXT glad_vkSubmitDebugUtilsMessageEXT = NULL;
static void GLAD_API_PTR         glad_debug_impl_vkSubmitDebugUtilsMessageEXT(VkInstance                                  instance,
                                                                              VkDebugUtilsMessageSeverityFlagBitsEXT      messageSeverity,
                                                                              VkDebugUtilsMessageTypeFlagsEXT             messageTypes,
                                                                              const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData) {
        _pre_call_vulkan_callback("vkSubmitDebugUtilsMessageEXT",
                                  (GLADapiproc)glad_vkSubmitDebugUtilsMessageEXT,
                                  4,
                                  instance,
                                  messageSeverity,
                                  messageTypes,
                                  pCallbackData);
        glad_vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
        _post_call_vulkan_callback(NULL,
                                   "vkSubmitDebugUtilsMessageEXT",
                                   (GLADapiproc)glad_vkSubmitDebugUtilsMessageEXT,
                                   4,
                                   instance,
                                   messageSeverity,
                                   messageTypes,
                                   pCallbackData);
}
PFN_vkSubmitDebugUtilsMessageEXT glad_debug_vkSubmitDebugUtilsMessageEXT = glad_debug_impl_vkSubmitDebugUtilsMessageEXT;
PFN_vkTransitionImageLayoutEXT   glad_vkTransitionImageLayoutEXT = NULL;
static VkResult GLAD_API_PTR     glad_debug_impl_vkTransitionImageLayoutEXT(VkDevice                                  device,
                                                                            uint32_t                                  transitionCount,
                                                                            const VkHostImageLayoutTransitionInfoEXT *pTransitions) {
        VkResult ret;
        _pre_call_vulkan_callback("vkTransitionImageLayoutEXT", (GLADapiproc)glad_vkTransitionImageLayoutEXT, 3, device, transitionCount, pTransitions);
        ret = glad_vkTransitionImageLayoutEXT(device, transitionCount, pTransitions);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkTransitionImageLayoutEXT",
                                   (GLADapiproc)glad_vkTransitionImageLayoutEXT,
                                   3,
                                   device,
                                   transitionCount,
                                   pTransitions);
        return ret;
}
PFN_vkTransitionImageLayoutEXT glad_debug_vkTransitionImageLayoutEXT = glad_debug_impl_vkTransitionImageLayoutEXT;
PFN_vkTrimCommandPool          glad_vkTrimCommandPool = NULL;
static void GLAD_API_PTR       glad_debug_impl_vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) {
        _pre_call_vulkan_callback("vkTrimCommandPool", (GLADapiproc)glad_vkTrimCommandPool, 3, device, commandPool, flags);
        glad_vkTrimCommandPool(device, commandPool, flags);
        _post_call_vulkan_callback(NULL, "vkTrimCommandPool", (GLADapiproc)glad_vkTrimCommandPool, 3, device, commandPool, flags);
}
PFN_vkTrimCommandPool    glad_debug_vkTrimCommandPool = glad_debug_impl_vkTrimCommandPool;
PFN_vkTrimCommandPoolKHR glad_vkTrimCommandPoolKHR = NULL;
static void GLAD_API_PTR glad_debug_impl_vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) {
	_pre_call_vulkan_callback("vkTrimCommandPoolKHR", (GLADapiproc)glad_vkTrimCommandPoolKHR, 3, device, commandPool, flags);
	glad_vkTrimCommandPoolKHR(device, commandPool, flags);
	_post_call_vulkan_callback(NULL, "vkTrimCommandPoolKHR", (GLADapiproc)glad_vkTrimCommandPoolKHR, 3, device, commandPool, flags);
}
PFN_vkTrimCommandPoolKHR              glad_debug_vkTrimCommandPoolKHR = glad_debug_impl_vkTrimCommandPoolKHR;
PFN_vkUninitializePerformanceApiINTEL glad_vkUninitializePerformanceApiINTEL = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkUninitializePerformanceApiINTEL(VkDevice device) {
        _pre_call_vulkan_callback("vkUninitializePerformanceApiINTEL", (GLADapiproc)glad_vkUninitializePerformanceApiINTEL, 1, device);
        glad_vkUninitializePerformanceApiINTEL(device);
        _post_call_vulkan_callback(NULL, "vkUninitializePerformanceApiINTEL", (GLADapiproc)glad_vkUninitializePerformanceApiINTEL, 1, device);
}
PFN_vkUninitializePerformanceApiINTEL glad_debug_vkUninitializePerformanceApiINTEL = glad_debug_impl_vkUninitializePerformanceApiINTEL;
PFN_vkUnmapMemory                     glad_vkUnmapMemory = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkUnmapMemory(VkDevice device, VkDeviceMemory memory) {
        _pre_call_vulkan_callback("vkUnmapMemory", (GLADapiproc)glad_vkUnmapMemory, 2, device, memory);
        glad_vkUnmapMemory(device, memory);
        _post_call_vulkan_callback(NULL, "vkUnmapMemory", (GLADapiproc)glad_vkUnmapMemory, 2, device, memory);
}
PFN_vkUnmapMemory            glad_debug_vkUnmapMemory = glad_debug_impl_vkUnmapMemory;
PFN_vkUnmapMemory2KHR        glad_vkUnmapMemory2KHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR *pMemoryUnmapInfo) {
	VkResult ret;
	_pre_call_vulkan_callback("vkUnmapMemory2KHR", (GLADapiproc)glad_vkUnmapMemory2KHR, 2, device, pMemoryUnmapInfo);
	ret = glad_vkUnmapMemory2KHR(device, pMemoryUnmapInfo);
	_post_call_vulkan_callback((void *)&ret, "vkUnmapMemory2KHR", (GLADapiproc)glad_vkUnmapMemory2KHR, 2, device, pMemoryUnmapInfo);
	return ret;
}
PFN_vkUnmapMemory2KHR                 glad_debug_vkUnmapMemory2KHR = glad_debug_impl_vkUnmapMemory2KHR;
PFN_vkUpdateDescriptorSetWithTemplate glad_vkUpdateDescriptorSetWithTemplate = NULL;
static void GLAD_API_PTR              glad_debug_impl_vkUpdateDescriptorSetWithTemplate(VkDevice                   device,
                                                                                        VkDescriptorSet            descriptorSet,
                                                                                        VkDescriptorUpdateTemplate descriptorUpdateTemplate,
                                                                                        const void                *pData) {
        _pre_call_vulkan_callback("vkUpdateDescriptorSetWithTemplate",
                                  (GLADapiproc)glad_vkUpdateDescriptorSetWithTemplate,
                                  4,
                                  device,
                                  descriptorSet,
                                  descriptorUpdateTemplate,
                                  pData);
        glad_vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
        _post_call_vulkan_callback(NULL,
                                   "vkUpdateDescriptorSetWithTemplate",
                                   (GLADapiproc)glad_vkUpdateDescriptorSetWithTemplate,
                                   4,
                                   device,
                                   descriptorSet,
                                   descriptorUpdateTemplate,
                                   pData);
}
PFN_vkUpdateDescriptorSetWithTemplate    glad_debug_vkUpdateDescriptorSetWithTemplate = glad_debug_impl_vkUpdateDescriptorSetWithTemplate;
PFN_vkUpdateDescriptorSetWithTemplateKHR glad_vkUpdateDescriptorSetWithTemplateKHR = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkUpdateDescriptorSetWithTemplateKHR(VkDevice                   device,
                                                                                              VkDescriptorSet            descriptorSet,
                                                                                              VkDescriptorUpdateTemplate descriptorUpdateTemplate,
                                                                                              const void                *pData) {
        _pre_call_vulkan_callback("vkUpdateDescriptorSetWithTemplateKHR",
                                  (GLADapiproc)glad_vkUpdateDescriptorSetWithTemplateKHR,
                                  4,
                                  device,
                                  descriptorSet,
                                  descriptorUpdateTemplate,
                                  pData);
        glad_vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
        _post_call_vulkan_callback(NULL,
                                   "vkUpdateDescriptorSetWithTemplateKHR",
                                   (GLADapiproc)glad_vkUpdateDescriptorSetWithTemplateKHR,
                                   4,
                                   device,
                                   descriptorSet,
                                   descriptorUpdateTemplate,
                                   pData);
}
PFN_vkUpdateDescriptorSetWithTemplateKHR glad_debug_vkUpdateDescriptorSetWithTemplateKHR = glad_debug_impl_vkUpdateDescriptorSetWithTemplateKHR;
PFN_vkUpdateDescriptorSets               glad_vkUpdateDescriptorSets = NULL;
static void GLAD_API_PTR                 glad_debug_impl_vkUpdateDescriptorSets(VkDevice                    device,
                                                                                uint32_t                    descriptorWriteCount,
                                                                                const VkWriteDescriptorSet *pDescriptorWrites,
                                                                                uint32_t                    descriptorCopyCount,
                                                                                const VkCopyDescriptorSet  *pDescriptorCopies) {
        _pre_call_vulkan_callback("vkUpdateDescriptorSets",
                                  (GLADapiproc)glad_vkUpdateDescriptorSets,
                                  5,
                                  device,
                                  descriptorWriteCount,
                                  pDescriptorWrites,
                                  descriptorCopyCount,
                                  pDescriptorCopies);
        glad_vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
        _post_call_vulkan_callback(NULL,
                                   "vkUpdateDescriptorSets",
                                   (GLADapiproc)glad_vkUpdateDescriptorSets,
                                   5,
                                   device,
                                   descriptorWriteCount,
                                   pDescriptorWrites,
                                   descriptorCopyCount,
                                   pDescriptorCopies);
}
PFN_vkUpdateDescriptorSets            glad_debug_vkUpdateDescriptorSets = glad_debug_impl_vkUpdateDescriptorSets;
PFN_vkUpdateVideoSessionParametersKHR glad_vkUpdateVideoSessionParametersKHR = NULL;
static VkResult GLAD_API_PTR          glad_debug_impl_vkUpdateVideoSessionParametersKHR(VkDevice                                     device,
                                                                                        VkVideoSessionParametersKHR                  videoSessionParameters,
                                                                                        const VkVideoSessionParametersUpdateInfoKHR *pUpdateInfo) {
        VkResult ret;
        _pre_call_vulkan_callback("vkUpdateVideoSessionParametersKHR",
                                  (GLADapiproc)glad_vkUpdateVideoSessionParametersKHR,
                                  3,
                                  device,
                                  videoSessionParameters,
                                  pUpdateInfo);
        ret = glad_vkUpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkUpdateVideoSessionParametersKHR",
                                   (GLADapiproc)glad_vkUpdateVideoSessionParametersKHR,
                                   3,
                                   device,
                                   videoSessionParameters,
                                   pUpdateInfo);
        return ret;
}
PFN_vkUpdateVideoSessionParametersKHR glad_debug_vkUpdateVideoSessionParametersKHR = glad_debug_impl_vkUpdateVideoSessionParametersKHR;
PFN_vkWaitForFences                   glad_vkWaitForFences = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences, VkBool32 waitAll, uint64_t timeout) {
	VkResult ret;
	_pre_call_vulkan_callback("vkWaitForFences", (GLADapiproc)glad_vkWaitForFences, 5, device, fenceCount, pFences, waitAll, timeout);
	ret = glad_vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
	_post_call_vulkan_callback((void *)&ret, "vkWaitForFences", (GLADapiproc)glad_vkWaitForFences, 5, device, fenceCount, pFences, waitAll, timeout);
	return ret;
}
PFN_vkWaitForFences          glad_debug_vkWaitForFences = glad_debug_impl_vkWaitForFences;
PFN_vkWaitForPresentKHR      glad_vkWaitForPresentKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout) {
	VkResult ret;
	_pre_call_vulkan_callback("vkWaitForPresentKHR", (GLADapiproc)glad_vkWaitForPresentKHR, 4, device, swapchain, presentId, timeout);
	ret = glad_vkWaitForPresentKHR(device, swapchain, presentId, timeout);
	_post_call_vulkan_callback((void *)&ret, "vkWaitForPresentKHR", (GLADapiproc)glad_vkWaitForPresentKHR, 4, device, swapchain, presentId, timeout);
	return ret;
}
PFN_vkWaitForPresentKHR      glad_debug_vkWaitForPresentKHR = glad_debug_impl_vkWaitForPresentKHR;
PFN_vkWaitSemaphores         glad_vkWaitSemaphores = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout) {
	VkResult ret;
	_pre_call_vulkan_callback("vkWaitSemaphores", (GLADapiproc)glad_vkWaitSemaphores, 3, device, pWaitInfo, timeout);
	ret = glad_vkWaitSemaphores(device, pWaitInfo, timeout);
	_post_call_vulkan_callback((void *)&ret, "vkWaitSemaphores", (GLADapiproc)glad_vkWaitSemaphores, 3, device, pWaitInfo, timeout);
	return ret;
}
PFN_vkWaitSemaphores         glad_debug_vkWaitSemaphores = glad_debug_impl_vkWaitSemaphores;
PFN_vkWaitSemaphoresKHR      glad_vkWaitSemaphoresKHR = NULL;
static VkResult GLAD_API_PTR glad_debug_impl_vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout) {
	VkResult ret;
	_pre_call_vulkan_callback("vkWaitSemaphoresKHR", (GLADapiproc)glad_vkWaitSemaphoresKHR, 3, device, pWaitInfo, timeout);
	ret = glad_vkWaitSemaphoresKHR(device, pWaitInfo, timeout);
	_post_call_vulkan_callback((void *)&ret, "vkWaitSemaphoresKHR", (GLADapiproc)glad_vkWaitSemaphoresKHR, 3, device, pWaitInfo, timeout);
	return ret;
}
PFN_vkWaitSemaphoresKHR                        glad_debug_vkWaitSemaphoresKHR = glad_debug_impl_vkWaitSemaphoresKHR;
PFN_vkWriteAccelerationStructuresPropertiesKHR glad_vkWriteAccelerationStructuresPropertiesKHR = NULL;
static VkResult GLAD_API_PTR                   glad_debug_impl_vkWriteAccelerationStructuresPropertiesKHR(VkDevice                          device,
                                                                                                          uint32_t                          accelerationStructureCount,
                                                                                                          const VkAccelerationStructureKHR *pAccelerationStructures,
                                                                                                          VkQueryType                       queryType,
                                                                                                          size_t                            dataSize,
                                                                                                          void                             *pData,
                                                                                                          size_t                            stride) {
        VkResult ret;
        _pre_call_vulkan_callback("vkWriteAccelerationStructuresPropertiesKHR",
                                  (GLADapiproc)glad_vkWriteAccelerationStructuresPropertiesKHR,
                                  7,
                                  device,
                                  accelerationStructureCount,
                                  pAccelerationStructures,
                                  queryType,
                                  dataSize,
                                  pData,
                                  stride);
        ret = glad_vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkWriteAccelerationStructuresPropertiesKHR",
                                   (GLADapiproc)glad_vkWriteAccelerationStructuresPropertiesKHR,
                                   7,
                                   device,
                                   accelerationStructureCount,
                                   pAccelerationStructures,
                                   queryType,
                                   dataSize,
                                   pData,
                                   stride);
        return ret;
}
PFN_vkWriteAccelerationStructuresPropertiesKHR glad_debug_vkWriteAccelerationStructuresPropertiesKHR =
	glad_debug_impl_vkWriteAccelerationStructuresPropertiesKHR;
PFN_vkWriteMicromapsPropertiesEXT glad_vkWriteMicromapsPropertiesEXT = NULL;
static VkResult GLAD_API_PTR      glad_debug_impl_vkWriteMicromapsPropertiesEXT(VkDevice             device,
                                                                                uint32_t             micromapCount,
                                                                                const VkMicromapEXT *pMicromaps,
                                                                                VkQueryType          queryType,
                                                                                size_t               dataSize,
                                                                                void                *pData,
                                                                                size_t               stride) {
        VkResult ret;
        _pre_call_vulkan_callback("vkWriteMicromapsPropertiesEXT",
                                  (GLADapiproc)glad_vkWriteMicromapsPropertiesEXT,
                                  7,
                                  device,
                                  micromapCount,
                                  pMicromaps,
                                  queryType,
                                  dataSize,
                                  pData,
                                  stride);
        ret = glad_vkWriteMicromapsPropertiesEXT(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
        _post_call_vulkan_callback((void *)&ret,
                                   "vkWriteMicromapsPropertiesEXT",
                                   (GLADapiproc)glad_vkWriteMicromapsPropertiesEXT,
                                   7,
                                   device,
                                   micromapCount,
                                   pMicromaps,
                                   queryType,
                                   dataSize,
                                   pData,
                                   stride);
        return ret;
}
PFN_vkWriteMicromapsPropertiesEXT glad_debug_vkWriteMicromapsPropertiesEXT = glad_debug_impl_vkWriteMicromapsPropertiesEXT;


static void glad_vk_load_VK_VERSION_1_0(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_VERSION_1_0)
		return;
	glad_vkAllocateCommandBuffers = (PFN_vkAllocateCommandBuffers)load(userptr, "vkAllocateCommandBuffers");
	glad_vkAllocateDescriptorSets = (PFN_vkAllocateDescriptorSets)load(userptr, "vkAllocateDescriptorSets");
	glad_vkAllocateMemory = (PFN_vkAllocateMemory)load(userptr, "vkAllocateMemory");
	glad_vkBeginCommandBuffer = (PFN_vkBeginCommandBuffer)load(userptr, "vkBeginCommandBuffer");
	glad_vkBindBufferMemory = (PFN_vkBindBufferMemory)load(userptr, "vkBindBufferMemory");
	glad_vkBindImageMemory = (PFN_vkBindImageMemory)load(userptr, "vkBindImageMemory");
	glad_vkCmdBeginQuery = (PFN_vkCmdBeginQuery)load(userptr, "vkCmdBeginQuery");
	glad_vkCmdBeginRenderPass = (PFN_vkCmdBeginRenderPass)load(userptr, "vkCmdBeginRenderPass");
	glad_vkCmdBindDescriptorSets = (PFN_vkCmdBindDescriptorSets)load(userptr, "vkCmdBindDescriptorSets");
	glad_vkCmdBindIndexBuffer = (PFN_vkCmdBindIndexBuffer)load(userptr, "vkCmdBindIndexBuffer");
	glad_vkCmdBindPipeline = (PFN_vkCmdBindPipeline)load(userptr, "vkCmdBindPipeline");
	glad_vkCmdBindVertexBuffers = (PFN_vkCmdBindVertexBuffers)load(userptr, "vkCmdBindVertexBuffers");
	glad_vkCmdBlitImage = (PFN_vkCmdBlitImage)load(userptr, "vkCmdBlitImage");
	glad_vkCmdClearAttachments = (PFN_vkCmdClearAttachments)load(userptr, "vkCmdClearAttachments");
	glad_vkCmdClearColorImage = (PFN_vkCmdClearColorImage)load(userptr, "vkCmdClearColorImage");
	glad_vkCmdClearDepthStencilImage = (PFN_vkCmdClearDepthStencilImage)load(userptr, "vkCmdClearDepthStencilImage");
	glad_vkCmdCopyBuffer = (PFN_vkCmdCopyBuffer)load(userptr, "vkCmdCopyBuffer");
	glad_vkCmdCopyBufferToImage = (PFN_vkCmdCopyBufferToImage)load(userptr, "vkCmdCopyBufferToImage");
	glad_vkCmdCopyImage = (PFN_vkCmdCopyImage)load(userptr, "vkCmdCopyImage");
	glad_vkCmdCopyImageToBuffer = (PFN_vkCmdCopyImageToBuffer)load(userptr, "vkCmdCopyImageToBuffer");
	glad_vkCmdCopyQueryPoolResults = (PFN_vkCmdCopyQueryPoolResults)load(userptr, "vkCmdCopyQueryPoolResults");
	glad_vkCmdDispatch = (PFN_vkCmdDispatch)load(userptr, "vkCmdDispatch");
	glad_vkCmdDispatchIndirect = (PFN_vkCmdDispatchIndirect)load(userptr, "vkCmdDispatchIndirect");
	glad_vkCmdDraw = (PFN_vkCmdDraw)load(userptr, "vkCmdDraw");
	glad_vkCmdDrawIndexed = (PFN_vkCmdDrawIndexed)load(userptr, "vkCmdDrawIndexed");
	glad_vkCmdDrawIndexedIndirect = (PFN_vkCmdDrawIndexedIndirect)load(userptr, "vkCmdDrawIndexedIndirect");
	glad_vkCmdDrawIndirect = (PFN_vkCmdDrawIndirect)load(userptr, "vkCmdDrawIndirect");
	glad_vkCmdEndQuery = (PFN_vkCmdEndQuery)load(userptr, "vkCmdEndQuery");
	glad_vkCmdEndRenderPass = (PFN_vkCmdEndRenderPass)load(userptr, "vkCmdEndRenderPass");
	glad_vkCmdExecuteCommands = (PFN_vkCmdExecuteCommands)load(userptr, "vkCmdExecuteCommands");
	glad_vkCmdFillBuffer = (PFN_vkCmdFillBuffer)load(userptr, "vkCmdFillBuffer");
	glad_vkCmdNextSubpass = (PFN_vkCmdNextSubpass)load(userptr, "vkCmdNextSubpass");
	glad_vkCmdPipelineBarrier = (PFN_vkCmdPipelineBarrier)load(userptr, "vkCmdPipelineBarrier");
	glad_vkCmdPushConstants = (PFN_vkCmdPushConstants)load(userptr, "vkCmdPushConstants");
	glad_vkCmdResetEvent = (PFN_vkCmdResetEvent)load(userptr, "vkCmdResetEvent");
	glad_vkCmdResetQueryPool = (PFN_vkCmdResetQueryPool)load(userptr, "vkCmdResetQueryPool");
	glad_vkCmdResolveImage = (PFN_vkCmdResolveImage)load(userptr, "vkCmdResolveImage");
	glad_vkCmdSetBlendConstants = (PFN_vkCmdSetBlendConstants)load(userptr, "vkCmdSetBlendConstants");
	glad_vkCmdSetDepthBias = (PFN_vkCmdSetDepthBias)load(userptr, "vkCmdSetDepthBias");
	glad_vkCmdSetDepthBounds = (PFN_vkCmdSetDepthBounds)load(userptr, "vkCmdSetDepthBounds");
	glad_vkCmdSetEvent = (PFN_vkCmdSetEvent)load(userptr, "vkCmdSetEvent");
	glad_vkCmdSetLineWidth = (PFN_vkCmdSetLineWidth)load(userptr, "vkCmdSetLineWidth");
	glad_vkCmdSetScissor = (PFN_vkCmdSetScissor)load(userptr, "vkCmdSetScissor");
	glad_vkCmdSetStencilCompareMask = (PFN_vkCmdSetStencilCompareMask)load(userptr, "vkCmdSetStencilCompareMask");
	glad_vkCmdSetStencilReference = (PFN_vkCmdSetStencilReference)load(userptr, "vkCmdSetStencilReference");
	glad_vkCmdSetStencilWriteMask = (PFN_vkCmdSetStencilWriteMask)load(userptr, "vkCmdSetStencilWriteMask");
	glad_vkCmdSetViewport = (PFN_vkCmdSetViewport)load(userptr, "vkCmdSetViewport");
	glad_vkCmdUpdateBuffer = (PFN_vkCmdUpdateBuffer)load(userptr, "vkCmdUpdateBuffer");
	glad_vkCmdWaitEvents = (PFN_vkCmdWaitEvents)load(userptr, "vkCmdWaitEvents");
	glad_vkCmdWriteTimestamp = (PFN_vkCmdWriteTimestamp)load(userptr, "vkCmdWriteTimestamp");
	glad_vkCreateBuffer = (PFN_vkCreateBuffer)load(userptr, "vkCreateBuffer");
	glad_vkCreateBufferView = (PFN_vkCreateBufferView)load(userptr, "vkCreateBufferView");
	glad_vkCreateCommandPool = (PFN_vkCreateCommandPool)load(userptr, "vkCreateCommandPool");
	glad_vkCreateComputePipelines = (PFN_vkCreateComputePipelines)load(userptr, "vkCreateComputePipelines");
	glad_vkCreateDescriptorPool = (PFN_vkCreateDescriptorPool)load(userptr, "vkCreateDescriptorPool");
	glad_vkCreateDescriptorSetLayout = (PFN_vkCreateDescriptorSetLayout)load(userptr, "vkCreateDescriptorSetLayout");
	glad_vkCreateDevice = (PFN_vkCreateDevice)load(userptr, "vkCreateDevice");
	glad_vkCreateEvent = (PFN_vkCreateEvent)load(userptr, "vkCreateEvent");
	glad_vkCreateFence = (PFN_vkCreateFence)load(userptr, "vkCreateFence");
	glad_vkCreateFramebuffer = (PFN_vkCreateFramebuffer)load(userptr, "vkCreateFramebuffer");
	glad_vkCreateGraphicsPipelines = (PFN_vkCreateGraphicsPipelines)load(userptr, "vkCreateGraphicsPipelines");
	glad_vkCreateImage = (PFN_vkCreateImage)load(userptr, "vkCreateImage");
	glad_vkCreateImageView = (PFN_vkCreateImageView)load(userptr, "vkCreateImageView");
	glad_vkCreateInstance = (PFN_vkCreateInstance)load(userptr, "vkCreateInstance");
	glad_vkCreatePipelineCache = (PFN_vkCreatePipelineCache)load(userptr, "vkCreatePipelineCache");
	glad_vkCreatePipelineLayout = (PFN_vkCreatePipelineLayout)load(userptr, "vkCreatePipelineLayout");
	glad_vkCreateQueryPool = (PFN_vkCreateQueryPool)load(userptr, "vkCreateQueryPool");
	glad_vkCreateRenderPass = (PFN_vkCreateRenderPass)load(userptr, "vkCreateRenderPass");
	glad_vkCreateSampler = (PFN_vkCreateSampler)load(userptr, "vkCreateSampler");
	glad_vkCreateSemaphore = (PFN_vkCreateSemaphore)load(userptr, "vkCreateSemaphore");
	glad_vkCreateShaderModule = (PFN_vkCreateShaderModule)load(userptr, "vkCreateShaderModule");
	glad_vkDestroyBuffer = (PFN_vkDestroyBuffer)load(userptr, "vkDestroyBuffer");
	glad_vkDestroyBufferView = (PFN_vkDestroyBufferView)load(userptr, "vkDestroyBufferView");
	glad_vkDestroyCommandPool = (PFN_vkDestroyCommandPool)load(userptr, "vkDestroyCommandPool");
	glad_vkDestroyDescriptorPool = (PFN_vkDestroyDescriptorPool)load(userptr, "vkDestroyDescriptorPool");
	glad_vkDestroyDescriptorSetLayout = (PFN_vkDestroyDescriptorSetLayout)load(userptr, "vkDestroyDescriptorSetLayout");
	glad_vkDestroyDevice = (PFN_vkDestroyDevice)load(userptr, "vkDestroyDevice");
	glad_vkDestroyEvent = (PFN_vkDestroyEvent)load(userptr, "vkDestroyEvent");
	glad_vkDestroyFence = (PFN_vkDestroyFence)load(userptr, "vkDestroyFence");
	glad_vkDestroyFramebuffer = (PFN_vkDestroyFramebuffer)load(userptr, "vkDestroyFramebuffer");
	glad_vkDestroyImage = (PFN_vkDestroyImage)load(userptr, "vkDestroyImage");
	glad_vkDestroyImageView = (PFN_vkDestroyImageView)load(userptr, "vkDestroyImageView");
	glad_vkDestroyInstance = (PFN_vkDestroyInstance)load(userptr, "vkDestroyInstance");
	glad_vkDestroyPipeline = (PFN_vkDestroyPipeline)load(userptr, "vkDestroyPipeline");
	glad_vkDestroyPipelineCache = (PFN_vkDestroyPipelineCache)load(userptr, "vkDestroyPipelineCache");
	glad_vkDestroyPipelineLayout = (PFN_vkDestroyPipelineLayout)load(userptr, "vkDestroyPipelineLayout");
	glad_vkDestroyQueryPool = (PFN_vkDestroyQueryPool)load(userptr, "vkDestroyQueryPool");
	glad_vkDestroyRenderPass = (PFN_vkDestroyRenderPass)load(userptr, "vkDestroyRenderPass");
	glad_vkDestroySampler = (PFN_vkDestroySampler)load(userptr, "vkDestroySampler");
	glad_vkDestroySemaphore = (PFN_vkDestroySemaphore)load(userptr, "vkDestroySemaphore");
	glad_vkDestroyShaderModule = (PFN_vkDestroyShaderModule)load(userptr, "vkDestroyShaderModule");
	glad_vkDeviceWaitIdle = (PFN_vkDeviceWaitIdle)load(userptr, "vkDeviceWaitIdle");
	glad_vkEndCommandBuffer = (PFN_vkEndCommandBuffer)load(userptr, "vkEndCommandBuffer");
	glad_vkEnumerateDeviceExtensionProperties = (PFN_vkEnumerateDeviceExtensionProperties)load(userptr, "vkEnumerateDeviceExtensionProperties");
	glad_vkEnumerateDeviceLayerProperties = (PFN_vkEnumerateDeviceLayerProperties)load(userptr, "vkEnumerateDeviceLayerProperties");
	glad_vkEnumerateInstanceExtensionProperties = (PFN_vkEnumerateInstanceExtensionProperties)load(userptr, "vkEnumerateInstanceExtensionProperties");
	glad_vkEnumerateInstanceLayerProperties = (PFN_vkEnumerateInstanceLayerProperties)load(userptr, "vkEnumerateInstanceLayerProperties");
	glad_vkEnumeratePhysicalDevices = (PFN_vkEnumeratePhysicalDevices)load(userptr, "vkEnumeratePhysicalDevices");
	glad_vkFlushMappedMemoryRanges = (PFN_vkFlushMappedMemoryRanges)load(userptr, "vkFlushMappedMemoryRanges");
	glad_vkFreeCommandBuffers = (PFN_vkFreeCommandBuffers)load(userptr, "vkFreeCommandBuffers");
	glad_vkFreeDescriptorSets = (PFN_vkFreeDescriptorSets)load(userptr, "vkFreeDescriptorSets");
	glad_vkFreeMemory = (PFN_vkFreeMemory)load(userptr, "vkFreeMemory");
	glad_vkGetBufferMemoryRequirements = (PFN_vkGetBufferMemoryRequirements)load(userptr, "vkGetBufferMemoryRequirements");
	glad_vkGetDeviceMemoryCommitment = (PFN_vkGetDeviceMemoryCommitment)load(userptr, "vkGetDeviceMemoryCommitment");
	glad_vkGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr)load(userptr, "vkGetDeviceProcAddr");
	glad_vkGetDeviceQueue = (PFN_vkGetDeviceQueue)load(userptr, "vkGetDeviceQueue");
	glad_vkGetEventStatus = (PFN_vkGetEventStatus)load(userptr, "vkGetEventStatus");
	glad_vkGetFenceStatus = (PFN_vkGetFenceStatus)load(userptr, "vkGetFenceStatus");
	glad_vkGetImageMemoryRequirements = (PFN_vkGetImageMemoryRequirements)load(userptr, "vkGetImageMemoryRequirements");
	glad_vkGetImageSparseMemoryRequirements = (PFN_vkGetImageSparseMemoryRequirements)load(userptr, "vkGetImageSparseMemoryRequirements");
	glad_vkGetImageSubresourceLayout = (PFN_vkGetImageSubresourceLayout)load(userptr, "vkGetImageSubresourceLayout");
	glad_vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr)load(userptr, "vkGetInstanceProcAddr");
	glad_vkGetPhysicalDeviceFeatures = (PFN_vkGetPhysicalDeviceFeatures)load(userptr, "vkGetPhysicalDeviceFeatures");
	glad_vkGetPhysicalDeviceFormatProperties = (PFN_vkGetPhysicalDeviceFormatProperties)load(userptr, "vkGetPhysicalDeviceFormatProperties");
	glad_vkGetPhysicalDeviceImageFormatProperties = (PFN_vkGetPhysicalDeviceImageFormatProperties)load(userptr, "vkGetPhysicalDeviceImageFormatProperties");
	glad_vkGetPhysicalDeviceMemoryProperties = (PFN_vkGetPhysicalDeviceMemoryProperties)load(userptr, "vkGetPhysicalDeviceMemoryProperties");
	glad_vkGetPhysicalDeviceProperties = (PFN_vkGetPhysicalDeviceProperties)load(userptr, "vkGetPhysicalDeviceProperties");
	glad_vkGetPhysicalDeviceQueueFamilyProperties = (PFN_vkGetPhysicalDeviceQueueFamilyProperties)load(userptr, "vkGetPhysicalDeviceQueueFamilyProperties");
	glad_vkGetPhysicalDeviceSparseImageFormatProperties =
		(PFN_vkGetPhysicalDeviceSparseImageFormatProperties)load(userptr, "vkGetPhysicalDeviceSparseImageFormatProperties");
	glad_vkGetPipelineCacheData = (PFN_vkGetPipelineCacheData)load(userptr, "vkGetPipelineCacheData");
	glad_vkGetQueryPoolResults = (PFN_vkGetQueryPoolResults)load(userptr, "vkGetQueryPoolResults");
	glad_vkGetRenderAreaGranularity = (PFN_vkGetRenderAreaGranularity)load(userptr, "vkGetRenderAreaGranularity");
	glad_vkInvalidateMappedMemoryRanges = (PFN_vkInvalidateMappedMemoryRanges)load(userptr, "vkInvalidateMappedMemoryRanges");
	glad_vkMapMemory = (PFN_vkMapMemory)load(userptr, "vkMapMemory");
	glad_vkMergePipelineCaches = (PFN_vkMergePipelineCaches)load(userptr, "vkMergePipelineCaches");
	glad_vkQueueBindSparse = (PFN_vkQueueBindSparse)load(userptr, "vkQueueBindSparse");
	glad_vkQueueSubmit = (PFN_vkQueueSubmit)load(userptr, "vkQueueSubmit");
	glad_vkQueueWaitIdle = (PFN_vkQueueWaitIdle)load(userptr, "vkQueueWaitIdle");
	glad_vkResetCommandBuffer = (PFN_vkResetCommandBuffer)load(userptr, "vkResetCommandBuffer");
	glad_vkResetCommandPool = (PFN_vkResetCommandPool)load(userptr, "vkResetCommandPool");
	glad_vkResetDescriptorPool = (PFN_vkResetDescriptorPool)load(userptr, "vkResetDescriptorPool");
	glad_vkResetEvent = (PFN_vkResetEvent)load(userptr, "vkResetEvent");
	glad_vkResetFences = (PFN_vkResetFences)load(userptr, "vkResetFences");
	glad_vkSetEvent = (PFN_vkSetEvent)load(userptr, "vkSetEvent");
	glad_vkUnmapMemory = (PFN_vkUnmapMemory)load(userptr, "vkUnmapMemory");
	glad_vkUpdateDescriptorSets = (PFN_vkUpdateDescriptorSets)load(userptr, "vkUpdateDescriptorSets");
	glad_vkWaitForFences = (PFN_vkWaitForFences)load(userptr, "vkWaitForFences");
}
static void glad_vk_load_VK_VERSION_1_1(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_VERSION_1_1)
		return;
	glad_vkBindBufferMemory2 = (PFN_vkBindBufferMemory2)load(userptr, "vkBindBufferMemory2");
	glad_vkBindImageMemory2 = (PFN_vkBindImageMemory2)load(userptr, "vkBindImageMemory2");
	glad_vkCmdDispatchBase = (PFN_vkCmdDispatchBase)load(userptr, "vkCmdDispatchBase");
	glad_vkCmdSetDeviceMask = (PFN_vkCmdSetDeviceMask)load(userptr, "vkCmdSetDeviceMask");
	glad_vkCreateDescriptorUpdateTemplate = (PFN_vkCreateDescriptorUpdateTemplate)load(userptr, "vkCreateDescriptorUpdateTemplate");
	glad_vkCreateSamplerYcbcrConversion = (PFN_vkCreateSamplerYcbcrConversion)load(userptr, "vkCreateSamplerYcbcrConversion");
	glad_vkDestroyDescriptorUpdateTemplate = (PFN_vkDestroyDescriptorUpdateTemplate)load(userptr, "vkDestroyDescriptorUpdateTemplate");
	glad_vkDestroySamplerYcbcrConversion = (PFN_vkDestroySamplerYcbcrConversion)load(userptr, "vkDestroySamplerYcbcrConversion");
	glad_vkEnumerateInstanceVersion = (PFN_vkEnumerateInstanceVersion)load(userptr, "vkEnumerateInstanceVersion");
	glad_vkEnumeratePhysicalDeviceGroups = (PFN_vkEnumeratePhysicalDeviceGroups)load(userptr, "vkEnumeratePhysicalDeviceGroups");
	glad_vkGetBufferMemoryRequirements2 = (PFN_vkGetBufferMemoryRequirements2)load(userptr, "vkGetBufferMemoryRequirements2");
	glad_vkGetDescriptorSetLayoutSupport = (PFN_vkGetDescriptorSetLayoutSupport)load(userptr, "vkGetDescriptorSetLayoutSupport");
	glad_vkGetDeviceGroupPeerMemoryFeatures = (PFN_vkGetDeviceGroupPeerMemoryFeatures)load(userptr, "vkGetDeviceGroupPeerMemoryFeatures");
	glad_vkGetDeviceQueue2 = (PFN_vkGetDeviceQueue2)load(userptr, "vkGetDeviceQueue2");
	glad_vkGetImageMemoryRequirements2 = (PFN_vkGetImageMemoryRequirements2)load(userptr, "vkGetImageMemoryRequirements2");
	glad_vkGetImageSparseMemoryRequirements2 = (PFN_vkGetImageSparseMemoryRequirements2)load(userptr, "vkGetImageSparseMemoryRequirements2");
	glad_vkGetPhysicalDeviceExternalBufferProperties =
		(PFN_vkGetPhysicalDeviceExternalBufferProperties)load(userptr, "vkGetPhysicalDeviceExternalBufferProperties");
	glad_vkGetPhysicalDeviceExternalFenceProperties =
		(PFN_vkGetPhysicalDeviceExternalFenceProperties)load(userptr, "vkGetPhysicalDeviceExternalFenceProperties");
	glad_vkGetPhysicalDeviceExternalSemaphoreProperties =
		(PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)load(userptr, "vkGetPhysicalDeviceExternalSemaphoreProperties");
	glad_vkGetPhysicalDeviceFeatures2 = (PFN_vkGetPhysicalDeviceFeatures2)load(userptr, "vkGetPhysicalDeviceFeatures2");
	glad_vkGetPhysicalDeviceFormatProperties2 = (PFN_vkGetPhysicalDeviceFormatProperties2)load(userptr, "vkGetPhysicalDeviceFormatProperties2");
	glad_vkGetPhysicalDeviceImageFormatProperties2 =
		(PFN_vkGetPhysicalDeviceImageFormatProperties2)load(userptr, "vkGetPhysicalDeviceImageFormatProperties2");
	glad_vkGetPhysicalDeviceMemoryProperties2 = (PFN_vkGetPhysicalDeviceMemoryProperties2)load(userptr, "vkGetPhysicalDeviceMemoryProperties2");
	glad_vkGetPhysicalDeviceProperties2 = (PFN_vkGetPhysicalDeviceProperties2)load(userptr, "vkGetPhysicalDeviceProperties2");
	glad_vkGetPhysicalDeviceQueueFamilyProperties2 =
		(PFN_vkGetPhysicalDeviceQueueFamilyProperties2)load(userptr, "vkGetPhysicalDeviceQueueFamilyProperties2");
	glad_vkGetPhysicalDeviceSparseImageFormatProperties2 =
		(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)load(userptr, "vkGetPhysicalDeviceSparseImageFormatProperties2");
	glad_vkTrimCommandPool = (PFN_vkTrimCommandPool)load(userptr, "vkTrimCommandPool");
	glad_vkUpdateDescriptorSetWithTemplate = (PFN_vkUpdateDescriptorSetWithTemplate)load(userptr, "vkUpdateDescriptorSetWithTemplate");
}
static void glad_vk_load_VK_VERSION_1_2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_VERSION_1_2)
		return;
	glad_vkCmdBeginRenderPass2 = (PFN_vkCmdBeginRenderPass2)load(userptr, "vkCmdBeginRenderPass2");
	glad_vkCmdDrawIndexedIndirectCount = (PFN_vkCmdDrawIndexedIndirectCount)load(userptr, "vkCmdDrawIndexedIndirectCount");
	glad_vkCmdDrawIndirectCount = (PFN_vkCmdDrawIndirectCount)load(userptr, "vkCmdDrawIndirectCount");
	glad_vkCmdEndRenderPass2 = (PFN_vkCmdEndRenderPass2)load(userptr, "vkCmdEndRenderPass2");
	glad_vkCmdNextSubpass2 = (PFN_vkCmdNextSubpass2)load(userptr, "vkCmdNextSubpass2");
	glad_vkCreateRenderPass2 = (PFN_vkCreateRenderPass2)load(userptr, "vkCreateRenderPass2");
	glad_vkGetBufferDeviceAddress = (PFN_vkGetBufferDeviceAddress)load(userptr, "vkGetBufferDeviceAddress");
	glad_vkGetBufferOpaqueCaptureAddress = (PFN_vkGetBufferOpaqueCaptureAddress)load(userptr, "vkGetBufferOpaqueCaptureAddress");
	glad_vkGetDeviceMemoryOpaqueCaptureAddress = (PFN_vkGetDeviceMemoryOpaqueCaptureAddress)load(userptr, "vkGetDeviceMemoryOpaqueCaptureAddress");
	glad_vkGetSemaphoreCounterValue = (PFN_vkGetSemaphoreCounterValue)load(userptr, "vkGetSemaphoreCounterValue");
	glad_vkResetQueryPool = (PFN_vkResetQueryPool)load(userptr, "vkResetQueryPool");
	glad_vkSignalSemaphore = (PFN_vkSignalSemaphore)load(userptr, "vkSignalSemaphore");
	glad_vkWaitSemaphores = (PFN_vkWaitSemaphores)load(userptr, "vkWaitSemaphores");
}
static void glad_vk_load_VK_VERSION_1_3(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_VERSION_1_3)
		return;
	glad_vkCmdBeginRendering = (PFN_vkCmdBeginRendering)load(userptr, "vkCmdBeginRendering");
	glad_vkCmdBindVertexBuffers2 = (PFN_vkCmdBindVertexBuffers2)load(userptr, "vkCmdBindVertexBuffers2");
	glad_vkCmdBlitImage2 = (PFN_vkCmdBlitImage2)load(userptr, "vkCmdBlitImage2");
	glad_vkCmdCopyBuffer2 = (PFN_vkCmdCopyBuffer2)load(userptr, "vkCmdCopyBuffer2");
	glad_vkCmdCopyBufferToImage2 = (PFN_vkCmdCopyBufferToImage2)load(userptr, "vkCmdCopyBufferToImage2");
	glad_vkCmdCopyImage2 = (PFN_vkCmdCopyImage2)load(userptr, "vkCmdCopyImage2");
	glad_vkCmdCopyImageToBuffer2 = (PFN_vkCmdCopyImageToBuffer2)load(userptr, "vkCmdCopyImageToBuffer2");
	glad_vkCmdEndRendering = (PFN_vkCmdEndRendering)load(userptr, "vkCmdEndRendering");
	glad_vkCmdPipelineBarrier2 = (PFN_vkCmdPipelineBarrier2)load(userptr, "vkCmdPipelineBarrier2");
	glad_vkCmdResetEvent2 = (PFN_vkCmdResetEvent2)load(userptr, "vkCmdResetEvent2");
	glad_vkCmdResolveImage2 = (PFN_vkCmdResolveImage2)load(userptr, "vkCmdResolveImage2");
	glad_vkCmdSetCullMode = (PFN_vkCmdSetCullMode)load(userptr, "vkCmdSetCullMode");
	glad_vkCmdSetDepthBiasEnable = (PFN_vkCmdSetDepthBiasEnable)load(userptr, "vkCmdSetDepthBiasEnable");
	glad_vkCmdSetDepthBoundsTestEnable = (PFN_vkCmdSetDepthBoundsTestEnable)load(userptr, "vkCmdSetDepthBoundsTestEnable");
	glad_vkCmdSetDepthCompareOp = (PFN_vkCmdSetDepthCompareOp)load(userptr, "vkCmdSetDepthCompareOp");
	glad_vkCmdSetDepthTestEnable = (PFN_vkCmdSetDepthTestEnable)load(userptr, "vkCmdSetDepthTestEnable");
	glad_vkCmdSetDepthWriteEnable = (PFN_vkCmdSetDepthWriteEnable)load(userptr, "vkCmdSetDepthWriteEnable");
	glad_vkCmdSetEvent2 = (PFN_vkCmdSetEvent2)load(userptr, "vkCmdSetEvent2");
	glad_vkCmdSetFrontFace = (PFN_vkCmdSetFrontFace)load(userptr, "vkCmdSetFrontFace");
	glad_vkCmdSetPrimitiveRestartEnable = (PFN_vkCmdSetPrimitiveRestartEnable)load(userptr, "vkCmdSetPrimitiveRestartEnable");
	glad_vkCmdSetPrimitiveTopology = (PFN_vkCmdSetPrimitiveTopology)load(userptr, "vkCmdSetPrimitiveTopology");
	glad_vkCmdSetRasterizerDiscardEnable = (PFN_vkCmdSetRasterizerDiscardEnable)load(userptr, "vkCmdSetRasterizerDiscardEnable");
	glad_vkCmdSetScissorWithCount = (PFN_vkCmdSetScissorWithCount)load(userptr, "vkCmdSetScissorWithCount");
	glad_vkCmdSetStencilOp = (PFN_vkCmdSetStencilOp)load(userptr, "vkCmdSetStencilOp");
	glad_vkCmdSetStencilTestEnable = (PFN_vkCmdSetStencilTestEnable)load(userptr, "vkCmdSetStencilTestEnable");
	glad_vkCmdSetViewportWithCount = (PFN_vkCmdSetViewportWithCount)load(userptr, "vkCmdSetViewportWithCount");
	glad_vkCmdWaitEvents2 = (PFN_vkCmdWaitEvents2)load(userptr, "vkCmdWaitEvents2");
	glad_vkCmdWriteTimestamp2 = (PFN_vkCmdWriteTimestamp2)load(userptr, "vkCmdWriteTimestamp2");
	glad_vkCreatePrivateDataSlot = (PFN_vkCreatePrivateDataSlot)load(userptr, "vkCreatePrivateDataSlot");
	glad_vkDestroyPrivateDataSlot = (PFN_vkDestroyPrivateDataSlot)load(userptr, "vkDestroyPrivateDataSlot");
	glad_vkGetDeviceBufferMemoryRequirements = (PFN_vkGetDeviceBufferMemoryRequirements)load(userptr, "vkGetDeviceBufferMemoryRequirements");
	glad_vkGetDeviceImageMemoryRequirements = (PFN_vkGetDeviceImageMemoryRequirements)load(userptr, "vkGetDeviceImageMemoryRequirements");
	glad_vkGetDeviceImageSparseMemoryRequirements = (PFN_vkGetDeviceImageSparseMemoryRequirements)load(userptr, "vkGetDeviceImageSparseMemoryRequirements");
	glad_vkGetPhysicalDeviceToolProperties = (PFN_vkGetPhysicalDeviceToolProperties)load(userptr, "vkGetPhysicalDeviceToolProperties");
	glad_vkGetPrivateData = (PFN_vkGetPrivateData)load(userptr, "vkGetPrivateData");
	glad_vkQueueSubmit2 = (PFN_vkQueueSubmit2)load(userptr, "vkQueueSubmit2");
	glad_vkSetPrivateData = (PFN_vkSetPrivateData)load(userptr, "vkSetPrivateData");
}
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static void glad_vk_load_VK_AMDX_shader_enqueue(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_AMDX_shader_enqueue)
		return;
	glad_vkCmdDispatchGraphAMDX = (PFN_vkCmdDispatchGraphAMDX)load(userptr, "vkCmdDispatchGraphAMDX");
	glad_vkCmdDispatchGraphIndirectAMDX = (PFN_vkCmdDispatchGraphIndirectAMDX)load(userptr, "vkCmdDispatchGraphIndirectAMDX");
	glad_vkCmdDispatchGraphIndirectCountAMDX = (PFN_vkCmdDispatchGraphIndirectCountAMDX)load(userptr, "vkCmdDispatchGraphIndirectCountAMDX");
	glad_vkCmdInitializeGraphScratchMemoryAMDX = (PFN_vkCmdInitializeGraphScratchMemoryAMDX)load(userptr, "vkCmdInitializeGraphScratchMemoryAMDX");
	glad_vkCreateExecutionGraphPipelinesAMDX = (PFN_vkCreateExecutionGraphPipelinesAMDX)load(userptr, "vkCreateExecutionGraphPipelinesAMDX");
	glad_vkGetExecutionGraphPipelineNodeIndexAMDX = (PFN_vkGetExecutionGraphPipelineNodeIndexAMDX)load(userptr, "vkGetExecutionGraphPipelineNodeIndexAMDX");
	glad_vkGetExecutionGraphPipelineScratchSizeAMDX =
		(PFN_vkGetExecutionGraphPipelineScratchSizeAMDX)load(userptr, "vkGetExecutionGraphPipelineScratchSizeAMDX");
}

#endif
static void glad_vk_load_VK_AMD_buffer_marker(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_AMD_buffer_marker)
		return;
	glad_vkCmdWriteBufferMarkerAMD = (PFN_vkCmdWriteBufferMarkerAMD)load(userptr, "vkCmdWriteBufferMarkerAMD");
}
static void glad_vk_load_VK_AMD_display_native_hdr(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_AMD_display_native_hdr)
		return;
	glad_vkSetLocalDimmingAMD = (PFN_vkSetLocalDimmingAMD)load(userptr, "vkSetLocalDimmingAMD");
}
static void glad_vk_load_VK_AMD_draw_indirect_count(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_AMD_draw_indirect_count)
		return;
	glad_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD)load(userptr, "vkCmdDrawIndexedIndirectCountAMD");
	glad_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD)load(userptr, "vkCmdDrawIndirectCountAMD");
}
static void glad_vk_load_VK_AMD_shader_info(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_AMD_shader_info)
		return;
	glad_vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD)load(userptr, "vkGetShaderInfoAMD");
}
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static void glad_vk_load_VK_ANDROID_external_memory_android_hardware_buffer(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_ANDROID_external_memory_android_hardware_buffer)
		return;
	glad_vkGetAndroidHardwareBufferPropertiesANDROID =
		(PFN_vkGetAndroidHardwareBufferPropertiesANDROID)load(userptr, "vkGetAndroidHardwareBufferPropertiesANDROID");
	glad_vkGetMemoryAndroidHardwareBufferANDROID = (PFN_vkGetMemoryAndroidHardwareBufferANDROID)load(userptr, "vkGetMemoryAndroidHardwareBufferANDROID");
}

#endif
static void glad_vk_load_VK_EXT_acquire_drm_display(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_acquire_drm_display)
		return;
	glad_vkAcquireDrmDisplayEXT = (PFN_vkAcquireDrmDisplayEXT)load(userptr, "vkAcquireDrmDisplayEXT");
	glad_vkGetDrmDisplayEXT = (PFN_vkGetDrmDisplayEXT)load(userptr, "vkGetDrmDisplayEXT");
}
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
static void glad_vk_load_VK_EXT_acquire_xlib_display(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_acquire_xlib_display)
		return;
	glad_vkAcquireXlibDisplayEXT = (PFN_vkAcquireXlibDisplayEXT)load(userptr, "vkAcquireXlibDisplayEXT");
	glad_vkGetRandROutputDisplayEXT = (PFN_vkGetRandROutputDisplayEXT)load(userptr, "vkGetRandROutputDisplayEXT");
}

#endif
static void glad_vk_load_VK_EXT_attachment_feedback_loop_dynamic_state(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_attachment_feedback_loop_dynamic_state)
		return;
	glad_vkCmdSetAttachmentFeedbackLoopEnableEXT = (PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)load(userptr, "vkCmdSetAttachmentFeedbackLoopEnableEXT");
}
static void glad_vk_load_VK_EXT_buffer_device_address(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_buffer_device_address)
		return;
	glad_vkGetBufferDeviceAddressEXT = (PFN_vkGetBufferDeviceAddressEXT)load(userptr, "vkGetBufferDeviceAddressEXT");
}
static void glad_vk_load_VK_EXT_calibrated_timestamps(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_calibrated_timestamps)
		return;
	glad_vkGetCalibratedTimestampsEXT = (PFN_vkGetCalibratedTimestampsEXT)load(userptr, "vkGetCalibratedTimestampsEXT");
	glad_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT =
		(PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)load(userptr, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
}
static void glad_vk_load_VK_EXT_color_write_enable(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_color_write_enable)
		return;
	glad_vkCmdSetColorWriteEnableEXT = (PFN_vkCmdSetColorWriteEnableEXT)load(userptr, "vkCmdSetColorWriteEnableEXT");
}
static void glad_vk_load_VK_EXT_conditional_rendering(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_conditional_rendering)
		return;
	glad_vkCmdBeginConditionalRenderingEXT = (PFN_vkCmdBeginConditionalRenderingEXT)load(userptr, "vkCmdBeginConditionalRenderingEXT");
	glad_vkCmdEndConditionalRenderingEXT = (PFN_vkCmdEndConditionalRenderingEXT)load(userptr, "vkCmdEndConditionalRenderingEXT");
}
static void glad_vk_load_VK_EXT_debug_marker(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_debug_marker)
		return;
	glad_vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT)load(userptr, "vkCmdDebugMarkerBeginEXT");
	glad_vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT)load(userptr, "vkCmdDebugMarkerEndEXT");
	glad_vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT)load(userptr, "vkCmdDebugMarkerInsertEXT");
	glad_vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT)load(userptr, "vkDebugMarkerSetObjectNameEXT");
	glad_vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT)load(userptr, "vkDebugMarkerSetObjectTagEXT");
}
static void glad_vk_load_VK_EXT_debug_report(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_debug_report)
		return;
	glad_vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT)load(userptr, "vkCreateDebugReportCallbackEXT");
	glad_vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT)load(userptr, "vkDebugReportMessageEXT");
	glad_vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT)load(userptr, "vkDestroyDebugReportCallbackEXT");
}
static void glad_vk_load_VK_EXT_debug_utils(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_debug_utils)
		return;
	glad_vkCmdBeginDebugUtilsLabelEXT = (PFN_vkCmdBeginDebugUtilsLabelEXT)load(userptr, "vkCmdBeginDebugUtilsLabelEXT");
	glad_vkCmdEndDebugUtilsLabelEXT = (PFN_vkCmdEndDebugUtilsLabelEXT)load(userptr, "vkCmdEndDebugUtilsLabelEXT");
	glad_vkCmdInsertDebugUtilsLabelEXT = (PFN_vkCmdInsertDebugUtilsLabelEXT)load(userptr, "vkCmdInsertDebugUtilsLabelEXT");
	glad_vkCreateDebugUtilsMessengerEXT = (PFN_vkCreateDebugUtilsMessengerEXT)load(userptr, "vkCreateDebugUtilsMessengerEXT");
	glad_vkDestroyDebugUtilsMessengerEXT = (PFN_vkDestroyDebugUtilsMessengerEXT)load(userptr, "vkDestroyDebugUtilsMessengerEXT");
	glad_vkQueueBeginDebugUtilsLabelEXT = (PFN_vkQueueBeginDebugUtilsLabelEXT)load(userptr, "vkQueueBeginDebugUtilsLabelEXT");
	glad_vkQueueEndDebugUtilsLabelEXT = (PFN_vkQueueEndDebugUtilsLabelEXT)load(userptr, "vkQueueEndDebugUtilsLabelEXT");
	glad_vkQueueInsertDebugUtilsLabelEXT = (PFN_vkQueueInsertDebugUtilsLabelEXT)load(userptr, "vkQueueInsertDebugUtilsLabelEXT");
	glad_vkSetDebugUtilsObjectNameEXT = (PFN_vkSetDebugUtilsObjectNameEXT)load(userptr, "vkSetDebugUtilsObjectNameEXT");
	glad_vkSetDebugUtilsObjectTagEXT = (PFN_vkSetDebugUtilsObjectTagEXT)load(userptr, "vkSetDebugUtilsObjectTagEXT");
	glad_vkSubmitDebugUtilsMessageEXT = (PFN_vkSubmitDebugUtilsMessageEXT)load(userptr, "vkSubmitDebugUtilsMessageEXT");
}
static void glad_vk_load_VK_EXT_depth_bias_control(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_depth_bias_control)
		return;
	glad_vkCmdSetDepthBias2EXT = (PFN_vkCmdSetDepthBias2EXT)load(userptr, "vkCmdSetDepthBias2EXT");
}
static void glad_vk_load_VK_EXT_descriptor_buffer(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_descriptor_buffer)
		return;
	glad_vkCmdBindDescriptorBufferEmbeddedSamplersEXT =
		(PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)load(userptr, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
	glad_vkCmdBindDescriptorBuffersEXT = (PFN_vkCmdBindDescriptorBuffersEXT)load(userptr, "vkCmdBindDescriptorBuffersEXT");
	glad_vkCmdSetDescriptorBufferOffsetsEXT = (PFN_vkCmdSetDescriptorBufferOffsetsEXT)load(userptr, "vkCmdSetDescriptorBufferOffsetsEXT");
	glad_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT =
		(PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)load(userptr, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
	glad_vkGetBufferOpaqueCaptureDescriptorDataEXT =
		(PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)load(userptr, "vkGetBufferOpaqueCaptureDescriptorDataEXT");
	glad_vkGetDescriptorEXT = (PFN_vkGetDescriptorEXT)load(userptr, "vkGetDescriptorEXT");
	glad_vkGetDescriptorSetLayoutBindingOffsetEXT = (PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)load(userptr, "vkGetDescriptorSetLayoutBindingOffsetEXT");
	glad_vkGetDescriptorSetLayoutSizeEXT = (PFN_vkGetDescriptorSetLayoutSizeEXT)load(userptr, "vkGetDescriptorSetLayoutSizeEXT");
	glad_vkGetImageOpaqueCaptureDescriptorDataEXT = (PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)load(userptr, "vkGetImageOpaqueCaptureDescriptorDataEXT");
	glad_vkGetImageViewOpaqueCaptureDescriptorDataEXT =
		(PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)load(userptr, "vkGetImageViewOpaqueCaptureDescriptorDataEXT");
	glad_vkGetSamplerOpaqueCaptureDescriptorDataEXT =
		(PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)load(userptr, "vkGetSamplerOpaqueCaptureDescriptorDataEXT");
}
static void glad_vk_load_VK_EXT_device_fault(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_device_fault)
		return;
	glad_vkGetDeviceFaultInfoEXT = (PFN_vkGetDeviceFaultInfoEXT)load(userptr, "vkGetDeviceFaultInfoEXT");
}
static void glad_vk_load_VK_EXT_direct_mode_display(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_direct_mode_display)
		return;
	glad_vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT)load(userptr, "vkReleaseDisplayEXT");
}
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
static void glad_vk_load_VK_EXT_directfb_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_directfb_surface)
		return;
	glad_vkCreateDirectFBSurfaceEXT = (PFN_vkCreateDirectFBSurfaceEXT)load(userptr, "vkCreateDirectFBSurfaceEXT");
	glad_vkGetPhysicalDeviceDirectFBPresentationSupportEXT =
		(PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT)load(userptr, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
}

#endif
static void glad_vk_load_VK_EXT_discard_rectangles(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_discard_rectangles)
		return;
	glad_vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT)load(userptr, "vkCmdSetDiscardRectangleEXT");
	glad_vkCmdSetDiscardRectangleEnableEXT = (PFN_vkCmdSetDiscardRectangleEnableEXT)load(userptr, "vkCmdSetDiscardRectangleEnableEXT");
	glad_vkCmdSetDiscardRectangleModeEXT = (PFN_vkCmdSetDiscardRectangleModeEXT)load(userptr, "vkCmdSetDiscardRectangleModeEXT");
}
static void glad_vk_load_VK_EXT_display_control(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_display_control)
		return;
	glad_vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT)load(userptr, "vkDisplayPowerControlEXT");
	glad_vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT)load(userptr, "vkGetSwapchainCounterEXT");
	glad_vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT)load(userptr, "vkRegisterDeviceEventEXT");
	glad_vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT)load(userptr, "vkRegisterDisplayEventEXT");
}
static void glad_vk_load_VK_EXT_display_surface_counter(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_display_surface_counter)
		return;
	glad_vkGetPhysicalDeviceSurfaceCapabilities2EXT =
		(PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)load(userptr, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
}
static void glad_vk_load_VK_EXT_extended_dynamic_state(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_extended_dynamic_state)
		return;
	glad_vkCmdBindVertexBuffers2EXT = (PFN_vkCmdBindVertexBuffers2EXT)load(userptr, "vkCmdBindVertexBuffers2EXT");
	glad_vkCmdSetCullModeEXT = (PFN_vkCmdSetCullModeEXT)load(userptr, "vkCmdSetCullModeEXT");
	glad_vkCmdSetDepthBoundsTestEnableEXT = (PFN_vkCmdSetDepthBoundsTestEnableEXT)load(userptr, "vkCmdSetDepthBoundsTestEnableEXT");
	glad_vkCmdSetDepthCompareOpEXT = (PFN_vkCmdSetDepthCompareOpEXT)load(userptr, "vkCmdSetDepthCompareOpEXT");
	glad_vkCmdSetDepthTestEnableEXT = (PFN_vkCmdSetDepthTestEnableEXT)load(userptr, "vkCmdSetDepthTestEnableEXT");
	glad_vkCmdSetDepthWriteEnableEXT = (PFN_vkCmdSetDepthWriteEnableEXT)load(userptr, "vkCmdSetDepthWriteEnableEXT");
	glad_vkCmdSetFrontFaceEXT = (PFN_vkCmdSetFrontFaceEXT)load(userptr, "vkCmdSetFrontFaceEXT");
	glad_vkCmdSetPrimitiveTopologyEXT = (PFN_vkCmdSetPrimitiveTopologyEXT)load(userptr, "vkCmdSetPrimitiveTopologyEXT");
	glad_vkCmdSetScissorWithCountEXT = (PFN_vkCmdSetScissorWithCountEXT)load(userptr, "vkCmdSetScissorWithCountEXT");
	glad_vkCmdSetStencilOpEXT = (PFN_vkCmdSetStencilOpEXT)load(userptr, "vkCmdSetStencilOpEXT");
	glad_vkCmdSetStencilTestEnableEXT = (PFN_vkCmdSetStencilTestEnableEXT)load(userptr, "vkCmdSetStencilTestEnableEXT");
	glad_vkCmdSetViewportWithCountEXT = (PFN_vkCmdSetViewportWithCountEXT)load(userptr, "vkCmdSetViewportWithCountEXT");
}
static void glad_vk_load_VK_EXT_extended_dynamic_state2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_extended_dynamic_state2)
		return;
	glad_vkCmdSetDepthBiasEnableEXT = (PFN_vkCmdSetDepthBiasEnableEXT)load(userptr, "vkCmdSetDepthBiasEnableEXT");
	glad_vkCmdSetLogicOpEXT = (PFN_vkCmdSetLogicOpEXT)load(userptr, "vkCmdSetLogicOpEXT");
	glad_vkCmdSetPatchControlPointsEXT = (PFN_vkCmdSetPatchControlPointsEXT)load(userptr, "vkCmdSetPatchControlPointsEXT");
	glad_vkCmdSetPrimitiveRestartEnableEXT = (PFN_vkCmdSetPrimitiveRestartEnableEXT)load(userptr, "vkCmdSetPrimitiveRestartEnableEXT");
	glad_vkCmdSetRasterizerDiscardEnableEXT = (PFN_vkCmdSetRasterizerDiscardEnableEXT)load(userptr, "vkCmdSetRasterizerDiscardEnableEXT");
}
static void glad_vk_load_VK_EXT_extended_dynamic_state3(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_extended_dynamic_state3)
		return;
	glad_vkCmdSetAlphaToCoverageEnableEXT = (PFN_vkCmdSetAlphaToCoverageEnableEXT)load(userptr, "vkCmdSetAlphaToCoverageEnableEXT");
	glad_vkCmdSetAlphaToOneEnableEXT = (PFN_vkCmdSetAlphaToOneEnableEXT)load(userptr, "vkCmdSetAlphaToOneEnableEXT");
	glad_vkCmdSetColorBlendAdvancedEXT = (PFN_vkCmdSetColorBlendAdvancedEXT)load(userptr, "vkCmdSetColorBlendAdvancedEXT");
	glad_vkCmdSetColorBlendEnableEXT = (PFN_vkCmdSetColorBlendEnableEXT)load(userptr, "vkCmdSetColorBlendEnableEXT");
	glad_vkCmdSetColorBlendEquationEXT = (PFN_vkCmdSetColorBlendEquationEXT)load(userptr, "vkCmdSetColorBlendEquationEXT");
	glad_vkCmdSetColorWriteMaskEXT = (PFN_vkCmdSetColorWriteMaskEXT)load(userptr, "vkCmdSetColorWriteMaskEXT");
	glad_vkCmdSetConservativeRasterizationModeEXT = (PFN_vkCmdSetConservativeRasterizationModeEXT)load(userptr, "vkCmdSetConservativeRasterizationModeEXT");
	glad_vkCmdSetCoverageModulationModeNV = (PFN_vkCmdSetCoverageModulationModeNV)load(userptr, "vkCmdSetCoverageModulationModeNV");
	glad_vkCmdSetCoverageModulationTableEnableNV = (PFN_vkCmdSetCoverageModulationTableEnableNV)load(userptr, "vkCmdSetCoverageModulationTableEnableNV");
	glad_vkCmdSetCoverageModulationTableNV = (PFN_vkCmdSetCoverageModulationTableNV)load(userptr, "vkCmdSetCoverageModulationTableNV");
	glad_vkCmdSetCoverageReductionModeNV = (PFN_vkCmdSetCoverageReductionModeNV)load(userptr, "vkCmdSetCoverageReductionModeNV");
	glad_vkCmdSetCoverageToColorEnableNV = (PFN_vkCmdSetCoverageToColorEnableNV)load(userptr, "vkCmdSetCoverageToColorEnableNV");
	glad_vkCmdSetCoverageToColorLocationNV = (PFN_vkCmdSetCoverageToColorLocationNV)load(userptr, "vkCmdSetCoverageToColorLocationNV");
	glad_vkCmdSetDepthClampEnableEXT = (PFN_vkCmdSetDepthClampEnableEXT)load(userptr, "vkCmdSetDepthClampEnableEXT");
	glad_vkCmdSetDepthClipEnableEXT = (PFN_vkCmdSetDepthClipEnableEXT)load(userptr, "vkCmdSetDepthClipEnableEXT");
	glad_vkCmdSetDepthClipNegativeOneToOneEXT = (PFN_vkCmdSetDepthClipNegativeOneToOneEXT)load(userptr, "vkCmdSetDepthClipNegativeOneToOneEXT");
	glad_vkCmdSetExtraPrimitiveOverestimationSizeEXT =
		(PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)load(userptr, "vkCmdSetExtraPrimitiveOverestimationSizeEXT");
	glad_vkCmdSetLineRasterizationModeEXT = (PFN_vkCmdSetLineRasterizationModeEXT)load(userptr, "vkCmdSetLineRasterizationModeEXT");
	glad_vkCmdSetLineStippleEnableEXT = (PFN_vkCmdSetLineStippleEnableEXT)load(userptr, "vkCmdSetLineStippleEnableEXT");
	glad_vkCmdSetLogicOpEnableEXT = (PFN_vkCmdSetLogicOpEnableEXT)load(userptr, "vkCmdSetLogicOpEnableEXT");
	glad_vkCmdSetPolygonModeEXT = (PFN_vkCmdSetPolygonModeEXT)load(userptr, "vkCmdSetPolygonModeEXT");
	glad_vkCmdSetProvokingVertexModeEXT = (PFN_vkCmdSetProvokingVertexModeEXT)load(userptr, "vkCmdSetProvokingVertexModeEXT");
	glad_vkCmdSetRasterizationSamplesEXT = (PFN_vkCmdSetRasterizationSamplesEXT)load(userptr, "vkCmdSetRasterizationSamplesEXT");
	glad_vkCmdSetRasterizationStreamEXT = (PFN_vkCmdSetRasterizationStreamEXT)load(userptr, "vkCmdSetRasterizationStreamEXT");
	glad_vkCmdSetRepresentativeFragmentTestEnableNV =
		(PFN_vkCmdSetRepresentativeFragmentTestEnableNV)load(userptr, "vkCmdSetRepresentativeFragmentTestEnableNV");
	glad_vkCmdSetSampleLocationsEnableEXT = (PFN_vkCmdSetSampleLocationsEnableEXT)load(userptr, "vkCmdSetSampleLocationsEnableEXT");
	glad_vkCmdSetSampleMaskEXT = (PFN_vkCmdSetSampleMaskEXT)load(userptr, "vkCmdSetSampleMaskEXT");
	glad_vkCmdSetShadingRateImageEnableNV = (PFN_vkCmdSetShadingRateImageEnableNV)load(userptr, "vkCmdSetShadingRateImageEnableNV");
	glad_vkCmdSetTessellationDomainOriginEXT = (PFN_vkCmdSetTessellationDomainOriginEXT)load(userptr, "vkCmdSetTessellationDomainOriginEXT");
	glad_vkCmdSetViewportSwizzleNV = (PFN_vkCmdSetViewportSwizzleNV)load(userptr, "vkCmdSetViewportSwizzleNV");
	glad_vkCmdSetViewportWScalingEnableNV = (PFN_vkCmdSetViewportWScalingEnableNV)load(userptr, "vkCmdSetViewportWScalingEnableNV");
}
static void glad_vk_load_VK_EXT_external_memory_host(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_external_memory_host)
		return;
	glad_vkGetMemoryHostPointerPropertiesEXT = (PFN_vkGetMemoryHostPointerPropertiesEXT)load(userptr, "vkGetMemoryHostPointerPropertiesEXT");
}
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static void glad_vk_load_VK_EXT_full_screen_exclusive(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_full_screen_exclusive)
		return;
	glad_vkAcquireFullScreenExclusiveModeEXT = (PFN_vkAcquireFullScreenExclusiveModeEXT)load(userptr, "vkAcquireFullScreenExclusiveModeEXT");
	glad_vkGetDeviceGroupSurfacePresentModes2EXT = (PFN_vkGetDeviceGroupSurfacePresentModes2EXT)load(userptr, "vkGetDeviceGroupSurfacePresentModes2EXT");
	glad_vkGetPhysicalDeviceSurfacePresentModes2EXT =
		(PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT)load(userptr, "vkGetPhysicalDeviceSurfacePresentModes2EXT");
	glad_vkReleaseFullScreenExclusiveModeEXT = (PFN_vkReleaseFullScreenExclusiveModeEXT)load(userptr, "vkReleaseFullScreenExclusiveModeEXT");
}

#endif
static void glad_vk_load_VK_EXT_hdr_metadata(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_hdr_metadata)
		return;
	glad_vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT)load(userptr, "vkSetHdrMetadataEXT");
}
static void glad_vk_load_VK_EXT_headless_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_headless_surface)
		return;
	glad_vkCreateHeadlessSurfaceEXT = (PFN_vkCreateHeadlessSurfaceEXT)load(userptr, "vkCreateHeadlessSurfaceEXT");
}
static void glad_vk_load_VK_EXT_host_image_copy(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_host_image_copy)
		return;
	glad_vkCopyImageToImageEXT = (PFN_vkCopyImageToImageEXT)load(userptr, "vkCopyImageToImageEXT");
	glad_vkCopyImageToMemoryEXT = (PFN_vkCopyImageToMemoryEXT)load(userptr, "vkCopyImageToMemoryEXT");
	glad_vkCopyMemoryToImageEXT = (PFN_vkCopyMemoryToImageEXT)load(userptr, "vkCopyMemoryToImageEXT");
	glad_vkGetImageSubresourceLayout2EXT = (PFN_vkGetImageSubresourceLayout2EXT)load(userptr, "vkGetImageSubresourceLayout2EXT");
	glad_vkTransitionImageLayoutEXT = (PFN_vkTransitionImageLayoutEXT)load(userptr, "vkTransitionImageLayoutEXT");
}
static void glad_vk_load_VK_EXT_host_query_reset(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_host_query_reset)
		return;
	glad_vkResetQueryPoolEXT = (PFN_vkResetQueryPoolEXT)load(userptr, "vkResetQueryPoolEXT");
}
static void glad_vk_load_VK_EXT_image_compression_control(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_image_compression_control)
		return;
	glad_vkGetImageSubresourceLayout2EXT = (PFN_vkGetImageSubresourceLayout2EXT)load(userptr, "vkGetImageSubresourceLayout2EXT");
}
static void glad_vk_load_VK_EXT_image_drm_format_modifier(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_image_drm_format_modifier)
		return;
	glad_vkGetImageDrmFormatModifierPropertiesEXT = (PFN_vkGetImageDrmFormatModifierPropertiesEXT)load(userptr, "vkGetImageDrmFormatModifierPropertiesEXT");
}
static void glad_vk_load_VK_EXT_line_rasterization(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_line_rasterization)
		return;
	glad_vkCmdSetLineStippleEXT = (PFN_vkCmdSetLineStippleEXT)load(userptr, "vkCmdSetLineStippleEXT");
}
static void glad_vk_load_VK_EXT_mesh_shader(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_mesh_shader)
		return;
	glad_vkCmdDrawMeshTasksEXT = (PFN_vkCmdDrawMeshTasksEXT)load(userptr, "vkCmdDrawMeshTasksEXT");
	glad_vkCmdDrawMeshTasksIndirectCountEXT = (PFN_vkCmdDrawMeshTasksIndirectCountEXT)load(userptr, "vkCmdDrawMeshTasksIndirectCountEXT");
	glad_vkCmdDrawMeshTasksIndirectEXT = (PFN_vkCmdDrawMeshTasksIndirectEXT)load(userptr, "vkCmdDrawMeshTasksIndirectEXT");
}
#if defined(VK_USE_PLATFORM_METAL_EXT)
static void glad_vk_load_VK_EXT_metal_objects(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_metal_objects)
		return;
	glad_vkExportMetalObjectsEXT = (PFN_vkExportMetalObjectsEXT)load(userptr, "vkExportMetalObjectsEXT");
}

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
static void glad_vk_load_VK_EXT_metal_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_metal_surface)
		return;
	glad_vkCreateMetalSurfaceEXT = (PFN_vkCreateMetalSurfaceEXT)load(userptr, "vkCreateMetalSurfaceEXT");
}

#endif
static void glad_vk_load_VK_EXT_multi_draw(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_multi_draw)
		return;
	glad_vkCmdDrawMultiEXT = (PFN_vkCmdDrawMultiEXT)load(userptr, "vkCmdDrawMultiEXT");
	glad_vkCmdDrawMultiIndexedEXT = (PFN_vkCmdDrawMultiIndexedEXT)load(userptr, "vkCmdDrawMultiIndexedEXT");
}
static void glad_vk_load_VK_EXT_opacity_micromap(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_opacity_micromap)
		return;
	glad_vkBuildMicromapsEXT = (PFN_vkBuildMicromapsEXT)load(userptr, "vkBuildMicromapsEXT");
	glad_vkCmdBuildMicromapsEXT = (PFN_vkCmdBuildMicromapsEXT)load(userptr, "vkCmdBuildMicromapsEXT");
	glad_vkCmdCopyMemoryToMicromapEXT = (PFN_vkCmdCopyMemoryToMicromapEXT)load(userptr, "vkCmdCopyMemoryToMicromapEXT");
	glad_vkCmdCopyMicromapEXT = (PFN_vkCmdCopyMicromapEXT)load(userptr, "vkCmdCopyMicromapEXT");
	glad_vkCmdCopyMicromapToMemoryEXT = (PFN_vkCmdCopyMicromapToMemoryEXT)load(userptr, "vkCmdCopyMicromapToMemoryEXT");
	glad_vkCmdWriteMicromapsPropertiesEXT = (PFN_vkCmdWriteMicromapsPropertiesEXT)load(userptr, "vkCmdWriteMicromapsPropertiesEXT");
	glad_vkCopyMemoryToMicromapEXT = (PFN_vkCopyMemoryToMicromapEXT)load(userptr, "vkCopyMemoryToMicromapEXT");
	glad_vkCopyMicromapEXT = (PFN_vkCopyMicromapEXT)load(userptr, "vkCopyMicromapEXT");
	glad_vkCopyMicromapToMemoryEXT = (PFN_vkCopyMicromapToMemoryEXT)load(userptr, "vkCopyMicromapToMemoryEXT");
	glad_vkCreateMicromapEXT = (PFN_vkCreateMicromapEXT)load(userptr, "vkCreateMicromapEXT");
	glad_vkDestroyMicromapEXT = (PFN_vkDestroyMicromapEXT)load(userptr, "vkDestroyMicromapEXT");
	glad_vkGetDeviceMicromapCompatibilityEXT = (PFN_vkGetDeviceMicromapCompatibilityEXT)load(userptr, "vkGetDeviceMicromapCompatibilityEXT");
	glad_vkGetMicromapBuildSizesEXT = (PFN_vkGetMicromapBuildSizesEXT)load(userptr, "vkGetMicromapBuildSizesEXT");
	glad_vkWriteMicromapsPropertiesEXT = (PFN_vkWriteMicromapsPropertiesEXT)load(userptr, "vkWriteMicromapsPropertiesEXT");
}
static void glad_vk_load_VK_EXT_pageable_device_local_memory(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_pageable_device_local_memory)
		return;
	glad_vkSetDeviceMemoryPriorityEXT = (PFN_vkSetDeviceMemoryPriorityEXT)load(userptr, "vkSetDeviceMemoryPriorityEXT");
}
static void glad_vk_load_VK_EXT_pipeline_properties(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_pipeline_properties)
		return;
	glad_vkGetPipelinePropertiesEXT = (PFN_vkGetPipelinePropertiesEXT)load(userptr, "vkGetPipelinePropertiesEXT");
}
static void glad_vk_load_VK_EXT_private_data(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_private_data)
		return;
	glad_vkCreatePrivateDataSlotEXT = (PFN_vkCreatePrivateDataSlotEXT)load(userptr, "vkCreatePrivateDataSlotEXT");
	glad_vkDestroyPrivateDataSlotEXT = (PFN_vkDestroyPrivateDataSlotEXT)load(userptr, "vkDestroyPrivateDataSlotEXT");
	glad_vkGetPrivateDataEXT = (PFN_vkGetPrivateDataEXT)load(userptr, "vkGetPrivateDataEXT");
	glad_vkSetPrivateDataEXT = (PFN_vkSetPrivateDataEXT)load(userptr, "vkSetPrivateDataEXT");
}
static void glad_vk_load_VK_EXT_sample_locations(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_sample_locations)
		return;
	glad_vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT)load(userptr, "vkCmdSetSampleLocationsEXT");
	glad_vkGetPhysicalDeviceMultisamplePropertiesEXT =
		(PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)load(userptr, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
}
static void glad_vk_load_VK_EXT_shader_module_identifier(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_shader_module_identifier)
		return;
	glad_vkGetShaderModuleCreateInfoIdentifierEXT = (PFN_vkGetShaderModuleCreateInfoIdentifierEXT)load(userptr, "vkGetShaderModuleCreateInfoIdentifierEXT");
	glad_vkGetShaderModuleIdentifierEXT = (PFN_vkGetShaderModuleIdentifierEXT)load(userptr, "vkGetShaderModuleIdentifierEXT");
}
static void glad_vk_load_VK_EXT_shader_object(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_shader_object)
		return;
	glad_vkCmdBindShadersEXT = (PFN_vkCmdBindShadersEXT)load(userptr, "vkCmdBindShadersEXT");
	glad_vkCmdBindVertexBuffers2EXT = (PFN_vkCmdBindVertexBuffers2EXT)load(userptr, "vkCmdBindVertexBuffers2EXT");
	glad_vkCmdSetAlphaToCoverageEnableEXT = (PFN_vkCmdSetAlphaToCoverageEnableEXT)load(userptr, "vkCmdSetAlphaToCoverageEnableEXT");
	glad_vkCmdSetAlphaToOneEnableEXT = (PFN_vkCmdSetAlphaToOneEnableEXT)load(userptr, "vkCmdSetAlphaToOneEnableEXT");
	glad_vkCmdSetColorBlendAdvancedEXT = (PFN_vkCmdSetColorBlendAdvancedEXT)load(userptr, "vkCmdSetColorBlendAdvancedEXT");
	glad_vkCmdSetColorBlendEnableEXT = (PFN_vkCmdSetColorBlendEnableEXT)load(userptr, "vkCmdSetColorBlendEnableEXT");
	glad_vkCmdSetColorBlendEquationEXT = (PFN_vkCmdSetColorBlendEquationEXT)load(userptr, "vkCmdSetColorBlendEquationEXT");
	glad_vkCmdSetColorWriteMaskEXT = (PFN_vkCmdSetColorWriteMaskEXT)load(userptr, "vkCmdSetColorWriteMaskEXT");
	glad_vkCmdSetConservativeRasterizationModeEXT = (PFN_vkCmdSetConservativeRasterizationModeEXT)load(userptr, "vkCmdSetConservativeRasterizationModeEXT");
	glad_vkCmdSetCoverageModulationModeNV = (PFN_vkCmdSetCoverageModulationModeNV)load(userptr, "vkCmdSetCoverageModulationModeNV");
	glad_vkCmdSetCoverageModulationTableEnableNV = (PFN_vkCmdSetCoverageModulationTableEnableNV)load(userptr, "vkCmdSetCoverageModulationTableEnableNV");
	glad_vkCmdSetCoverageModulationTableNV = (PFN_vkCmdSetCoverageModulationTableNV)load(userptr, "vkCmdSetCoverageModulationTableNV");
	glad_vkCmdSetCoverageReductionModeNV = (PFN_vkCmdSetCoverageReductionModeNV)load(userptr, "vkCmdSetCoverageReductionModeNV");
	glad_vkCmdSetCoverageToColorEnableNV = (PFN_vkCmdSetCoverageToColorEnableNV)load(userptr, "vkCmdSetCoverageToColorEnableNV");
	glad_vkCmdSetCoverageToColorLocationNV = (PFN_vkCmdSetCoverageToColorLocationNV)load(userptr, "vkCmdSetCoverageToColorLocationNV");
	glad_vkCmdSetCullModeEXT = (PFN_vkCmdSetCullModeEXT)load(userptr, "vkCmdSetCullModeEXT");
	glad_vkCmdSetDepthBiasEnableEXT = (PFN_vkCmdSetDepthBiasEnableEXT)load(userptr, "vkCmdSetDepthBiasEnableEXT");
	glad_vkCmdSetDepthBoundsTestEnableEXT = (PFN_vkCmdSetDepthBoundsTestEnableEXT)load(userptr, "vkCmdSetDepthBoundsTestEnableEXT");
	glad_vkCmdSetDepthClampEnableEXT = (PFN_vkCmdSetDepthClampEnableEXT)load(userptr, "vkCmdSetDepthClampEnableEXT");
	glad_vkCmdSetDepthClipEnableEXT = (PFN_vkCmdSetDepthClipEnableEXT)load(userptr, "vkCmdSetDepthClipEnableEXT");
	glad_vkCmdSetDepthClipNegativeOneToOneEXT = (PFN_vkCmdSetDepthClipNegativeOneToOneEXT)load(userptr, "vkCmdSetDepthClipNegativeOneToOneEXT");
	glad_vkCmdSetDepthCompareOpEXT = (PFN_vkCmdSetDepthCompareOpEXT)load(userptr, "vkCmdSetDepthCompareOpEXT");
	glad_vkCmdSetDepthTestEnableEXT = (PFN_vkCmdSetDepthTestEnableEXT)load(userptr, "vkCmdSetDepthTestEnableEXT");
	glad_vkCmdSetDepthWriteEnableEXT = (PFN_vkCmdSetDepthWriteEnableEXT)load(userptr, "vkCmdSetDepthWriteEnableEXT");
	glad_vkCmdSetExtraPrimitiveOverestimationSizeEXT =
		(PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)load(userptr, "vkCmdSetExtraPrimitiveOverestimationSizeEXT");
	glad_vkCmdSetFrontFaceEXT = (PFN_vkCmdSetFrontFaceEXT)load(userptr, "vkCmdSetFrontFaceEXT");
	glad_vkCmdSetLineRasterizationModeEXT = (PFN_vkCmdSetLineRasterizationModeEXT)load(userptr, "vkCmdSetLineRasterizationModeEXT");
	glad_vkCmdSetLineStippleEnableEXT = (PFN_vkCmdSetLineStippleEnableEXT)load(userptr, "vkCmdSetLineStippleEnableEXT");
	glad_vkCmdSetLogicOpEXT = (PFN_vkCmdSetLogicOpEXT)load(userptr, "vkCmdSetLogicOpEXT");
	glad_vkCmdSetLogicOpEnableEXT = (PFN_vkCmdSetLogicOpEnableEXT)load(userptr, "vkCmdSetLogicOpEnableEXT");
	glad_vkCmdSetPatchControlPointsEXT = (PFN_vkCmdSetPatchControlPointsEXT)load(userptr, "vkCmdSetPatchControlPointsEXT");
	glad_vkCmdSetPolygonModeEXT = (PFN_vkCmdSetPolygonModeEXT)load(userptr, "vkCmdSetPolygonModeEXT");
	glad_vkCmdSetPrimitiveRestartEnableEXT = (PFN_vkCmdSetPrimitiveRestartEnableEXT)load(userptr, "vkCmdSetPrimitiveRestartEnableEXT");
	glad_vkCmdSetPrimitiveTopologyEXT = (PFN_vkCmdSetPrimitiveTopologyEXT)load(userptr, "vkCmdSetPrimitiveTopologyEXT");
	glad_vkCmdSetProvokingVertexModeEXT = (PFN_vkCmdSetProvokingVertexModeEXT)load(userptr, "vkCmdSetProvokingVertexModeEXT");
	glad_vkCmdSetRasterizationSamplesEXT = (PFN_vkCmdSetRasterizationSamplesEXT)load(userptr, "vkCmdSetRasterizationSamplesEXT");
	glad_vkCmdSetRasterizationStreamEXT = (PFN_vkCmdSetRasterizationStreamEXT)load(userptr, "vkCmdSetRasterizationStreamEXT");
	glad_vkCmdSetRasterizerDiscardEnableEXT = (PFN_vkCmdSetRasterizerDiscardEnableEXT)load(userptr, "vkCmdSetRasterizerDiscardEnableEXT");
	glad_vkCmdSetRepresentativeFragmentTestEnableNV =
		(PFN_vkCmdSetRepresentativeFragmentTestEnableNV)load(userptr, "vkCmdSetRepresentativeFragmentTestEnableNV");
	glad_vkCmdSetSampleLocationsEnableEXT = (PFN_vkCmdSetSampleLocationsEnableEXT)load(userptr, "vkCmdSetSampleLocationsEnableEXT");
	glad_vkCmdSetSampleMaskEXT = (PFN_vkCmdSetSampleMaskEXT)load(userptr, "vkCmdSetSampleMaskEXT");
	glad_vkCmdSetScissorWithCountEXT = (PFN_vkCmdSetScissorWithCountEXT)load(userptr, "vkCmdSetScissorWithCountEXT");
	glad_vkCmdSetShadingRateImageEnableNV = (PFN_vkCmdSetShadingRateImageEnableNV)load(userptr, "vkCmdSetShadingRateImageEnableNV");
	glad_vkCmdSetStencilOpEXT = (PFN_vkCmdSetStencilOpEXT)load(userptr, "vkCmdSetStencilOpEXT");
	glad_vkCmdSetStencilTestEnableEXT = (PFN_vkCmdSetStencilTestEnableEXT)load(userptr, "vkCmdSetStencilTestEnableEXT");
	glad_vkCmdSetTessellationDomainOriginEXT = (PFN_vkCmdSetTessellationDomainOriginEXT)load(userptr, "vkCmdSetTessellationDomainOriginEXT");
	glad_vkCmdSetVertexInputEXT = (PFN_vkCmdSetVertexInputEXT)load(userptr, "vkCmdSetVertexInputEXT");
	glad_vkCmdSetViewportSwizzleNV = (PFN_vkCmdSetViewportSwizzleNV)load(userptr, "vkCmdSetViewportSwizzleNV");
	glad_vkCmdSetViewportWScalingEnableNV = (PFN_vkCmdSetViewportWScalingEnableNV)load(userptr, "vkCmdSetViewportWScalingEnableNV");
	glad_vkCmdSetViewportWithCountEXT = (PFN_vkCmdSetViewportWithCountEXT)load(userptr, "vkCmdSetViewportWithCountEXT");
	glad_vkCreateShadersEXT = (PFN_vkCreateShadersEXT)load(userptr, "vkCreateShadersEXT");
	glad_vkDestroyShaderEXT = (PFN_vkDestroyShaderEXT)load(userptr, "vkDestroyShaderEXT");
	glad_vkGetShaderBinaryDataEXT = (PFN_vkGetShaderBinaryDataEXT)load(userptr, "vkGetShaderBinaryDataEXT");
}
static void glad_vk_load_VK_EXT_swapchain_maintenance1(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_swapchain_maintenance1)
		return;
	glad_vkReleaseSwapchainImagesEXT = (PFN_vkReleaseSwapchainImagesEXT)load(userptr, "vkReleaseSwapchainImagesEXT");
}
static void glad_vk_load_VK_EXT_tooling_info(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_tooling_info)
		return;
	glad_vkGetPhysicalDeviceToolPropertiesEXT = (PFN_vkGetPhysicalDeviceToolPropertiesEXT)load(userptr, "vkGetPhysicalDeviceToolPropertiesEXT");
}
static void glad_vk_load_VK_EXT_transform_feedback(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_transform_feedback)
		return;
	glad_vkCmdBeginQueryIndexedEXT = (PFN_vkCmdBeginQueryIndexedEXT)load(userptr, "vkCmdBeginQueryIndexedEXT");
	glad_vkCmdBeginTransformFeedbackEXT = (PFN_vkCmdBeginTransformFeedbackEXT)load(userptr, "vkCmdBeginTransformFeedbackEXT");
	glad_vkCmdBindTransformFeedbackBuffersEXT = (PFN_vkCmdBindTransformFeedbackBuffersEXT)load(userptr, "vkCmdBindTransformFeedbackBuffersEXT");
	glad_vkCmdDrawIndirectByteCountEXT = (PFN_vkCmdDrawIndirectByteCountEXT)load(userptr, "vkCmdDrawIndirectByteCountEXT");
	glad_vkCmdEndQueryIndexedEXT = (PFN_vkCmdEndQueryIndexedEXT)load(userptr, "vkCmdEndQueryIndexedEXT");
	glad_vkCmdEndTransformFeedbackEXT = (PFN_vkCmdEndTransformFeedbackEXT)load(userptr, "vkCmdEndTransformFeedbackEXT");
}
static void glad_vk_load_VK_EXT_validation_cache(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_validation_cache)
		return;
	glad_vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT)load(userptr, "vkCreateValidationCacheEXT");
	glad_vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT)load(userptr, "vkDestroyValidationCacheEXT");
	glad_vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT)load(userptr, "vkGetValidationCacheDataEXT");
	glad_vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT)load(userptr, "vkMergeValidationCachesEXT");
}
static void glad_vk_load_VK_EXT_vertex_input_dynamic_state(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_EXT_vertex_input_dynamic_state)
		return;
	glad_vkCmdSetVertexInputEXT = (PFN_vkCmdSetVertexInputEXT)load(userptr, "vkCmdSetVertexInputEXT");
}
#if defined(VK_USE_PLATFORM_FUCHSIA)
static void glad_vk_load_VK_FUCHSIA_buffer_collection(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_FUCHSIA_buffer_collection)
		return;
	glad_vkCreateBufferCollectionFUCHSIA = (PFN_vkCreateBufferCollectionFUCHSIA)load(userptr, "vkCreateBufferCollectionFUCHSIA");
	glad_vkDestroyBufferCollectionFUCHSIA = (PFN_vkDestroyBufferCollectionFUCHSIA)load(userptr, "vkDestroyBufferCollectionFUCHSIA");
	glad_vkGetBufferCollectionPropertiesFUCHSIA = (PFN_vkGetBufferCollectionPropertiesFUCHSIA)load(userptr, "vkGetBufferCollectionPropertiesFUCHSIA");
	glad_vkSetBufferCollectionBufferConstraintsFUCHSIA =
		(PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA)load(userptr, "vkSetBufferCollectionBufferConstraintsFUCHSIA");
	glad_vkSetBufferCollectionImageConstraintsFUCHSIA =
		(PFN_vkSetBufferCollectionImageConstraintsFUCHSIA)load(userptr, "vkSetBufferCollectionImageConstraintsFUCHSIA");
}

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
static void glad_vk_load_VK_FUCHSIA_external_memory(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_FUCHSIA_external_memory)
		return;
	glad_vkGetMemoryZirconHandleFUCHSIA = (PFN_vkGetMemoryZirconHandleFUCHSIA)load(userptr, "vkGetMemoryZirconHandleFUCHSIA");
	glad_vkGetMemoryZirconHandlePropertiesFUCHSIA = (PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA)load(userptr, "vkGetMemoryZirconHandlePropertiesFUCHSIA");
}

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
static void glad_vk_load_VK_FUCHSIA_external_semaphore(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_FUCHSIA_external_semaphore)
		return;
	glad_vkGetSemaphoreZirconHandleFUCHSIA = (PFN_vkGetSemaphoreZirconHandleFUCHSIA)load(userptr, "vkGetSemaphoreZirconHandleFUCHSIA");
	glad_vkImportSemaphoreZirconHandleFUCHSIA = (PFN_vkImportSemaphoreZirconHandleFUCHSIA)load(userptr, "vkImportSemaphoreZirconHandleFUCHSIA");
}

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
static void glad_vk_load_VK_FUCHSIA_imagepipe_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_FUCHSIA_imagepipe_surface)
		return;
	glad_vkCreateImagePipeSurfaceFUCHSIA = (PFN_vkCreateImagePipeSurfaceFUCHSIA)load(userptr, "vkCreateImagePipeSurfaceFUCHSIA");
}

#endif
#if defined(VK_USE_PLATFORM_GGP)
static void glad_vk_load_VK_GGP_stream_descriptor_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_GGP_stream_descriptor_surface)
		return;
	glad_vkCreateStreamDescriptorSurfaceGGP = (PFN_vkCreateStreamDescriptorSurfaceGGP)load(userptr, "vkCreateStreamDescriptorSurfaceGGP");
}

#endif
static void glad_vk_load_VK_GOOGLE_display_timing(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_GOOGLE_display_timing)
		return;
	glad_vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE)load(userptr, "vkGetPastPresentationTimingGOOGLE");
	glad_vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE)load(userptr, "vkGetRefreshCycleDurationGOOGLE");
}
static void glad_vk_load_VK_HUAWEI_cluster_culling_shader(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_HUAWEI_cluster_culling_shader)
		return;
	glad_vkCmdDrawClusterHUAWEI = (PFN_vkCmdDrawClusterHUAWEI)load(userptr, "vkCmdDrawClusterHUAWEI");
	glad_vkCmdDrawClusterIndirectHUAWEI = (PFN_vkCmdDrawClusterIndirectHUAWEI)load(userptr, "vkCmdDrawClusterIndirectHUAWEI");
}
static void glad_vk_load_VK_HUAWEI_invocation_mask(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_HUAWEI_invocation_mask)
		return;
	glad_vkCmdBindInvocationMaskHUAWEI = (PFN_vkCmdBindInvocationMaskHUAWEI)load(userptr, "vkCmdBindInvocationMaskHUAWEI");
}
static void glad_vk_load_VK_HUAWEI_subpass_shading(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_HUAWEI_subpass_shading)
		return;
	glad_vkCmdSubpassShadingHUAWEI = (PFN_vkCmdSubpassShadingHUAWEI)load(userptr, "vkCmdSubpassShadingHUAWEI");
	glad_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI =
		(PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)load(userptr, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
}
static void glad_vk_load_VK_INTEL_performance_query(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_INTEL_performance_query)
		return;
	glad_vkAcquirePerformanceConfigurationINTEL = (PFN_vkAcquirePerformanceConfigurationINTEL)load(userptr, "vkAcquirePerformanceConfigurationINTEL");
	glad_vkCmdSetPerformanceMarkerINTEL = (PFN_vkCmdSetPerformanceMarkerINTEL)load(userptr, "vkCmdSetPerformanceMarkerINTEL");
	glad_vkCmdSetPerformanceOverrideINTEL = (PFN_vkCmdSetPerformanceOverrideINTEL)load(userptr, "vkCmdSetPerformanceOverrideINTEL");
	glad_vkCmdSetPerformanceStreamMarkerINTEL = (PFN_vkCmdSetPerformanceStreamMarkerINTEL)load(userptr, "vkCmdSetPerformanceStreamMarkerINTEL");
	glad_vkGetPerformanceParameterINTEL = (PFN_vkGetPerformanceParameterINTEL)load(userptr, "vkGetPerformanceParameterINTEL");
	glad_vkInitializePerformanceApiINTEL = (PFN_vkInitializePerformanceApiINTEL)load(userptr, "vkInitializePerformanceApiINTEL");
	glad_vkQueueSetPerformanceConfigurationINTEL = (PFN_vkQueueSetPerformanceConfigurationINTEL)load(userptr, "vkQueueSetPerformanceConfigurationINTEL");
	glad_vkReleasePerformanceConfigurationINTEL = (PFN_vkReleasePerformanceConfigurationINTEL)load(userptr, "vkReleasePerformanceConfigurationINTEL");
	glad_vkUninitializePerformanceApiINTEL = (PFN_vkUninitializePerformanceApiINTEL)load(userptr, "vkUninitializePerformanceApiINTEL");
}
static void glad_vk_load_VK_KHR_acceleration_structure(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_acceleration_structure)
		return;
	glad_vkBuildAccelerationStructuresKHR = (PFN_vkBuildAccelerationStructuresKHR)load(userptr, "vkBuildAccelerationStructuresKHR");
	glad_vkCmdBuildAccelerationStructuresIndirectKHR =
		(PFN_vkCmdBuildAccelerationStructuresIndirectKHR)load(userptr, "vkCmdBuildAccelerationStructuresIndirectKHR");
	glad_vkCmdBuildAccelerationStructuresKHR = (PFN_vkCmdBuildAccelerationStructuresKHR)load(userptr, "vkCmdBuildAccelerationStructuresKHR");
	glad_vkCmdCopyAccelerationStructureKHR = (PFN_vkCmdCopyAccelerationStructureKHR)load(userptr, "vkCmdCopyAccelerationStructureKHR");
	glad_vkCmdCopyAccelerationStructureToMemoryKHR =
		(PFN_vkCmdCopyAccelerationStructureToMemoryKHR)load(userptr, "vkCmdCopyAccelerationStructureToMemoryKHR");
	glad_vkCmdCopyMemoryToAccelerationStructureKHR =
		(PFN_vkCmdCopyMemoryToAccelerationStructureKHR)load(userptr, "vkCmdCopyMemoryToAccelerationStructureKHR");
	glad_vkCmdWriteAccelerationStructuresPropertiesKHR =
		(PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)load(userptr, "vkCmdWriteAccelerationStructuresPropertiesKHR");
	glad_vkCopyAccelerationStructureKHR = (PFN_vkCopyAccelerationStructureKHR)load(userptr, "vkCopyAccelerationStructureKHR");
	glad_vkCopyAccelerationStructureToMemoryKHR = (PFN_vkCopyAccelerationStructureToMemoryKHR)load(userptr, "vkCopyAccelerationStructureToMemoryKHR");
	glad_vkCopyMemoryToAccelerationStructureKHR = (PFN_vkCopyMemoryToAccelerationStructureKHR)load(userptr, "vkCopyMemoryToAccelerationStructureKHR");
	glad_vkCreateAccelerationStructureKHR = (PFN_vkCreateAccelerationStructureKHR)load(userptr, "vkCreateAccelerationStructureKHR");
	glad_vkDestroyAccelerationStructureKHR = (PFN_vkDestroyAccelerationStructureKHR)load(userptr, "vkDestroyAccelerationStructureKHR");
	glad_vkGetAccelerationStructureBuildSizesKHR = (PFN_vkGetAccelerationStructureBuildSizesKHR)load(userptr, "vkGetAccelerationStructureBuildSizesKHR");
	glad_vkGetAccelerationStructureDeviceAddressKHR =
		(PFN_vkGetAccelerationStructureDeviceAddressKHR)load(userptr, "vkGetAccelerationStructureDeviceAddressKHR");
	glad_vkGetDeviceAccelerationStructureCompatibilityKHR =
		(PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)load(userptr, "vkGetDeviceAccelerationStructureCompatibilityKHR");
	glad_vkWriteAccelerationStructuresPropertiesKHR =
		(PFN_vkWriteAccelerationStructuresPropertiesKHR)load(userptr, "vkWriteAccelerationStructuresPropertiesKHR");
}
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static void glad_vk_load_VK_KHR_android_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_android_surface)
		return;
	glad_vkCreateAndroidSurfaceKHR = (PFN_vkCreateAndroidSurfaceKHR)load(userptr, "vkCreateAndroidSurfaceKHR");
}

#endif
static void glad_vk_load_VK_KHR_bind_memory2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_bind_memory2)
		return;
	glad_vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR)load(userptr, "vkBindBufferMemory2KHR");
	glad_vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR)load(userptr, "vkBindImageMemory2KHR");
}
static void glad_vk_load_VK_KHR_buffer_device_address(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_buffer_device_address)
		return;
	glad_vkGetBufferDeviceAddressKHR = (PFN_vkGetBufferDeviceAddressKHR)load(userptr, "vkGetBufferDeviceAddressKHR");
	glad_vkGetBufferOpaqueCaptureAddressKHR = (PFN_vkGetBufferOpaqueCaptureAddressKHR)load(userptr, "vkGetBufferOpaqueCaptureAddressKHR");
	glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR = (PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)load(userptr, "vkGetDeviceMemoryOpaqueCaptureAddressKHR");
}
static void glad_vk_load_VK_KHR_cooperative_matrix(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_cooperative_matrix)
		return;
	glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR =
		(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)load(userptr, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
}
static void glad_vk_load_VK_KHR_copy_commands2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_copy_commands2)
		return;
	glad_vkCmdBlitImage2KHR = (PFN_vkCmdBlitImage2KHR)load(userptr, "vkCmdBlitImage2KHR");
	glad_vkCmdCopyBuffer2KHR = (PFN_vkCmdCopyBuffer2KHR)load(userptr, "vkCmdCopyBuffer2KHR");
	glad_vkCmdCopyBufferToImage2KHR = (PFN_vkCmdCopyBufferToImage2KHR)load(userptr, "vkCmdCopyBufferToImage2KHR");
	glad_vkCmdCopyImage2KHR = (PFN_vkCmdCopyImage2KHR)load(userptr, "vkCmdCopyImage2KHR");
	glad_vkCmdCopyImageToBuffer2KHR = (PFN_vkCmdCopyImageToBuffer2KHR)load(userptr, "vkCmdCopyImageToBuffer2KHR");
	glad_vkCmdResolveImage2KHR = (PFN_vkCmdResolveImage2KHR)load(userptr, "vkCmdResolveImage2KHR");
}
static void glad_vk_load_VK_KHR_create_renderpass2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_create_renderpass2)
		return;
	glad_vkCmdBeginRenderPass2KHR = (PFN_vkCmdBeginRenderPass2KHR)load(userptr, "vkCmdBeginRenderPass2KHR");
	glad_vkCmdEndRenderPass2KHR = (PFN_vkCmdEndRenderPass2KHR)load(userptr, "vkCmdEndRenderPass2KHR");
	glad_vkCmdNextSubpass2KHR = (PFN_vkCmdNextSubpass2KHR)load(userptr, "vkCmdNextSubpass2KHR");
	glad_vkCreateRenderPass2KHR = (PFN_vkCreateRenderPass2KHR)load(userptr, "vkCreateRenderPass2KHR");
}
static void glad_vk_load_VK_KHR_deferred_host_operations(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_deferred_host_operations)
		return;
	glad_vkCreateDeferredOperationKHR = (PFN_vkCreateDeferredOperationKHR)load(userptr, "vkCreateDeferredOperationKHR");
	glad_vkDeferredOperationJoinKHR = (PFN_vkDeferredOperationJoinKHR)load(userptr, "vkDeferredOperationJoinKHR");
	glad_vkDestroyDeferredOperationKHR = (PFN_vkDestroyDeferredOperationKHR)load(userptr, "vkDestroyDeferredOperationKHR");
	glad_vkGetDeferredOperationMaxConcurrencyKHR = (PFN_vkGetDeferredOperationMaxConcurrencyKHR)load(userptr, "vkGetDeferredOperationMaxConcurrencyKHR");
	glad_vkGetDeferredOperationResultKHR = (PFN_vkGetDeferredOperationResultKHR)load(userptr, "vkGetDeferredOperationResultKHR");
}
static void glad_vk_load_VK_KHR_descriptor_update_template(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_descriptor_update_template)
		return;
	glad_vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR)load(userptr, "vkCmdPushDescriptorSetWithTemplateKHR");
	glad_vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR)load(userptr, "vkCreateDescriptorUpdateTemplateKHR");
	glad_vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR)load(userptr, "vkDestroyDescriptorUpdateTemplateKHR");
	glad_vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR)load(userptr, "vkUpdateDescriptorSetWithTemplateKHR");
}
static void glad_vk_load_VK_KHR_device_group(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_device_group)
		return;
	glad_vkAcquireNextImage2KHR = (PFN_vkAcquireNextImage2KHR)load(userptr, "vkAcquireNextImage2KHR");
	glad_vkCmdDispatchBaseKHR = (PFN_vkCmdDispatchBaseKHR)load(userptr, "vkCmdDispatchBaseKHR");
	glad_vkCmdSetDeviceMaskKHR = (PFN_vkCmdSetDeviceMaskKHR)load(userptr, "vkCmdSetDeviceMaskKHR");
	glad_vkGetDeviceGroupPeerMemoryFeaturesKHR = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)load(userptr, "vkGetDeviceGroupPeerMemoryFeaturesKHR");
	glad_vkGetDeviceGroupPresentCapabilitiesKHR = (PFN_vkGetDeviceGroupPresentCapabilitiesKHR)load(userptr, "vkGetDeviceGroupPresentCapabilitiesKHR");
	glad_vkGetDeviceGroupSurfacePresentModesKHR = (PFN_vkGetDeviceGroupSurfacePresentModesKHR)load(userptr, "vkGetDeviceGroupSurfacePresentModesKHR");
	glad_vkGetPhysicalDevicePresentRectanglesKHR = (PFN_vkGetPhysicalDevicePresentRectanglesKHR)load(userptr, "vkGetPhysicalDevicePresentRectanglesKHR");
}
static void glad_vk_load_VK_KHR_device_group_creation(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_device_group_creation)
		return;
	glad_vkEnumeratePhysicalDeviceGroupsKHR = (PFN_vkEnumeratePhysicalDeviceGroupsKHR)load(userptr, "vkEnumeratePhysicalDeviceGroupsKHR");
}
static void glad_vk_load_VK_KHR_display(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_display)
		return;
	glad_vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR)load(userptr, "vkCreateDisplayModeKHR");
	glad_vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR)load(userptr, "vkCreateDisplayPlaneSurfaceKHR");
	glad_vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR)load(userptr, "vkGetDisplayModePropertiesKHR");
	glad_vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR)load(userptr, "vkGetDisplayPlaneCapabilitiesKHR");
	glad_vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR)load(userptr, "vkGetDisplayPlaneSupportedDisplaysKHR");
	glad_vkGetPhysicalDeviceDisplayPlanePropertiesKHR =
		(PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)load(userptr, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
	glad_vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)load(userptr, "vkGetPhysicalDeviceDisplayPropertiesKHR");
}
static void glad_vk_load_VK_KHR_display_swapchain(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_display_swapchain)
		return;
	glad_vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR)load(userptr, "vkCreateSharedSwapchainsKHR");
}
static void glad_vk_load_VK_KHR_draw_indirect_count(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_draw_indirect_count)
		return;
	glad_vkCmdDrawIndexedIndirectCountKHR = (PFN_vkCmdDrawIndexedIndirectCountKHR)load(userptr, "vkCmdDrawIndexedIndirectCountKHR");
	glad_vkCmdDrawIndirectCountKHR = (PFN_vkCmdDrawIndirectCountKHR)load(userptr, "vkCmdDrawIndirectCountKHR");
}
static void glad_vk_load_VK_KHR_dynamic_rendering(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_dynamic_rendering)
		return;
	glad_vkCmdBeginRenderingKHR = (PFN_vkCmdBeginRenderingKHR)load(userptr, "vkCmdBeginRenderingKHR");
	glad_vkCmdEndRenderingKHR = (PFN_vkCmdEndRenderingKHR)load(userptr, "vkCmdEndRenderingKHR");
}
static void glad_vk_load_VK_KHR_external_fence_capabilities(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_external_fence_capabilities)
		return;
	glad_vkGetPhysicalDeviceExternalFencePropertiesKHR =
		(PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)load(userptr, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
}
static void glad_vk_load_VK_KHR_external_fence_fd(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_external_fence_fd)
		return;
	glad_vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR)load(userptr, "vkGetFenceFdKHR");
	glad_vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR)load(userptr, "vkImportFenceFdKHR");
}
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static void glad_vk_load_VK_KHR_external_fence_win32(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_external_fence_win32)
		return;
	glad_vkGetFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR)load(userptr, "vkGetFenceWin32HandleKHR");
	glad_vkImportFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR)load(userptr, "vkImportFenceWin32HandleKHR");
}

#endif
static void glad_vk_load_VK_KHR_external_memory_capabilities(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_external_memory_capabilities)
		return;
	glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR =
		(PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)load(userptr, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
}
static void glad_vk_load_VK_KHR_external_memory_fd(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_external_memory_fd)
		return;
	glad_vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR)load(userptr, "vkGetMemoryFdKHR");
	glad_vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR)load(userptr, "vkGetMemoryFdPropertiesKHR");
}
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static void glad_vk_load_VK_KHR_external_memory_win32(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_external_memory_win32)
		return;
	glad_vkGetMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR)load(userptr, "vkGetMemoryWin32HandleKHR");
	glad_vkGetMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR)load(userptr, "vkGetMemoryWin32HandlePropertiesKHR");
}

#endif
static void glad_vk_load_VK_KHR_external_semaphore_capabilities(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_external_semaphore_capabilities)
		return;
	glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR =
		(PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)load(userptr, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
}
static void glad_vk_load_VK_KHR_external_semaphore_fd(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_external_semaphore_fd)
		return;
	glad_vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR)load(userptr, "vkGetSemaphoreFdKHR");
	glad_vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR)load(userptr, "vkImportSemaphoreFdKHR");
}
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static void glad_vk_load_VK_KHR_external_semaphore_win32(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_external_semaphore_win32)
		return;
	glad_vkGetSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR)load(userptr, "vkGetSemaphoreWin32HandleKHR");
	glad_vkImportSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR)load(userptr, "vkImportSemaphoreWin32HandleKHR");
}

#endif
static void glad_vk_load_VK_KHR_fragment_shading_rate(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_fragment_shading_rate)
		return;
	glad_vkCmdSetFragmentShadingRateKHR = (PFN_vkCmdSetFragmentShadingRateKHR)load(userptr, "vkCmdSetFragmentShadingRateKHR");
	glad_vkGetPhysicalDeviceFragmentShadingRatesKHR =
		(PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)load(userptr, "vkGetPhysicalDeviceFragmentShadingRatesKHR");
}
static void glad_vk_load_VK_KHR_get_display_properties2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_get_display_properties2)
		return;
	glad_vkGetDisplayModeProperties2KHR = (PFN_vkGetDisplayModeProperties2KHR)load(userptr, "vkGetDisplayModeProperties2KHR");
	glad_vkGetDisplayPlaneCapabilities2KHR = (PFN_vkGetDisplayPlaneCapabilities2KHR)load(userptr, "vkGetDisplayPlaneCapabilities2KHR");
	glad_vkGetPhysicalDeviceDisplayPlaneProperties2KHR =
		(PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)load(userptr, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
	glad_vkGetPhysicalDeviceDisplayProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayProperties2KHR)load(userptr, "vkGetPhysicalDeviceDisplayProperties2KHR");
}
static void glad_vk_load_VK_KHR_get_memory_requirements2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_get_memory_requirements2)
		return;
	glad_vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR)load(userptr, "vkGetBufferMemoryRequirements2KHR");
	glad_vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR)load(userptr, "vkGetImageMemoryRequirements2KHR");
	glad_vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR)load(userptr, "vkGetImageSparseMemoryRequirements2KHR");
}
static void glad_vk_load_VK_KHR_get_physical_device_properties2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_get_physical_device_properties2)
		return;
	glad_vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR)load(userptr, "vkGetPhysicalDeviceFeatures2KHR");
	glad_vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR)load(userptr, "vkGetPhysicalDeviceFormatProperties2KHR");
	glad_vkGetPhysicalDeviceImageFormatProperties2KHR =
		(PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)load(userptr, "vkGetPhysicalDeviceImageFormatProperties2KHR");
	glad_vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR)load(userptr, "vkGetPhysicalDeviceMemoryProperties2KHR");
	glad_vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR)load(userptr, "vkGetPhysicalDeviceProperties2KHR");
	glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR =
		(PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)load(userptr, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
	glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR =
		(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)load(userptr, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
}
static void glad_vk_load_VK_KHR_get_surface_capabilities2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_get_surface_capabilities2)
		return;
	glad_vkGetPhysicalDeviceSurfaceCapabilities2KHR =
		(PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)load(userptr, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
	glad_vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)load(userptr, "vkGetPhysicalDeviceSurfaceFormats2KHR");
}
static void glad_vk_load_VK_KHR_maintenance1(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_maintenance1)
		return;
	glad_vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR)load(userptr, "vkTrimCommandPoolKHR");
}
static void glad_vk_load_VK_KHR_maintenance3(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_maintenance3)
		return;
	glad_vkGetDescriptorSetLayoutSupportKHR = (PFN_vkGetDescriptorSetLayoutSupportKHR)load(userptr, "vkGetDescriptorSetLayoutSupportKHR");
}
static void glad_vk_load_VK_KHR_maintenance4(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_maintenance4)
		return;
	glad_vkGetDeviceBufferMemoryRequirementsKHR = (PFN_vkGetDeviceBufferMemoryRequirementsKHR)load(userptr, "vkGetDeviceBufferMemoryRequirementsKHR");
	glad_vkGetDeviceImageMemoryRequirementsKHR = (PFN_vkGetDeviceImageMemoryRequirementsKHR)load(userptr, "vkGetDeviceImageMemoryRequirementsKHR");
	glad_vkGetDeviceImageSparseMemoryRequirementsKHR =
		(PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)load(userptr, "vkGetDeviceImageSparseMemoryRequirementsKHR");
}
static void glad_vk_load_VK_KHR_maintenance5(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_maintenance5)
		return;
	glad_vkCmdBindIndexBuffer2KHR = (PFN_vkCmdBindIndexBuffer2KHR)load(userptr, "vkCmdBindIndexBuffer2KHR");
	glad_vkGetDeviceImageSubresourceLayoutKHR = (PFN_vkGetDeviceImageSubresourceLayoutKHR)load(userptr, "vkGetDeviceImageSubresourceLayoutKHR");
	glad_vkGetImageSubresourceLayout2KHR = (PFN_vkGetImageSubresourceLayout2KHR)load(userptr, "vkGetImageSubresourceLayout2KHR");
	glad_vkGetRenderingAreaGranularityKHR = (PFN_vkGetRenderingAreaGranularityKHR)load(userptr, "vkGetRenderingAreaGranularityKHR");
}
static void glad_vk_load_VK_KHR_map_memory2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_map_memory2)
		return;
	glad_vkMapMemory2KHR = (PFN_vkMapMemory2KHR)load(userptr, "vkMapMemory2KHR");
	glad_vkUnmapMemory2KHR = (PFN_vkUnmapMemory2KHR)load(userptr, "vkUnmapMemory2KHR");
}
static void glad_vk_load_VK_KHR_performance_query(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_performance_query)
		return;
	glad_vkAcquireProfilingLockKHR = (PFN_vkAcquireProfilingLockKHR)load(userptr, "vkAcquireProfilingLockKHR");
	glad_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR =
		(PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)load(userptr,
	                                                                                  "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
	glad_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR =
		(PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)load(userptr, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
	glad_vkReleaseProfilingLockKHR = (PFN_vkReleaseProfilingLockKHR)load(userptr, "vkReleaseProfilingLockKHR");
}
static void glad_vk_load_VK_KHR_pipeline_executable_properties(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_pipeline_executable_properties)
		return;
	glad_vkGetPipelineExecutableInternalRepresentationsKHR =
		(PFN_vkGetPipelineExecutableInternalRepresentationsKHR)load(userptr, "vkGetPipelineExecutableInternalRepresentationsKHR");
	glad_vkGetPipelineExecutablePropertiesKHR = (PFN_vkGetPipelineExecutablePropertiesKHR)load(userptr, "vkGetPipelineExecutablePropertiesKHR");
	glad_vkGetPipelineExecutableStatisticsKHR = (PFN_vkGetPipelineExecutableStatisticsKHR)load(userptr, "vkGetPipelineExecutableStatisticsKHR");
}
static void glad_vk_load_VK_KHR_present_wait(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_present_wait)
		return;
	glad_vkWaitForPresentKHR = (PFN_vkWaitForPresentKHR)load(userptr, "vkWaitForPresentKHR");
}
static void glad_vk_load_VK_KHR_push_descriptor(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_push_descriptor)
		return;
	glad_vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR)load(userptr, "vkCmdPushDescriptorSetKHR");
	glad_vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR)load(userptr, "vkCmdPushDescriptorSetWithTemplateKHR");
}
static void glad_vk_load_VK_KHR_ray_tracing_maintenance1(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_ray_tracing_maintenance1)
		return;
	glad_vkCmdTraceRaysIndirect2KHR = (PFN_vkCmdTraceRaysIndirect2KHR)load(userptr, "vkCmdTraceRaysIndirect2KHR");
}
static void glad_vk_load_VK_KHR_ray_tracing_pipeline(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_ray_tracing_pipeline)
		return;
	glad_vkCmdSetRayTracingPipelineStackSizeKHR = (PFN_vkCmdSetRayTracingPipelineStackSizeKHR)load(userptr, "vkCmdSetRayTracingPipelineStackSizeKHR");
	glad_vkCmdTraceRaysIndirectKHR = (PFN_vkCmdTraceRaysIndirectKHR)load(userptr, "vkCmdTraceRaysIndirectKHR");
	glad_vkCmdTraceRaysKHR = (PFN_vkCmdTraceRaysKHR)load(userptr, "vkCmdTraceRaysKHR");
	glad_vkCreateRayTracingPipelinesKHR = (PFN_vkCreateRayTracingPipelinesKHR)load(userptr, "vkCreateRayTracingPipelinesKHR");
	glad_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR =
		(PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)load(userptr, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
	glad_vkGetRayTracingShaderGroupHandlesKHR = (PFN_vkGetRayTracingShaderGroupHandlesKHR)load(userptr, "vkGetRayTracingShaderGroupHandlesKHR");
	glad_vkGetRayTracingShaderGroupStackSizeKHR = (PFN_vkGetRayTracingShaderGroupStackSizeKHR)load(userptr, "vkGetRayTracingShaderGroupStackSizeKHR");
}
static void glad_vk_load_VK_KHR_sampler_ycbcr_conversion(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_sampler_ycbcr_conversion)
		return;
	glad_vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR)load(userptr, "vkCreateSamplerYcbcrConversionKHR");
	glad_vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR)load(userptr, "vkDestroySamplerYcbcrConversionKHR");
}
static void glad_vk_load_VK_KHR_shared_presentable_image(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_shared_presentable_image)
		return;
	glad_vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR)load(userptr, "vkGetSwapchainStatusKHR");
}
static void glad_vk_load_VK_KHR_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_surface)
		return;
	glad_vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR)load(userptr, "vkDestroySurfaceKHR");
	glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR =
		(PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)load(userptr, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
	glad_vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)load(userptr, "vkGetPhysicalDeviceSurfaceFormatsKHR");
	glad_vkGetPhysicalDeviceSurfacePresentModesKHR =
		(PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)load(userptr, "vkGetPhysicalDeviceSurfacePresentModesKHR");
	glad_vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR)load(userptr, "vkGetPhysicalDeviceSurfaceSupportKHR");
}
static void glad_vk_load_VK_KHR_swapchain(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_swapchain)
		return;
	glad_vkAcquireNextImage2KHR = (PFN_vkAcquireNextImage2KHR)load(userptr, "vkAcquireNextImage2KHR");
	glad_vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR)load(userptr, "vkAcquireNextImageKHR");
	glad_vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR)load(userptr, "vkCreateSwapchainKHR");
	glad_vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR)load(userptr, "vkDestroySwapchainKHR");
	glad_vkGetDeviceGroupPresentCapabilitiesKHR = (PFN_vkGetDeviceGroupPresentCapabilitiesKHR)load(userptr, "vkGetDeviceGroupPresentCapabilitiesKHR");
	glad_vkGetDeviceGroupSurfacePresentModesKHR = (PFN_vkGetDeviceGroupSurfacePresentModesKHR)load(userptr, "vkGetDeviceGroupSurfacePresentModesKHR");
	glad_vkGetPhysicalDevicePresentRectanglesKHR = (PFN_vkGetPhysicalDevicePresentRectanglesKHR)load(userptr, "vkGetPhysicalDevicePresentRectanglesKHR");
	glad_vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR)load(userptr, "vkGetSwapchainImagesKHR");
	glad_vkQueuePresentKHR = (PFN_vkQueuePresentKHR)load(userptr, "vkQueuePresentKHR");
}
static void glad_vk_load_VK_KHR_synchronization2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_synchronization2)
		return;
	glad_vkCmdPipelineBarrier2KHR = (PFN_vkCmdPipelineBarrier2KHR)load(userptr, "vkCmdPipelineBarrier2KHR");
	glad_vkCmdResetEvent2KHR = (PFN_vkCmdResetEvent2KHR)load(userptr, "vkCmdResetEvent2KHR");
	glad_vkCmdSetEvent2KHR = (PFN_vkCmdSetEvent2KHR)load(userptr, "vkCmdSetEvent2KHR");
	glad_vkCmdWaitEvents2KHR = (PFN_vkCmdWaitEvents2KHR)load(userptr, "vkCmdWaitEvents2KHR");
	glad_vkCmdWriteBufferMarker2AMD = (PFN_vkCmdWriteBufferMarker2AMD)load(userptr, "vkCmdWriteBufferMarker2AMD");
	glad_vkCmdWriteTimestamp2KHR = (PFN_vkCmdWriteTimestamp2KHR)load(userptr, "vkCmdWriteTimestamp2KHR");
	glad_vkGetQueueCheckpointData2NV = (PFN_vkGetQueueCheckpointData2NV)load(userptr, "vkGetQueueCheckpointData2NV");
	glad_vkQueueSubmit2KHR = (PFN_vkQueueSubmit2KHR)load(userptr, "vkQueueSubmit2KHR");
}
static void glad_vk_load_VK_KHR_timeline_semaphore(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_timeline_semaphore)
		return;
	glad_vkGetSemaphoreCounterValueKHR = (PFN_vkGetSemaphoreCounterValueKHR)load(userptr, "vkGetSemaphoreCounterValueKHR");
	glad_vkSignalSemaphoreKHR = (PFN_vkSignalSemaphoreKHR)load(userptr, "vkSignalSemaphoreKHR");
	glad_vkWaitSemaphoresKHR = (PFN_vkWaitSemaphoresKHR)load(userptr, "vkWaitSemaphoresKHR");
}
static void glad_vk_load_VK_KHR_video_decode_queue(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_video_decode_queue)
		return;
	glad_vkCmdDecodeVideoKHR = (PFN_vkCmdDecodeVideoKHR)load(userptr, "vkCmdDecodeVideoKHR");
}
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static void glad_vk_load_VK_KHR_video_encode_queue(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_video_encode_queue)
		return;
	glad_vkCmdEncodeVideoKHR = (PFN_vkCmdEncodeVideoKHR)load(userptr, "vkCmdEncodeVideoKHR");
	glad_vkGetEncodedVideoSessionParametersKHR = (PFN_vkGetEncodedVideoSessionParametersKHR)load(userptr, "vkGetEncodedVideoSessionParametersKHR");
	glad_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR =
		(PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)load(userptr, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR");
}

#endif
static void glad_vk_load_VK_KHR_video_queue(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_video_queue)
		return;
	glad_vkBindVideoSessionMemoryKHR = (PFN_vkBindVideoSessionMemoryKHR)load(userptr, "vkBindVideoSessionMemoryKHR");
	glad_vkCmdBeginVideoCodingKHR = (PFN_vkCmdBeginVideoCodingKHR)load(userptr, "vkCmdBeginVideoCodingKHR");
	glad_vkCmdControlVideoCodingKHR = (PFN_vkCmdControlVideoCodingKHR)load(userptr, "vkCmdControlVideoCodingKHR");
	glad_vkCmdEndVideoCodingKHR = (PFN_vkCmdEndVideoCodingKHR)load(userptr, "vkCmdEndVideoCodingKHR");
	glad_vkCreateVideoSessionKHR = (PFN_vkCreateVideoSessionKHR)load(userptr, "vkCreateVideoSessionKHR");
	glad_vkCreateVideoSessionParametersKHR = (PFN_vkCreateVideoSessionParametersKHR)load(userptr, "vkCreateVideoSessionParametersKHR");
	glad_vkDestroyVideoSessionKHR = (PFN_vkDestroyVideoSessionKHR)load(userptr, "vkDestroyVideoSessionKHR");
	glad_vkDestroyVideoSessionParametersKHR = (PFN_vkDestroyVideoSessionParametersKHR)load(userptr, "vkDestroyVideoSessionParametersKHR");
	glad_vkGetPhysicalDeviceVideoCapabilitiesKHR = (PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)load(userptr, "vkGetPhysicalDeviceVideoCapabilitiesKHR");
	glad_vkGetPhysicalDeviceVideoFormatPropertiesKHR =
		(PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)load(userptr, "vkGetPhysicalDeviceVideoFormatPropertiesKHR");
	glad_vkGetVideoSessionMemoryRequirementsKHR = (PFN_vkGetVideoSessionMemoryRequirementsKHR)load(userptr, "vkGetVideoSessionMemoryRequirementsKHR");
	glad_vkUpdateVideoSessionParametersKHR = (PFN_vkUpdateVideoSessionParametersKHR)load(userptr, "vkUpdateVideoSessionParametersKHR");
}
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
static void glad_vk_load_VK_KHR_wayland_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_wayland_surface)
		return;
	glad_vkCreateWaylandSurfaceKHR = (PFN_vkCreateWaylandSurfaceKHR)load(userptr, "vkCreateWaylandSurfaceKHR");
	glad_vkGetPhysicalDeviceWaylandPresentationSupportKHR =
		(PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)load(userptr, "vkGetPhysicalDeviceWaylandPresentationSupportKHR");
}

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static void glad_vk_load_VK_KHR_win32_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_win32_surface)
		return;
	glad_vkCreateWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR)load(userptr, "vkCreateWin32SurfaceKHR");
	glad_vkGetPhysicalDeviceWin32PresentationSupportKHR =
		(PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)load(userptr, "vkGetPhysicalDeviceWin32PresentationSupportKHR");
}

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
static void glad_vk_load_VK_KHR_xcb_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_xcb_surface)
		return;
	glad_vkCreateXcbSurfaceKHR = (PFN_vkCreateXcbSurfaceKHR)load(userptr, "vkCreateXcbSurfaceKHR");
	glad_vkGetPhysicalDeviceXcbPresentationSupportKHR =
		(PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)load(userptr, "vkGetPhysicalDeviceXcbPresentationSupportKHR");
}

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
static void glad_vk_load_VK_KHR_xlib_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_KHR_xlib_surface)
		return;
	glad_vkCreateXlibSurfaceKHR = (PFN_vkCreateXlibSurfaceKHR)load(userptr, "vkCreateXlibSurfaceKHR");
	glad_vkGetPhysicalDeviceXlibPresentationSupportKHR =
		(PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)load(userptr, "vkGetPhysicalDeviceXlibPresentationSupportKHR");
}

#endif
#if defined(VK_USE_PLATFORM_IOS_MVK)
static void glad_vk_load_VK_MVK_ios_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_MVK_ios_surface)
		return;
	glad_vkCreateIOSSurfaceMVK = (PFN_vkCreateIOSSurfaceMVK)load(userptr, "vkCreateIOSSurfaceMVK");
}

#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
static void glad_vk_load_VK_MVK_macos_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_MVK_macos_surface)
		return;
	glad_vkCreateMacOSSurfaceMVK = (PFN_vkCreateMacOSSurfaceMVK)load(userptr, "vkCreateMacOSSurfaceMVK");
}

#endif
#if defined(VK_USE_PLATFORM_VI_NN)
static void glad_vk_load_VK_NN_vi_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NN_vi_surface)
		return;
	glad_vkCreateViSurfaceNN = (PFN_vkCreateViSurfaceNN)load(userptr, "vkCreateViSurfaceNN");
}

#endif
static void glad_vk_load_VK_NVX_binary_import(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NVX_binary_import)
		return;
	glad_vkCmdCuLaunchKernelNVX = (PFN_vkCmdCuLaunchKernelNVX)load(userptr, "vkCmdCuLaunchKernelNVX");
	glad_vkCreateCuFunctionNVX = (PFN_vkCreateCuFunctionNVX)load(userptr, "vkCreateCuFunctionNVX");
	glad_vkCreateCuModuleNVX = (PFN_vkCreateCuModuleNVX)load(userptr, "vkCreateCuModuleNVX");
	glad_vkDestroyCuFunctionNVX = (PFN_vkDestroyCuFunctionNVX)load(userptr, "vkDestroyCuFunctionNVX");
	glad_vkDestroyCuModuleNVX = (PFN_vkDestroyCuModuleNVX)load(userptr, "vkDestroyCuModuleNVX");
}
static void glad_vk_load_VK_NVX_image_view_handle(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NVX_image_view_handle)
		return;
	glad_vkGetImageViewAddressNVX = (PFN_vkGetImageViewAddressNVX)load(userptr, "vkGetImageViewAddressNVX");
	glad_vkGetImageViewHandleNVX = (PFN_vkGetImageViewHandleNVX)load(userptr, "vkGetImageViewHandleNVX");
}
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static void glad_vk_load_VK_NV_acquire_winrt_display(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_acquire_winrt_display)
		return;
	glad_vkAcquireWinrtDisplayNV = (PFN_vkAcquireWinrtDisplayNV)load(userptr, "vkAcquireWinrtDisplayNV");
	glad_vkGetWinrtDisplayNV = (PFN_vkGetWinrtDisplayNV)load(userptr, "vkGetWinrtDisplayNV");
}

#endif
static void glad_vk_load_VK_NV_clip_space_w_scaling(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_clip_space_w_scaling)
		return;
	glad_vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV)load(userptr, "vkCmdSetViewportWScalingNV");
}
static void glad_vk_load_VK_NV_cooperative_matrix(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_cooperative_matrix)
		return;
	glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV =
		(PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)load(userptr, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
}
static void glad_vk_load_VK_NV_copy_memory_indirect(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_copy_memory_indirect)
		return;
	glad_vkCmdCopyMemoryIndirectNV = (PFN_vkCmdCopyMemoryIndirectNV)load(userptr, "vkCmdCopyMemoryIndirectNV");
	glad_vkCmdCopyMemoryToImageIndirectNV = (PFN_vkCmdCopyMemoryToImageIndirectNV)load(userptr, "vkCmdCopyMemoryToImageIndirectNV");
}
static void glad_vk_load_VK_NV_coverage_reduction_mode(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_coverage_reduction_mode)
		return;
	glad_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)
		load(userptr, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
}
static void glad_vk_load_VK_NV_device_diagnostic_checkpoints(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_device_diagnostic_checkpoints)
		return;
	glad_vkCmdSetCheckpointNV = (PFN_vkCmdSetCheckpointNV)load(userptr, "vkCmdSetCheckpointNV");
	glad_vkGetQueueCheckpointDataNV = (PFN_vkGetQueueCheckpointDataNV)load(userptr, "vkGetQueueCheckpointDataNV");
}
static void glad_vk_load_VK_NV_device_generated_commands(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_device_generated_commands)
		return;
	glad_vkCmdBindPipelineShaderGroupNV = (PFN_vkCmdBindPipelineShaderGroupNV)load(userptr, "vkCmdBindPipelineShaderGroupNV");
	glad_vkCmdExecuteGeneratedCommandsNV = (PFN_vkCmdExecuteGeneratedCommandsNV)load(userptr, "vkCmdExecuteGeneratedCommandsNV");
	glad_vkCmdPreprocessGeneratedCommandsNV = (PFN_vkCmdPreprocessGeneratedCommandsNV)load(userptr, "vkCmdPreprocessGeneratedCommandsNV");
	glad_vkCreateIndirectCommandsLayoutNV = (PFN_vkCreateIndirectCommandsLayoutNV)load(userptr, "vkCreateIndirectCommandsLayoutNV");
	glad_vkDestroyIndirectCommandsLayoutNV = (PFN_vkDestroyIndirectCommandsLayoutNV)load(userptr, "vkDestroyIndirectCommandsLayoutNV");
	glad_vkGetGeneratedCommandsMemoryRequirementsNV =
		(PFN_vkGetGeneratedCommandsMemoryRequirementsNV)load(userptr, "vkGetGeneratedCommandsMemoryRequirementsNV");
}
static void glad_vk_load_VK_NV_device_generated_commands_compute(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_device_generated_commands_compute)
		return;
	glad_vkCmdUpdatePipelineIndirectBufferNV = (PFN_vkCmdUpdatePipelineIndirectBufferNV)load(userptr, "vkCmdUpdatePipelineIndirectBufferNV");
	glad_vkGetPipelineIndirectDeviceAddressNV = (PFN_vkGetPipelineIndirectDeviceAddressNV)load(userptr, "vkGetPipelineIndirectDeviceAddressNV");
	glad_vkGetPipelineIndirectMemoryRequirementsNV =
		(PFN_vkGetPipelineIndirectMemoryRequirementsNV)load(userptr, "vkGetPipelineIndirectMemoryRequirementsNV");
}
static void glad_vk_load_VK_NV_external_memory_capabilities(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_external_memory_capabilities)
		return;
	glad_vkGetPhysicalDeviceExternalImageFormatPropertiesNV =
		(PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)load(userptr, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
}
static void glad_vk_load_VK_NV_external_memory_rdma(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_external_memory_rdma)
		return;
	glad_vkGetMemoryRemoteAddressNV = (PFN_vkGetMemoryRemoteAddressNV)load(userptr, "vkGetMemoryRemoteAddressNV");
}
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static void glad_vk_load_VK_NV_external_memory_win32(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_external_memory_win32)
		return;
	glad_vkGetMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV)load(userptr, "vkGetMemoryWin32HandleNV");
}

#endif
static void glad_vk_load_VK_NV_fragment_shading_rate_enums(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_fragment_shading_rate_enums)
		return;
	glad_vkCmdSetFragmentShadingRateEnumNV = (PFN_vkCmdSetFragmentShadingRateEnumNV)load(userptr, "vkCmdSetFragmentShadingRateEnumNV");
}
static void glad_vk_load_VK_NV_low_latency2(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_low_latency2)
		return;
	glad_vkGetLatencyTimingsNV = (PFN_vkGetLatencyTimingsNV)load(userptr, "vkGetLatencyTimingsNV");
	glad_vkLatencySleepNV = (PFN_vkLatencySleepNV)load(userptr, "vkLatencySleepNV");
	glad_vkQueueNotifyOutOfBandNV = (PFN_vkQueueNotifyOutOfBandNV)load(userptr, "vkQueueNotifyOutOfBandNV");
	glad_vkSetLatencyMarkerNV = (PFN_vkSetLatencyMarkerNV)load(userptr, "vkSetLatencyMarkerNV");
	glad_vkSetLatencySleepModeNV = (PFN_vkSetLatencySleepModeNV)load(userptr, "vkSetLatencySleepModeNV");
}
static void glad_vk_load_VK_NV_memory_decompression(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_memory_decompression)
		return;
	glad_vkCmdDecompressMemoryIndirectCountNV = (PFN_vkCmdDecompressMemoryIndirectCountNV)load(userptr, "vkCmdDecompressMemoryIndirectCountNV");
	glad_vkCmdDecompressMemoryNV = (PFN_vkCmdDecompressMemoryNV)load(userptr, "vkCmdDecompressMemoryNV");
}
static void glad_vk_load_VK_NV_mesh_shader(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_mesh_shader)
		return;
	glad_vkCmdDrawMeshTasksIndirectCountNV = (PFN_vkCmdDrawMeshTasksIndirectCountNV)load(userptr, "vkCmdDrawMeshTasksIndirectCountNV");
	glad_vkCmdDrawMeshTasksIndirectNV = (PFN_vkCmdDrawMeshTasksIndirectNV)load(userptr, "vkCmdDrawMeshTasksIndirectNV");
	glad_vkCmdDrawMeshTasksNV = (PFN_vkCmdDrawMeshTasksNV)load(userptr, "vkCmdDrawMeshTasksNV");
}
static void glad_vk_load_VK_NV_optical_flow(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_optical_flow)
		return;
	glad_vkBindOpticalFlowSessionImageNV = (PFN_vkBindOpticalFlowSessionImageNV)load(userptr, "vkBindOpticalFlowSessionImageNV");
	glad_vkCmdOpticalFlowExecuteNV = (PFN_vkCmdOpticalFlowExecuteNV)load(userptr, "vkCmdOpticalFlowExecuteNV");
	glad_vkCreateOpticalFlowSessionNV = (PFN_vkCreateOpticalFlowSessionNV)load(userptr, "vkCreateOpticalFlowSessionNV");
	glad_vkDestroyOpticalFlowSessionNV = (PFN_vkDestroyOpticalFlowSessionNV)load(userptr, "vkDestroyOpticalFlowSessionNV");
	glad_vkGetPhysicalDeviceOpticalFlowImageFormatsNV =
		(PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)load(userptr, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
}
static void glad_vk_load_VK_NV_ray_tracing(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_ray_tracing)
		return;
	glad_vkBindAccelerationStructureMemoryNV = (PFN_vkBindAccelerationStructureMemoryNV)load(userptr, "vkBindAccelerationStructureMemoryNV");
	glad_vkCmdBuildAccelerationStructureNV = (PFN_vkCmdBuildAccelerationStructureNV)load(userptr, "vkCmdBuildAccelerationStructureNV");
	glad_vkCmdCopyAccelerationStructureNV = (PFN_vkCmdCopyAccelerationStructureNV)load(userptr, "vkCmdCopyAccelerationStructureNV");
	glad_vkCmdTraceRaysNV = (PFN_vkCmdTraceRaysNV)load(userptr, "vkCmdTraceRaysNV");
	glad_vkCmdWriteAccelerationStructuresPropertiesNV =
		(PFN_vkCmdWriteAccelerationStructuresPropertiesNV)load(userptr, "vkCmdWriteAccelerationStructuresPropertiesNV");
	glad_vkCompileDeferredNV = (PFN_vkCompileDeferredNV)load(userptr, "vkCompileDeferredNV");
	glad_vkCreateAccelerationStructureNV = (PFN_vkCreateAccelerationStructureNV)load(userptr, "vkCreateAccelerationStructureNV");
	glad_vkCreateRayTracingPipelinesNV = (PFN_vkCreateRayTracingPipelinesNV)load(userptr, "vkCreateRayTracingPipelinesNV");
	glad_vkDestroyAccelerationStructureNV = (PFN_vkDestroyAccelerationStructureNV)load(userptr, "vkDestroyAccelerationStructureNV");
	glad_vkGetAccelerationStructureHandleNV = (PFN_vkGetAccelerationStructureHandleNV)load(userptr, "vkGetAccelerationStructureHandleNV");
	glad_vkGetAccelerationStructureMemoryRequirementsNV =
		(PFN_vkGetAccelerationStructureMemoryRequirementsNV)load(userptr, "vkGetAccelerationStructureMemoryRequirementsNV");
	glad_vkGetRayTracingShaderGroupHandlesNV = (PFN_vkGetRayTracingShaderGroupHandlesNV)load(userptr, "vkGetRayTracingShaderGroupHandlesNV");
}
static void glad_vk_load_VK_NV_scissor_exclusive(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_scissor_exclusive)
		return;
	glad_vkCmdSetExclusiveScissorEnableNV = (PFN_vkCmdSetExclusiveScissorEnableNV)load(userptr, "vkCmdSetExclusiveScissorEnableNV");
	glad_vkCmdSetExclusiveScissorNV = (PFN_vkCmdSetExclusiveScissorNV)load(userptr, "vkCmdSetExclusiveScissorNV");
}
static void glad_vk_load_VK_NV_shading_rate_image(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_NV_shading_rate_image)
		return;
	glad_vkCmdBindShadingRateImageNV = (PFN_vkCmdBindShadingRateImageNV)load(userptr, "vkCmdBindShadingRateImageNV");
	glad_vkCmdSetCoarseSampleOrderNV = (PFN_vkCmdSetCoarseSampleOrderNV)load(userptr, "vkCmdSetCoarseSampleOrderNV");
	glad_vkCmdSetViewportShadingRatePaletteNV = (PFN_vkCmdSetViewportShadingRatePaletteNV)load(userptr, "vkCmdSetViewportShadingRatePaletteNV");
}
static void glad_vk_load_VK_QCOM_tile_properties(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_QCOM_tile_properties)
		return;
	glad_vkGetDynamicRenderingTilePropertiesQCOM = (PFN_vkGetDynamicRenderingTilePropertiesQCOM)load(userptr, "vkGetDynamicRenderingTilePropertiesQCOM");
	glad_vkGetFramebufferTilePropertiesQCOM = (PFN_vkGetFramebufferTilePropertiesQCOM)load(userptr, "vkGetFramebufferTilePropertiesQCOM");
}
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
static void glad_vk_load_VK_QNX_external_memory_screen_buffer(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_QNX_external_memory_screen_buffer)
		return;
	glad_vkGetScreenBufferPropertiesQNX = (PFN_vkGetScreenBufferPropertiesQNX)load(userptr, "vkGetScreenBufferPropertiesQNX");
}

#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
static void glad_vk_load_VK_QNX_screen_surface(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_QNX_screen_surface)
		return;
	glad_vkCreateScreenSurfaceQNX = (PFN_vkCreateScreenSurfaceQNX)load(userptr, "vkCreateScreenSurfaceQNX");
	glad_vkGetPhysicalDeviceScreenPresentationSupportQNX =
		(PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX)load(userptr, "vkGetPhysicalDeviceScreenPresentationSupportQNX");
}

#endif
static void glad_vk_load_VK_VALVE_descriptor_set_host_mapping(GLADuserptrloadfunc load, void *userptr) {
	if (!GLAD_VK_VALVE_descriptor_set_host_mapping)
		return;
	glad_vkGetDescriptorSetHostMappingVALVE = (PFN_vkGetDescriptorSetHostMappingVALVE)load(userptr, "vkGetDescriptorSetHostMappingVALVE");
	glad_vkGetDescriptorSetLayoutHostMappingInfoVALVE =
		(PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)load(userptr, "vkGetDescriptorSetLayoutHostMappingInfoVALVE");
}


static void glad_vk_resolve_aliases(void) {
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)

#endif
	if (glad_vkBindBufferMemory2 == NULL && glad_vkBindBufferMemory2KHR != NULL)
		glad_vkBindBufferMemory2 = (PFN_vkBindBufferMemory2)glad_vkBindBufferMemory2KHR;
	if (glad_vkBindBufferMemory2KHR == NULL && glad_vkBindBufferMemory2 != NULL)
		glad_vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR)glad_vkBindBufferMemory2;
	if (glad_vkBindImageMemory2 == NULL && glad_vkBindImageMemory2KHR != NULL)
		glad_vkBindImageMemory2 = (PFN_vkBindImageMemory2)glad_vkBindImageMemory2KHR;
	if (glad_vkBindImageMemory2KHR == NULL && glad_vkBindImageMemory2 != NULL)
		glad_vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR)glad_vkBindImageMemory2;
	if (glad_vkCmdBeginRendering == NULL && glad_vkCmdBeginRenderingKHR != NULL)
		glad_vkCmdBeginRendering = (PFN_vkCmdBeginRendering)glad_vkCmdBeginRenderingKHR;
	if (glad_vkCmdBeginRenderingKHR == NULL && glad_vkCmdBeginRendering != NULL)
		glad_vkCmdBeginRenderingKHR = (PFN_vkCmdBeginRenderingKHR)glad_vkCmdBeginRendering;
	if (glad_vkCmdBeginRenderPass2 == NULL && glad_vkCmdBeginRenderPass2KHR != NULL)
		glad_vkCmdBeginRenderPass2 = (PFN_vkCmdBeginRenderPass2)glad_vkCmdBeginRenderPass2KHR;
	if (glad_vkCmdBeginRenderPass2KHR == NULL && glad_vkCmdBeginRenderPass2 != NULL)
		glad_vkCmdBeginRenderPass2KHR = (PFN_vkCmdBeginRenderPass2KHR)glad_vkCmdBeginRenderPass2;
	if (glad_vkCmdBindVertexBuffers2 == NULL && glad_vkCmdBindVertexBuffers2EXT != NULL)
		glad_vkCmdBindVertexBuffers2 = (PFN_vkCmdBindVertexBuffers2)glad_vkCmdBindVertexBuffers2EXT;
	if (glad_vkCmdBindVertexBuffers2EXT == NULL && glad_vkCmdBindVertexBuffers2 != NULL)
		glad_vkCmdBindVertexBuffers2EXT = (PFN_vkCmdBindVertexBuffers2EXT)glad_vkCmdBindVertexBuffers2;
	if (glad_vkCmdBlitImage2 == NULL && glad_vkCmdBlitImage2KHR != NULL)
		glad_vkCmdBlitImage2 = (PFN_vkCmdBlitImage2)glad_vkCmdBlitImage2KHR;
	if (glad_vkCmdBlitImage2KHR == NULL && glad_vkCmdBlitImage2 != NULL)
		glad_vkCmdBlitImage2KHR = (PFN_vkCmdBlitImage2KHR)glad_vkCmdBlitImage2;
	if (glad_vkCmdCopyBuffer2 == NULL && glad_vkCmdCopyBuffer2KHR != NULL)
		glad_vkCmdCopyBuffer2 = (PFN_vkCmdCopyBuffer2)glad_vkCmdCopyBuffer2KHR;
	if (glad_vkCmdCopyBuffer2KHR == NULL && glad_vkCmdCopyBuffer2 != NULL)
		glad_vkCmdCopyBuffer2KHR = (PFN_vkCmdCopyBuffer2KHR)glad_vkCmdCopyBuffer2;
	if (glad_vkCmdCopyBufferToImage2 == NULL && glad_vkCmdCopyBufferToImage2KHR != NULL)
		glad_vkCmdCopyBufferToImage2 = (PFN_vkCmdCopyBufferToImage2)glad_vkCmdCopyBufferToImage2KHR;
	if (glad_vkCmdCopyBufferToImage2KHR == NULL && glad_vkCmdCopyBufferToImage2 != NULL)
		glad_vkCmdCopyBufferToImage2KHR = (PFN_vkCmdCopyBufferToImage2KHR)glad_vkCmdCopyBufferToImage2;
	if (glad_vkCmdCopyImage2 == NULL && glad_vkCmdCopyImage2KHR != NULL)
		glad_vkCmdCopyImage2 = (PFN_vkCmdCopyImage2)glad_vkCmdCopyImage2KHR;
	if (glad_vkCmdCopyImage2KHR == NULL && glad_vkCmdCopyImage2 != NULL)
		glad_vkCmdCopyImage2KHR = (PFN_vkCmdCopyImage2KHR)glad_vkCmdCopyImage2;
	if (glad_vkCmdCopyImageToBuffer2 == NULL && glad_vkCmdCopyImageToBuffer2KHR != NULL)
		glad_vkCmdCopyImageToBuffer2 = (PFN_vkCmdCopyImageToBuffer2)glad_vkCmdCopyImageToBuffer2KHR;
	if (glad_vkCmdCopyImageToBuffer2KHR == NULL && glad_vkCmdCopyImageToBuffer2 != NULL)
		glad_vkCmdCopyImageToBuffer2KHR = (PFN_vkCmdCopyImageToBuffer2KHR)glad_vkCmdCopyImageToBuffer2;
	if (glad_vkCmdDispatchBase == NULL && glad_vkCmdDispatchBaseKHR != NULL)
		glad_vkCmdDispatchBase = (PFN_vkCmdDispatchBase)glad_vkCmdDispatchBaseKHR;
	if (glad_vkCmdDispatchBaseKHR == NULL && glad_vkCmdDispatchBase != NULL)
		glad_vkCmdDispatchBaseKHR = (PFN_vkCmdDispatchBaseKHR)glad_vkCmdDispatchBase;
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
	if (glad_vkCmdDrawIndexedIndirectCount == NULL && glad_vkCmdDrawIndexedIndirectCountAMD != NULL)
		glad_vkCmdDrawIndexedIndirectCount = (PFN_vkCmdDrawIndexedIndirectCount)glad_vkCmdDrawIndexedIndirectCountAMD;
	if (glad_vkCmdDrawIndexedIndirectCount == NULL && glad_vkCmdDrawIndexedIndirectCountKHR != NULL)
		glad_vkCmdDrawIndexedIndirectCount = (PFN_vkCmdDrawIndexedIndirectCount)glad_vkCmdDrawIndexedIndirectCountKHR;
	if (glad_vkCmdDrawIndexedIndirectCountAMD == NULL && glad_vkCmdDrawIndexedIndirectCount != NULL)
		glad_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD)glad_vkCmdDrawIndexedIndirectCount;
	if (glad_vkCmdDrawIndexedIndirectCountAMD == NULL && glad_vkCmdDrawIndexedIndirectCountKHR != NULL)
		glad_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD)glad_vkCmdDrawIndexedIndirectCountKHR;
	if (glad_vkCmdDrawIndexedIndirectCountKHR == NULL && glad_vkCmdDrawIndexedIndirectCount != NULL)
		glad_vkCmdDrawIndexedIndirectCountKHR = (PFN_vkCmdDrawIndexedIndirectCountKHR)glad_vkCmdDrawIndexedIndirectCount;
	if (glad_vkCmdDrawIndexedIndirectCountKHR == NULL && glad_vkCmdDrawIndexedIndirectCountAMD != NULL)
		glad_vkCmdDrawIndexedIndirectCountKHR = (PFN_vkCmdDrawIndexedIndirectCountKHR)glad_vkCmdDrawIndexedIndirectCountAMD;
	if (glad_vkCmdDrawIndirectCount == NULL && glad_vkCmdDrawIndirectCountAMD != NULL)
		glad_vkCmdDrawIndirectCount = (PFN_vkCmdDrawIndirectCount)glad_vkCmdDrawIndirectCountAMD;
	if (glad_vkCmdDrawIndirectCount == NULL && glad_vkCmdDrawIndirectCountKHR != NULL)
		glad_vkCmdDrawIndirectCount = (PFN_vkCmdDrawIndirectCount)glad_vkCmdDrawIndirectCountKHR;
	if (glad_vkCmdDrawIndirectCountAMD == NULL && glad_vkCmdDrawIndirectCount != NULL)
		glad_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD)glad_vkCmdDrawIndirectCount;
	if (glad_vkCmdDrawIndirectCountAMD == NULL && glad_vkCmdDrawIndirectCountKHR != NULL)
		glad_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD)glad_vkCmdDrawIndirectCountKHR;
	if (glad_vkCmdDrawIndirectCountKHR == NULL && glad_vkCmdDrawIndirectCount != NULL)
		glad_vkCmdDrawIndirectCountKHR = (PFN_vkCmdDrawIndirectCountKHR)glad_vkCmdDrawIndirectCount;
	if (glad_vkCmdDrawIndirectCountKHR == NULL && glad_vkCmdDrawIndirectCountAMD != NULL)
		glad_vkCmdDrawIndirectCountKHR = (PFN_vkCmdDrawIndirectCountKHR)glad_vkCmdDrawIndirectCountAMD;
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
	if (glad_vkCmdEndRendering == NULL && glad_vkCmdEndRenderingKHR != NULL)
		glad_vkCmdEndRendering = (PFN_vkCmdEndRendering)glad_vkCmdEndRenderingKHR;
	if (glad_vkCmdEndRenderingKHR == NULL && glad_vkCmdEndRendering != NULL)
		glad_vkCmdEndRenderingKHR = (PFN_vkCmdEndRenderingKHR)glad_vkCmdEndRendering;
	if (glad_vkCmdEndRenderPass2 == NULL && glad_vkCmdEndRenderPass2KHR != NULL)
		glad_vkCmdEndRenderPass2 = (PFN_vkCmdEndRenderPass2)glad_vkCmdEndRenderPass2KHR;
	if (glad_vkCmdEndRenderPass2KHR == NULL && glad_vkCmdEndRenderPass2 != NULL)
		glad_vkCmdEndRenderPass2KHR = (PFN_vkCmdEndRenderPass2KHR)glad_vkCmdEndRenderPass2;
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
	if (glad_vkCmdNextSubpass2 == NULL && glad_vkCmdNextSubpass2KHR != NULL)
		glad_vkCmdNextSubpass2 = (PFN_vkCmdNextSubpass2)glad_vkCmdNextSubpass2KHR;
	if (glad_vkCmdNextSubpass2KHR == NULL && glad_vkCmdNextSubpass2 != NULL)
		glad_vkCmdNextSubpass2KHR = (PFN_vkCmdNextSubpass2KHR)glad_vkCmdNextSubpass2;
	if (glad_vkCmdPipelineBarrier2 == NULL && glad_vkCmdPipelineBarrier2KHR != NULL)
		glad_vkCmdPipelineBarrier2 = (PFN_vkCmdPipelineBarrier2)glad_vkCmdPipelineBarrier2KHR;
	if (glad_vkCmdPipelineBarrier2KHR == NULL && glad_vkCmdPipelineBarrier2 != NULL)
		glad_vkCmdPipelineBarrier2KHR = (PFN_vkCmdPipelineBarrier2KHR)glad_vkCmdPipelineBarrier2;
	if (glad_vkCmdResetEvent2 == NULL && glad_vkCmdResetEvent2KHR != NULL)
		glad_vkCmdResetEvent2 = (PFN_vkCmdResetEvent2)glad_vkCmdResetEvent2KHR;
	if (glad_vkCmdResetEvent2KHR == NULL && glad_vkCmdResetEvent2 != NULL)
		glad_vkCmdResetEvent2KHR = (PFN_vkCmdResetEvent2KHR)glad_vkCmdResetEvent2;
	if (glad_vkCmdResolveImage2 == NULL && glad_vkCmdResolveImage2KHR != NULL)
		glad_vkCmdResolveImage2 = (PFN_vkCmdResolveImage2)glad_vkCmdResolveImage2KHR;
	if (glad_vkCmdResolveImage2KHR == NULL && glad_vkCmdResolveImage2 != NULL)
		glad_vkCmdResolveImage2KHR = (PFN_vkCmdResolveImage2KHR)glad_vkCmdResolveImage2;
	if (glad_vkCmdSetCullMode == NULL && glad_vkCmdSetCullModeEXT != NULL)
		glad_vkCmdSetCullMode = (PFN_vkCmdSetCullMode)glad_vkCmdSetCullModeEXT;
	if (glad_vkCmdSetCullModeEXT == NULL && glad_vkCmdSetCullMode != NULL)
		glad_vkCmdSetCullModeEXT = (PFN_vkCmdSetCullModeEXT)glad_vkCmdSetCullMode;
	if (glad_vkCmdSetDepthBiasEnable == NULL && glad_vkCmdSetDepthBiasEnableEXT != NULL)
		glad_vkCmdSetDepthBiasEnable = (PFN_vkCmdSetDepthBiasEnable)glad_vkCmdSetDepthBiasEnableEXT;
	if (glad_vkCmdSetDepthBiasEnableEXT == NULL && glad_vkCmdSetDepthBiasEnable != NULL)
		glad_vkCmdSetDepthBiasEnableEXT = (PFN_vkCmdSetDepthBiasEnableEXT)glad_vkCmdSetDepthBiasEnable;
	if (glad_vkCmdSetDepthBoundsTestEnable == NULL && glad_vkCmdSetDepthBoundsTestEnableEXT != NULL)
		glad_vkCmdSetDepthBoundsTestEnable = (PFN_vkCmdSetDepthBoundsTestEnable)glad_vkCmdSetDepthBoundsTestEnableEXT;
	if (glad_vkCmdSetDepthBoundsTestEnableEXT == NULL && glad_vkCmdSetDepthBoundsTestEnable != NULL)
		glad_vkCmdSetDepthBoundsTestEnableEXT = (PFN_vkCmdSetDepthBoundsTestEnableEXT)glad_vkCmdSetDepthBoundsTestEnable;
	if (glad_vkCmdSetDepthCompareOp == NULL && glad_vkCmdSetDepthCompareOpEXT != NULL)
		glad_vkCmdSetDepthCompareOp = (PFN_vkCmdSetDepthCompareOp)glad_vkCmdSetDepthCompareOpEXT;
	if (glad_vkCmdSetDepthCompareOpEXT == NULL && glad_vkCmdSetDepthCompareOp != NULL)
		glad_vkCmdSetDepthCompareOpEXT = (PFN_vkCmdSetDepthCompareOpEXT)glad_vkCmdSetDepthCompareOp;
	if (glad_vkCmdSetDepthTestEnable == NULL && glad_vkCmdSetDepthTestEnableEXT != NULL)
		glad_vkCmdSetDepthTestEnable = (PFN_vkCmdSetDepthTestEnable)glad_vkCmdSetDepthTestEnableEXT;
	if (glad_vkCmdSetDepthTestEnableEXT == NULL && glad_vkCmdSetDepthTestEnable != NULL)
		glad_vkCmdSetDepthTestEnableEXT = (PFN_vkCmdSetDepthTestEnableEXT)glad_vkCmdSetDepthTestEnable;
	if (glad_vkCmdSetDepthWriteEnable == NULL && glad_vkCmdSetDepthWriteEnableEXT != NULL)
		glad_vkCmdSetDepthWriteEnable = (PFN_vkCmdSetDepthWriteEnable)glad_vkCmdSetDepthWriteEnableEXT;
	if (glad_vkCmdSetDepthWriteEnableEXT == NULL && glad_vkCmdSetDepthWriteEnable != NULL)
		glad_vkCmdSetDepthWriteEnableEXT = (PFN_vkCmdSetDepthWriteEnableEXT)glad_vkCmdSetDepthWriteEnable;
	if (glad_vkCmdSetDeviceMask == NULL && glad_vkCmdSetDeviceMaskKHR != NULL)
		glad_vkCmdSetDeviceMask = (PFN_vkCmdSetDeviceMask)glad_vkCmdSetDeviceMaskKHR;
	if (glad_vkCmdSetDeviceMaskKHR == NULL && glad_vkCmdSetDeviceMask != NULL)
		glad_vkCmdSetDeviceMaskKHR = (PFN_vkCmdSetDeviceMaskKHR)glad_vkCmdSetDeviceMask;
	if (glad_vkCmdSetEvent2 == NULL && glad_vkCmdSetEvent2KHR != NULL)
		glad_vkCmdSetEvent2 = (PFN_vkCmdSetEvent2)glad_vkCmdSetEvent2KHR;
	if (glad_vkCmdSetEvent2KHR == NULL && glad_vkCmdSetEvent2 != NULL)
		glad_vkCmdSetEvent2KHR = (PFN_vkCmdSetEvent2KHR)glad_vkCmdSetEvent2;
	if (glad_vkCmdSetFrontFace == NULL && glad_vkCmdSetFrontFaceEXT != NULL)
		glad_vkCmdSetFrontFace = (PFN_vkCmdSetFrontFace)glad_vkCmdSetFrontFaceEXT;
	if (glad_vkCmdSetFrontFaceEXT == NULL && glad_vkCmdSetFrontFace != NULL)
		glad_vkCmdSetFrontFaceEXT = (PFN_vkCmdSetFrontFaceEXT)glad_vkCmdSetFrontFace;
	if (glad_vkCmdSetPrimitiveRestartEnable == NULL && glad_vkCmdSetPrimitiveRestartEnableEXT != NULL)
		glad_vkCmdSetPrimitiveRestartEnable = (PFN_vkCmdSetPrimitiveRestartEnable)glad_vkCmdSetPrimitiveRestartEnableEXT;
	if (glad_vkCmdSetPrimitiveRestartEnableEXT == NULL && glad_vkCmdSetPrimitiveRestartEnable != NULL)
		glad_vkCmdSetPrimitiveRestartEnableEXT = (PFN_vkCmdSetPrimitiveRestartEnableEXT)glad_vkCmdSetPrimitiveRestartEnable;
	if (glad_vkCmdSetPrimitiveTopology == NULL && glad_vkCmdSetPrimitiveTopologyEXT != NULL)
		glad_vkCmdSetPrimitiveTopology = (PFN_vkCmdSetPrimitiveTopology)glad_vkCmdSetPrimitiveTopologyEXT;
	if (glad_vkCmdSetPrimitiveTopologyEXT == NULL && glad_vkCmdSetPrimitiveTopology != NULL)
		glad_vkCmdSetPrimitiveTopologyEXT = (PFN_vkCmdSetPrimitiveTopologyEXT)glad_vkCmdSetPrimitiveTopology;
	if (glad_vkCmdSetRasterizerDiscardEnable == NULL && glad_vkCmdSetRasterizerDiscardEnableEXT != NULL)
		glad_vkCmdSetRasterizerDiscardEnable = (PFN_vkCmdSetRasterizerDiscardEnable)glad_vkCmdSetRasterizerDiscardEnableEXT;
	if (glad_vkCmdSetRasterizerDiscardEnableEXT == NULL && glad_vkCmdSetRasterizerDiscardEnable != NULL)
		glad_vkCmdSetRasterizerDiscardEnableEXT = (PFN_vkCmdSetRasterizerDiscardEnableEXT)glad_vkCmdSetRasterizerDiscardEnable;
	if (glad_vkCmdSetScissorWithCount == NULL && glad_vkCmdSetScissorWithCountEXT != NULL)
		glad_vkCmdSetScissorWithCount = (PFN_vkCmdSetScissorWithCount)glad_vkCmdSetScissorWithCountEXT;
	if (glad_vkCmdSetScissorWithCountEXT == NULL && glad_vkCmdSetScissorWithCount != NULL)
		glad_vkCmdSetScissorWithCountEXT = (PFN_vkCmdSetScissorWithCountEXT)glad_vkCmdSetScissorWithCount;
	if (glad_vkCmdSetStencilOp == NULL && glad_vkCmdSetStencilOpEXT != NULL)
		glad_vkCmdSetStencilOp = (PFN_vkCmdSetStencilOp)glad_vkCmdSetStencilOpEXT;
	if (glad_vkCmdSetStencilOpEXT == NULL && glad_vkCmdSetStencilOp != NULL)
		glad_vkCmdSetStencilOpEXT = (PFN_vkCmdSetStencilOpEXT)glad_vkCmdSetStencilOp;
	if (glad_vkCmdSetStencilTestEnable == NULL && glad_vkCmdSetStencilTestEnableEXT != NULL)
		glad_vkCmdSetStencilTestEnable = (PFN_vkCmdSetStencilTestEnable)glad_vkCmdSetStencilTestEnableEXT;
	if (glad_vkCmdSetStencilTestEnableEXT == NULL && glad_vkCmdSetStencilTestEnable != NULL)
		glad_vkCmdSetStencilTestEnableEXT = (PFN_vkCmdSetStencilTestEnableEXT)glad_vkCmdSetStencilTestEnable;
	if (glad_vkCmdSetViewportWithCount == NULL && glad_vkCmdSetViewportWithCountEXT != NULL)
		glad_vkCmdSetViewportWithCount = (PFN_vkCmdSetViewportWithCount)glad_vkCmdSetViewportWithCountEXT;
	if (glad_vkCmdSetViewportWithCountEXT == NULL && glad_vkCmdSetViewportWithCount != NULL)
		glad_vkCmdSetViewportWithCountEXT = (PFN_vkCmdSetViewportWithCountEXT)glad_vkCmdSetViewportWithCount;
	if (glad_vkCmdWaitEvents2 == NULL && glad_vkCmdWaitEvents2KHR != NULL)
		glad_vkCmdWaitEvents2 = (PFN_vkCmdWaitEvents2)glad_vkCmdWaitEvents2KHR;
	if (glad_vkCmdWaitEvents2KHR == NULL && glad_vkCmdWaitEvents2 != NULL)
		glad_vkCmdWaitEvents2KHR = (PFN_vkCmdWaitEvents2KHR)glad_vkCmdWaitEvents2;
	if (glad_vkCmdWriteTimestamp2 == NULL && glad_vkCmdWriteTimestamp2KHR != NULL)
		glad_vkCmdWriteTimestamp2 = (PFN_vkCmdWriteTimestamp2)glad_vkCmdWriteTimestamp2KHR;
	if (glad_vkCmdWriteTimestamp2KHR == NULL && glad_vkCmdWriteTimestamp2 != NULL)
		glad_vkCmdWriteTimestamp2KHR = (PFN_vkCmdWriteTimestamp2KHR)glad_vkCmdWriteTimestamp2;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
	if (glad_vkCreateDescriptorUpdateTemplate == NULL && glad_vkCreateDescriptorUpdateTemplateKHR != NULL)
		glad_vkCreateDescriptorUpdateTemplate = (PFN_vkCreateDescriptorUpdateTemplate)glad_vkCreateDescriptorUpdateTemplateKHR;
	if (glad_vkCreateDescriptorUpdateTemplateKHR == NULL && glad_vkCreateDescriptorUpdateTemplate != NULL)
		glad_vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR)glad_vkCreateDescriptorUpdateTemplate;
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
#if defined(VK_USE_PLATFORM_IOS_MVK)

#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)

#endif
	if (glad_vkCreatePrivateDataSlot == NULL && glad_vkCreatePrivateDataSlotEXT != NULL)
		glad_vkCreatePrivateDataSlot = (PFN_vkCreatePrivateDataSlot)glad_vkCreatePrivateDataSlotEXT;
	if (glad_vkCreatePrivateDataSlotEXT == NULL && glad_vkCreatePrivateDataSlot != NULL)
		glad_vkCreatePrivateDataSlotEXT = (PFN_vkCreatePrivateDataSlotEXT)glad_vkCreatePrivateDataSlot;
	if (glad_vkCreateRenderPass2 == NULL && glad_vkCreateRenderPass2KHR != NULL)
		glad_vkCreateRenderPass2 = (PFN_vkCreateRenderPass2)glad_vkCreateRenderPass2KHR;
	if (glad_vkCreateRenderPass2KHR == NULL && glad_vkCreateRenderPass2 != NULL)
		glad_vkCreateRenderPass2KHR = (PFN_vkCreateRenderPass2KHR)glad_vkCreateRenderPass2;
	if (glad_vkCreateSamplerYcbcrConversion == NULL && glad_vkCreateSamplerYcbcrConversionKHR != NULL)
		glad_vkCreateSamplerYcbcrConversion = (PFN_vkCreateSamplerYcbcrConversion)glad_vkCreateSamplerYcbcrConversionKHR;
	if (glad_vkCreateSamplerYcbcrConversionKHR == NULL && glad_vkCreateSamplerYcbcrConversion != NULL)
		glad_vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR)glad_vkCreateSamplerYcbcrConversion;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)

#endif
#if defined(VK_USE_PLATFORM_GGP)

#endif
#if defined(VK_USE_PLATFORM_VI_NN)

#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
	if (glad_vkDestroyDescriptorUpdateTemplate == NULL && glad_vkDestroyDescriptorUpdateTemplateKHR != NULL)
		glad_vkDestroyDescriptorUpdateTemplate = (PFN_vkDestroyDescriptorUpdateTemplate)glad_vkDestroyDescriptorUpdateTemplateKHR;
	if (glad_vkDestroyDescriptorUpdateTemplateKHR == NULL && glad_vkDestroyDescriptorUpdateTemplate != NULL)
		glad_vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR)glad_vkDestroyDescriptorUpdateTemplate;
	if (glad_vkDestroyPrivateDataSlot == NULL && glad_vkDestroyPrivateDataSlotEXT != NULL)
		glad_vkDestroyPrivateDataSlot = (PFN_vkDestroyPrivateDataSlot)glad_vkDestroyPrivateDataSlotEXT;
	if (glad_vkDestroyPrivateDataSlotEXT == NULL && glad_vkDestroyPrivateDataSlot != NULL)
		glad_vkDestroyPrivateDataSlotEXT = (PFN_vkDestroyPrivateDataSlotEXT)glad_vkDestroyPrivateDataSlot;
	if (glad_vkDestroySamplerYcbcrConversion == NULL && glad_vkDestroySamplerYcbcrConversionKHR != NULL)
		glad_vkDestroySamplerYcbcrConversion = (PFN_vkDestroySamplerYcbcrConversion)glad_vkDestroySamplerYcbcrConversionKHR;
	if (glad_vkDestroySamplerYcbcrConversionKHR == NULL && glad_vkDestroySamplerYcbcrConversion != NULL)
		glad_vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR)glad_vkDestroySamplerYcbcrConversion;
	if (glad_vkEnumeratePhysicalDeviceGroups == NULL && glad_vkEnumeratePhysicalDeviceGroupsKHR != NULL)
		glad_vkEnumeratePhysicalDeviceGroups = (PFN_vkEnumeratePhysicalDeviceGroups)glad_vkEnumeratePhysicalDeviceGroupsKHR;
	if (glad_vkEnumeratePhysicalDeviceGroupsKHR == NULL && glad_vkEnumeratePhysicalDeviceGroups != NULL)
		glad_vkEnumeratePhysicalDeviceGroupsKHR = (PFN_vkEnumeratePhysicalDeviceGroupsKHR)glad_vkEnumeratePhysicalDeviceGroups;
#if defined(VK_USE_PLATFORM_METAL_EXT)

#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
	if (glad_vkGetBufferDeviceAddress == NULL && glad_vkGetBufferDeviceAddressEXT != NULL)
		glad_vkGetBufferDeviceAddress = (PFN_vkGetBufferDeviceAddress)glad_vkGetBufferDeviceAddressEXT;
	if (glad_vkGetBufferDeviceAddress == NULL && glad_vkGetBufferDeviceAddressKHR != NULL)
		glad_vkGetBufferDeviceAddress = (PFN_vkGetBufferDeviceAddress)glad_vkGetBufferDeviceAddressKHR;
	if (glad_vkGetBufferDeviceAddressEXT == NULL && glad_vkGetBufferDeviceAddress != NULL)
		glad_vkGetBufferDeviceAddressEXT = (PFN_vkGetBufferDeviceAddressEXT)glad_vkGetBufferDeviceAddress;
	if (glad_vkGetBufferDeviceAddressEXT == NULL && glad_vkGetBufferDeviceAddressKHR != NULL)
		glad_vkGetBufferDeviceAddressEXT = (PFN_vkGetBufferDeviceAddressEXT)glad_vkGetBufferDeviceAddressKHR;
	if (glad_vkGetBufferDeviceAddressKHR == NULL && glad_vkGetBufferDeviceAddress != NULL)
		glad_vkGetBufferDeviceAddressKHR = (PFN_vkGetBufferDeviceAddressKHR)glad_vkGetBufferDeviceAddress;
	if (glad_vkGetBufferDeviceAddressKHR == NULL && glad_vkGetBufferDeviceAddressEXT != NULL)
		glad_vkGetBufferDeviceAddressKHR = (PFN_vkGetBufferDeviceAddressKHR)glad_vkGetBufferDeviceAddressEXT;
	if (glad_vkGetBufferMemoryRequirements2 == NULL && glad_vkGetBufferMemoryRequirements2KHR != NULL)
		glad_vkGetBufferMemoryRequirements2 = (PFN_vkGetBufferMemoryRequirements2)glad_vkGetBufferMemoryRequirements2KHR;
	if (glad_vkGetBufferMemoryRequirements2KHR == NULL && glad_vkGetBufferMemoryRequirements2 != NULL)
		glad_vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR)glad_vkGetBufferMemoryRequirements2;
	if (glad_vkGetBufferOpaqueCaptureAddress == NULL && glad_vkGetBufferOpaqueCaptureAddressKHR != NULL)
		glad_vkGetBufferOpaqueCaptureAddress = (PFN_vkGetBufferOpaqueCaptureAddress)glad_vkGetBufferOpaqueCaptureAddressKHR;
	if (glad_vkGetBufferOpaqueCaptureAddressKHR == NULL && glad_vkGetBufferOpaqueCaptureAddress != NULL)
		glad_vkGetBufferOpaqueCaptureAddressKHR = (PFN_vkGetBufferOpaqueCaptureAddressKHR)glad_vkGetBufferOpaqueCaptureAddress;
	if (glad_vkGetDescriptorSetLayoutSupport == NULL && glad_vkGetDescriptorSetLayoutSupportKHR != NULL)
		glad_vkGetDescriptorSetLayoutSupport = (PFN_vkGetDescriptorSetLayoutSupport)glad_vkGetDescriptorSetLayoutSupportKHR;
	if (glad_vkGetDescriptorSetLayoutSupportKHR == NULL && glad_vkGetDescriptorSetLayoutSupport != NULL)
		glad_vkGetDescriptorSetLayoutSupportKHR = (PFN_vkGetDescriptorSetLayoutSupportKHR)glad_vkGetDescriptorSetLayoutSupport;
	if (glad_vkGetDeviceBufferMemoryRequirements == NULL && glad_vkGetDeviceBufferMemoryRequirementsKHR != NULL)
		glad_vkGetDeviceBufferMemoryRequirements = (PFN_vkGetDeviceBufferMemoryRequirements)glad_vkGetDeviceBufferMemoryRequirementsKHR;
	if (glad_vkGetDeviceBufferMemoryRequirementsKHR == NULL && glad_vkGetDeviceBufferMemoryRequirements != NULL)
		glad_vkGetDeviceBufferMemoryRequirementsKHR = (PFN_vkGetDeviceBufferMemoryRequirementsKHR)glad_vkGetDeviceBufferMemoryRequirements;
	if (glad_vkGetDeviceGroupPeerMemoryFeatures == NULL && glad_vkGetDeviceGroupPeerMemoryFeaturesKHR != NULL)
		glad_vkGetDeviceGroupPeerMemoryFeatures = (PFN_vkGetDeviceGroupPeerMemoryFeatures)glad_vkGetDeviceGroupPeerMemoryFeaturesKHR;
	if (glad_vkGetDeviceGroupPeerMemoryFeaturesKHR == NULL && glad_vkGetDeviceGroupPeerMemoryFeatures != NULL)
		glad_vkGetDeviceGroupPeerMemoryFeaturesKHR = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)glad_vkGetDeviceGroupPeerMemoryFeatures;
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
	if (glad_vkGetDeviceImageMemoryRequirements == NULL && glad_vkGetDeviceImageMemoryRequirementsKHR != NULL)
		glad_vkGetDeviceImageMemoryRequirements = (PFN_vkGetDeviceImageMemoryRequirements)glad_vkGetDeviceImageMemoryRequirementsKHR;
	if (glad_vkGetDeviceImageMemoryRequirementsKHR == NULL && glad_vkGetDeviceImageMemoryRequirements != NULL)
		glad_vkGetDeviceImageMemoryRequirementsKHR = (PFN_vkGetDeviceImageMemoryRequirementsKHR)glad_vkGetDeviceImageMemoryRequirements;
	if (glad_vkGetDeviceImageSparseMemoryRequirements == NULL && glad_vkGetDeviceImageSparseMemoryRequirementsKHR != NULL)
		glad_vkGetDeviceImageSparseMemoryRequirements = (PFN_vkGetDeviceImageSparseMemoryRequirements)glad_vkGetDeviceImageSparseMemoryRequirementsKHR;
	if (glad_vkGetDeviceImageSparseMemoryRequirementsKHR == NULL && glad_vkGetDeviceImageSparseMemoryRequirements != NULL)
		glad_vkGetDeviceImageSparseMemoryRequirementsKHR =
			(PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)glad_vkGetDeviceImageSparseMemoryRequirements;
	if (glad_vkGetDeviceMemoryOpaqueCaptureAddress == NULL && glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR != NULL)
		glad_vkGetDeviceMemoryOpaqueCaptureAddress = (PFN_vkGetDeviceMemoryOpaqueCaptureAddress)glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
	if (glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR == NULL && glad_vkGetDeviceMemoryOpaqueCaptureAddress != NULL)
		glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR = (PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)glad_vkGetDeviceMemoryOpaqueCaptureAddress;
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
	if (glad_vkGetImageMemoryRequirements2 == NULL && glad_vkGetImageMemoryRequirements2KHR != NULL)
		glad_vkGetImageMemoryRequirements2 = (PFN_vkGetImageMemoryRequirements2)glad_vkGetImageMemoryRequirements2KHR;
	if (glad_vkGetImageMemoryRequirements2KHR == NULL && glad_vkGetImageMemoryRequirements2 != NULL)
		glad_vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR)glad_vkGetImageMemoryRequirements2;
	if (glad_vkGetImageSparseMemoryRequirements2 == NULL && glad_vkGetImageSparseMemoryRequirements2KHR != NULL)
		glad_vkGetImageSparseMemoryRequirements2 = (PFN_vkGetImageSparseMemoryRequirements2)glad_vkGetImageSparseMemoryRequirements2KHR;
	if (glad_vkGetImageSparseMemoryRequirements2KHR == NULL && glad_vkGetImageSparseMemoryRequirements2 != NULL)
		glad_vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR)glad_vkGetImageSparseMemoryRequirements2;
	if (glad_vkGetImageSubresourceLayout2EXT == NULL && glad_vkGetImageSubresourceLayout2KHR != NULL)
		glad_vkGetImageSubresourceLayout2EXT = (PFN_vkGetImageSubresourceLayout2EXT)glad_vkGetImageSubresourceLayout2KHR;
	if (glad_vkGetImageSubresourceLayout2KHR == NULL && glad_vkGetImageSubresourceLayout2EXT != NULL)
		glad_vkGetImageSubresourceLayout2KHR = (PFN_vkGetImageSubresourceLayout2KHR)glad_vkGetImageSubresourceLayout2EXT;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)

#endif
	if (glad_vkGetPhysicalDeviceExternalBufferProperties == NULL && glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR != NULL)
		glad_vkGetPhysicalDeviceExternalBufferProperties =
			(PFN_vkGetPhysicalDeviceExternalBufferProperties)glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
	if (glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR == NULL && glad_vkGetPhysicalDeviceExternalBufferProperties != NULL)
		glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR =
			(PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)glad_vkGetPhysicalDeviceExternalBufferProperties;
	if (glad_vkGetPhysicalDeviceExternalFenceProperties == NULL && glad_vkGetPhysicalDeviceExternalFencePropertiesKHR != NULL)
		glad_vkGetPhysicalDeviceExternalFenceProperties =
			(PFN_vkGetPhysicalDeviceExternalFenceProperties)glad_vkGetPhysicalDeviceExternalFencePropertiesKHR;
	if (glad_vkGetPhysicalDeviceExternalFencePropertiesKHR == NULL && glad_vkGetPhysicalDeviceExternalFenceProperties != NULL)
		glad_vkGetPhysicalDeviceExternalFencePropertiesKHR =
			(PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)glad_vkGetPhysicalDeviceExternalFenceProperties;
	if (glad_vkGetPhysicalDeviceExternalSemaphoreProperties == NULL && glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR != NULL)
		glad_vkGetPhysicalDeviceExternalSemaphoreProperties =
			(PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
	if (glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR == NULL && glad_vkGetPhysicalDeviceExternalSemaphoreProperties != NULL)
		glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR =
			(PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)glad_vkGetPhysicalDeviceExternalSemaphoreProperties;
	if (glad_vkGetPhysicalDeviceFeatures2 == NULL && glad_vkGetPhysicalDeviceFeatures2KHR != NULL)
		glad_vkGetPhysicalDeviceFeatures2 = (PFN_vkGetPhysicalDeviceFeatures2)glad_vkGetPhysicalDeviceFeatures2KHR;
	if (glad_vkGetPhysicalDeviceFeatures2KHR == NULL && glad_vkGetPhysicalDeviceFeatures2 != NULL)
		glad_vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR)glad_vkGetPhysicalDeviceFeatures2;
	if (glad_vkGetPhysicalDeviceFormatProperties2 == NULL && glad_vkGetPhysicalDeviceFormatProperties2KHR != NULL)
		glad_vkGetPhysicalDeviceFormatProperties2 = (PFN_vkGetPhysicalDeviceFormatProperties2)glad_vkGetPhysicalDeviceFormatProperties2KHR;
	if (glad_vkGetPhysicalDeviceFormatProperties2KHR == NULL && glad_vkGetPhysicalDeviceFormatProperties2 != NULL)
		glad_vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR)glad_vkGetPhysicalDeviceFormatProperties2;
	if (glad_vkGetPhysicalDeviceImageFormatProperties2 == NULL && glad_vkGetPhysicalDeviceImageFormatProperties2KHR != NULL)
		glad_vkGetPhysicalDeviceImageFormatProperties2 =
			(PFN_vkGetPhysicalDeviceImageFormatProperties2)glad_vkGetPhysicalDeviceImageFormatProperties2KHR;
	if (glad_vkGetPhysicalDeviceImageFormatProperties2KHR == NULL && glad_vkGetPhysicalDeviceImageFormatProperties2 != NULL)
		glad_vkGetPhysicalDeviceImageFormatProperties2KHR =
			(PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)glad_vkGetPhysicalDeviceImageFormatProperties2;
	if (glad_vkGetPhysicalDeviceMemoryProperties2 == NULL && glad_vkGetPhysicalDeviceMemoryProperties2KHR != NULL)
		glad_vkGetPhysicalDeviceMemoryProperties2 = (PFN_vkGetPhysicalDeviceMemoryProperties2)glad_vkGetPhysicalDeviceMemoryProperties2KHR;
	if (glad_vkGetPhysicalDeviceMemoryProperties2KHR == NULL && glad_vkGetPhysicalDeviceMemoryProperties2 != NULL)
		glad_vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR)glad_vkGetPhysicalDeviceMemoryProperties2;
	if (glad_vkGetPhysicalDeviceProperties2 == NULL && glad_vkGetPhysicalDeviceProperties2KHR != NULL)
		glad_vkGetPhysicalDeviceProperties2 = (PFN_vkGetPhysicalDeviceProperties2)glad_vkGetPhysicalDeviceProperties2KHR;
	if (glad_vkGetPhysicalDeviceProperties2KHR == NULL && glad_vkGetPhysicalDeviceProperties2 != NULL)
		glad_vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR)glad_vkGetPhysicalDeviceProperties2;
	if (glad_vkGetPhysicalDeviceQueueFamilyProperties2 == NULL && glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR != NULL)
		glad_vkGetPhysicalDeviceQueueFamilyProperties2 =
			(PFN_vkGetPhysicalDeviceQueueFamilyProperties2)glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
	if (glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR == NULL && glad_vkGetPhysicalDeviceQueueFamilyProperties2 != NULL)
		glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR =
			(PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)glad_vkGetPhysicalDeviceQueueFamilyProperties2;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)

#endif
	if (glad_vkGetPhysicalDeviceSparseImageFormatProperties2 == NULL && glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR != NULL)
		glad_vkGetPhysicalDeviceSparseImageFormatProperties2 =
			(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
	if (glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR == NULL && glad_vkGetPhysicalDeviceSparseImageFormatProperties2 != NULL)
		glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR =
			(PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)glad_vkGetPhysicalDeviceSparseImageFormatProperties2;
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
	if (glad_vkGetPhysicalDeviceToolProperties == NULL && glad_vkGetPhysicalDeviceToolPropertiesEXT != NULL)
		glad_vkGetPhysicalDeviceToolProperties = (PFN_vkGetPhysicalDeviceToolProperties)glad_vkGetPhysicalDeviceToolPropertiesEXT;
	if (glad_vkGetPhysicalDeviceToolPropertiesEXT == NULL && glad_vkGetPhysicalDeviceToolProperties != NULL)
		glad_vkGetPhysicalDeviceToolPropertiesEXT = (PFN_vkGetPhysicalDeviceToolPropertiesEXT)glad_vkGetPhysicalDeviceToolProperties;
#if defined(VK_ENABLE_BETA_EXTENSIONS)

#endif
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)

#endif
	if (glad_vkGetPrivateData == NULL && glad_vkGetPrivateDataEXT != NULL)
		glad_vkGetPrivateData = (PFN_vkGetPrivateData)glad_vkGetPrivateDataEXT;
	if (glad_vkGetPrivateDataEXT == NULL && glad_vkGetPrivateData != NULL)
		glad_vkGetPrivateDataEXT = (PFN_vkGetPrivateDataEXT)glad_vkGetPrivateData;
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)

#endif
	if (glad_vkGetRayTracingShaderGroupHandlesKHR == NULL && glad_vkGetRayTracingShaderGroupHandlesNV != NULL)
		glad_vkGetRayTracingShaderGroupHandlesKHR = (PFN_vkGetRayTracingShaderGroupHandlesKHR)glad_vkGetRayTracingShaderGroupHandlesNV;
	if (glad_vkGetRayTracingShaderGroupHandlesNV == NULL && glad_vkGetRayTracingShaderGroupHandlesKHR != NULL)
		glad_vkGetRayTracingShaderGroupHandlesNV = (PFN_vkGetRayTracingShaderGroupHandlesNV)glad_vkGetRayTracingShaderGroupHandlesKHR;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)

#endif
	if (glad_vkGetSemaphoreCounterValue == NULL && glad_vkGetSemaphoreCounterValueKHR != NULL)
		glad_vkGetSemaphoreCounterValue = (PFN_vkGetSemaphoreCounterValue)glad_vkGetSemaphoreCounterValueKHR;
	if (glad_vkGetSemaphoreCounterValueKHR == NULL && glad_vkGetSemaphoreCounterValue != NULL)
		glad_vkGetSemaphoreCounterValueKHR = (PFN_vkGetSemaphoreCounterValueKHR)glad_vkGetSemaphoreCounterValue;
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
	if (glad_vkQueueSubmit2 == NULL && glad_vkQueueSubmit2KHR != NULL)
		glad_vkQueueSubmit2 = (PFN_vkQueueSubmit2)glad_vkQueueSubmit2KHR;
	if (glad_vkQueueSubmit2KHR == NULL && glad_vkQueueSubmit2 != NULL)
		glad_vkQueueSubmit2KHR = (PFN_vkQueueSubmit2KHR)glad_vkQueueSubmit2;
#if defined(VK_USE_PLATFORM_WIN32_KHR)

#endif
	if (glad_vkResetQueryPool == NULL && glad_vkResetQueryPoolEXT != NULL)
		glad_vkResetQueryPool = (PFN_vkResetQueryPool)glad_vkResetQueryPoolEXT;
	if (glad_vkResetQueryPoolEXT == NULL && glad_vkResetQueryPool != NULL)
		glad_vkResetQueryPoolEXT = (PFN_vkResetQueryPoolEXT)glad_vkResetQueryPool;
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)

#endif
	if (glad_vkSetPrivateData == NULL && glad_vkSetPrivateDataEXT != NULL)
		glad_vkSetPrivateData = (PFN_vkSetPrivateData)glad_vkSetPrivateDataEXT;
	if (glad_vkSetPrivateDataEXT == NULL && glad_vkSetPrivateData != NULL)
		glad_vkSetPrivateDataEXT = (PFN_vkSetPrivateDataEXT)glad_vkSetPrivateData;
	if (glad_vkSignalSemaphore == NULL && glad_vkSignalSemaphoreKHR != NULL)
		glad_vkSignalSemaphore = (PFN_vkSignalSemaphore)glad_vkSignalSemaphoreKHR;
	if (glad_vkSignalSemaphoreKHR == NULL && glad_vkSignalSemaphore != NULL)
		glad_vkSignalSemaphoreKHR = (PFN_vkSignalSemaphoreKHR)glad_vkSignalSemaphore;
	if (glad_vkTrimCommandPool == NULL && glad_vkTrimCommandPoolKHR != NULL)
		glad_vkTrimCommandPool = (PFN_vkTrimCommandPool)glad_vkTrimCommandPoolKHR;
	if (glad_vkTrimCommandPoolKHR == NULL && glad_vkTrimCommandPool != NULL)
		glad_vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR)glad_vkTrimCommandPool;
	if (glad_vkUpdateDescriptorSetWithTemplate == NULL && glad_vkUpdateDescriptorSetWithTemplateKHR != NULL)
		glad_vkUpdateDescriptorSetWithTemplate = (PFN_vkUpdateDescriptorSetWithTemplate)glad_vkUpdateDescriptorSetWithTemplateKHR;
	if (glad_vkUpdateDescriptorSetWithTemplateKHR == NULL && glad_vkUpdateDescriptorSetWithTemplate != NULL)
		glad_vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR)glad_vkUpdateDescriptorSetWithTemplate;
	if (glad_vkWaitSemaphores == NULL && glad_vkWaitSemaphoresKHR != NULL)
		glad_vkWaitSemaphores = (PFN_vkWaitSemaphores)glad_vkWaitSemaphoresKHR;
	if (glad_vkWaitSemaphoresKHR == NULL && glad_vkWaitSemaphores != NULL)
		glad_vkWaitSemaphoresKHR = (PFN_vkWaitSemaphoresKHR)glad_vkWaitSemaphores;
}

static int glad_vk_get_extensions(VkPhysicalDevice physical_device, uint32_t *out_extension_count, char ***out_extensions) {
	uint32_t               i;
	uint32_t               instance_extension_count = 0;
	uint32_t               device_extension_count = 0;
	uint32_t               max_extension_count = 0;
	uint32_t               total_extension_count = 0;
	char                 **extensions = NULL;
	VkExtensionProperties *ext_properties = NULL;
	VkResult               result;

	if (glad_vkEnumerateInstanceExtensionProperties == NULL || (physical_device != NULL && glad_vkEnumerateDeviceExtensionProperties == NULL)) {
		return 0;
	}

	result = glad_vkEnumerateInstanceExtensionProperties(NULL, &instance_extension_count, NULL);
	if (result != VK_SUCCESS) {
		return 0;
	}

	if (physical_device != NULL) {
		result = glad_vkEnumerateDeviceExtensionProperties(physical_device, NULL, &device_extension_count, NULL);
		if (result != VK_SUCCESS) {
			return 0;
		}
	}

	total_extension_count = instance_extension_count + device_extension_count;
	if (total_extension_count <= 0) {
		return 0;
	}

	max_extension_count = instance_extension_count > device_extension_count ? instance_extension_count : device_extension_count;

	ext_properties = (VkExtensionProperties *)malloc(max_extension_count * sizeof(VkExtensionProperties));
	if (ext_properties == NULL) {
		goto glad_vk_get_extensions_error;
	}

	result = glad_vkEnumerateInstanceExtensionProperties(NULL, &instance_extension_count, ext_properties);
	if (result != VK_SUCCESS) {
		goto glad_vk_get_extensions_error;
	}

	extensions = (char **)calloc(total_extension_count, sizeof(char *));
	if (extensions == NULL) {
		goto glad_vk_get_extensions_error;
	}

	for (i = 0; i < instance_extension_count; ++i) {
		VkExtensionProperties ext = ext_properties[i];

		size_t extension_name_length = strlen(ext.extensionName) + 1;
		extensions[i] = (char *)malloc(extension_name_length * sizeof(char));
		if (extensions[i] == NULL) {
			goto glad_vk_get_extensions_error;
		}
		memcpy(extensions[i], ext.extensionName, extension_name_length * sizeof(char));
	}

	if (physical_device != NULL) {
		result = glad_vkEnumerateDeviceExtensionProperties(physical_device, NULL, &device_extension_count, ext_properties);
		if (result != VK_SUCCESS) {
			goto glad_vk_get_extensions_error;
		}

		for (i = 0; i < device_extension_count; ++i) {
			VkExtensionProperties ext = ext_properties[i];

			size_t extension_name_length = strlen(ext.extensionName) + 1;
			extensions[instance_extension_count + i] = (char *)malloc(extension_name_length * sizeof(char));
			if (extensions[instance_extension_count + i] == NULL) {
				goto glad_vk_get_extensions_error;
			}
			memcpy(extensions[instance_extension_count + i], ext.extensionName, extension_name_length * sizeof(char));
		}
	}

	free((void *)ext_properties);

	*out_extension_count = total_extension_count;
	*out_extensions = extensions;

	return 1;

glad_vk_get_extensions_error:
	free((void *)ext_properties);
	if (extensions != NULL) {
		for (i = 0; i < total_extension_count; ++i) {
			free((void *)extensions[i]);
		}
		free(extensions);
	}
	return 0;
}

static void glad_vk_free_extensions(uint32_t extension_count, char **extensions) {
	uint32_t i;

	for (i = 0; i < extension_count; ++i) {
		free((void *)(extensions[i]));
	}

	free((void *)extensions);
}

static int glad_vk_has_extension(const char *name, uint32_t extension_count, char **extensions) {
	uint32_t i;

	for (i = 0; i < extension_count; ++i) {
		if (extensions[i] != NULL && strcmp(name, extensions[i]) == 0) {
			return 1;
		}
	}

	return 0;
}

static GLADapiproc glad_vk_get_proc_from_userptr(void *userptr, const char *name) {
	return (GLAD_GNUC_EXTENSION(GLADapiproc(*)(const char *name)) userptr)(name);
}

static int glad_vk_find_extensions_vulkan(VkPhysicalDevice physical_device) {
	uint32_t extension_count = 0;
	char   **extensions = NULL;
	if (!glad_vk_get_extensions(physical_device, &extension_count, &extensions))
		return 0;

#if defined(VK_ENABLE_BETA_EXTENSIONS)
	GLAD_VK_AMDX_shader_enqueue = glad_vk_has_extension("VK_AMDX_shader_enqueue", extension_count, extensions);

#endif
	GLAD_VK_AMD_buffer_marker = glad_vk_has_extension("VK_AMD_buffer_marker", extension_count, extensions);
	GLAD_VK_AMD_device_coherent_memory = glad_vk_has_extension("VK_AMD_device_coherent_memory", extension_count, extensions);
	GLAD_VK_AMD_display_native_hdr = glad_vk_has_extension("VK_AMD_display_native_hdr", extension_count, extensions);
	GLAD_VK_AMD_draw_indirect_count = glad_vk_has_extension("VK_AMD_draw_indirect_count", extension_count, extensions);
	GLAD_VK_AMD_gcn_shader = glad_vk_has_extension("VK_AMD_gcn_shader", extension_count, extensions);
	GLAD_VK_AMD_gpu_shader_half_float = glad_vk_has_extension("VK_AMD_gpu_shader_half_float", extension_count, extensions);
	GLAD_VK_AMD_gpu_shader_int16 = glad_vk_has_extension("VK_AMD_gpu_shader_int16", extension_count, extensions);
	GLAD_VK_AMD_memory_overallocation_behavior = glad_vk_has_extension("VK_AMD_memory_overallocation_behavior", extension_count, extensions);
	GLAD_VK_AMD_mixed_attachment_samples = glad_vk_has_extension("VK_AMD_mixed_attachment_samples", extension_count, extensions);
	GLAD_VK_AMD_negative_viewport_height = glad_vk_has_extension("VK_AMD_negative_viewport_height", extension_count, extensions);
	GLAD_VK_AMD_pipeline_compiler_control = glad_vk_has_extension("VK_AMD_pipeline_compiler_control", extension_count, extensions);
	GLAD_VK_AMD_rasterization_order = glad_vk_has_extension("VK_AMD_rasterization_order", extension_count, extensions);
	GLAD_VK_AMD_shader_ballot = glad_vk_has_extension("VK_AMD_shader_ballot", extension_count, extensions);
	GLAD_VK_AMD_shader_core_properties = glad_vk_has_extension("VK_AMD_shader_core_properties", extension_count, extensions);
	GLAD_VK_AMD_shader_core_properties2 = glad_vk_has_extension("VK_AMD_shader_core_properties2", extension_count, extensions);
	GLAD_VK_AMD_shader_early_and_late_fragment_tests = glad_vk_has_extension("VK_AMD_shader_early_and_late_fragment_tests", extension_count, extensions);
	GLAD_VK_AMD_shader_explicit_vertex_parameter = glad_vk_has_extension("VK_AMD_shader_explicit_vertex_parameter", extension_count, extensions);
	GLAD_VK_AMD_shader_fragment_mask = glad_vk_has_extension("VK_AMD_shader_fragment_mask", extension_count, extensions);
	GLAD_VK_AMD_shader_image_load_store_lod = glad_vk_has_extension("VK_AMD_shader_image_load_store_lod", extension_count, extensions);
	GLAD_VK_AMD_shader_info = glad_vk_has_extension("VK_AMD_shader_info", extension_count, extensions);
	GLAD_VK_AMD_shader_trinary_minmax = glad_vk_has_extension("VK_AMD_shader_trinary_minmax", extension_count, extensions);
	GLAD_VK_AMD_texture_gather_bias_lod = glad_vk_has_extension("VK_AMD_texture_gather_bias_lod", extension_count, extensions);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	GLAD_VK_ANDROID_external_format_resolve = glad_vk_has_extension("VK_ANDROID_external_format_resolve", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	GLAD_VK_ANDROID_external_memory_android_hardware_buffer =
		glad_vk_has_extension("VK_ANDROID_external_memory_android_hardware_buffer", extension_count, extensions);

#endif
	GLAD_VK_ARM_rasterization_order_attachment_access = glad_vk_has_extension("VK_ARM_rasterization_order_attachment_access", extension_count, extensions);
	GLAD_VK_ARM_shader_core_builtins = glad_vk_has_extension("VK_ARM_shader_core_builtins", extension_count, extensions);
	GLAD_VK_ARM_shader_core_properties = glad_vk_has_extension("VK_ARM_shader_core_properties", extension_count, extensions);
	GLAD_VK_EXT_4444_formats = glad_vk_has_extension("VK_EXT_4444_formats", extension_count, extensions);
	GLAD_VK_EXT_acquire_drm_display = glad_vk_has_extension("VK_EXT_acquire_drm_display", extension_count, extensions);
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	GLAD_VK_EXT_acquire_xlib_display = glad_vk_has_extension("VK_EXT_acquire_xlib_display", extension_count, extensions);

#endif
	GLAD_VK_EXT_astc_decode_mode = glad_vk_has_extension("VK_EXT_astc_decode_mode", extension_count, extensions);
	GLAD_VK_EXT_attachment_feedback_loop_dynamic_state =
		glad_vk_has_extension("VK_EXT_attachment_feedback_loop_dynamic_state", extension_count, extensions);
	GLAD_VK_EXT_attachment_feedback_loop_layout = glad_vk_has_extension("VK_EXT_attachment_feedback_loop_layout", extension_count, extensions);
	GLAD_VK_EXT_blend_operation_advanced = glad_vk_has_extension("VK_EXT_blend_operation_advanced", extension_count, extensions);
	GLAD_VK_EXT_border_color_swizzle = glad_vk_has_extension("VK_EXT_border_color_swizzle", extension_count, extensions);
	GLAD_VK_EXT_buffer_device_address = glad_vk_has_extension("VK_EXT_buffer_device_address", extension_count, extensions);
	GLAD_VK_EXT_calibrated_timestamps = glad_vk_has_extension("VK_EXT_calibrated_timestamps", extension_count, extensions);
	GLAD_VK_EXT_color_write_enable = glad_vk_has_extension("VK_EXT_color_write_enable", extension_count, extensions);
	GLAD_VK_EXT_conditional_rendering = glad_vk_has_extension("VK_EXT_conditional_rendering", extension_count, extensions);
	GLAD_VK_EXT_conservative_rasterization = glad_vk_has_extension("VK_EXT_conservative_rasterization", extension_count, extensions);
	GLAD_VK_EXT_custom_border_color = glad_vk_has_extension("VK_EXT_custom_border_color", extension_count, extensions);
	GLAD_VK_EXT_debug_marker = glad_vk_has_extension("VK_EXT_debug_marker", extension_count, extensions);
	GLAD_VK_EXT_debug_report = glad_vk_has_extension("VK_EXT_debug_report", extension_count, extensions);
	GLAD_VK_EXT_debug_utils = glad_vk_has_extension("VK_EXT_debug_utils", extension_count, extensions);
	GLAD_VK_EXT_depth_bias_control = glad_vk_has_extension("VK_EXT_depth_bias_control", extension_count, extensions);
	GLAD_VK_EXT_depth_clamp_zero_one = glad_vk_has_extension("VK_EXT_depth_clamp_zero_one", extension_count, extensions);
	GLAD_VK_EXT_depth_clip_control = glad_vk_has_extension("VK_EXT_depth_clip_control", extension_count, extensions);
	GLAD_VK_EXT_depth_clip_enable = glad_vk_has_extension("VK_EXT_depth_clip_enable", extension_count, extensions);
	GLAD_VK_EXT_depth_range_unrestricted = glad_vk_has_extension("VK_EXT_depth_range_unrestricted", extension_count, extensions);
	GLAD_VK_EXT_descriptor_buffer = glad_vk_has_extension("VK_EXT_descriptor_buffer", extension_count, extensions);
	GLAD_VK_EXT_descriptor_indexing = glad_vk_has_extension("VK_EXT_descriptor_indexing", extension_count, extensions);
	GLAD_VK_EXT_device_address_binding_report = glad_vk_has_extension("VK_EXT_device_address_binding_report", extension_count, extensions);
	GLAD_VK_EXT_device_fault = glad_vk_has_extension("VK_EXT_device_fault", extension_count, extensions);
	GLAD_VK_EXT_device_memory_report = glad_vk_has_extension("VK_EXT_device_memory_report", extension_count, extensions);
	GLAD_VK_EXT_direct_mode_display = glad_vk_has_extension("VK_EXT_direct_mode_display", extension_count, extensions);
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	GLAD_VK_EXT_directfb_surface = glad_vk_has_extension("VK_EXT_directfb_surface", extension_count, extensions);

#endif
	GLAD_VK_EXT_discard_rectangles = glad_vk_has_extension("VK_EXT_discard_rectangles", extension_count, extensions);
	GLAD_VK_EXT_display_control = glad_vk_has_extension("VK_EXT_display_control", extension_count, extensions);
	GLAD_VK_EXT_display_surface_counter = glad_vk_has_extension("VK_EXT_display_surface_counter", extension_count, extensions);
	GLAD_VK_EXT_dynamic_rendering_unused_attachments = glad_vk_has_extension("VK_EXT_dynamic_rendering_unused_attachments", extension_count, extensions);
	GLAD_VK_EXT_extended_dynamic_state = glad_vk_has_extension("VK_EXT_extended_dynamic_state", extension_count, extensions);
	GLAD_VK_EXT_extended_dynamic_state2 = glad_vk_has_extension("VK_EXT_extended_dynamic_state2", extension_count, extensions);
	GLAD_VK_EXT_extended_dynamic_state3 = glad_vk_has_extension("VK_EXT_extended_dynamic_state3", extension_count, extensions);
	GLAD_VK_EXT_external_memory_acquire_unmodified = glad_vk_has_extension("VK_EXT_external_memory_acquire_unmodified", extension_count, extensions);
	GLAD_VK_EXT_external_memory_dma_buf = glad_vk_has_extension("VK_EXT_external_memory_dma_buf", extension_count, extensions);
	GLAD_VK_EXT_external_memory_host = glad_vk_has_extension("VK_EXT_external_memory_host", extension_count, extensions);
	GLAD_VK_EXT_filter_cubic = glad_vk_has_extension("VK_EXT_filter_cubic", extension_count, extensions);
	GLAD_VK_EXT_fragment_density_map = glad_vk_has_extension("VK_EXT_fragment_density_map", extension_count, extensions);
	GLAD_VK_EXT_fragment_density_map2 = glad_vk_has_extension("VK_EXT_fragment_density_map2", extension_count, extensions);
	GLAD_VK_EXT_fragment_shader_interlock = glad_vk_has_extension("VK_EXT_fragment_shader_interlock", extension_count, extensions);
	GLAD_VK_EXT_frame_boundary = glad_vk_has_extension("VK_EXT_frame_boundary", extension_count, extensions);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	GLAD_VK_EXT_full_screen_exclusive = glad_vk_has_extension("VK_EXT_full_screen_exclusive", extension_count, extensions);

#endif
	GLAD_VK_EXT_global_priority = glad_vk_has_extension("VK_EXT_global_priority", extension_count, extensions);
	GLAD_VK_EXT_global_priority_query = glad_vk_has_extension("VK_EXT_global_priority_query", extension_count, extensions);
	GLAD_VK_EXT_graphics_pipeline_library = glad_vk_has_extension("VK_EXT_graphics_pipeline_library", extension_count, extensions);
	GLAD_VK_EXT_hdr_metadata = glad_vk_has_extension("VK_EXT_hdr_metadata", extension_count, extensions);
	GLAD_VK_EXT_headless_surface = glad_vk_has_extension("VK_EXT_headless_surface", extension_count, extensions);
	GLAD_VK_EXT_host_image_copy = glad_vk_has_extension("VK_EXT_host_image_copy", extension_count, extensions);
	GLAD_VK_EXT_host_query_reset = glad_vk_has_extension("VK_EXT_host_query_reset", extension_count, extensions);
	GLAD_VK_EXT_image_2d_view_of_3d = glad_vk_has_extension("VK_EXT_image_2d_view_of_3d", extension_count, extensions);
	GLAD_VK_EXT_image_compression_control = glad_vk_has_extension("VK_EXT_image_compression_control", extension_count, extensions);
	GLAD_VK_EXT_image_compression_control_swapchain = glad_vk_has_extension("VK_EXT_image_compression_control_swapchain", extension_count, extensions);
	GLAD_VK_EXT_image_drm_format_modifier = glad_vk_has_extension("VK_EXT_image_drm_format_modifier", extension_count, extensions);
	GLAD_VK_EXT_image_robustness = glad_vk_has_extension("VK_EXT_image_robustness", extension_count, extensions);
	GLAD_VK_EXT_image_sliced_view_of_3d = glad_vk_has_extension("VK_EXT_image_sliced_view_of_3d", extension_count, extensions);
	GLAD_VK_EXT_image_view_min_lod = glad_vk_has_extension("VK_EXT_image_view_min_lod", extension_count, extensions);
	GLAD_VK_EXT_index_type_uint8 = glad_vk_has_extension("VK_EXT_index_type_uint8", extension_count, extensions);
	GLAD_VK_EXT_inline_uniform_block = glad_vk_has_extension("VK_EXT_inline_uniform_block", extension_count, extensions);
	GLAD_VK_EXT_legacy_dithering = glad_vk_has_extension("VK_EXT_legacy_dithering", extension_count, extensions);
	GLAD_VK_EXT_line_rasterization = glad_vk_has_extension("VK_EXT_line_rasterization", extension_count, extensions);
	GLAD_VK_EXT_load_store_op_none = glad_vk_has_extension("VK_EXT_load_store_op_none", extension_count, extensions);
	GLAD_VK_EXT_memory_budget = glad_vk_has_extension("VK_EXT_memory_budget", extension_count, extensions);
	GLAD_VK_EXT_memory_priority = glad_vk_has_extension("VK_EXT_memory_priority", extension_count, extensions);
	GLAD_VK_EXT_mesh_shader = glad_vk_has_extension("VK_EXT_mesh_shader", extension_count, extensions);
#if defined(VK_USE_PLATFORM_METAL_EXT)
	GLAD_VK_EXT_metal_objects = glad_vk_has_extension("VK_EXT_metal_objects", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
	GLAD_VK_EXT_metal_surface = glad_vk_has_extension("VK_EXT_metal_surface", extension_count, extensions);

#endif
	GLAD_VK_EXT_multi_draw = glad_vk_has_extension("VK_EXT_multi_draw", extension_count, extensions);
	GLAD_VK_EXT_multisampled_render_to_single_sampled = glad_vk_has_extension("VK_EXT_multisampled_render_to_single_sampled", extension_count, extensions);
	GLAD_VK_EXT_mutable_descriptor_type = glad_vk_has_extension("VK_EXT_mutable_descriptor_type", extension_count, extensions);
	GLAD_VK_EXT_non_seamless_cube_map = glad_vk_has_extension("VK_EXT_non_seamless_cube_map", extension_count, extensions);
	GLAD_VK_EXT_opacity_micromap = glad_vk_has_extension("VK_EXT_opacity_micromap", extension_count, extensions);
	GLAD_VK_EXT_pageable_device_local_memory = glad_vk_has_extension("VK_EXT_pageable_device_local_memory", extension_count, extensions);
	GLAD_VK_EXT_pci_bus_info = glad_vk_has_extension("VK_EXT_pci_bus_info", extension_count, extensions);
	GLAD_VK_EXT_physical_device_drm = glad_vk_has_extension("VK_EXT_physical_device_drm", extension_count, extensions);
	GLAD_VK_EXT_pipeline_creation_cache_control = glad_vk_has_extension("VK_EXT_pipeline_creation_cache_control", extension_count, extensions);
	GLAD_VK_EXT_pipeline_creation_feedback = glad_vk_has_extension("VK_EXT_pipeline_creation_feedback", extension_count, extensions);
	GLAD_VK_EXT_pipeline_library_group_handles = glad_vk_has_extension("VK_EXT_pipeline_library_group_handles", extension_count, extensions);
	GLAD_VK_EXT_pipeline_properties = glad_vk_has_extension("VK_EXT_pipeline_properties", extension_count, extensions);
	GLAD_VK_EXT_pipeline_protected_access = glad_vk_has_extension("VK_EXT_pipeline_protected_access", extension_count, extensions);
	GLAD_VK_EXT_pipeline_robustness = glad_vk_has_extension("VK_EXT_pipeline_robustness", extension_count, extensions);
	GLAD_VK_EXT_post_depth_coverage = glad_vk_has_extension("VK_EXT_post_depth_coverage", extension_count, extensions);
	GLAD_VK_EXT_primitive_topology_list_restart = glad_vk_has_extension("VK_EXT_primitive_topology_list_restart", extension_count, extensions);
	GLAD_VK_EXT_primitives_generated_query = glad_vk_has_extension("VK_EXT_primitives_generated_query", extension_count, extensions);
	GLAD_VK_EXT_private_data = glad_vk_has_extension("VK_EXT_private_data", extension_count, extensions);
	GLAD_VK_EXT_provoking_vertex = glad_vk_has_extension("VK_EXT_provoking_vertex", extension_count, extensions);
	GLAD_VK_EXT_queue_family_foreign = glad_vk_has_extension("VK_EXT_queue_family_foreign", extension_count, extensions);
	GLAD_VK_EXT_rasterization_order_attachment_access = glad_vk_has_extension("VK_EXT_rasterization_order_attachment_access", extension_count, extensions);
	GLAD_VK_EXT_rgba10x6_formats = glad_vk_has_extension("VK_EXT_rgba10x6_formats", extension_count, extensions);
	GLAD_VK_EXT_robustness2 = glad_vk_has_extension("VK_EXT_robustness2", extension_count, extensions);
	GLAD_VK_EXT_sample_locations = glad_vk_has_extension("VK_EXT_sample_locations", extension_count, extensions);
	GLAD_VK_EXT_sampler_filter_minmax = glad_vk_has_extension("VK_EXT_sampler_filter_minmax", extension_count, extensions);
	GLAD_VK_EXT_scalar_block_layout = glad_vk_has_extension("VK_EXT_scalar_block_layout", extension_count, extensions);
	GLAD_VK_EXT_separate_stencil_usage = glad_vk_has_extension("VK_EXT_separate_stencil_usage", extension_count, extensions);
	GLAD_VK_EXT_shader_atomic_float = glad_vk_has_extension("VK_EXT_shader_atomic_float", extension_count, extensions);
	GLAD_VK_EXT_shader_atomic_float2 = glad_vk_has_extension("VK_EXT_shader_atomic_float2", extension_count, extensions);
	GLAD_VK_EXT_shader_demote_to_helper_invocation = glad_vk_has_extension("VK_EXT_shader_demote_to_helper_invocation", extension_count, extensions);
	GLAD_VK_EXT_shader_image_atomic_int64 = glad_vk_has_extension("VK_EXT_shader_image_atomic_int64", extension_count, extensions);
	GLAD_VK_EXT_shader_module_identifier = glad_vk_has_extension("VK_EXT_shader_module_identifier", extension_count, extensions);
	GLAD_VK_EXT_shader_object = glad_vk_has_extension("VK_EXT_shader_object", extension_count, extensions);
	GLAD_VK_EXT_shader_stencil_export = glad_vk_has_extension("VK_EXT_shader_stencil_export", extension_count, extensions);
	GLAD_VK_EXT_shader_subgroup_ballot = glad_vk_has_extension("VK_EXT_shader_subgroup_ballot", extension_count, extensions);
	GLAD_VK_EXT_shader_subgroup_vote = glad_vk_has_extension("VK_EXT_shader_subgroup_vote", extension_count, extensions);
	GLAD_VK_EXT_shader_tile_image = glad_vk_has_extension("VK_EXT_shader_tile_image", extension_count, extensions);
	GLAD_VK_EXT_shader_viewport_index_layer = glad_vk_has_extension("VK_EXT_shader_viewport_index_layer", extension_count, extensions);
	GLAD_VK_EXT_subgroup_size_control = glad_vk_has_extension("VK_EXT_subgroup_size_control", extension_count, extensions);
	GLAD_VK_EXT_subpass_merge_feedback = glad_vk_has_extension("VK_EXT_subpass_merge_feedback", extension_count, extensions);
	GLAD_VK_EXT_surface_maintenance1 = glad_vk_has_extension("VK_EXT_surface_maintenance1", extension_count, extensions);
	GLAD_VK_EXT_swapchain_colorspace = glad_vk_has_extension("VK_EXT_swapchain_colorspace", extension_count, extensions);
	GLAD_VK_EXT_swapchain_maintenance1 = glad_vk_has_extension("VK_EXT_swapchain_maintenance1", extension_count, extensions);
	GLAD_VK_EXT_texel_buffer_alignment = glad_vk_has_extension("VK_EXT_texel_buffer_alignment", extension_count, extensions);
	GLAD_VK_EXT_texture_compression_astc_hdr = glad_vk_has_extension("VK_EXT_texture_compression_astc_hdr", extension_count, extensions);
	GLAD_VK_EXT_tooling_info = glad_vk_has_extension("VK_EXT_tooling_info", extension_count, extensions);
	GLAD_VK_EXT_transform_feedback = glad_vk_has_extension("VK_EXT_transform_feedback", extension_count, extensions);
	GLAD_VK_EXT_validation_cache = glad_vk_has_extension("VK_EXT_validation_cache", extension_count, extensions);
	GLAD_VK_EXT_validation_features = glad_vk_has_extension("VK_EXT_validation_features", extension_count, extensions);
	GLAD_VK_EXT_validation_flags = glad_vk_has_extension("VK_EXT_validation_flags", extension_count, extensions);
	GLAD_VK_EXT_vertex_attribute_divisor = glad_vk_has_extension("VK_EXT_vertex_attribute_divisor", extension_count, extensions);
	GLAD_VK_EXT_vertex_input_dynamic_state = glad_vk_has_extension("VK_EXT_vertex_input_dynamic_state", extension_count, extensions);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	GLAD_VK_EXT_video_encode_h264 = glad_vk_has_extension("VK_EXT_video_encode_h264", extension_count, extensions);

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	GLAD_VK_EXT_video_encode_h265 = glad_vk_has_extension("VK_EXT_video_encode_h265", extension_count, extensions);

#endif
	GLAD_VK_EXT_ycbcr_2plane_444_formats = glad_vk_has_extension("VK_EXT_ycbcr_2plane_444_formats", extension_count, extensions);
	GLAD_VK_EXT_ycbcr_image_arrays = glad_vk_has_extension("VK_EXT_ycbcr_image_arrays", extension_count, extensions);
#if defined(VK_USE_PLATFORM_FUCHSIA)
	GLAD_VK_FUCHSIA_buffer_collection = glad_vk_has_extension("VK_FUCHSIA_buffer_collection", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	GLAD_VK_FUCHSIA_external_memory = glad_vk_has_extension("VK_FUCHSIA_external_memory", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	GLAD_VK_FUCHSIA_external_semaphore = glad_vk_has_extension("VK_FUCHSIA_external_semaphore", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	GLAD_VK_FUCHSIA_imagepipe_surface = glad_vk_has_extension("VK_FUCHSIA_imagepipe_surface", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_GGP)
	GLAD_VK_GGP_frame_token = glad_vk_has_extension("VK_GGP_frame_token", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_GGP)
	GLAD_VK_GGP_stream_descriptor_surface = glad_vk_has_extension("VK_GGP_stream_descriptor_surface", extension_count, extensions);

#endif
	GLAD_VK_GOOGLE_decorate_string = glad_vk_has_extension("VK_GOOGLE_decorate_string", extension_count, extensions);
	GLAD_VK_GOOGLE_display_timing = glad_vk_has_extension("VK_GOOGLE_display_timing", extension_count, extensions);
	GLAD_VK_GOOGLE_hlsl_functionality1 = glad_vk_has_extension("VK_GOOGLE_hlsl_functionality1", extension_count, extensions);
	GLAD_VK_GOOGLE_surfaceless_query = glad_vk_has_extension("VK_GOOGLE_surfaceless_query", extension_count, extensions);
	GLAD_VK_GOOGLE_user_type = glad_vk_has_extension("VK_GOOGLE_user_type", extension_count, extensions);
	GLAD_VK_HUAWEI_cluster_culling_shader = glad_vk_has_extension("VK_HUAWEI_cluster_culling_shader", extension_count, extensions);
	GLAD_VK_HUAWEI_invocation_mask = glad_vk_has_extension("VK_HUAWEI_invocation_mask", extension_count, extensions);
	GLAD_VK_HUAWEI_subpass_shading = glad_vk_has_extension("VK_HUAWEI_subpass_shading", extension_count, extensions);
	GLAD_VK_IMG_filter_cubic = glad_vk_has_extension("VK_IMG_filter_cubic", extension_count, extensions);
	GLAD_VK_IMG_format_pvrtc = glad_vk_has_extension("VK_IMG_format_pvrtc", extension_count, extensions);
	GLAD_VK_INTEL_performance_query = glad_vk_has_extension("VK_INTEL_performance_query", extension_count, extensions);
	GLAD_VK_INTEL_shader_integer_functions2 = glad_vk_has_extension("VK_INTEL_shader_integer_functions2", extension_count, extensions);
	GLAD_VK_KHR_16bit_storage = glad_vk_has_extension("VK_KHR_16bit_storage", extension_count, extensions);
	GLAD_VK_KHR_8bit_storage = glad_vk_has_extension("VK_KHR_8bit_storage", extension_count, extensions);
	GLAD_VK_KHR_acceleration_structure = glad_vk_has_extension("VK_KHR_acceleration_structure", extension_count, extensions);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	GLAD_VK_KHR_android_surface = glad_vk_has_extension("VK_KHR_android_surface", extension_count, extensions);

#endif
	GLAD_VK_KHR_bind_memory2 = glad_vk_has_extension("VK_KHR_bind_memory2", extension_count, extensions);
	GLAD_VK_KHR_buffer_device_address = glad_vk_has_extension("VK_KHR_buffer_device_address", extension_count, extensions);
	GLAD_VK_KHR_cooperative_matrix = glad_vk_has_extension("VK_KHR_cooperative_matrix", extension_count, extensions);
	GLAD_VK_KHR_copy_commands2 = glad_vk_has_extension("VK_KHR_copy_commands2", extension_count, extensions);
	GLAD_VK_KHR_create_renderpass2 = glad_vk_has_extension("VK_KHR_create_renderpass2", extension_count, extensions);
	GLAD_VK_KHR_dedicated_allocation = glad_vk_has_extension("VK_KHR_dedicated_allocation", extension_count, extensions);
	GLAD_VK_KHR_deferred_host_operations = glad_vk_has_extension("VK_KHR_deferred_host_operations", extension_count, extensions);
	GLAD_VK_KHR_depth_stencil_resolve = glad_vk_has_extension("VK_KHR_depth_stencil_resolve", extension_count, extensions);
	GLAD_VK_KHR_descriptor_update_template = glad_vk_has_extension("VK_KHR_descriptor_update_template", extension_count, extensions);
	GLAD_VK_KHR_device_group = glad_vk_has_extension("VK_KHR_device_group", extension_count, extensions);
	GLAD_VK_KHR_device_group_creation = glad_vk_has_extension("VK_KHR_device_group_creation", extension_count, extensions);
	GLAD_VK_KHR_display = glad_vk_has_extension("VK_KHR_display", extension_count, extensions);
	GLAD_VK_KHR_display_swapchain = glad_vk_has_extension("VK_KHR_display_swapchain", extension_count, extensions);
	GLAD_VK_KHR_draw_indirect_count = glad_vk_has_extension("VK_KHR_draw_indirect_count", extension_count, extensions);
	GLAD_VK_KHR_driver_properties = glad_vk_has_extension("VK_KHR_driver_properties", extension_count, extensions);
	GLAD_VK_KHR_dynamic_rendering = glad_vk_has_extension("VK_KHR_dynamic_rendering", extension_count, extensions);
	GLAD_VK_KHR_external_fence = glad_vk_has_extension("VK_KHR_external_fence", extension_count, extensions);
	GLAD_VK_KHR_external_fence_capabilities = glad_vk_has_extension("VK_KHR_external_fence_capabilities", extension_count, extensions);
	GLAD_VK_KHR_external_fence_fd = glad_vk_has_extension("VK_KHR_external_fence_fd", extension_count, extensions);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	GLAD_VK_KHR_external_fence_win32 = glad_vk_has_extension("VK_KHR_external_fence_win32", extension_count, extensions);

#endif
	GLAD_VK_KHR_external_memory = glad_vk_has_extension("VK_KHR_external_memory", extension_count, extensions);
	GLAD_VK_KHR_external_memory_capabilities = glad_vk_has_extension("VK_KHR_external_memory_capabilities", extension_count, extensions);
	GLAD_VK_KHR_external_memory_fd = glad_vk_has_extension("VK_KHR_external_memory_fd", extension_count, extensions);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	GLAD_VK_KHR_external_memory_win32 = glad_vk_has_extension("VK_KHR_external_memory_win32", extension_count, extensions);

#endif
	GLAD_VK_KHR_external_semaphore = glad_vk_has_extension("VK_KHR_external_semaphore", extension_count, extensions);
	GLAD_VK_KHR_external_semaphore_capabilities = glad_vk_has_extension("VK_KHR_external_semaphore_capabilities", extension_count, extensions);
	GLAD_VK_KHR_external_semaphore_fd = glad_vk_has_extension("VK_KHR_external_semaphore_fd", extension_count, extensions);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	GLAD_VK_KHR_external_semaphore_win32 = glad_vk_has_extension("VK_KHR_external_semaphore_win32", extension_count, extensions);

#endif
	GLAD_VK_KHR_format_feature_flags2 = glad_vk_has_extension("VK_KHR_format_feature_flags2", extension_count, extensions);
	GLAD_VK_KHR_fragment_shader_barycentric = glad_vk_has_extension("VK_KHR_fragment_shader_barycentric", extension_count, extensions);
	GLAD_VK_KHR_fragment_shading_rate = glad_vk_has_extension("VK_KHR_fragment_shading_rate", extension_count, extensions);
	GLAD_VK_KHR_get_display_properties2 = glad_vk_has_extension("VK_KHR_get_display_properties2", extension_count, extensions);
	GLAD_VK_KHR_get_memory_requirements2 = glad_vk_has_extension("VK_KHR_get_memory_requirements2", extension_count, extensions);
	GLAD_VK_KHR_get_physical_device_properties2 = glad_vk_has_extension("VK_KHR_get_physical_device_properties2", extension_count, extensions);
	GLAD_VK_KHR_get_surface_capabilities2 = glad_vk_has_extension("VK_KHR_get_surface_capabilities2", extension_count, extensions);
	GLAD_VK_KHR_global_priority = glad_vk_has_extension("VK_KHR_global_priority", extension_count, extensions);
	GLAD_VK_KHR_image_format_list = glad_vk_has_extension("VK_KHR_image_format_list", extension_count, extensions);
	GLAD_VK_KHR_imageless_framebuffer = glad_vk_has_extension("VK_KHR_imageless_framebuffer", extension_count, extensions);
	GLAD_VK_KHR_incremental_present = glad_vk_has_extension("VK_KHR_incremental_present", extension_count, extensions);
	GLAD_VK_KHR_maintenance1 = glad_vk_has_extension("VK_KHR_maintenance1", extension_count, extensions);
	GLAD_VK_KHR_maintenance2 = glad_vk_has_extension("VK_KHR_maintenance2", extension_count, extensions);
	GLAD_VK_KHR_maintenance3 = glad_vk_has_extension("VK_KHR_maintenance3", extension_count, extensions);
	GLAD_VK_KHR_maintenance4 = glad_vk_has_extension("VK_KHR_maintenance4", extension_count, extensions);
	GLAD_VK_KHR_maintenance5 = glad_vk_has_extension("VK_KHR_maintenance5", extension_count, extensions);
	GLAD_VK_KHR_map_memory2 = glad_vk_has_extension("VK_KHR_map_memory2", extension_count, extensions);
	GLAD_VK_KHR_multiview = glad_vk_has_extension("VK_KHR_multiview", extension_count, extensions);
	GLAD_VK_KHR_performance_query = glad_vk_has_extension("VK_KHR_performance_query", extension_count, extensions);
	GLAD_VK_KHR_pipeline_executable_properties = glad_vk_has_extension("VK_KHR_pipeline_executable_properties", extension_count, extensions);
	GLAD_VK_KHR_pipeline_library = glad_vk_has_extension("VK_KHR_pipeline_library", extension_count, extensions);
	GLAD_VK_KHR_portability_enumeration = glad_vk_has_extension("VK_KHR_portability_enumeration", extension_count, extensions);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	GLAD_VK_KHR_portability_subset = glad_vk_has_extension("VK_KHR_portability_subset", extension_count, extensions);

#endif
	GLAD_VK_KHR_present_id = glad_vk_has_extension("VK_KHR_present_id", extension_count, extensions);
	GLAD_VK_KHR_present_wait = glad_vk_has_extension("VK_KHR_present_wait", extension_count, extensions);
	GLAD_VK_KHR_push_descriptor = glad_vk_has_extension("VK_KHR_push_descriptor", extension_count, extensions);
	GLAD_VK_KHR_ray_query = glad_vk_has_extension("VK_KHR_ray_query", extension_count, extensions);
	GLAD_VK_KHR_ray_tracing_maintenance1 = glad_vk_has_extension("VK_KHR_ray_tracing_maintenance1", extension_count, extensions);
	GLAD_VK_KHR_ray_tracing_pipeline = glad_vk_has_extension("VK_KHR_ray_tracing_pipeline", extension_count, extensions);
	GLAD_VK_KHR_ray_tracing_position_fetch = glad_vk_has_extension("VK_KHR_ray_tracing_position_fetch", extension_count, extensions);
	GLAD_VK_KHR_relaxed_block_layout = glad_vk_has_extension("VK_KHR_relaxed_block_layout", extension_count, extensions);
	GLAD_VK_KHR_sampler_mirror_clamp_to_edge = glad_vk_has_extension("VK_KHR_sampler_mirror_clamp_to_edge", extension_count, extensions);
	GLAD_VK_KHR_sampler_ycbcr_conversion = glad_vk_has_extension("VK_KHR_sampler_ycbcr_conversion", extension_count, extensions);
	GLAD_VK_KHR_separate_depth_stencil_layouts = glad_vk_has_extension("VK_KHR_separate_depth_stencil_layouts", extension_count, extensions);
	GLAD_VK_KHR_shader_atomic_int64 = glad_vk_has_extension("VK_KHR_shader_atomic_int64", extension_count, extensions);
	GLAD_VK_KHR_shader_clock = glad_vk_has_extension("VK_KHR_shader_clock", extension_count, extensions);
	GLAD_VK_KHR_shader_draw_parameters = glad_vk_has_extension("VK_KHR_shader_draw_parameters", extension_count, extensions);
	GLAD_VK_KHR_shader_float16_int8 = glad_vk_has_extension("VK_KHR_shader_float16_int8", extension_count, extensions);
	GLAD_VK_KHR_shader_float_controls = glad_vk_has_extension("VK_KHR_shader_float_controls", extension_count, extensions);
	GLAD_VK_KHR_shader_integer_dot_product = glad_vk_has_extension("VK_KHR_shader_integer_dot_product", extension_count, extensions);
	GLAD_VK_KHR_shader_non_semantic_info = glad_vk_has_extension("VK_KHR_shader_non_semantic_info", extension_count, extensions);
	GLAD_VK_KHR_shader_subgroup_extended_types = glad_vk_has_extension("VK_KHR_shader_subgroup_extended_types", extension_count, extensions);
	GLAD_VK_KHR_shader_subgroup_uniform_control_flow = glad_vk_has_extension("VK_KHR_shader_subgroup_uniform_control_flow", extension_count, extensions);
	GLAD_VK_KHR_shader_terminate_invocation = glad_vk_has_extension("VK_KHR_shader_terminate_invocation", extension_count, extensions);
	GLAD_VK_KHR_shared_presentable_image = glad_vk_has_extension("VK_KHR_shared_presentable_image", extension_count, extensions);
	GLAD_VK_KHR_spirv_1_4 = glad_vk_has_extension("VK_KHR_spirv_1_4", extension_count, extensions);
	GLAD_VK_KHR_storage_buffer_storage_class = glad_vk_has_extension("VK_KHR_storage_buffer_storage_class", extension_count, extensions);
	GLAD_VK_KHR_surface = glad_vk_has_extension("VK_KHR_surface", extension_count, extensions);
	GLAD_VK_KHR_surface_protected_capabilities = glad_vk_has_extension("VK_KHR_surface_protected_capabilities", extension_count, extensions);
	GLAD_VK_KHR_swapchain = glad_vk_has_extension("VK_KHR_swapchain", extension_count, extensions);
	GLAD_VK_KHR_swapchain_mutable_format = glad_vk_has_extension("VK_KHR_swapchain_mutable_format", extension_count, extensions);
	GLAD_VK_KHR_synchronization2 = glad_vk_has_extension("VK_KHR_synchronization2", extension_count, extensions);
	GLAD_VK_KHR_timeline_semaphore = glad_vk_has_extension("VK_KHR_timeline_semaphore", extension_count, extensions);
	GLAD_VK_KHR_uniform_buffer_standard_layout = glad_vk_has_extension("VK_KHR_uniform_buffer_standard_layout", extension_count, extensions);
	GLAD_VK_KHR_variable_pointers = glad_vk_has_extension("VK_KHR_variable_pointers", extension_count, extensions);
	GLAD_VK_KHR_video_decode_h264 = glad_vk_has_extension("VK_KHR_video_decode_h264", extension_count, extensions);
	GLAD_VK_KHR_video_decode_h265 = glad_vk_has_extension("VK_KHR_video_decode_h265", extension_count, extensions);
	GLAD_VK_KHR_video_decode_queue = glad_vk_has_extension("VK_KHR_video_decode_queue", extension_count, extensions);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	GLAD_VK_KHR_video_encode_queue = glad_vk_has_extension("VK_KHR_video_encode_queue", extension_count, extensions);

#endif
	GLAD_VK_KHR_video_queue = glad_vk_has_extension("VK_KHR_video_queue", extension_count, extensions);
	GLAD_VK_KHR_vulkan_memory_model = glad_vk_has_extension("VK_KHR_vulkan_memory_model", extension_count, extensions);
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	GLAD_VK_KHR_wayland_surface = glad_vk_has_extension("VK_KHR_wayland_surface", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	GLAD_VK_KHR_win32_keyed_mutex = glad_vk_has_extension("VK_KHR_win32_keyed_mutex", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	GLAD_VK_KHR_win32_surface = glad_vk_has_extension("VK_KHR_win32_surface", extension_count, extensions);

#endif
	GLAD_VK_KHR_workgroup_memory_explicit_layout = glad_vk_has_extension("VK_KHR_workgroup_memory_explicit_layout", extension_count, extensions);
#if defined(VK_USE_PLATFORM_XCB_KHR)
	GLAD_VK_KHR_xcb_surface = glad_vk_has_extension("VK_KHR_xcb_surface", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
	GLAD_VK_KHR_xlib_surface = glad_vk_has_extension("VK_KHR_xlib_surface", extension_count, extensions);

#endif
	GLAD_VK_KHR_zero_initialize_workgroup_memory = glad_vk_has_extension("VK_KHR_zero_initialize_workgroup_memory", extension_count, extensions);
	GLAD_VK_LUNARG_direct_driver_loading = glad_vk_has_extension("VK_LUNARG_direct_driver_loading", extension_count, extensions);
	GLAD_VK_MSFT_layered_driver = glad_vk_has_extension("VK_MSFT_layered_driver", extension_count, extensions);
#if defined(VK_USE_PLATFORM_IOS_MVK)
	GLAD_VK_MVK_ios_surface = glad_vk_has_extension("VK_MVK_ios_surface", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
	GLAD_VK_MVK_macos_surface = glad_vk_has_extension("VK_MVK_macos_surface", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_VI_NN)
	GLAD_VK_NN_vi_surface = glad_vk_has_extension("VK_NN_vi_surface", extension_count, extensions);

#endif
	GLAD_VK_NVX_binary_import = glad_vk_has_extension("VK_NVX_binary_import", extension_count, extensions);
	GLAD_VK_NVX_image_view_handle = glad_vk_has_extension("VK_NVX_image_view_handle", extension_count, extensions);
	GLAD_VK_NVX_multiview_per_view_attributes = glad_vk_has_extension("VK_NVX_multiview_per_view_attributes", extension_count, extensions);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	GLAD_VK_NV_acquire_winrt_display = glad_vk_has_extension("VK_NV_acquire_winrt_display", extension_count, extensions);

#endif
	GLAD_VK_NV_clip_space_w_scaling = glad_vk_has_extension("VK_NV_clip_space_w_scaling", extension_count, extensions);
	GLAD_VK_NV_compute_shader_derivatives = glad_vk_has_extension("VK_NV_compute_shader_derivatives", extension_count, extensions);
	GLAD_VK_NV_cooperative_matrix = glad_vk_has_extension("VK_NV_cooperative_matrix", extension_count, extensions);
	GLAD_VK_NV_copy_memory_indirect = glad_vk_has_extension("VK_NV_copy_memory_indirect", extension_count, extensions);
	GLAD_VK_NV_corner_sampled_image = glad_vk_has_extension("VK_NV_corner_sampled_image", extension_count, extensions);
	GLAD_VK_NV_coverage_reduction_mode = glad_vk_has_extension("VK_NV_coverage_reduction_mode", extension_count, extensions);
	GLAD_VK_NV_dedicated_allocation = glad_vk_has_extension("VK_NV_dedicated_allocation", extension_count, extensions);
	GLAD_VK_NV_dedicated_allocation_image_aliasing = glad_vk_has_extension("VK_NV_dedicated_allocation_image_aliasing", extension_count, extensions);
	GLAD_VK_NV_descriptor_pool_overallocation = glad_vk_has_extension("VK_NV_descriptor_pool_overallocation", extension_count, extensions);
	GLAD_VK_NV_device_diagnostic_checkpoints = glad_vk_has_extension("VK_NV_device_diagnostic_checkpoints", extension_count, extensions);
	GLAD_VK_NV_device_diagnostics_config = glad_vk_has_extension("VK_NV_device_diagnostics_config", extension_count, extensions);
	GLAD_VK_NV_device_generated_commands = glad_vk_has_extension("VK_NV_device_generated_commands", extension_count, extensions);
	GLAD_VK_NV_device_generated_commands_compute = glad_vk_has_extension("VK_NV_device_generated_commands_compute", extension_count, extensions);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	GLAD_VK_NV_displacement_micromap = glad_vk_has_extension("VK_NV_displacement_micromap", extension_count, extensions);

#endif
	GLAD_VK_NV_external_memory = glad_vk_has_extension("VK_NV_external_memory", extension_count, extensions);
	GLAD_VK_NV_external_memory_capabilities = glad_vk_has_extension("VK_NV_external_memory_capabilities", extension_count, extensions);
	GLAD_VK_NV_external_memory_rdma = glad_vk_has_extension("VK_NV_external_memory_rdma", extension_count, extensions);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	GLAD_VK_NV_external_memory_win32 = glad_vk_has_extension("VK_NV_external_memory_win32", extension_count, extensions);

#endif
	GLAD_VK_NV_fill_rectangle = glad_vk_has_extension("VK_NV_fill_rectangle", extension_count, extensions);
	GLAD_VK_NV_fragment_coverage_to_color = glad_vk_has_extension("VK_NV_fragment_coverage_to_color", extension_count, extensions);
	GLAD_VK_NV_fragment_shader_barycentric = glad_vk_has_extension("VK_NV_fragment_shader_barycentric", extension_count, extensions);
	GLAD_VK_NV_fragment_shading_rate_enums = glad_vk_has_extension("VK_NV_fragment_shading_rate_enums", extension_count, extensions);
	GLAD_VK_NV_framebuffer_mixed_samples = glad_vk_has_extension("VK_NV_framebuffer_mixed_samples", extension_count, extensions);
	GLAD_VK_NV_geometry_shader_passthrough = glad_vk_has_extension("VK_NV_geometry_shader_passthrough", extension_count, extensions);
	GLAD_VK_NV_glsl_shader = glad_vk_has_extension("VK_NV_glsl_shader", extension_count, extensions);
	GLAD_VK_NV_inherited_viewport_scissor = glad_vk_has_extension("VK_NV_inherited_viewport_scissor", extension_count, extensions);
	GLAD_VK_NV_linear_color_attachment = glad_vk_has_extension("VK_NV_linear_color_attachment", extension_count, extensions);
	GLAD_VK_NV_low_latency = glad_vk_has_extension("VK_NV_low_latency", extension_count, extensions);
	GLAD_VK_NV_low_latency2 = glad_vk_has_extension("VK_NV_low_latency2", extension_count, extensions);
	GLAD_VK_NV_memory_decompression = glad_vk_has_extension("VK_NV_memory_decompression", extension_count, extensions);
	GLAD_VK_NV_mesh_shader = glad_vk_has_extension("VK_NV_mesh_shader", extension_count, extensions);
	GLAD_VK_NV_optical_flow = glad_vk_has_extension("VK_NV_optical_flow", extension_count, extensions);
	GLAD_VK_NV_present_barrier = glad_vk_has_extension("VK_NV_present_barrier", extension_count, extensions);
	GLAD_VK_NV_ray_tracing = glad_vk_has_extension("VK_NV_ray_tracing", extension_count, extensions);
	GLAD_VK_NV_ray_tracing_invocation_reorder = glad_vk_has_extension("VK_NV_ray_tracing_invocation_reorder", extension_count, extensions);
	GLAD_VK_NV_ray_tracing_motion_blur = glad_vk_has_extension("VK_NV_ray_tracing_motion_blur", extension_count, extensions);
	GLAD_VK_NV_representative_fragment_test = glad_vk_has_extension("VK_NV_representative_fragment_test", extension_count, extensions);
	GLAD_VK_NV_sample_mask_override_coverage = glad_vk_has_extension("VK_NV_sample_mask_override_coverage", extension_count, extensions);
	GLAD_VK_NV_scissor_exclusive = glad_vk_has_extension("VK_NV_scissor_exclusive", extension_count, extensions);
	GLAD_VK_NV_shader_image_footprint = glad_vk_has_extension("VK_NV_shader_image_footprint", extension_count, extensions);
	GLAD_VK_NV_shader_sm_builtins = glad_vk_has_extension("VK_NV_shader_sm_builtins", extension_count, extensions);
	GLAD_VK_NV_shader_subgroup_partitioned = glad_vk_has_extension("VK_NV_shader_subgroup_partitioned", extension_count, extensions);
	GLAD_VK_NV_shading_rate_image = glad_vk_has_extension("VK_NV_shading_rate_image", extension_count, extensions);
	GLAD_VK_NV_viewport_array2 = glad_vk_has_extension("VK_NV_viewport_array2", extension_count, extensions);
	GLAD_VK_NV_viewport_swizzle = glad_vk_has_extension("VK_NV_viewport_swizzle", extension_count, extensions);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	GLAD_VK_NV_win32_keyed_mutex = glad_vk_has_extension("VK_NV_win32_keyed_mutex", extension_count, extensions);

#endif
	GLAD_VK_QCOM_filter_cubic_clamp = glad_vk_has_extension("VK_QCOM_filter_cubic_clamp", extension_count, extensions);
	GLAD_VK_QCOM_filter_cubic_weights = glad_vk_has_extension("VK_QCOM_filter_cubic_weights", extension_count, extensions);
	GLAD_VK_QCOM_fragment_density_map_offset = glad_vk_has_extension("VK_QCOM_fragment_density_map_offset", extension_count, extensions);
	GLAD_VK_QCOM_image_processing = glad_vk_has_extension("VK_QCOM_image_processing", extension_count, extensions);
	GLAD_VK_QCOM_image_processing2 = glad_vk_has_extension("VK_QCOM_image_processing2", extension_count, extensions);
	GLAD_VK_QCOM_multiview_per_view_render_areas = glad_vk_has_extension("VK_QCOM_multiview_per_view_render_areas", extension_count, extensions);
	GLAD_VK_QCOM_multiview_per_view_viewports = glad_vk_has_extension("VK_QCOM_multiview_per_view_viewports", extension_count, extensions);
	GLAD_VK_QCOM_render_pass_shader_resolve = glad_vk_has_extension("VK_QCOM_render_pass_shader_resolve", extension_count, extensions);
	GLAD_VK_QCOM_render_pass_store_ops = glad_vk_has_extension("VK_QCOM_render_pass_store_ops", extension_count, extensions);
	GLAD_VK_QCOM_render_pass_transform = glad_vk_has_extension("VK_QCOM_render_pass_transform", extension_count, extensions);
	GLAD_VK_QCOM_rotated_copy_commands = glad_vk_has_extension("VK_QCOM_rotated_copy_commands", extension_count, extensions);
	GLAD_VK_QCOM_tile_properties = glad_vk_has_extension("VK_QCOM_tile_properties", extension_count, extensions);
	GLAD_VK_QCOM_ycbcr_degamma = glad_vk_has_extension("VK_QCOM_ycbcr_degamma", extension_count, extensions);
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	GLAD_VK_QNX_external_memory_screen_buffer = glad_vk_has_extension("VK_QNX_external_memory_screen_buffer", extension_count, extensions);

#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	GLAD_VK_QNX_screen_surface = glad_vk_has_extension("VK_QNX_screen_surface", extension_count, extensions);

#endif
	GLAD_VK_SEC_amigo_profiling = glad_vk_has_extension("VK_SEC_amigo_profiling", extension_count, extensions);
	GLAD_VK_VALVE_descriptor_set_host_mapping = glad_vk_has_extension("VK_VALVE_descriptor_set_host_mapping", extension_count, extensions);
	GLAD_VK_VALVE_mutable_descriptor_type = glad_vk_has_extension("VK_VALVE_mutable_descriptor_type", extension_count, extensions);

	GLAD_UNUSED(glad_vk_has_extension);

	glad_vk_free_extensions(extension_count, extensions);

	return 1;
}

static int glad_vk_find_core_vulkan(VkPhysicalDevice physical_device) {
	int major = 1;
	int minor = 0;

#ifdef VK_VERSION_1_1
	if (glad_vkEnumerateInstanceVersion != NULL) {
		uint32_t version;
		VkResult result;

		result = glad_vkEnumerateInstanceVersion(&version);
		if (result == VK_SUCCESS) {
			major = (int)VK_VERSION_MAJOR(version);
			minor = (int)VK_VERSION_MINOR(version);
		}
	}
#endif

	if (physical_device != NULL && glad_vkGetPhysicalDeviceProperties != NULL) {
		VkPhysicalDeviceProperties properties;
		glad_vkGetPhysicalDeviceProperties(physical_device, &properties);

		major = (int)VK_VERSION_MAJOR(properties.apiVersion);
		minor = (int)VK_VERSION_MINOR(properties.apiVersion);
	}

	GLAD_VK_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
	GLAD_VK_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
	GLAD_VK_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
	GLAD_VK_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;

	return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadVulkanUserPtr(VkPhysicalDevice physical_device, GLADuserptrloadfunc load, void *userptr) {
	int version;

#ifdef VK_VERSION_1_1
	glad_vkEnumerateInstanceVersion = (PFN_vkEnumerateInstanceVersion)load(userptr, "vkEnumerateInstanceVersion");
#endif
	version = glad_vk_find_core_vulkan(physical_device);
	if (!version) {
		return 0;
	}

	glad_vk_load_VK_VERSION_1_0(load, userptr);
	glad_vk_load_VK_VERSION_1_1(load, userptr);
	glad_vk_load_VK_VERSION_1_2(load, userptr);
	glad_vk_load_VK_VERSION_1_3(load, userptr);

	if (!glad_vk_find_extensions_vulkan(physical_device))
		return 0;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_vk_load_VK_AMDX_shader_enqueue(load, userptr);

#endif
	glad_vk_load_VK_AMD_buffer_marker(load, userptr);
	glad_vk_load_VK_AMD_display_native_hdr(load, userptr);
	glad_vk_load_VK_AMD_draw_indirect_count(load, userptr);
	glad_vk_load_VK_AMD_shader_info(load, userptr);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	glad_vk_load_VK_ANDROID_external_memory_android_hardware_buffer(load, userptr);

#endif
	glad_vk_load_VK_EXT_acquire_drm_display(load, userptr);
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	glad_vk_load_VK_EXT_acquire_xlib_display(load, userptr);

#endif
	glad_vk_load_VK_EXT_attachment_feedback_loop_dynamic_state(load, userptr);
	glad_vk_load_VK_EXT_buffer_device_address(load, userptr);
	glad_vk_load_VK_EXT_calibrated_timestamps(load, userptr);
	glad_vk_load_VK_EXT_color_write_enable(load, userptr);
	glad_vk_load_VK_EXT_conditional_rendering(load, userptr);
	glad_vk_load_VK_EXT_debug_marker(load, userptr);
	glad_vk_load_VK_EXT_debug_report(load, userptr);
	glad_vk_load_VK_EXT_debug_utils(load, userptr);
	glad_vk_load_VK_EXT_depth_bias_control(load, userptr);
	glad_vk_load_VK_EXT_descriptor_buffer(load, userptr);
	glad_vk_load_VK_EXT_device_fault(load, userptr);
	glad_vk_load_VK_EXT_direct_mode_display(load, userptr);
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	glad_vk_load_VK_EXT_directfb_surface(load, userptr);

#endif
	glad_vk_load_VK_EXT_discard_rectangles(load, userptr);
	glad_vk_load_VK_EXT_display_control(load, userptr);
	glad_vk_load_VK_EXT_display_surface_counter(load, userptr);
	glad_vk_load_VK_EXT_extended_dynamic_state(load, userptr);
	glad_vk_load_VK_EXT_extended_dynamic_state2(load, userptr);
	glad_vk_load_VK_EXT_extended_dynamic_state3(load, userptr);
	glad_vk_load_VK_EXT_external_memory_host(load, userptr);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_vk_load_VK_EXT_full_screen_exclusive(load, userptr);

#endif
	glad_vk_load_VK_EXT_hdr_metadata(load, userptr);
	glad_vk_load_VK_EXT_headless_surface(load, userptr);
	glad_vk_load_VK_EXT_host_image_copy(load, userptr);
	glad_vk_load_VK_EXT_host_query_reset(load, userptr);
	glad_vk_load_VK_EXT_image_compression_control(load, userptr);
	glad_vk_load_VK_EXT_image_drm_format_modifier(load, userptr);
	glad_vk_load_VK_EXT_line_rasterization(load, userptr);
	glad_vk_load_VK_EXT_mesh_shader(load, userptr);
#if defined(VK_USE_PLATFORM_METAL_EXT)
	glad_vk_load_VK_EXT_metal_objects(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
	glad_vk_load_VK_EXT_metal_surface(load, userptr);

#endif
	glad_vk_load_VK_EXT_multi_draw(load, userptr);
	glad_vk_load_VK_EXT_opacity_micromap(load, userptr);
	glad_vk_load_VK_EXT_pageable_device_local_memory(load, userptr);
	glad_vk_load_VK_EXT_pipeline_properties(load, userptr);
	glad_vk_load_VK_EXT_private_data(load, userptr);
	glad_vk_load_VK_EXT_sample_locations(load, userptr);
	glad_vk_load_VK_EXT_shader_module_identifier(load, userptr);
	glad_vk_load_VK_EXT_shader_object(load, userptr);
	glad_vk_load_VK_EXT_swapchain_maintenance1(load, userptr);
	glad_vk_load_VK_EXT_tooling_info(load, userptr);
	glad_vk_load_VK_EXT_transform_feedback(load, userptr);
	glad_vk_load_VK_EXT_validation_cache(load, userptr);
	glad_vk_load_VK_EXT_vertex_input_dynamic_state(load, userptr);
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_vk_load_VK_FUCHSIA_buffer_collection(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_vk_load_VK_FUCHSIA_external_memory(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_vk_load_VK_FUCHSIA_external_semaphore(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_vk_load_VK_FUCHSIA_imagepipe_surface(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_GGP)
	glad_vk_load_VK_GGP_stream_descriptor_surface(load, userptr);

#endif
	glad_vk_load_VK_GOOGLE_display_timing(load, userptr);
	glad_vk_load_VK_HUAWEI_cluster_culling_shader(load, userptr);
	glad_vk_load_VK_HUAWEI_invocation_mask(load, userptr);
	glad_vk_load_VK_HUAWEI_subpass_shading(load, userptr);
	glad_vk_load_VK_INTEL_performance_query(load, userptr);
	glad_vk_load_VK_KHR_acceleration_structure(load, userptr);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	glad_vk_load_VK_KHR_android_surface(load, userptr);

#endif
	glad_vk_load_VK_KHR_bind_memory2(load, userptr);
	glad_vk_load_VK_KHR_buffer_device_address(load, userptr);
	glad_vk_load_VK_KHR_cooperative_matrix(load, userptr);
	glad_vk_load_VK_KHR_copy_commands2(load, userptr);
	glad_vk_load_VK_KHR_create_renderpass2(load, userptr);
	glad_vk_load_VK_KHR_deferred_host_operations(load, userptr);
	glad_vk_load_VK_KHR_descriptor_update_template(load, userptr);
	glad_vk_load_VK_KHR_device_group(load, userptr);
	glad_vk_load_VK_KHR_device_group_creation(load, userptr);
	glad_vk_load_VK_KHR_display(load, userptr);
	glad_vk_load_VK_KHR_display_swapchain(load, userptr);
	glad_vk_load_VK_KHR_draw_indirect_count(load, userptr);
	glad_vk_load_VK_KHR_dynamic_rendering(load, userptr);
	glad_vk_load_VK_KHR_external_fence_capabilities(load, userptr);
	glad_vk_load_VK_KHR_external_fence_fd(load, userptr);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_vk_load_VK_KHR_external_fence_win32(load, userptr);

#endif
	glad_vk_load_VK_KHR_external_memory_capabilities(load, userptr);
	glad_vk_load_VK_KHR_external_memory_fd(load, userptr);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_vk_load_VK_KHR_external_memory_win32(load, userptr);

#endif
	glad_vk_load_VK_KHR_external_semaphore_capabilities(load, userptr);
	glad_vk_load_VK_KHR_external_semaphore_fd(load, userptr);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_vk_load_VK_KHR_external_semaphore_win32(load, userptr);

#endif
	glad_vk_load_VK_KHR_fragment_shading_rate(load, userptr);
	glad_vk_load_VK_KHR_get_display_properties2(load, userptr);
	glad_vk_load_VK_KHR_get_memory_requirements2(load, userptr);
	glad_vk_load_VK_KHR_get_physical_device_properties2(load, userptr);
	glad_vk_load_VK_KHR_get_surface_capabilities2(load, userptr);
	glad_vk_load_VK_KHR_maintenance1(load, userptr);
	glad_vk_load_VK_KHR_maintenance3(load, userptr);
	glad_vk_load_VK_KHR_maintenance4(load, userptr);
	glad_vk_load_VK_KHR_maintenance5(load, userptr);
	glad_vk_load_VK_KHR_map_memory2(load, userptr);
	glad_vk_load_VK_KHR_performance_query(load, userptr);
	glad_vk_load_VK_KHR_pipeline_executable_properties(load, userptr);
	glad_vk_load_VK_KHR_present_wait(load, userptr);
	glad_vk_load_VK_KHR_push_descriptor(load, userptr);
	glad_vk_load_VK_KHR_ray_tracing_maintenance1(load, userptr);
	glad_vk_load_VK_KHR_ray_tracing_pipeline(load, userptr);
	glad_vk_load_VK_KHR_sampler_ycbcr_conversion(load, userptr);
	glad_vk_load_VK_KHR_shared_presentable_image(load, userptr);
	glad_vk_load_VK_KHR_surface(load, userptr);
	glad_vk_load_VK_KHR_swapchain(load, userptr);
	glad_vk_load_VK_KHR_synchronization2(load, userptr);
	glad_vk_load_VK_KHR_timeline_semaphore(load, userptr);
	glad_vk_load_VK_KHR_video_decode_queue(load, userptr);
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_vk_load_VK_KHR_video_encode_queue(load, userptr);

#endif
	glad_vk_load_VK_KHR_video_queue(load, userptr);
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	glad_vk_load_VK_KHR_wayland_surface(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_vk_load_VK_KHR_win32_surface(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
	glad_vk_load_VK_KHR_xcb_surface(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
	glad_vk_load_VK_KHR_xlib_surface(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_IOS_MVK)
	glad_vk_load_VK_MVK_ios_surface(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_MACOS_MVK)
	glad_vk_load_VK_MVK_macos_surface(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_VI_NN)
	glad_vk_load_VK_NN_vi_surface(load, userptr);

#endif
	glad_vk_load_VK_NVX_binary_import(load, userptr);
	glad_vk_load_VK_NVX_image_view_handle(load, userptr);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_vk_load_VK_NV_acquire_winrt_display(load, userptr);

#endif
	glad_vk_load_VK_NV_clip_space_w_scaling(load, userptr);
	glad_vk_load_VK_NV_cooperative_matrix(load, userptr);
	glad_vk_load_VK_NV_copy_memory_indirect(load, userptr);
	glad_vk_load_VK_NV_coverage_reduction_mode(load, userptr);
	glad_vk_load_VK_NV_device_diagnostic_checkpoints(load, userptr);
	glad_vk_load_VK_NV_device_generated_commands(load, userptr);
	glad_vk_load_VK_NV_device_generated_commands_compute(load, userptr);
	glad_vk_load_VK_NV_external_memory_capabilities(load, userptr);
	glad_vk_load_VK_NV_external_memory_rdma(load, userptr);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_vk_load_VK_NV_external_memory_win32(load, userptr);

#endif
	glad_vk_load_VK_NV_fragment_shading_rate_enums(load, userptr);
	glad_vk_load_VK_NV_low_latency2(load, userptr);
	glad_vk_load_VK_NV_memory_decompression(load, userptr);
	glad_vk_load_VK_NV_mesh_shader(load, userptr);
	glad_vk_load_VK_NV_optical_flow(load, userptr);
	glad_vk_load_VK_NV_ray_tracing(load, userptr);
	glad_vk_load_VK_NV_scissor_exclusive(load, userptr);
	glad_vk_load_VK_NV_shading_rate_image(load, userptr);
	glad_vk_load_VK_QCOM_tile_properties(load, userptr);
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	glad_vk_load_VK_QNX_external_memory_screen_buffer(load, userptr);

#endif
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	glad_vk_load_VK_QNX_screen_surface(load, userptr);

#endif
	glad_vk_load_VK_VALVE_descriptor_set_host_mapping(load, userptr);

	glad_vk_resolve_aliases();

	return version;
}


int gladLoadVulkan(VkPhysicalDevice physical_device, GLADloadfunc load) {
	return gladLoadVulkanUserPtr(physical_device, glad_vk_get_proc_from_userptr, GLAD_GNUC_EXTENSION(void *) load);
}



void gladInstallVulkanDebug(void) {
	glad_debug_vkAcquireDrmDisplayEXT = glad_debug_impl_vkAcquireDrmDisplayEXT;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkAcquireFullScreenExclusiveModeEXT = glad_debug_impl_vkAcquireFullScreenExclusiveModeEXT;

#endif
	glad_debug_vkAcquireNextImage2KHR = glad_debug_impl_vkAcquireNextImage2KHR;
	glad_debug_vkAcquireNextImageKHR = glad_debug_impl_vkAcquireNextImageKHR;
	glad_debug_vkAcquirePerformanceConfigurationINTEL = glad_debug_impl_vkAcquirePerformanceConfigurationINTEL;
	glad_debug_vkAcquireProfilingLockKHR = glad_debug_impl_vkAcquireProfilingLockKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkAcquireWinrtDisplayNV = glad_debug_impl_vkAcquireWinrtDisplayNV;

#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	glad_debug_vkAcquireXlibDisplayEXT = glad_debug_impl_vkAcquireXlibDisplayEXT;

#endif
	glad_debug_vkAllocateCommandBuffers = glad_debug_impl_vkAllocateCommandBuffers;
	glad_debug_vkAllocateDescriptorSets = glad_debug_impl_vkAllocateDescriptorSets;
	glad_debug_vkAllocateMemory = glad_debug_impl_vkAllocateMemory;
	glad_debug_vkBeginCommandBuffer = glad_debug_impl_vkBeginCommandBuffer;
	glad_debug_vkBindAccelerationStructureMemoryNV = glad_debug_impl_vkBindAccelerationStructureMemoryNV;
	glad_debug_vkBindBufferMemory = glad_debug_impl_vkBindBufferMemory;
	glad_debug_vkBindBufferMemory2 = glad_debug_impl_vkBindBufferMemory2;
	glad_debug_vkBindBufferMemory2KHR = glad_debug_impl_vkBindBufferMemory2KHR;
	glad_debug_vkBindImageMemory = glad_debug_impl_vkBindImageMemory;
	glad_debug_vkBindImageMemory2 = glad_debug_impl_vkBindImageMemory2;
	glad_debug_vkBindImageMemory2KHR = glad_debug_impl_vkBindImageMemory2KHR;
	glad_debug_vkBindOpticalFlowSessionImageNV = glad_debug_impl_vkBindOpticalFlowSessionImageNV;
	glad_debug_vkBindVideoSessionMemoryKHR = glad_debug_impl_vkBindVideoSessionMemoryKHR;
	glad_debug_vkBuildAccelerationStructuresKHR = glad_debug_impl_vkBuildAccelerationStructuresKHR;
	glad_debug_vkBuildMicromapsEXT = glad_debug_impl_vkBuildMicromapsEXT;
	glad_debug_vkCmdBeginConditionalRenderingEXT = glad_debug_impl_vkCmdBeginConditionalRenderingEXT;
	glad_debug_vkCmdBeginDebugUtilsLabelEXT = glad_debug_impl_vkCmdBeginDebugUtilsLabelEXT;
	glad_debug_vkCmdBeginQuery = glad_debug_impl_vkCmdBeginQuery;
	glad_debug_vkCmdBeginQueryIndexedEXT = glad_debug_impl_vkCmdBeginQueryIndexedEXT;
	glad_debug_vkCmdBeginRenderPass = glad_debug_impl_vkCmdBeginRenderPass;
	glad_debug_vkCmdBeginRenderPass2 = glad_debug_impl_vkCmdBeginRenderPass2;
	glad_debug_vkCmdBeginRenderPass2KHR = glad_debug_impl_vkCmdBeginRenderPass2KHR;
	glad_debug_vkCmdBeginRendering = glad_debug_impl_vkCmdBeginRendering;
	glad_debug_vkCmdBeginRenderingKHR = glad_debug_impl_vkCmdBeginRenderingKHR;
	glad_debug_vkCmdBeginTransformFeedbackEXT = glad_debug_impl_vkCmdBeginTransformFeedbackEXT;
	glad_debug_vkCmdBeginVideoCodingKHR = glad_debug_impl_vkCmdBeginVideoCodingKHR;
	glad_debug_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = glad_debug_impl_vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
	glad_debug_vkCmdBindDescriptorBuffersEXT = glad_debug_impl_vkCmdBindDescriptorBuffersEXT;
	glad_debug_vkCmdBindDescriptorSets = glad_debug_impl_vkCmdBindDescriptorSets;
	glad_debug_vkCmdBindIndexBuffer = glad_debug_impl_vkCmdBindIndexBuffer;
	glad_debug_vkCmdBindIndexBuffer2KHR = glad_debug_impl_vkCmdBindIndexBuffer2KHR;
	glad_debug_vkCmdBindInvocationMaskHUAWEI = glad_debug_impl_vkCmdBindInvocationMaskHUAWEI;
	glad_debug_vkCmdBindPipeline = glad_debug_impl_vkCmdBindPipeline;
	glad_debug_vkCmdBindPipelineShaderGroupNV = glad_debug_impl_vkCmdBindPipelineShaderGroupNV;
	glad_debug_vkCmdBindShadersEXT = glad_debug_impl_vkCmdBindShadersEXT;
	glad_debug_vkCmdBindShadingRateImageNV = glad_debug_impl_vkCmdBindShadingRateImageNV;
	glad_debug_vkCmdBindTransformFeedbackBuffersEXT = glad_debug_impl_vkCmdBindTransformFeedbackBuffersEXT;
	glad_debug_vkCmdBindVertexBuffers = glad_debug_impl_vkCmdBindVertexBuffers;
	glad_debug_vkCmdBindVertexBuffers2 = glad_debug_impl_vkCmdBindVertexBuffers2;
	glad_debug_vkCmdBindVertexBuffers2EXT = glad_debug_impl_vkCmdBindVertexBuffers2EXT;
	glad_debug_vkCmdBlitImage = glad_debug_impl_vkCmdBlitImage;
	glad_debug_vkCmdBlitImage2 = glad_debug_impl_vkCmdBlitImage2;
	glad_debug_vkCmdBlitImage2KHR = glad_debug_impl_vkCmdBlitImage2KHR;
	glad_debug_vkCmdBuildAccelerationStructureNV = glad_debug_impl_vkCmdBuildAccelerationStructureNV;
	glad_debug_vkCmdBuildAccelerationStructuresIndirectKHR = glad_debug_impl_vkCmdBuildAccelerationStructuresIndirectKHR;
	glad_debug_vkCmdBuildAccelerationStructuresKHR = glad_debug_impl_vkCmdBuildAccelerationStructuresKHR;
	glad_debug_vkCmdBuildMicromapsEXT = glad_debug_impl_vkCmdBuildMicromapsEXT;
	glad_debug_vkCmdClearAttachments = glad_debug_impl_vkCmdClearAttachments;
	glad_debug_vkCmdClearColorImage = glad_debug_impl_vkCmdClearColorImage;
	glad_debug_vkCmdClearDepthStencilImage = glad_debug_impl_vkCmdClearDepthStencilImage;
	glad_debug_vkCmdControlVideoCodingKHR = glad_debug_impl_vkCmdControlVideoCodingKHR;
	glad_debug_vkCmdCopyAccelerationStructureKHR = glad_debug_impl_vkCmdCopyAccelerationStructureKHR;
	glad_debug_vkCmdCopyAccelerationStructureNV = glad_debug_impl_vkCmdCopyAccelerationStructureNV;
	glad_debug_vkCmdCopyAccelerationStructureToMemoryKHR = glad_debug_impl_vkCmdCopyAccelerationStructureToMemoryKHR;
	glad_debug_vkCmdCopyBuffer = glad_debug_impl_vkCmdCopyBuffer;
	glad_debug_vkCmdCopyBuffer2 = glad_debug_impl_vkCmdCopyBuffer2;
	glad_debug_vkCmdCopyBuffer2KHR = glad_debug_impl_vkCmdCopyBuffer2KHR;
	glad_debug_vkCmdCopyBufferToImage = glad_debug_impl_vkCmdCopyBufferToImage;
	glad_debug_vkCmdCopyBufferToImage2 = glad_debug_impl_vkCmdCopyBufferToImage2;
	glad_debug_vkCmdCopyBufferToImage2KHR = glad_debug_impl_vkCmdCopyBufferToImage2KHR;
	glad_debug_vkCmdCopyImage = glad_debug_impl_vkCmdCopyImage;
	glad_debug_vkCmdCopyImage2 = glad_debug_impl_vkCmdCopyImage2;
	glad_debug_vkCmdCopyImage2KHR = glad_debug_impl_vkCmdCopyImage2KHR;
	glad_debug_vkCmdCopyImageToBuffer = glad_debug_impl_vkCmdCopyImageToBuffer;
	glad_debug_vkCmdCopyImageToBuffer2 = glad_debug_impl_vkCmdCopyImageToBuffer2;
	glad_debug_vkCmdCopyImageToBuffer2KHR = glad_debug_impl_vkCmdCopyImageToBuffer2KHR;
	glad_debug_vkCmdCopyMemoryIndirectNV = glad_debug_impl_vkCmdCopyMemoryIndirectNV;
	glad_debug_vkCmdCopyMemoryToAccelerationStructureKHR = glad_debug_impl_vkCmdCopyMemoryToAccelerationStructureKHR;
	glad_debug_vkCmdCopyMemoryToImageIndirectNV = glad_debug_impl_vkCmdCopyMemoryToImageIndirectNV;
	glad_debug_vkCmdCopyMemoryToMicromapEXT = glad_debug_impl_vkCmdCopyMemoryToMicromapEXT;
	glad_debug_vkCmdCopyMicromapEXT = glad_debug_impl_vkCmdCopyMicromapEXT;
	glad_debug_vkCmdCopyMicromapToMemoryEXT = glad_debug_impl_vkCmdCopyMicromapToMemoryEXT;
	glad_debug_vkCmdCopyQueryPoolResults = glad_debug_impl_vkCmdCopyQueryPoolResults;
	glad_debug_vkCmdCuLaunchKernelNVX = glad_debug_impl_vkCmdCuLaunchKernelNVX;
	glad_debug_vkCmdDebugMarkerBeginEXT = glad_debug_impl_vkCmdDebugMarkerBeginEXT;
	glad_debug_vkCmdDebugMarkerEndEXT = glad_debug_impl_vkCmdDebugMarkerEndEXT;
	glad_debug_vkCmdDebugMarkerInsertEXT = glad_debug_impl_vkCmdDebugMarkerInsertEXT;
	glad_debug_vkCmdDecodeVideoKHR = glad_debug_impl_vkCmdDecodeVideoKHR;
	glad_debug_vkCmdDecompressMemoryIndirectCountNV = glad_debug_impl_vkCmdDecompressMemoryIndirectCountNV;
	glad_debug_vkCmdDecompressMemoryNV = glad_debug_impl_vkCmdDecompressMemoryNV;
	glad_debug_vkCmdDispatch = glad_debug_impl_vkCmdDispatch;
	glad_debug_vkCmdDispatchBase = glad_debug_impl_vkCmdDispatchBase;
	glad_debug_vkCmdDispatchBaseKHR = glad_debug_impl_vkCmdDispatchBaseKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdDispatchGraphAMDX = glad_debug_impl_vkCmdDispatchGraphAMDX;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdDispatchGraphIndirectAMDX = glad_debug_impl_vkCmdDispatchGraphIndirectAMDX;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdDispatchGraphIndirectCountAMDX = glad_debug_impl_vkCmdDispatchGraphIndirectCountAMDX;

#endif
	glad_debug_vkCmdDispatchIndirect = glad_debug_impl_vkCmdDispatchIndirect;
	glad_debug_vkCmdDraw = glad_debug_impl_vkCmdDraw;
	glad_debug_vkCmdDrawClusterHUAWEI = glad_debug_impl_vkCmdDrawClusterHUAWEI;
	glad_debug_vkCmdDrawClusterIndirectHUAWEI = glad_debug_impl_vkCmdDrawClusterIndirectHUAWEI;
	glad_debug_vkCmdDrawIndexed = glad_debug_impl_vkCmdDrawIndexed;
	glad_debug_vkCmdDrawIndexedIndirect = glad_debug_impl_vkCmdDrawIndexedIndirect;
	glad_debug_vkCmdDrawIndexedIndirectCount = glad_debug_impl_vkCmdDrawIndexedIndirectCount;
	glad_debug_vkCmdDrawIndexedIndirectCountAMD = glad_debug_impl_vkCmdDrawIndexedIndirectCountAMD;
	glad_debug_vkCmdDrawIndexedIndirectCountKHR = glad_debug_impl_vkCmdDrawIndexedIndirectCountKHR;
	glad_debug_vkCmdDrawIndirect = glad_debug_impl_vkCmdDrawIndirect;
	glad_debug_vkCmdDrawIndirectByteCountEXT = glad_debug_impl_vkCmdDrawIndirectByteCountEXT;
	glad_debug_vkCmdDrawIndirectCount = glad_debug_impl_vkCmdDrawIndirectCount;
	glad_debug_vkCmdDrawIndirectCountAMD = glad_debug_impl_vkCmdDrawIndirectCountAMD;
	glad_debug_vkCmdDrawIndirectCountKHR = glad_debug_impl_vkCmdDrawIndirectCountKHR;
	glad_debug_vkCmdDrawMeshTasksEXT = glad_debug_impl_vkCmdDrawMeshTasksEXT;
	glad_debug_vkCmdDrawMeshTasksIndirectCountEXT = glad_debug_impl_vkCmdDrawMeshTasksIndirectCountEXT;
	glad_debug_vkCmdDrawMeshTasksIndirectCountNV = glad_debug_impl_vkCmdDrawMeshTasksIndirectCountNV;
	glad_debug_vkCmdDrawMeshTasksIndirectEXT = glad_debug_impl_vkCmdDrawMeshTasksIndirectEXT;
	glad_debug_vkCmdDrawMeshTasksIndirectNV = glad_debug_impl_vkCmdDrawMeshTasksIndirectNV;
	glad_debug_vkCmdDrawMeshTasksNV = glad_debug_impl_vkCmdDrawMeshTasksNV;
	glad_debug_vkCmdDrawMultiEXT = glad_debug_impl_vkCmdDrawMultiEXT;
	glad_debug_vkCmdDrawMultiIndexedEXT = glad_debug_impl_vkCmdDrawMultiIndexedEXT;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdEncodeVideoKHR = glad_debug_impl_vkCmdEncodeVideoKHR;

#endif
	glad_debug_vkCmdEndConditionalRenderingEXT = glad_debug_impl_vkCmdEndConditionalRenderingEXT;
	glad_debug_vkCmdEndDebugUtilsLabelEXT = glad_debug_impl_vkCmdEndDebugUtilsLabelEXT;
	glad_debug_vkCmdEndQuery = glad_debug_impl_vkCmdEndQuery;
	glad_debug_vkCmdEndQueryIndexedEXT = glad_debug_impl_vkCmdEndQueryIndexedEXT;
	glad_debug_vkCmdEndRenderPass = glad_debug_impl_vkCmdEndRenderPass;
	glad_debug_vkCmdEndRenderPass2 = glad_debug_impl_vkCmdEndRenderPass2;
	glad_debug_vkCmdEndRenderPass2KHR = glad_debug_impl_vkCmdEndRenderPass2KHR;
	glad_debug_vkCmdEndRendering = glad_debug_impl_vkCmdEndRendering;
	glad_debug_vkCmdEndRenderingKHR = glad_debug_impl_vkCmdEndRenderingKHR;
	glad_debug_vkCmdEndTransformFeedbackEXT = glad_debug_impl_vkCmdEndTransformFeedbackEXT;
	glad_debug_vkCmdEndVideoCodingKHR = glad_debug_impl_vkCmdEndVideoCodingKHR;
	glad_debug_vkCmdExecuteCommands = glad_debug_impl_vkCmdExecuteCommands;
	glad_debug_vkCmdExecuteGeneratedCommandsNV = glad_debug_impl_vkCmdExecuteGeneratedCommandsNV;
	glad_debug_vkCmdFillBuffer = glad_debug_impl_vkCmdFillBuffer;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdInitializeGraphScratchMemoryAMDX = glad_debug_impl_vkCmdInitializeGraphScratchMemoryAMDX;

#endif
	glad_debug_vkCmdInsertDebugUtilsLabelEXT = glad_debug_impl_vkCmdInsertDebugUtilsLabelEXT;
	glad_debug_vkCmdNextSubpass = glad_debug_impl_vkCmdNextSubpass;
	glad_debug_vkCmdNextSubpass2 = glad_debug_impl_vkCmdNextSubpass2;
	glad_debug_vkCmdNextSubpass2KHR = glad_debug_impl_vkCmdNextSubpass2KHR;
	glad_debug_vkCmdOpticalFlowExecuteNV = glad_debug_impl_vkCmdOpticalFlowExecuteNV;
	glad_debug_vkCmdPipelineBarrier = glad_debug_impl_vkCmdPipelineBarrier;
	glad_debug_vkCmdPipelineBarrier2 = glad_debug_impl_vkCmdPipelineBarrier2;
	glad_debug_vkCmdPipelineBarrier2KHR = glad_debug_impl_vkCmdPipelineBarrier2KHR;
	glad_debug_vkCmdPreprocessGeneratedCommandsNV = glad_debug_impl_vkCmdPreprocessGeneratedCommandsNV;
	glad_debug_vkCmdPushConstants = glad_debug_impl_vkCmdPushConstants;
	glad_debug_vkCmdPushDescriptorSetKHR = glad_debug_impl_vkCmdPushDescriptorSetKHR;
	glad_debug_vkCmdPushDescriptorSetWithTemplateKHR = glad_debug_impl_vkCmdPushDescriptorSetWithTemplateKHR;
	glad_debug_vkCmdResetEvent = glad_debug_impl_vkCmdResetEvent;
	glad_debug_vkCmdResetEvent2 = glad_debug_impl_vkCmdResetEvent2;
	glad_debug_vkCmdResetEvent2KHR = glad_debug_impl_vkCmdResetEvent2KHR;
	glad_debug_vkCmdResetQueryPool = glad_debug_impl_vkCmdResetQueryPool;
	glad_debug_vkCmdResolveImage = glad_debug_impl_vkCmdResolveImage;
	glad_debug_vkCmdResolveImage2 = glad_debug_impl_vkCmdResolveImage2;
	glad_debug_vkCmdResolveImage2KHR = glad_debug_impl_vkCmdResolveImage2KHR;
	glad_debug_vkCmdSetAlphaToCoverageEnableEXT = glad_debug_impl_vkCmdSetAlphaToCoverageEnableEXT;
	glad_debug_vkCmdSetAlphaToOneEnableEXT = glad_debug_impl_vkCmdSetAlphaToOneEnableEXT;
	glad_debug_vkCmdSetAttachmentFeedbackLoopEnableEXT = glad_debug_impl_vkCmdSetAttachmentFeedbackLoopEnableEXT;
	glad_debug_vkCmdSetBlendConstants = glad_debug_impl_vkCmdSetBlendConstants;
	glad_debug_vkCmdSetCheckpointNV = glad_debug_impl_vkCmdSetCheckpointNV;
	glad_debug_vkCmdSetCoarseSampleOrderNV = glad_debug_impl_vkCmdSetCoarseSampleOrderNV;
	glad_debug_vkCmdSetColorBlendAdvancedEXT = glad_debug_impl_vkCmdSetColorBlendAdvancedEXT;
	glad_debug_vkCmdSetColorBlendEnableEXT = glad_debug_impl_vkCmdSetColorBlendEnableEXT;
	glad_debug_vkCmdSetColorBlendEquationEXT = glad_debug_impl_vkCmdSetColorBlendEquationEXT;
	glad_debug_vkCmdSetColorWriteEnableEXT = glad_debug_impl_vkCmdSetColorWriteEnableEXT;
	glad_debug_vkCmdSetColorWriteMaskEXT = glad_debug_impl_vkCmdSetColorWriteMaskEXT;
	glad_debug_vkCmdSetConservativeRasterizationModeEXT = glad_debug_impl_vkCmdSetConservativeRasterizationModeEXT;
	glad_debug_vkCmdSetCoverageModulationModeNV = glad_debug_impl_vkCmdSetCoverageModulationModeNV;
	glad_debug_vkCmdSetCoverageModulationTableEnableNV = glad_debug_impl_vkCmdSetCoverageModulationTableEnableNV;
	glad_debug_vkCmdSetCoverageModulationTableNV = glad_debug_impl_vkCmdSetCoverageModulationTableNV;
	glad_debug_vkCmdSetCoverageReductionModeNV = glad_debug_impl_vkCmdSetCoverageReductionModeNV;
	glad_debug_vkCmdSetCoverageToColorEnableNV = glad_debug_impl_vkCmdSetCoverageToColorEnableNV;
	glad_debug_vkCmdSetCoverageToColorLocationNV = glad_debug_impl_vkCmdSetCoverageToColorLocationNV;
	glad_debug_vkCmdSetCullMode = glad_debug_impl_vkCmdSetCullMode;
	glad_debug_vkCmdSetCullModeEXT = glad_debug_impl_vkCmdSetCullModeEXT;
	glad_debug_vkCmdSetDepthBias = glad_debug_impl_vkCmdSetDepthBias;
	glad_debug_vkCmdSetDepthBias2EXT = glad_debug_impl_vkCmdSetDepthBias2EXT;
	glad_debug_vkCmdSetDepthBiasEnable = glad_debug_impl_vkCmdSetDepthBiasEnable;
	glad_debug_vkCmdSetDepthBiasEnableEXT = glad_debug_impl_vkCmdSetDepthBiasEnableEXT;
	glad_debug_vkCmdSetDepthBounds = glad_debug_impl_vkCmdSetDepthBounds;
	glad_debug_vkCmdSetDepthBoundsTestEnable = glad_debug_impl_vkCmdSetDepthBoundsTestEnable;
	glad_debug_vkCmdSetDepthBoundsTestEnableEXT = glad_debug_impl_vkCmdSetDepthBoundsTestEnableEXT;
	glad_debug_vkCmdSetDepthClampEnableEXT = glad_debug_impl_vkCmdSetDepthClampEnableEXT;
	glad_debug_vkCmdSetDepthClipEnableEXT = glad_debug_impl_vkCmdSetDepthClipEnableEXT;
	glad_debug_vkCmdSetDepthClipNegativeOneToOneEXT = glad_debug_impl_vkCmdSetDepthClipNegativeOneToOneEXT;
	glad_debug_vkCmdSetDepthCompareOp = glad_debug_impl_vkCmdSetDepthCompareOp;
	glad_debug_vkCmdSetDepthCompareOpEXT = glad_debug_impl_vkCmdSetDepthCompareOpEXT;
	glad_debug_vkCmdSetDepthTestEnable = glad_debug_impl_vkCmdSetDepthTestEnable;
	glad_debug_vkCmdSetDepthTestEnableEXT = glad_debug_impl_vkCmdSetDepthTestEnableEXT;
	glad_debug_vkCmdSetDepthWriteEnable = glad_debug_impl_vkCmdSetDepthWriteEnable;
	glad_debug_vkCmdSetDepthWriteEnableEXT = glad_debug_impl_vkCmdSetDepthWriteEnableEXT;
	glad_debug_vkCmdSetDescriptorBufferOffsetsEXT = glad_debug_impl_vkCmdSetDescriptorBufferOffsetsEXT;
	glad_debug_vkCmdSetDeviceMask = glad_debug_impl_vkCmdSetDeviceMask;
	glad_debug_vkCmdSetDeviceMaskKHR = glad_debug_impl_vkCmdSetDeviceMaskKHR;
	glad_debug_vkCmdSetDiscardRectangleEXT = glad_debug_impl_vkCmdSetDiscardRectangleEXT;
	glad_debug_vkCmdSetDiscardRectangleEnableEXT = glad_debug_impl_vkCmdSetDiscardRectangleEnableEXT;
	glad_debug_vkCmdSetDiscardRectangleModeEXT = glad_debug_impl_vkCmdSetDiscardRectangleModeEXT;
	glad_debug_vkCmdSetEvent = glad_debug_impl_vkCmdSetEvent;
	glad_debug_vkCmdSetEvent2 = glad_debug_impl_vkCmdSetEvent2;
	glad_debug_vkCmdSetEvent2KHR = glad_debug_impl_vkCmdSetEvent2KHR;
	glad_debug_vkCmdSetExclusiveScissorEnableNV = glad_debug_impl_vkCmdSetExclusiveScissorEnableNV;
	glad_debug_vkCmdSetExclusiveScissorNV = glad_debug_impl_vkCmdSetExclusiveScissorNV;
	glad_debug_vkCmdSetExtraPrimitiveOverestimationSizeEXT = glad_debug_impl_vkCmdSetExtraPrimitiveOverestimationSizeEXT;
	glad_debug_vkCmdSetFragmentShadingRateEnumNV = glad_debug_impl_vkCmdSetFragmentShadingRateEnumNV;
	glad_debug_vkCmdSetFragmentShadingRateKHR = glad_debug_impl_vkCmdSetFragmentShadingRateKHR;
	glad_debug_vkCmdSetFrontFace = glad_debug_impl_vkCmdSetFrontFace;
	glad_debug_vkCmdSetFrontFaceEXT = glad_debug_impl_vkCmdSetFrontFaceEXT;
	glad_debug_vkCmdSetLineRasterizationModeEXT = glad_debug_impl_vkCmdSetLineRasterizationModeEXT;
	glad_debug_vkCmdSetLineStippleEXT = glad_debug_impl_vkCmdSetLineStippleEXT;
	glad_debug_vkCmdSetLineStippleEnableEXT = glad_debug_impl_vkCmdSetLineStippleEnableEXT;
	glad_debug_vkCmdSetLineWidth = glad_debug_impl_vkCmdSetLineWidth;
	glad_debug_vkCmdSetLogicOpEXT = glad_debug_impl_vkCmdSetLogicOpEXT;
	glad_debug_vkCmdSetLogicOpEnableEXT = glad_debug_impl_vkCmdSetLogicOpEnableEXT;
	glad_debug_vkCmdSetPatchControlPointsEXT = glad_debug_impl_vkCmdSetPatchControlPointsEXT;
	glad_debug_vkCmdSetPerformanceMarkerINTEL = glad_debug_impl_vkCmdSetPerformanceMarkerINTEL;
	glad_debug_vkCmdSetPerformanceOverrideINTEL = glad_debug_impl_vkCmdSetPerformanceOverrideINTEL;
	glad_debug_vkCmdSetPerformanceStreamMarkerINTEL = glad_debug_impl_vkCmdSetPerformanceStreamMarkerINTEL;
	glad_debug_vkCmdSetPolygonModeEXT = glad_debug_impl_vkCmdSetPolygonModeEXT;
	glad_debug_vkCmdSetPrimitiveRestartEnable = glad_debug_impl_vkCmdSetPrimitiveRestartEnable;
	glad_debug_vkCmdSetPrimitiveRestartEnableEXT = glad_debug_impl_vkCmdSetPrimitiveRestartEnableEXT;
	glad_debug_vkCmdSetPrimitiveTopology = glad_debug_impl_vkCmdSetPrimitiveTopology;
	glad_debug_vkCmdSetPrimitiveTopologyEXT = glad_debug_impl_vkCmdSetPrimitiveTopologyEXT;
	glad_debug_vkCmdSetProvokingVertexModeEXT = glad_debug_impl_vkCmdSetProvokingVertexModeEXT;
	glad_debug_vkCmdSetRasterizationSamplesEXT = glad_debug_impl_vkCmdSetRasterizationSamplesEXT;
	glad_debug_vkCmdSetRasterizationStreamEXT = glad_debug_impl_vkCmdSetRasterizationStreamEXT;
	glad_debug_vkCmdSetRasterizerDiscardEnable = glad_debug_impl_vkCmdSetRasterizerDiscardEnable;
	glad_debug_vkCmdSetRasterizerDiscardEnableEXT = glad_debug_impl_vkCmdSetRasterizerDiscardEnableEXT;
	glad_debug_vkCmdSetRayTracingPipelineStackSizeKHR = glad_debug_impl_vkCmdSetRayTracingPipelineStackSizeKHR;
	glad_debug_vkCmdSetRepresentativeFragmentTestEnableNV = glad_debug_impl_vkCmdSetRepresentativeFragmentTestEnableNV;
	glad_debug_vkCmdSetSampleLocationsEXT = glad_debug_impl_vkCmdSetSampleLocationsEXT;
	glad_debug_vkCmdSetSampleLocationsEnableEXT = glad_debug_impl_vkCmdSetSampleLocationsEnableEXT;
	glad_debug_vkCmdSetSampleMaskEXT = glad_debug_impl_vkCmdSetSampleMaskEXT;
	glad_debug_vkCmdSetScissor = glad_debug_impl_vkCmdSetScissor;
	glad_debug_vkCmdSetScissorWithCount = glad_debug_impl_vkCmdSetScissorWithCount;
	glad_debug_vkCmdSetScissorWithCountEXT = glad_debug_impl_vkCmdSetScissorWithCountEXT;
	glad_debug_vkCmdSetShadingRateImageEnableNV = glad_debug_impl_vkCmdSetShadingRateImageEnableNV;
	glad_debug_vkCmdSetStencilCompareMask = glad_debug_impl_vkCmdSetStencilCompareMask;
	glad_debug_vkCmdSetStencilOp = glad_debug_impl_vkCmdSetStencilOp;
	glad_debug_vkCmdSetStencilOpEXT = glad_debug_impl_vkCmdSetStencilOpEXT;
	glad_debug_vkCmdSetStencilReference = glad_debug_impl_vkCmdSetStencilReference;
	glad_debug_vkCmdSetStencilTestEnable = glad_debug_impl_vkCmdSetStencilTestEnable;
	glad_debug_vkCmdSetStencilTestEnableEXT = glad_debug_impl_vkCmdSetStencilTestEnableEXT;
	glad_debug_vkCmdSetStencilWriteMask = glad_debug_impl_vkCmdSetStencilWriteMask;
	glad_debug_vkCmdSetTessellationDomainOriginEXT = glad_debug_impl_vkCmdSetTessellationDomainOriginEXT;
	glad_debug_vkCmdSetVertexInputEXT = glad_debug_impl_vkCmdSetVertexInputEXT;
	glad_debug_vkCmdSetViewport = glad_debug_impl_vkCmdSetViewport;
	glad_debug_vkCmdSetViewportShadingRatePaletteNV = glad_debug_impl_vkCmdSetViewportShadingRatePaletteNV;
	glad_debug_vkCmdSetViewportSwizzleNV = glad_debug_impl_vkCmdSetViewportSwizzleNV;
	glad_debug_vkCmdSetViewportWScalingEnableNV = glad_debug_impl_vkCmdSetViewportWScalingEnableNV;
	glad_debug_vkCmdSetViewportWScalingNV = glad_debug_impl_vkCmdSetViewportWScalingNV;
	glad_debug_vkCmdSetViewportWithCount = glad_debug_impl_vkCmdSetViewportWithCount;
	glad_debug_vkCmdSetViewportWithCountEXT = glad_debug_impl_vkCmdSetViewportWithCountEXT;
	glad_debug_vkCmdSubpassShadingHUAWEI = glad_debug_impl_vkCmdSubpassShadingHUAWEI;
	glad_debug_vkCmdTraceRaysIndirect2KHR = glad_debug_impl_vkCmdTraceRaysIndirect2KHR;
	glad_debug_vkCmdTraceRaysIndirectKHR = glad_debug_impl_vkCmdTraceRaysIndirectKHR;
	glad_debug_vkCmdTraceRaysKHR = glad_debug_impl_vkCmdTraceRaysKHR;
	glad_debug_vkCmdTraceRaysNV = glad_debug_impl_vkCmdTraceRaysNV;
	glad_debug_vkCmdUpdateBuffer = glad_debug_impl_vkCmdUpdateBuffer;
	glad_debug_vkCmdUpdatePipelineIndirectBufferNV = glad_debug_impl_vkCmdUpdatePipelineIndirectBufferNV;
	glad_debug_vkCmdWaitEvents = glad_debug_impl_vkCmdWaitEvents;
	glad_debug_vkCmdWaitEvents2 = glad_debug_impl_vkCmdWaitEvents2;
	glad_debug_vkCmdWaitEvents2KHR = glad_debug_impl_vkCmdWaitEvents2KHR;
	glad_debug_vkCmdWriteAccelerationStructuresPropertiesKHR = glad_debug_impl_vkCmdWriteAccelerationStructuresPropertiesKHR;
	glad_debug_vkCmdWriteAccelerationStructuresPropertiesNV = glad_debug_impl_vkCmdWriteAccelerationStructuresPropertiesNV;
	glad_debug_vkCmdWriteBufferMarker2AMD = glad_debug_impl_vkCmdWriteBufferMarker2AMD;
	glad_debug_vkCmdWriteBufferMarkerAMD = glad_debug_impl_vkCmdWriteBufferMarkerAMD;
	glad_debug_vkCmdWriteMicromapsPropertiesEXT = glad_debug_impl_vkCmdWriteMicromapsPropertiesEXT;
	glad_debug_vkCmdWriteTimestamp = glad_debug_impl_vkCmdWriteTimestamp;
	glad_debug_vkCmdWriteTimestamp2 = glad_debug_impl_vkCmdWriteTimestamp2;
	glad_debug_vkCmdWriteTimestamp2KHR = glad_debug_impl_vkCmdWriteTimestamp2KHR;
	glad_debug_vkCompileDeferredNV = glad_debug_impl_vkCompileDeferredNV;
	glad_debug_vkCopyAccelerationStructureKHR = glad_debug_impl_vkCopyAccelerationStructureKHR;
	glad_debug_vkCopyAccelerationStructureToMemoryKHR = glad_debug_impl_vkCopyAccelerationStructureToMemoryKHR;
	glad_debug_vkCopyImageToImageEXT = glad_debug_impl_vkCopyImageToImageEXT;
	glad_debug_vkCopyImageToMemoryEXT = glad_debug_impl_vkCopyImageToMemoryEXT;
	glad_debug_vkCopyMemoryToAccelerationStructureKHR = glad_debug_impl_vkCopyMemoryToAccelerationStructureKHR;
	glad_debug_vkCopyMemoryToImageEXT = glad_debug_impl_vkCopyMemoryToImageEXT;
	glad_debug_vkCopyMemoryToMicromapEXT = glad_debug_impl_vkCopyMemoryToMicromapEXT;
	glad_debug_vkCopyMicromapEXT = glad_debug_impl_vkCopyMicromapEXT;
	glad_debug_vkCopyMicromapToMemoryEXT = glad_debug_impl_vkCopyMicromapToMemoryEXT;
	glad_debug_vkCreateAccelerationStructureKHR = glad_debug_impl_vkCreateAccelerationStructureKHR;
	glad_debug_vkCreateAccelerationStructureNV = glad_debug_impl_vkCreateAccelerationStructureNV;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	glad_debug_vkCreateAndroidSurfaceKHR = glad_debug_impl_vkCreateAndroidSurfaceKHR;

#endif
	glad_debug_vkCreateBuffer = glad_debug_impl_vkCreateBuffer;
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkCreateBufferCollectionFUCHSIA = glad_debug_impl_vkCreateBufferCollectionFUCHSIA;

#endif
	glad_debug_vkCreateBufferView = glad_debug_impl_vkCreateBufferView;
	glad_debug_vkCreateCommandPool = glad_debug_impl_vkCreateCommandPool;
	glad_debug_vkCreateComputePipelines = glad_debug_impl_vkCreateComputePipelines;
	glad_debug_vkCreateCuFunctionNVX = glad_debug_impl_vkCreateCuFunctionNVX;
	glad_debug_vkCreateCuModuleNVX = glad_debug_impl_vkCreateCuModuleNVX;
	glad_debug_vkCreateDebugReportCallbackEXT = glad_debug_impl_vkCreateDebugReportCallbackEXT;
	glad_debug_vkCreateDebugUtilsMessengerEXT = glad_debug_impl_vkCreateDebugUtilsMessengerEXT;
	glad_debug_vkCreateDeferredOperationKHR = glad_debug_impl_vkCreateDeferredOperationKHR;
	glad_debug_vkCreateDescriptorPool = glad_debug_impl_vkCreateDescriptorPool;
	glad_debug_vkCreateDescriptorSetLayout = glad_debug_impl_vkCreateDescriptorSetLayout;
	glad_debug_vkCreateDescriptorUpdateTemplate = glad_debug_impl_vkCreateDescriptorUpdateTemplate;
	glad_debug_vkCreateDescriptorUpdateTemplateKHR = glad_debug_impl_vkCreateDescriptorUpdateTemplateKHR;
	glad_debug_vkCreateDevice = glad_debug_impl_vkCreateDevice;
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	glad_debug_vkCreateDirectFBSurfaceEXT = glad_debug_impl_vkCreateDirectFBSurfaceEXT;

#endif
	glad_debug_vkCreateDisplayModeKHR = glad_debug_impl_vkCreateDisplayModeKHR;
	glad_debug_vkCreateDisplayPlaneSurfaceKHR = glad_debug_impl_vkCreateDisplayPlaneSurfaceKHR;
	glad_debug_vkCreateEvent = glad_debug_impl_vkCreateEvent;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCreateExecutionGraphPipelinesAMDX = glad_debug_impl_vkCreateExecutionGraphPipelinesAMDX;

#endif
	glad_debug_vkCreateFence = glad_debug_impl_vkCreateFence;
	glad_debug_vkCreateFramebuffer = glad_debug_impl_vkCreateFramebuffer;
	glad_debug_vkCreateGraphicsPipelines = glad_debug_impl_vkCreateGraphicsPipelines;
	glad_debug_vkCreateHeadlessSurfaceEXT = glad_debug_impl_vkCreateHeadlessSurfaceEXT;
#if defined(VK_USE_PLATFORM_IOS_MVK)
	glad_debug_vkCreateIOSSurfaceMVK = glad_debug_impl_vkCreateIOSSurfaceMVK;

#endif
	glad_debug_vkCreateImage = glad_debug_impl_vkCreateImage;
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkCreateImagePipeSurfaceFUCHSIA = glad_debug_impl_vkCreateImagePipeSurfaceFUCHSIA;

#endif
	glad_debug_vkCreateImageView = glad_debug_impl_vkCreateImageView;
	glad_debug_vkCreateIndirectCommandsLayoutNV = glad_debug_impl_vkCreateIndirectCommandsLayoutNV;
	glad_debug_vkCreateInstance = glad_debug_impl_vkCreateInstance;
#if defined(VK_USE_PLATFORM_MACOS_MVK)
	glad_debug_vkCreateMacOSSurfaceMVK = glad_debug_impl_vkCreateMacOSSurfaceMVK;

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
	glad_debug_vkCreateMetalSurfaceEXT = glad_debug_impl_vkCreateMetalSurfaceEXT;

#endif
	glad_debug_vkCreateMicromapEXT = glad_debug_impl_vkCreateMicromapEXT;
	glad_debug_vkCreateOpticalFlowSessionNV = glad_debug_impl_vkCreateOpticalFlowSessionNV;
	glad_debug_vkCreatePipelineCache = glad_debug_impl_vkCreatePipelineCache;
	glad_debug_vkCreatePipelineLayout = glad_debug_impl_vkCreatePipelineLayout;
	glad_debug_vkCreatePrivateDataSlot = glad_debug_impl_vkCreatePrivateDataSlot;
	glad_debug_vkCreatePrivateDataSlotEXT = glad_debug_impl_vkCreatePrivateDataSlotEXT;
	glad_debug_vkCreateQueryPool = glad_debug_impl_vkCreateQueryPool;
	glad_debug_vkCreateRayTracingPipelinesKHR = glad_debug_impl_vkCreateRayTracingPipelinesKHR;
	glad_debug_vkCreateRayTracingPipelinesNV = glad_debug_impl_vkCreateRayTracingPipelinesNV;
	glad_debug_vkCreateRenderPass = glad_debug_impl_vkCreateRenderPass;
	glad_debug_vkCreateRenderPass2 = glad_debug_impl_vkCreateRenderPass2;
	glad_debug_vkCreateRenderPass2KHR = glad_debug_impl_vkCreateRenderPass2KHR;
	glad_debug_vkCreateSampler = glad_debug_impl_vkCreateSampler;
	glad_debug_vkCreateSamplerYcbcrConversion = glad_debug_impl_vkCreateSamplerYcbcrConversion;
	glad_debug_vkCreateSamplerYcbcrConversionKHR = glad_debug_impl_vkCreateSamplerYcbcrConversionKHR;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	glad_debug_vkCreateScreenSurfaceQNX = glad_debug_impl_vkCreateScreenSurfaceQNX;

#endif
	glad_debug_vkCreateSemaphore = glad_debug_impl_vkCreateSemaphore;
	glad_debug_vkCreateShaderModule = glad_debug_impl_vkCreateShaderModule;
	glad_debug_vkCreateShadersEXT = glad_debug_impl_vkCreateShadersEXT;
	glad_debug_vkCreateSharedSwapchainsKHR = glad_debug_impl_vkCreateSharedSwapchainsKHR;
#if defined(VK_USE_PLATFORM_GGP)
	glad_debug_vkCreateStreamDescriptorSurfaceGGP = glad_debug_impl_vkCreateStreamDescriptorSurfaceGGP;

#endif
	glad_debug_vkCreateSwapchainKHR = glad_debug_impl_vkCreateSwapchainKHR;
	glad_debug_vkCreateValidationCacheEXT = glad_debug_impl_vkCreateValidationCacheEXT;
#if defined(VK_USE_PLATFORM_VI_NN)
	glad_debug_vkCreateViSurfaceNN = glad_debug_impl_vkCreateViSurfaceNN;

#endif
	glad_debug_vkCreateVideoSessionKHR = glad_debug_impl_vkCreateVideoSessionKHR;
	glad_debug_vkCreateVideoSessionParametersKHR = glad_debug_impl_vkCreateVideoSessionParametersKHR;
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	glad_debug_vkCreateWaylandSurfaceKHR = glad_debug_impl_vkCreateWaylandSurfaceKHR;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkCreateWin32SurfaceKHR = glad_debug_impl_vkCreateWin32SurfaceKHR;

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
	glad_debug_vkCreateXcbSurfaceKHR = glad_debug_impl_vkCreateXcbSurfaceKHR;

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
	glad_debug_vkCreateXlibSurfaceKHR = glad_debug_impl_vkCreateXlibSurfaceKHR;

#endif
	glad_debug_vkDebugMarkerSetObjectNameEXT = glad_debug_impl_vkDebugMarkerSetObjectNameEXT;
	glad_debug_vkDebugMarkerSetObjectTagEXT = glad_debug_impl_vkDebugMarkerSetObjectTagEXT;
	glad_debug_vkDebugReportMessageEXT = glad_debug_impl_vkDebugReportMessageEXT;
	glad_debug_vkDeferredOperationJoinKHR = glad_debug_impl_vkDeferredOperationJoinKHR;
	glad_debug_vkDestroyAccelerationStructureKHR = glad_debug_impl_vkDestroyAccelerationStructureKHR;
	glad_debug_vkDestroyAccelerationStructureNV = glad_debug_impl_vkDestroyAccelerationStructureNV;
	glad_debug_vkDestroyBuffer = glad_debug_impl_vkDestroyBuffer;
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkDestroyBufferCollectionFUCHSIA = glad_debug_impl_vkDestroyBufferCollectionFUCHSIA;

#endif
	glad_debug_vkDestroyBufferView = glad_debug_impl_vkDestroyBufferView;
	glad_debug_vkDestroyCommandPool = glad_debug_impl_vkDestroyCommandPool;
	glad_debug_vkDestroyCuFunctionNVX = glad_debug_impl_vkDestroyCuFunctionNVX;
	glad_debug_vkDestroyCuModuleNVX = glad_debug_impl_vkDestroyCuModuleNVX;
	glad_debug_vkDestroyDebugReportCallbackEXT = glad_debug_impl_vkDestroyDebugReportCallbackEXT;
	glad_debug_vkDestroyDebugUtilsMessengerEXT = glad_debug_impl_vkDestroyDebugUtilsMessengerEXT;
	glad_debug_vkDestroyDeferredOperationKHR = glad_debug_impl_vkDestroyDeferredOperationKHR;
	glad_debug_vkDestroyDescriptorPool = glad_debug_impl_vkDestroyDescriptorPool;
	glad_debug_vkDestroyDescriptorSetLayout = glad_debug_impl_vkDestroyDescriptorSetLayout;
	glad_debug_vkDestroyDescriptorUpdateTemplate = glad_debug_impl_vkDestroyDescriptorUpdateTemplate;
	glad_debug_vkDestroyDescriptorUpdateTemplateKHR = glad_debug_impl_vkDestroyDescriptorUpdateTemplateKHR;
	glad_debug_vkDestroyDevice = glad_debug_impl_vkDestroyDevice;
	glad_debug_vkDestroyEvent = glad_debug_impl_vkDestroyEvent;
	glad_debug_vkDestroyFence = glad_debug_impl_vkDestroyFence;
	glad_debug_vkDestroyFramebuffer = glad_debug_impl_vkDestroyFramebuffer;
	glad_debug_vkDestroyImage = glad_debug_impl_vkDestroyImage;
	glad_debug_vkDestroyImageView = glad_debug_impl_vkDestroyImageView;
	glad_debug_vkDestroyIndirectCommandsLayoutNV = glad_debug_impl_vkDestroyIndirectCommandsLayoutNV;
	glad_debug_vkDestroyInstance = glad_debug_impl_vkDestroyInstance;
	glad_debug_vkDestroyMicromapEXT = glad_debug_impl_vkDestroyMicromapEXT;
	glad_debug_vkDestroyOpticalFlowSessionNV = glad_debug_impl_vkDestroyOpticalFlowSessionNV;
	glad_debug_vkDestroyPipeline = glad_debug_impl_vkDestroyPipeline;
	glad_debug_vkDestroyPipelineCache = glad_debug_impl_vkDestroyPipelineCache;
	glad_debug_vkDestroyPipelineLayout = glad_debug_impl_vkDestroyPipelineLayout;
	glad_debug_vkDestroyPrivateDataSlot = glad_debug_impl_vkDestroyPrivateDataSlot;
	glad_debug_vkDestroyPrivateDataSlotEXT = glad_debug_impl_vkDestroyPrivateDataSlotEXT;
	glad_debug_vkDestroyQueryPool = glad_debug_impl_vkDestroyQueryPool;
	glad_debug_vkDestroyRenderPass = glad_debug_impl_vkDestroyRenderPass;
	glad_debug_vkDestroySampler = glad_debug_impl_vkDestroySampler;
	glad_debug_vkDestroySamplerYcbcrConversion = glad_debug_impl_vkDestroySamplerYcbcrConversion;
	glad_debug_vkDestroySamplerYcbcrConversionKHR = glad_debug_impl_vkDestroySamplerYcbcrConversionKHR;
	glad_debug_vkDestroySemaphore = glad_debug_impl_vkDestroySemaphore;
	glad_debug_vkDestroyShaderEXT = glad_debug_impl_vkDestroyShaderEXT;
	glad_debug_vkDestroyShaderModule = glad_debug_impl_vkDestroyShaderModule;
	glad_debug_vkDestroySurfaceKHR = glad_debug_impl_vkDestroySurfaceKHR;
	glad_debug_vkDestroySwapchainKHR = glad_debug_impl_vkDestroySwapchainKHR;
	glad_debug_vkDestroyValidationCacheEXT = glad_debug_impl_vkDestroyValidationCacheEXT;
	glad_debug_vkDestroyVideoSessionKHR = glad_debug_impl_vkDestroyVideoSessionKHR;
	glad_debug_vkDestroyVideoSessionParametersKHR = glad_debug_impl_vkDestroyVideoSessionParametersKHR;
	glad_debug_vkDeviceWaitIdle = glad_debug_impl_vkDeviceWaitIdle;
	glad_debug_vkDisplayPowerControlEXT = glad_debug_impl_vkDisplayPowerControlEXT;
	glad_debug_vkEndCommandBuffer = glad_debug_impl_vkEndCommandBuffer;
	glad_debug_vkEnumerateDeviceExtensionProperties = glad_debug_impl_vkEnumerateDeviceExtensionProperties;
	glad_debug_vkEnumerateDeviceLayerProperties = glad_debug_impl_vkEnumerateDeviceLayerProperties;
	glad_debug_vkEnumerateInstanceExtensionProperties = glad_debug_impl_vkEnumerateInstanceExtensionProperties;
	glad_debug_vkEnumerateInstanceLayerProperties = glad_debug_impl_vkEnumerateInstanceLayerProperties;
	glad_debug_vkEnumerateInstanceVersion = glad_debug_impl_vkEnumerateInstanceVersion;
	glad_debug_vkEnumeratePhysicalDeviceGroups = glad_debug_impl_vkEnumeratePhysicalDeviceGroups;
	glad_debug_vkEnumeratePhysicalDeviceGroupsKHR = glad_debug_impl_vkEnumeratePhysicalDeviceGroupsKHR;
	glad_debug_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR =
		glad_debug_impl_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
	glad_debug_vkEnumeratePhysicalDevices = glad_debug_impl_vkEnumeratePhysicalDevices;
#if defined(VK_USE_PLATFORM_METAL_EXT)
	glad_debug_vkExportMetalObjectsEXT = glad_debug_impl_vkExportMetalObjectsEXT;

#endif
	glad_debug_vkFlushMappedMemoryRanges = glad_debug_impl_vkFlushMappedMemoryRanges;
	glad_debug_vkFreeCommandBuffers = glad_debug_impl_vkFreeCommandBuffers;
	glad_debug_vkFreeDescriptorSets = glad_debug_impl_vkFreeDescriptorSets;
	glad_debug_vkFreeMemory = glad_debug_impl_vkFreeMemory;
	glad_debug_vkGetAccelerationStructureBuildSizesKHR = glad_debug_impl_vkGetAccelerationStructureBuildSizesKHR;
	glad_debug_vkGetAccelerationStructureDeviceAddressKHR = glad_debug_impl_vkGetAccelerationStructureDeviceAddressKHR;
	glad_debug_vkGetAccelerationStructureHandleNV = glad_debug_impl_vkGetAccelerationStructureHandleNV;
	glad_debug_vkGetAccelerationStructureMemoryRequirementsNV = glad_debug_impl_vkGetAccelerationStructureMemoryRequirementsNV;
	glad_debug_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = glad_debug_impl_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	glad_debug_vkGetAndroidHardwareBufferPropertiesANDROID = glad_debug_impl_vkGetAndroidHardwareBufferPropertiesANDROID;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkGetBufferCollectionPropertiesFUCHSIA = glad_debug_impl_vkGetBufferCollectionPropertiesFUCHSIA;

#endif
	glad_debug_vkGetBufferDeviceAddress = glad_debug_impl_vkGetBufferDeviceAddress;
	glad_debug_vkGetBufferDeviceAddressEXT = glad_debug_impl_vkGetBufferDeviceAddressEXT;
	glad_debug_vkGetBufferDeviceAddressKHR = glad_debug_impl_vkGetBufferDeviceAddressKHR;
	glad_debug_vkGetBufferMemoryRequirements = glad_debug_impl_vkGetBufferMemoryRequirements;
	glad_debug_vkGetBufferMemoryRequirements2 = glad_debug_impl_vkGetBufferMemoryRequirements2;
	glad_debug_vkGetBufferMemoryRequirements2KHR = glad_debug_impl_vkGetBufferMemoryRequirements2KHR;
	glad_debug_vkGetBufferOpaqueCaptureAddress = glad_debug_impl_vkGetBufferOpaqueCaptureAddress;
	glad_debug_vkGetBufferOpaqueCaptureAddressKHR = glad_debug_impl_vkGetBufferOpaqueCaptureAddressKHR;
	glad_debug_vkGetBufferOpaqueCaptureDescriptorDataEXT = glad_debug_impl_vkGetBufferOpaqueCaptureDescriptorDataEXT;
	glad_debug_vkGetCalibratedTimestampsEXT = glad_debug_impl_vkGetCalibratedTimestampsEXT;
	glad_debug_vkGetDeferredOperationMaxConcurrencyKHR = glad_debug_impl_vkGetDeferredOperationMaxConcurrencyKHR;
	glad_debug_vkGetDeferredOperationResultKHR = glad_debug_impl_vkGetDeferredOperationResultKHR;
	glad_debug_vkGetDescriptorEXT = glad_debug_impl_vkGetDescriptorEXT;
	glad_debug_vkGetDescriptorSetHostMappingVALVE = glad_debug_impl_vkGetDescriptorSetHostMappingVALVE;
	glad_debug_vkGetDescriptorSetLayoutBindingOffsetEXT = glad_debug_impl_vkGetDescriptorSetLayoutBindingOffsetEXT;
	glad_debug_vkGetDescriptorSetLayoutHostMappingInfoVALVE = glad_debug_impl_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
	glad_debug_vkGetDescriptorSetLayoutSizeEXT = glad_debug_impl_vkGetDescriptorSetLayoutSizeEXT;
	glad_debug_vkGetDescriptorSetLayoutSupport = glad_debug_impl_vkGetDescriptorSetLayoutSupport;
	glad_debug_vkGetDescriptorSetLayoutSupportKHR = glad_debug_impl_vkGetDescriptorSetLayoutSupportKHR;
	glad_debug_vkGetDeviceAccelerationStructureCompatibilityKHR = glad_debug_impl_vkGetDeviceAccelerationStructureCompatibilityKHR;
	glad_debug_vkGetDeviceBufferMemoryRequirements = glad_debug_impl_vkGetDeviceBufferMemoryRequirements;
	glad_debug_vkGetDeviceBufferMemoryRequirementsKHR = glad_debug_impl_vkGetDeviceBufferMemoryRequirementsKHR;
	glad_debug_vkGetDeviceFaultInfoEXT = glad_debug_impl_vkGetDeviceFaultInfoEXT;
	glad_debug_vkGetDeviceGroupPeerMemoryFeatures = glad_debug_impl_vkGetDeviceGroupPeerMemoryFeatures;
	glad_debug_vkGetDeviceGroupPeerMemoryFeaturesKHR = glad_debug_impl_vkGetDeviceGroupPeerMemoryFeaturesKHR;
	glad_debug_vkGetDeviceGroupPresentCapabilitiesKHR = glad_debug_impl_vkGetDeviceGroupPresentCapabilitiesKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetDeviceGroupSurfacePresentModes2EXT = glad_debug_impl_vkGetDeviceGroupSurfacePresentModes2EXT;

#endif
	glad_debug_vkGetDeviceGroupSurfacePresentModesKHR = glad_debug_impl_vkGetDeviceGroupSurfacePresentModesKHR;
	glad_debug_vkGetDeviceImageMemoryRequirements = glad_debug_impl_vkGetDeviceImageMemoryRequirements;
	glad_debug_vkGetDeviceImageMemoryRequirementsKHR = glad_debug_impl_vkGetDeviceImageMemoryRequirementsKHR;
	glad_debug_vkGetDeviceImageSparseMemoryRequirements = glad_debug_impl_vkGetDeviceImageSparseMemoryRequirements;
	glad_debug_vkGetDeviceImageSparseMemoryRequirementsKHR = glad_debug_impl_vkGetDeviceImageSparseMemoryRequirementsKHR;
	glad_debug_vkGetDeviceImageSubresourceLayoutKHR = glad_debug_impl_vkGetDeviceImageSubresourceLayoutKHR;
	glad_debug_vkGetDeviceMemoryCommitment = glad_debug_impl_vkGetDeviceMemoryCommitment;
	glad_debug_vkGetDeviceMemoryOpaqueCaptureAddress = glad_debug_impl_vkGetDeviceMemoryOpaqueCaptureAddress;
	glad_debug_vkGetDeviceMemoryOpaqueCaptureAddressKHR = glad_debug_impl_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
	glad_debug_vkGetDeviceMicromapCompatibilityEXT = glad_debug_impl_vkGetDeviceMicromapCompatibilityEXT;
	glad_debug_vkGetDeviceProcAddr = glad_debug_impl_vkGetDeviceProcAddr;
	glad_debug_vkGetDeviceQueue = glad_debug_impl_vkGetDeviceQueue;
	glad_debug_vkGetDeviceQueue2 = glad_debug_impl_vkGetDeviceQueue2;
	glad_debug_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = glad_debug_impl_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
	glad_debug_vkGetDisplayModeProperties2KHR = glad_debug_impl_vkGetDisplayModeProperties2KHR;
	glad_debug_vkGetDisplayModePropertiesKHR = glad_debug_impl_vkGetDisplayModePropertiesKHR;
	glad_debug_vkGetDisplayPlaneCapabilities2KHR = glad_debug_impl_vkGetDisplayPlaneCapabilities2KHR;
	glad_debug_vkGetDisplayPlaneCapabilitiesKHR = glad_debug_impl_vkGetDisplayPlaneCapabilitiesKHR;
	glad_debug_vkGetDisplayPlaneSupportedDisplaysKHR = glad_debug_impl_vkGetDisplayPlaneSupportedDisplaysKHR;
	glad_debug_vkGetDrmDisplayEXT = glad_debug_impl_vkGetDrmDisplayEXT;
	glad_debug_vkGetDynamicRenderingTilePropertiesQCOM = glad_debug_impl_vkGetDynamicRenderingTilePropertiesQCOM;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkGetEncodedVideoSessionParametersKHR = glad_debug_impl_vkGetEncodedVideoSessionParametersKHR;

#endif
	glad_debug_vkGetEventStatus = glad_debug_impl_vkGetEventStatus;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkGetExecutionGraphPipelineNodeIndexAMDX = glad_debug_impl_vkGetExecutionGraphPipelineNodeIndexAMDX;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkGetExecutionGraphPipelineScratchSizeAMDX = glad_debug_impl_vkGetExecutionGraphPipelineScratchSizeAMDX;

#endif
	glad_debug_vkGetFenceFdKHR = glad_debug_impl_vkGetFenceFdKHR;
	glad_debug_vkGetFenceStatus = glad_debug_impl_vkGetFenceStatus;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetFenceWin32HandleKHR = glad_debug_impl_vkGetFenceWin32HandleKHR;

#endif
	glad_debug_vkGetFramebufferTilePropertiesQCOM = glad_debug_impl_vkGetFramebufferTilePropertiesQCOM;
	glad_debug_vkGetGeneratedCommandsMemoryRequirementsNV = glad_debug_impl_vkGetGeneratedCommandsMemoryRequirementsNV;
	glad_debug_vkGetImageDrmFormatModifierPropertiesEXT = glad_debug_impl_vkGetImageDrmFormatModifierPropertiesEXT;
	glad_debug_vkGetImageMemoryRequirements = glad_debug_impl_vkGetImageMemoryRequirements;
	glad_debug_vkGetImageMemoryRequirements2 = glad_debug_impl_vkGetImageMemoryRequirements2;
	glad_debug_vkGetImageMemoryRequirements2KHR = glad_debug_impl_vkGetImageMemoryRequirements2KHR;
	glad_debug_vkGetImageOpaqueCaptureDescriptorDataEXT = glad_debug_impl_vkGetImageOpaqueCaptureDescriptorDataEXT;
	glad_debug_vkGetImageSparseMemoryRequirements = glad_debug_impl_vkGetImageSparseMemoryRequirements;
	glad_debug_vkGetImageSparseMemoryRequirements2 = glad_debug_impl_vkGetImageSparseMemoryRequirements2;
	glad_debug_vkGetImageSparseMemoryRequirements2KHR = glad_debug_impl_vkGetImageSparseMemoryRequirements2KHR;
	glad_debug_vkGetImageSubresourceLayout = glad_debug_impl_vkGetImageSubresourceLayout;
	glad_debug_vkGetImageSubresourceLayout2EXT = glad_debug_impl_vkGetImageSubresourceLayout2EXT;
	glad_debug_vkGetImageSubresourceLayout2KHR = glad_debug_impl_vkGetImageSubresourceLayout2KHR;
	glad_debug_vkGetImageViewAddressNVX = glad_debug_impl_vkGetImageViewAddressNVX;
	glad_debug_vkGetImageViewHandleNVX = glad_debug_impl_vkGetImageViewHandleNVX;
	glad_debug_vkGetImageViewOpaqueCaptureDescriptorDataEXT = glad_debug_impl_vkGetImageViewOpaqueCaptureDescriptorDataEXT;
	glad_debug_vkGetInstanceProcAddr = glad_debug_impl_vkGetInstanceProcAddr;
	glad_debug_vkGetLatencyTimingsNV = glad_debug_impl_vkGetLatencyTimingsNV;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	glad_debug_vkGetMemoryAndroidHardwareBufferANDROID = glad_debug_impl_vkGetMemoryAndroidHardwareBufferANDROID;

#endif
	glad_debug_vkGetMemoryFdKHR = glad_debug_impl_vkGetMemoryFdKHR;
	glad_debug_vkGetMemoryFdPropertiesKHR = glad_debug_impl_vkGetMemoryFdPropertiesKHR;
	glad_debug_vkGetMemoryHostPointerPropertiesEXT = glad_debug_impl_vkGetMemoryHostPointerPropertiesEXT;
	glad_debug_vkGetMemoryRemoteAddressNV = glad_debug_impl_vkGetMemoryRemoteAddressNV;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetMemoryWin32HandleKHR = glad_debug_impl_vkGetMemoryWin32HandleKHR;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetMemoryWin32HandleNV = glad_debug_impl_vkGetMemoryWin32HandleNV;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetMemoryWin32HandlePropertiesKHR = glad_debug_impl_vkGetMemoryWin32HandlePropertiesKHR;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkGetMemoryZirconHandleFUCHSIA = glad_debug_impl_vkGetMemoryZirconHandleFUCHSIA;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkGetMemoryZirconHandlePropertiesFUCHSIA = glad_debug_impl_vkGetMemoryZirconHandlePropertiesFUCHSIA;

#endif
	glad_debug_vkGetMicromapBuildSizesEXT = glad_debug_impl_vkGetMicromapBuildSizesEXT;
	glad_debug_vkGetPastPresentationTimingGOOGLE = glad_debug_impl_vkGetPastPresentationTimingGOOGLE;
	glad_debug_vkGetPerformanceParameterINTEL = glad_debug_impl_vkGetPerformanceParameterINTEL;
	glad_debug_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = glad_debug_impl_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
	glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = glad_debug_impl_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
	glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = glad_debug_impl_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	glad_debug_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = glad_debug_impl_vkGetPhysicalDeviceDirectFBPresentationSupportEXT;

#endif
	glad_debug_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
	glad_debug_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = glad_debug_impl_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
	glad_debug_vkGetPhysicalDeviceDisplayProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceDisplayProperties2KHR;
	glad_debug_vkGetPhysicalDeviceDisplayPropertiesKHR = glad_debug_impl_vkGetPhysicalDeviceDisplayPropertiesKHR;
	glad_debug_vkGetPhysicalDeviceExternalBufferProperties = glad_debug_impl_vkGetPhysicalDeviceExternalBufferProperties;
	glad_debug_vkGetPhysicalDeviceExternalBufferPropertiesKHR = glad_debug_impl_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
	glad_debug_vkGetPhysicalDeviceExternalFenceProperties = glad_debug_impl_vkGetPhysicalDeviceExternalFenceProperties;
	glad_debug_vkGetPhysicalDeviceExternalFencePropertiesKHR = glad_debug_impl_vkGetPhysicalDeviceExternalFencePropertiesKHR;
	glad_debug_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = glad_debug_impl_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
	glad_debug_vkGetPhysicalDeviceExternalSemaphoreProperties = glad_debug_impl_vkGetPhysicalDeviceExternalSemaphoreProperties;
	glad_debug_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = glad_debug_impl_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
	glad_debug_vkGetPhysicalDeviceFeatures = glad_debug_impl_vkGetPhysicalDeviceFeatures;
	glad_debug_vkGetPhysicalDeviceFeatures2 = glad_debug_impl_vkGetPhysicalDeviceFeatures2;
	glad_debug_vkGetPhysicalDeviceFeatures2KHR = glad_debug_impl_vkGetPhysicalDeviceFeatures2KHR;
	glad_debug_vkGetPhysicalDeviceFormatProperties = glad_debug_impl_vkGetPhysicalDeviceFormatProperties;
	glad_debug_vkGetPhysicalDeviceFormatProperties2 = glad_debug_impl_vkGetPhysicalDeviceFormatProperties2;
	glad_debug_vkGetPhysicalDeviceFormatProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceFormatProperties2KHR;
	glad_debug_vkGetPhysicalDeviceFragmentShadingRatesKHR = glad_debug_impl_vkGetPhysicalDeviceFragmentShadingRatesKHR;
	glad_debug_vkGetPhysicalDeviceImageFormatProperties = glad_debug_impl_vkGetPhysicalDeviceImageFormatProperties;
	glad_debug_vkGetPhysicalDeviceImageFormatProperties2 = glad_debug_impl_vkGetPhysicalDeviceImageFormatProperties2;
	glad_debug_vkGetPhysicalDeviceImageFormatProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceImageFormatProperties2KHR;
	glad_debug_vkGetPhysicalDeviceMemoryProperties = glad_debug_impl_vkGetPhysicalDeviceMemoryProperties;
	glad_debug_vkGetPhysicalDeviceMemoryProperties2 = glad_debug_impl_vkGetPhysicalDeviceMemoryProperties2;
	glad_debug_vkGetPhysicalDeviceMemoryProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceMemoryProperties2KHR;
	glad_debug_vkGetPhysicalDeviceMultisamplePropertiesEXT = glad_debug_impl_vkGetPhysicalDeviceMultisamplePropertiesEXT;
	glad_debug_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = glad_debug_impl_vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
	glad_debug_vkGetPhysicalDevicePresentRectanglesKHR = glad_debug_impl_vkGetPhysicalDevicePresentRectanglesKHR;
	glad_debug_vkGetPhysicalDeviceProperties = glad_debug_impl_vkGetPhysicalDeviceProperties;
	glad_debug_vkGetPhysicalDeviceProperties2 = glad_debug_impl_vkGetPhysicalDeviceProperties2;
	glad_debug_vkGetPhysicalDeviceProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceProperties2KHR;
	glad_debug_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = glad_debug_impl_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
	glad_debug_vkGetPhysicalDeviceQueueFamilyProperties = glad_debug_impl_vkGetPhysicalDeviceQueueFamilyProperties;
	glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2 = glad_debug_impl_vkGetPhysicalDeviceQueueFamilyProperties2;
	glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	glad_debug_vkGetPhysicalDeviceScreenPresentationSupportQNX = glad_debug_impl_vkGetPhysicalDeviceScreenPresentationSupportQNX;

#endif
	glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties = glad_debug_impl_vkGetPhysicalDeviceSparseImageFormatProperties;
	glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2 = glad_debug_impl_vkGetPhysicalDeviceSparseImageFormatProperties2;
	glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = glad_debug_impl_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
	glad_debug_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV =
		glad_debug_impl_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
	glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2EXT = glad_debug_impl_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
	glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2KHR = glad_debug_impl_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
	glad_debug_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = glad_debug_impl_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
	glad_debug_vkGetPhysicalDeviceSurfaceFormats2KHR = glad_debug_impl_vkGetPhysicalDeviceSurfaceFormats2KHR;
	glad_debug_vkGetPhysicalDeviceSurfaceFormatsKHR = glad_debug_impl_vkGetPhysicalDeviceSurfaceFormatsKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetPhysicalDeviceSurfacePresentModes2EXT = glad_debug_impl_vkGetPhysicalDeviceSurfacePresentModes2EXT;

#endif
	glad_debug_vkGetPhysicalDeviceSurfacePresentModesKHR = glad_debug_impl_vkGetPhysicalDeviceSurfacePresentModesKHR;
	glad_debug_vkGetPhysicalDeviceSurfaceSupportKHR = glad_debug_impl_vkGetPhysicalDeviceSurfaceSupportKHR;
	glad_debug_vkGetPhysicalDeviceToolProperties = glad_debug_impl_vkGetPhysicalDeviceToolProperties;
	glad_debug_vkGetPhysicalDeviceToolPropertiesEXT = glad_debug_impl_vkGetPhysicalDeviceToolPropertiesEXT;
	glad_debug_vkGetPhysicalDeviceVideoCapabilitiesKHR = glad_debug_impl_vkGetPhysicalDeviceVideoCapabilitiesKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = glad_debug_impl_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;

#endif
	glad_debug_vkGetPhysicalDeviceVideoFormatPropertiesKHR = glad_debug_impl_vkGetPhysicalDeviceVideoFormatPropertiesKHR;
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	glad_debug_vkGetPhysicalDeviceWaylandPresentationSupportKHR = glad_debug_impl_vkGetPhysicalDeviceWaylandPresentationSupportKHR;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetPhysicalDeviceWin32PresentationSupportKHR = glad_debug_impl_vkGetPhysicalDeviceWin32PresentationSupportKHR;

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
	glad_debug_vkGetPhysicalDeviceXcbPresentationSupportKHR = glad_debug_impl_vkGetPhysicalDeviceXcbPresentationSupportKHR;

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
	glad_debug_vkGetPhysicalDeviceXlibPresentationSupportKHR = glad_debug_impl_vkGetPhysicalDeviceXlibPresentationSupportKHR;

#endif
	glad_debug_vkGetPipelineCacheData = glad_debug_impl_vkGetPipelineCacheData;
	glad_debug_vkGetPipelineExecutableInternalRepresentationsKHR = glad_debug_impl_vkGetPipelineExecutableInternalRepresentationsKHR;
	glad_debug_vkGetPipelineExecutablePropertiesKHR = glad_debug_impl_vkGetPipelineExecutablePropertiesKHR;
	glad_debug_vkGetPipelineExecutableStatisticsKHR = glad_debug_impl_vkGetPipelineExecutableStatisticsKHR;
	glad_debug_vkGetPipelineIndirectDeviceAddressNV = glad_debug_impl_vkGetPipelineIndirectDeviceAddressNV;
	glad_debug_vkGetPipelineIndirectMemoryRequirementsNV = glad_debug_impl_vkGetPipelineIndirectMemoryRequirementsNV;
	glad_debug_vkGetPipelinePropertiesEXT = glad_debug_impl_vkGetPipelinePropertiesEXT;
	glad_debug_vkGetPrivateData = glad_debug_impl_vkGetPrivateData;
	glad_debug_vkGetPrivateDataEXT = glad_debug_impl_vkGetPrivateDataEXT;
	glad_debug_vkGetQueryPoolResults = glad_debug_impl_vkGetQueryPoolResults;
	glad_debug_vkGetQueueCheckpointData2NV = glad_debug_impl_vkGetQueueCheckpointData2NV;
	glad_debug_vkGetQueueCheckpointDataNV = glad_debug_impl_vkGetQueueCheckpointDataNV;
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	glad_debug_vkGetRandROutputDisplayEXT = glad_debug_impl_vkGetRandROutputDisplayEXT;

#endif
	glad_debug_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = glad_debug_impl_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
	glad_debug_vkGetRayTracingShaderGroupHandlesKHR = glad_debug_impl_vkGetRayTracingShaderGroupHandlesKHR;
	glad_debug_vkGetRayTracingShaderGroupHandlesNV = glad_debug_impl_vkGetRayTracingShaderGroupHandlesNV;
	glad_debug_vkGetRayTracingShaderGroupStackSizeKHR = glad_debug_impl_vkGetRayTracingShaderGroupStackSizeKHR;
	glad_debug_vkGetRefreshCycleDurationGOOGLE = glad_debug_impl_vkGetRefreshCycleDurationGOOGLE;
	glad_debug_vkGetRenderAreaGranularity = glad_debug_impl_vkGetRenderAreaGranularity;
	glad_debug_vkGetRenderingAreaGranularityKHR = glad_debug_impl_vkGetRenderingAreaGranularityKHR;
	glad_debug_vkGetSamplerOpaqueCaptureDescriptorDataEXT = glad_debug_impl_vkGetSamplerOpaqueCaptureDescriptorDataEXT;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	glad_debug_vkGetScreenBufferPropertiesQNX = glad_debug_impl_vkGetScreenBufferPropertiesQNX;

#endif
	glad_debug_vkGetSemaphoreCounterValue = glad_debug_impl_vkGetSemaphoreCounterValue;
	glad_debug_vkGetSemaphoreCounterValueKHR = glad_debug_impl_vkGetSemaphoreCounterValueKHR;
	glad_debug_vkGetSemaphoreFdKHR = glad_debug_impl_vkGetSemaphoreFdKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetSemaphoreWin32HandleKHR = glad_debug_impl_vkGetSemaphoreWin32HandleKHR;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkGetSemaphoreZirconHandleFUCHSIA = glad_debug_impl_vkGetSemaphoreZirconHandleFUCHSIA;

#endif
	glad_debug_vkGetShaderBinaryDataEXT = glad_debug_impl_vkGetShaderBinaryDataEXT;
	glad_debug_vkGetShaderInfoAMD = glad_debug_impl_vkGetShaderInfoAMD;
	glad_debug_vkGetShaderModuleCreateInfoIdentifierEXT = glad_debug_impl_vkGetShaderModuleCreateInfoIdentifierEXT;
	glad_debug_vkGetShaderModuleIdentifierEXT = glad_debug_impl_vkGetShaderModuleIdentifierEXT;
	glad_debug_vkGetSwapchainCounterEXT = glad_debug_impl_vkGetSwapchainCounterEXT;
	glad_debug_vkGetSwapchainImagesKHR = glad_debug_impl_vkGetSwapchainImagesKHR;
	glad_debug_vkGetSwapchainStatusKHR = glad_debug_impl_vkGetSwapchainStatusKHR;
	glad_debug_vkGetValidationCacheDataEXT = glad_debug_impl_vkGetValidationCacheDataEXT;
	glad_debug_vkGetVideoSessionMemoryRequirementsKHR = glad_debug_impl_vkGetVideoSessionMemoryRequirementsKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetWinrtDisplayNV = glad_debug_impl_vkGetWinrtDisplayNV;

#endif
	glad_debug_vkImportFenceFdKHR = glad_debug_impl_vkImportFenceFdKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkImportFenceWin32HandleKHR = glad_debug_impl_vkImportFenceWin32HandleKHR;

#endif
	glad_debug_vkImportSemaphoreFdKHR = glad_debug_impl_vkImportSemaphoreFdKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkImportSemaphoreWin32HandleKHR = glad_debug_impl_vkImportSemaphoreWin32HandleKHR;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkImportSemaphoreZirconHandleFUCHSIA = glad_debug_impl_vkImportSemaphoreZirconHandleFUCHSIA;

#endif
	glad_debug_vkInitializePerformanceApiINTEL = glad_debug_impl_vkInitializePerformanceApiINTEL;
	glad_debug_vkInvalidateMappedMemoryRanges = glad_debug_impl_vkInvalidateMappedMemoryRanges;
	glad_debug_vkLatencySleepNV = glad_debug_impl_vkLatencySleepNV;
	glad_debug_vkMapMemory = glad_debug_impl_vkMapMemory;
	glad_debug_vkMapMemory2KHR = glad_debug_impl_vkMapMemory2KHR;
	glad_debug_vkMergePipelineCaches = glad_debug_impl_vkMergePipelineCaches;
	glad_debug_vkMergeValidationCachesEXT = glad_debug_impl_vkMergeValidationCachesEXT;
	glad_debug_vkQueueBeginDebugUtilsLabelEXT = glad_debug_impl_vkQueueBeginDebugUtilsLabelEXT;
	glad_debug_vkQueueBindSparse = glad_debug_impl_vkQueueBindSparse;
	glad_debug_vkQueueEndDebugUtilsLabelEXT = glad_debug_impl_vkQueueEndDebugUtilsLabelEXT;
	glad_debug_vkQueueInsertDebugUtilsLabelEXT = glad_debug_impl_vkQueueInsertDebugUtilsLabelEXT;
	glad_debug_vkQueueNotifyOutOfBandNV = glad_debug_impl_vkQueueNotifyOutOfBandNV;
	glad_debug_vkQueuePresentKHR = glad_debug_impl_vkQueuePresentKHR;
	glad_debug_vkQueueSetPerformanceConfigurationINTEL = glad_debug_impl_vkQueueSetPerformanceConfigurationINTEL;
	glad_debug_vkQueueSubmit = glad_debug_impl_vkQueueSubmit;
	glad_debug_vkQueueSubmit2 = glad_debug_impl_vkQueueSubmit2;
	glad_debug_vkQueueSubmit2KHR = glad_debug_impl_vkQueueSubmit2KHR;
	glad_debug_vkQueueWaitIdle = glad_debug_impl_vkQueueWaitIdle;
	glad_debug_vkRegisterDeviceEventEXT = glad_debug_impl_vkRegisterDeviceEventEXT;
	glad_debug_vkRegisterDisplayEventEXT = glad_debug_impl_vkRegisterDisplayEventEXT;
	glad_debug_vkReleaseDisplayEXT = glad_debug_impl_vkReleaseDisplayEXT;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkReleaseFullScreenExclusiveModeEXT = glad_debug_impl_vkReleaseFullScreenExclusiveModeEXT;

#endif
	glad_debug_vkReleasePerformanceConfigurationINTEL = glad_debug_impl_vkReleasePerformanceConfigurationINTEL;
	glad_debug_vkReleaseProfilingLockKHR = glad_debug_impl_vkReleaseProfilingLockKHR;
	glad_debug_vkReleaseSwapchainImagesEXT = glad_debug_impl_vkReleaseSwapchainImagesEXT;
	glad_debug_vkResetCommandBuffer = glad_debug_impl_vkResetCommandBuffer;
	glad_debug_vkResetCommandPool = glad_debug_impl_vkResetCommandPool;
	glad_debug_vkResetDescriptorPool = glad_debug_impl_vkResetDescriptorPool;
	glad_debug_vkResetEvent = glad_debug_impl_vkResetEvent;
	glad_debug_vkResetFences = glad_debug_impl_vkResetFences;
	glad_debug_vkResetQueryPool = glad_debug_impl_vkResetQueryPool;
	glad_debug_vkResetQueryPoolEXT = glad_debug_impl_vkResetQueryPoolEXT;
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkSetBufferCollectionBufferConstraintsFUCHSIA = glad_debug_impl_vkSetBufferCollectionBufferConstraintsFUCHSIA;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkSetBufferCollectionImageConstraintsFUCHSIA = glad_debug_impl_vkSetBufferCollectionImageConstraintsFUCHSIA;

#endif
	glad_debug_vkSetDebugUtilsObjectNameEXT = glad_debug_impl_vkSetDebugUtilsObjectNameEXT;
	glad_debug_vkSetDebugUtilsObjectTagEXT = glad_debug_impl_vkSetDebugUtilsObjectTagEXT;
	glad_debug_vkSetDeviceMemoryPriorityEXT = glad_debug_impl_vkSetDeviceMemoryPriorityEXT;
	glad_debug_vkSetEvent = glad_debug_impl_vkSetEvent;
	glad_debug_vkSetHdrMetadataEXT = glad_debug_impl_vkSetHdrMetadataEXT;
	glad_debug_vkSetLatencyMarkerNV = glad_debug_impl_vkSetLatencyMarkerNV;
	glad_debug_vkSetLatencySleepModeNV = glad_debug_impl_vkSetLatencySleepModeNV;
	glad_debug_vkSetLocalDimmingAMD = glad_debug_impl_vkSetLocalDimmingAMD;
	glad_debug_vkSetPrivateData = glad_debug_impl_vkSetPrivateData;
	glad_debug_vkSetPrivateDataEXT = glad_debug_impl_vkSetPrivateDataEXT;
	glad_debug_vkSignalSemaphore = glad_debug_impl_vkSignalSemaphore;
	glad_debug_vkSignalSemaphoreKHR = glad_debug_impl_vkSignalSemaphoreKHR;
	glad_debug_vkSubmitDebugUtilsMessageEXT = glad_debug_impl_vkSubmitDebugUtilsMessageEXT;
	glad_debug_vkTransitionImageLayoutEXT = glad_debug_impl_vkTransitionImageLayoutEXT;
	glad_debug_vkTrimCommandPool = glad_debug_impl_vkTrimCommandPool;
	glad_debug_vkTrimCommandPoolKHR = glad_debug_impl_vkTrimCommandPoolKHR;
	glad_debug_vkUninitializePerformanceApiINTEL = glad_debug_impl_vkUninitializePerformanceApiINTEL;
	glad_debug_vkUnmapMemory = glad_debug_impl_vkUnmapMemory;
	glad_debug_vkUnmapMemory2KHR = glad_debug_impl_vkUnmapMemory2KHR;
	glad_debug_vkUpdateDescriptorSetWithTemplate = glad_debug_impl_vkUpdateDescriptorSetWithTemplate;
	glad_debug_vkUpdateDescriptorSetWithTemplateKHR = glad_debug_impl_vkUpdateDescriptorSetWithTemplateKHR;
	glad_debug_vkUpdateDescriptorSets = glad_debug_impl_vkUpdateDescriptorSets;
	glad_debug_vkUpdateVideoSessionParametersKHR = glad_debug_impl_vkUpdateVideoSessionParametersKHR;
	glad_debug_vkWaitForFences = glad_debug_impl_vkWaitForFences;
	glad_debug_vkWaitForPresentKHR = glad_debug_impl_vkWaitForPresentKHR;
	glad_debug_vkWaitSemaphores = glad_debug_impl_vkWaitSemaphores;
	glad_debug_vkWaitSemaphoresKHR = glad_debug_impl_vkWaitSemaphoresKHR;
	glad_debug_vkWriteAccelerationStructuresPropertiesKHR = glad_debug_impl_vkWriteAccelerationStructuresPropertiesKHR;
	glad_debug_vkWriteMicromapsPropertiesEXT = glad_debug_impl_vkWriteMicromapsPropertiesEXT;
}

void gladUninstallVulkanDebug(void) {
	glad_debug_vkAcquireDrmDisplayEXT = glad_vkAcquireDrmDisplayEXT;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkAcquireFullScreenExclusiveModeEXT = glad_vkAcquireFullScreenExclusiveModeEXT;

#endif
	glad_debug_vkAcquireNextImage2KHR = glad_vkAcquireNextImage2KHR;
	glad_debug_vkAcquireNextImageKHR = glad_vkAcquireNextImageKHR;
	glad_debug_vkAcquirePerformanceConfigurationINTEL = glad_vkAcquirePerformanceConfigurationINTEL;
	glad_debug_vkAcquireProfilingLockKHR = glad_vkAcquireProfilingLockKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkAcquireWinrtDisplayNV = glad_vkAcquireWinrtDisplayNV;

#endif
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	glad_debug_vkAcquireXlibDisplayEXT = glad_vkAcquireXlibDisplayEXT;

#endif
	glad_debug_vkAllocateCommandBuffers = glad_vkAllocateCommandBuffers;
	glad_debug_vkAllocateDescriptorSets = glad_vkAllocateDescriptorSets;
	glad_debug_vkAllocateMemory = glad_vkAllocateMemory;
	glad_debug_vkBeginCommandBuffer = glad_vkBeginCommandBuffer;
	glad_debug_vkBindAccelerationStructureMemoryNV = glad_vkBindAccelerationStructureMemoryNV;
	glad_debug_vkBindBufferMemory = glad_vkBindBufferMemory;
	glad_debug_vkBindBufferMemory2 = glad_vkBindBufferMemory2;
	glad_debug_vkBindBufferMemory2KHR = glad_vkBindBufferMemory2KHR;
	glad_debug_vkBindImageMemory = glad_vkBindImageMemory;
	glad_debug_vkBindImageMemory2 = glad_vkBindImageMemory2;
	glad_debug_vkBindImageMemory2KHR = glad_vkBindImageMemory2KHR;
	glad_debug_vkBindOpticalFlowSessionImageNV = glad_vkBindOpticalFlowSessionImageNV;
	glad_debug_vkBindVideoSessionMemoryKHR = glad_vkBindVideoSessionMemoryKHR;
	glad_debug_vkBuildAccelerationStructuresKHR = glad_vkBuildAccelerationStructuresKHR;
	glad_debug_vkBuildMicromapsEXT = glad_vkBuildMicromapsEXT;
	glad_debug_vkCmdBeginConditionalRenderingEXT = glad_vkCmdBeginConditionalRenderingEXT;
	glad_debug_vkCmdBeginDebugUtilsLabelEXT = glad_vkCmdBeginDebugUtilsLabelEXT;
	glad_debug_vkCmdBeginQuery = glad_vkCmdBeginQuery;
	glad_debug_vkCmdBeginQueryIndexedEXT = glad_vkCmdBeginQueryIndexedEXT;
	glad_debug_vkCmdBeginRenderPass = glad_vkCmdBeginRenderPass;
	glad_debug_vkCmdBeginRenderPass2 = glad_vkCmdBeginRenderPass2;
	glad_debug_vkCmdBeginRenderPass2KHR = glad_vkCmdBeginRenderPass2KHR;
	glad_debug_vkCmdBeginRendering = glad_vkCmdBeginRendering;
	glad_debug_vkCmdBeginRenderingKHR = glad_vkCmdBeginRenderingKHR;
	glad_debug_vkCmdBeginTransformFeedbackEXT = glad_vkCmdBeginTransformFeedbackEXT;
	glad_debug_vkCmdBeginVideoCodingKHR = glad_vkCmdBeginVideoCodingKHR;
	glad_debug_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = glad_vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
	glad_debug_vkCmdBindDescriptorBuffersEXT = glad_vkCmdBindDescriptorBuffersEXT;
	glad_debug_vkCmdBindDescriptorSets = glad_vkCmdBindDescriptorSets;
	glad_debug_vkCmdBindIndexBuffer = glad_vkCmdBindIndexBuffer;
	glad_debug_vkCmdBindIndexBuffer2KHR = glad_vkCmdBindIndexBuffer2KHR;
	glad_debug_vkCmdBindInvocationMaskHUAWEI = glad_vkCmdBindInvocationMaskHUAWEI;
	glad_debug_vkCmdBindPipeline = glad_vkCmdBindPipeline;
	glad_debug_vkCmdBindPipelineShaderGroupNV = glad_vkCmdBindPipelineShaderGroupNV;
	glad_debug_vkCmdBindShadersEXT = glad_vkCmdBindShadersEXT;
	glad_debug_vkCmdBindShadingRateImageNV = glad_vkCmdBindShadingRateImageNV;
	glad_debug_vkCmdBindTransformFeedbackBuffersEXT = glad_vkCmdBindTransformFeedbackBuffersEXT;
	glad_debug_vkCmdBindVertexBuffers = glad_vkCmdBindVertexBuffers;
	glad_debug_vkCmdBindVertexBuffers2 = glad_vkCmdBindVertexBuffers2;
	glad_debug_vkCmdBindVertexBuffers2EXT = glad_vkCmdBindVertexBuffers2EXT;
	glad_debug_vkCmdBlitImage = glad_vkCmdBlitImage;
	glad_debug_vkCmdBlitImage2 = glad_vkCmdBlitImage2;
	glad_debug_vkCmdBlitImage2KHR = glad_vkCmdBlitImage2KHR;
	glad_debug_vkCmdBuildAccelerationStructureNV = glad_vkCmdBuildAccelerationStructureNV;
	glad_debug_vkCmdBuildAccelerationStructuresIndirectKHR = glad_vkCmdBuildAccelerationStructuresIndirectKHR;
	glad_debug_vkCmdBuildAccelerationStructuresKHR = glad_vkCmdBuildAccelerationStructuresKHR;
	glad_debug_vkCmdBuildMicromapsEXT = glad_vkCmdBuildMicromapsEXT;
	glad_debug_vkCmdClearAttachments = glad_vkCmdClearAttachments;
	glad_debug_vkCmdClearColorImage = glad_vkCmdClearColorImage;
	glad_debug_vkCmdClearDepthStencilImage = glad_vkCmdClearDepthStencilImage;
	glad_debug_vkCmdControlVideoCodingKHR = glad_vkCmdControlVideoCodingKHR;
	glad_debug_vkCmdCopyAccelerationStructureKHR = glad_vkCmdCopyAccelerationStructureKHR;
	glad_debug_vkCmdCopyAccelerationStructureNV = glad_vkCmdCopyAccelerationStructureNV;
	glad_debug_vkCmdCopyAccelerationStructureToMemoryKHR = glad_vkCmdCopyAccelerationStructureToMemoryKHR;
	glad_debug_vkCmdCopyBuffer = glad_vkCmdCopyBuffer;
	glad_debug_vkCmdCopyBuffer2 = glad_vkCmdCopyBuffer2;
	glad_debug_vkCmdCopyBuffer2KHR = glad_vkCmdCopyBuffer2KHR;
	glad_debug_vkCmdCopyBufferToImage = glad_vkCmdCopyBufferToImage;
	glad_debug_vkCmdCopyBufferToImage2 = glad_vkCmdCopyBufferToImage2;
	glad_debug_vkCmdCopyBufferToImage2KHR = glad_vkCmdCopyBufferToImage2KHR;
	glad_debug_vkCmdCopyImage = glad_vkCmdCopyImage;
	glad_debug_vkCmdCopyImage2 = glad_vkCmdCopyImage2;
	glad_debug_vkCmdCopyImage2KHR = glad_vkCmdCopyImage2KHR;
	glad_debug_vkCmdCopyImageToBuffer = glad_vkCmdCopyImageToBuffer;
	glad_debug_vkCmdCopyImageToBuffer2 = glad_vkCmdCopyImageToBuffer2;
	glad_debug_vkCmdCopyImageToBuffer2KHR = glad_vkCmdCopyImageToBuffer2KHR;
	glad_debug_vkCmdCopyMemoryIndirectNV = glad_vkCmdCopyMemoryIndirectNV;
	glad_debug_vkCmdCopyMemoryToAccelerationStructureKHR = glad_vkCmdCopyMemoryToAccelerationStructureKHR;
	glad_debug_vkCmdCopyMemoryToImageIndirectNV = glad_vkCmdCopyMemoryToImageIndirectNV;
	glad_debug_vkCmdCopyMemoryToMicromapEXT = glad_vkCmdCopyMemoryToMicromapEXT;
	glad_debug_vkCmdCopyMicromapEXT = glad_vkCmdCopyMicromapEXT;
	glad_debug_vkCmdCopyMicromapToMemoryEXT = glad_vkCmdCopyMicromapToMemoryEXT;
	glad_debug_vkCmdCopyQueryPoolResults = glad_vkCmdCopyQueryPoolResults;
	glad_debug_vkCmdCuLaunchKernelNVX = glad_vkCmdCuLaunchKernelNVX;
	glad_debug_vkCmdDebugMarkerBeginEXT = glad_vkCmdDebugMarkerBeginEXT;
	glad_debug_vkCmdDebugMarkerEndEXT = glad_vkCmdDebugMarkerEndEXT;
	glad_debug_vkCmdDebugMarkerInsertEXT = glad_vkCmdDebugMarkerInsertEXT;
	glad_debug_vkCmdDecodeVideoKHR = glad_vkCmdDecodeVideoKHR;
	glad_debug_vkCmdDecompressMemoryIndirectCountNV = glad_vkCmdDecompressMemoryIndirectCountNV;
	glad_debug_vkCmdDecompressMemoryNV = glad_vkCmdDecompressMemoryNV;
	glad_debug_vkCmdDispatch = glad_vkCmdDispatch;
	glad_debug_vkCmdDispatchBase = glad_vkCmdDispatchBase;
	glad_debug_vkCmdDispatchBaseKHR = glad_vkCmdDispatchBaseKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdDispatchGraphAMDX = glad_vkCmdDispatchGraphAMDX;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdDispatchGraphIndirectAMDX = glad_vkCmdDispatchGraphIndirectAMDX;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdDispatchGraphIndirectCountAMDX = glad_vkCmdDispatchGraphIndirectCountAMDX;

#endif
	glad_debug_vkCmdDispatchIndirect = glad_vkCmdDispatchIndirect;
	glad_debug_vkCmdDraw = glad_vkCmdDraw;
	glad_debug_vkCmdDrawClusterHUAWEI = glad_vkCmdDrawClusterHUAWEI;
	glad_debug_vkCmdDrawClusterIndirectHUAWEI = glad_vkCmdDrawClusterIndirectHUAWEI;
	glad_debug_vkCmdDrawIndexed = glad_vkCmdDrawIndexed;
	glad_debug_vkCmdDrawIndexedIndirect = glad_vkCmdDrawIndexedIndirect;
	glad_debug_vkCmdDrawIndexedIndirectCount = glad_vkCmdDrawIndexedIndirectCount;
	glad_debug_vkCmdDrawIndexedIndirectCountAMD = glad_vkCmdDrawIndexedIndirectCountAMD;
	glad_debug_vkCmdDrawIndexedIndirectCountKHR = glad_vkCmdDrawIndexedIndirectCountKHR;
	glad_debug_vkCmdDrawIndirect = glad_vkCmdDrawIndirect;
	glad_debug_vkCmdDrawIndirectByteCountEXT = glad_vkCmdDrawIndirectByteCountEXT;
	glad_debug_vkCmdDrawIndirectCount = glad_vkCmdDrawIndirectCount;
	glad_debug_vkCmdDrawIndirectCountAMD = glad_vkCmdDrawIndirectCountAMD;
	glad_debug_vkCmdDrawIndirectCountKHR = glad_vkCmdDrawIndirectCountKHR;
	glad_debug_vkCmdDrawMeshTasksEXT = glad_vkCmdDrawMeshTasksEXT;
	glad_debug_vkCmdDrawMeshTasksIndirectCountEXT = glad_vkCmdDrawMeshTasksIndirectCountEXT;
	glad_debug_vkCmdDrawMeshTasksIndirectCountNV = glad_vkCmdDrawMeshTasksIndirectCountNV;
	glad_debug_vkCmdDrawMeshTasksIndirectEXT = glad_vkCmdDrawMeshTasksIndirectEXT;
	glad_debug_vkCmdDrawMeshTasksIndirectNV = glad_vkCmdDrawMeshTasksIndirectNV;
	glad_debug_vkCmdDrawMeshTasksNV = glad_vkCmdDrawMeshTasksNV;
	glad_debug_vkCmdDrawMultiEXT = glad_vkCmdDrawMultiEXT;
	glad_debug_vkCmdDrawMultiIndexedEXT = glad_vkCmdDrawMultiIndexedEXT;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdEncodeVideoKHR = glad_vkCmdEncodeVideoKHR;

#endif
	glad_debug_vkCmdEndConditionalRenderingEXT = glad_vkCmdEndConditionalRenderingEXT;
	glad_debug_vkCmdEndDebugUtilsLabelEXT = glad_vkCmdEndDebugUtilsLabelEXT;
	glad_debug_vkCmdEndQuery = glad_vkCmdEndQuery;
	glad_debug_vkCmdEndQueryIndexedEXT = glad_vkCmdEndQueryIndexedEXT;
	glad_debug_vkCmdEndRenderPass = glad_vkCmdEndRenderPass;
	glad_debug_vkCmdEndRenderPass2 = glad_vkCmdEndRenderPass2;
	glad_debug_vkCmdEndRenderPass2KHR = glad_vkCmdEndRenderPass2KHR;
	glad_debug_vkCmdEndRendering = glad_vkCmdEndRendering;
	glad_debug_vkCmdEndRenderingKHR = glad_vkCmdEndRenderingKHR;
	glad_debug_vkCmdEndTransformFeedbackEXT = glad_vkCmdEndTransformFeedbackEXT;
	glad_debug_vkCmdEndVideoCodingKHR = glad_vkCmdEndVideoCodingKHR;
	glad_debug_vkCmdExecuteCommands = glad_vkCmdExecuteCommands;
	glad_debug_vkCmdExecuteGeneratedCommandsNV = glad_vkCmdExecuteGeneratedCommandsNV;
	glad_debug_vkCmdFillBuffer = glad_vkCmdFillBuffer;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCmdInitializeGraphScratchMemoryAMDX = glad_vkCmdInitializeGraphScratchMemoryAMDX;

#endif
	glad_debug_vkCmdInsertDebugUtilsLabelEXT = glad_vkCmdInsertDebugUtilsLabelEXT;
	glad_debug_vkCmdNextSubpass = glad_vkCmdNextSubpass;
	glad_debug_vkCmdNextSubpass2 = glad_vkCmdNextSubpass2;
	glad_debug_vkCmdNextSubpass2KHR = glad_vkCmdNextSubpass2KHR;
	glad_debug_vkCmdOpticalFlowExecuteNV = glad_vkCmdOpticalFlowExecuteNV;
	glad_debug_vkCmdPipelineBarrier = glad_vkCmdPipelineBarrier;
	glad_debug_vkCmdPipelineBarrier2 = glad_vkCmdPipelineBarrier2;
	glad_debug_vkCmdPipelineBarrier2KHR = glad_vkCmdPipelineBarrier2KHR;
	glad_debug_vkCmdPreprocessGeneratedCommandsNV = glad_vkCmdPreprocessGeneratedCommandsNV;
	glad_debug_vkCmdPushConstants = glad_vkCmdPushConstants;
	glad_debug_vkCmdPushDescriptorSetKHR = glad_vkCmdPushDescriptorSetKHR;
	glad_debug_vkCmdPushDescriptorSetWithTemplateKHR = glad_vkCmdPushDescriptorSetWithTemplateKHR;
	glad_debug_vkCmdResetEvent = glad_vkCmdResetEvent;
	glad_debug_vkCmdResetEvent2 = glad_vkCmdResetEvent2;
	glad_debug_vkCmdResetEvent2KHR = glad_vkCmdResetEvent2KHR;
	glad_debug_vkCmdResetQueryPool = glad_vkCmdResetQueryPool;
	glad_debug_vkCmdResolveImage = glad_vkCmdResolveImage;
	glad_debug_vkCmdResolveImage2 = glad_vkCmdResolveImage2;
	glad_debug_vkCmdResolveImage2KHR = glad_vkCmdResolveImage2KHR;
	glad_debug_vkCmdSetAlphaToCoverageEnableEXT = glad_vkCmdSetAlphaToCoverageEnableEXT;
	glad_debug_vkCmdSetAlphaToOneEnableEXT = glad_vkCmdSetAlphaToOneEnableEXT;
	glad_debug_vkCmdSetAttachmentFeedbackLoopEnableEXT = glad_vkCmdSetAttachmentFeedbackLoopEnableEXT;
	glad_debug_vkCmdSetBlendConstants = glad_vkCmdSetBlendConstants;
	glad_debug_vkCmdSetCheckpointNV = glad_vkCmdSetCheckpointNV;
	glad_debug_vkCmdSetCoarseSampleOrderNV = glad_vkCmdSetCoarseSampleOrderNV;
	glad_debug_vkCmdSetColorBlendAdvancedEXT = glad_vkCmdSetColorBlendAdvancedEXT;
	glad_debug_vkCmdSetColorBlendEnableEXT = glad_vkCmdSetColorBlendEnableEXT;
	glad_debug_vkCmdSetColorBlendEquationEXT = glad_vkCmdSetColorBlendEquationEXT;
	glad_debug_vkCmdSetColorWriteEnableEXT = glad_vkCmdSetColorWriteEnableEXT;
	glad_debug_vkCmdSetColorWriteMaskEXT = glad_vkCmdSetColorWriteMaskEXT;
	glad_debug_vkCmdSetConservativeRasterizationModeEXT = glad_vkCmdSetConservativeRasterizationModeEXT;
	glad_debug_vkCmdSetCoverageModulationModeNV = glad_vkCmdSetCoverageModulationModeNV;
	glad_debug_vkCmdSetCoverageModulationTableEnableNV = glad_vkCmdSetCoverageModulationTableEnableNV;
	glad_debug_vkCmdSetCoverageModulationTableNV = glad_vkCmdSetCoverageModulationTableNV;
	glad_debug_vkCmdSetCoverageReductionModeNV = glad_vkCmdSetCoverageReductionModeNV;
	glad_debug_vkCmdSetCoverageToColorEnableNV = glad_vkCmdSetCoverageToColorEnableNV;
	glad_debug_vkCmdSetCoverageToColorLocationNV = glad_vkCmdSetCoverageToColorLocationNV;
	glad_debug_vkCmdSetCullMode = glad_vkCmdSetCullMode;
	glad_debug_vkCmdSetCullModeEXT = glad_vkCmdSetCullModeEXT;
	glad_debug_vkCmdSetDepthBias = glad_vkCmdSetDepthBias;
	glad_debug_vkCmdSetDepthBias2EXT = glad_vkCmdSetDepthBias2EXT;
	glad_debug_vkCmdSetDepthBiasEnable = glad_vkCmdSetDepthBiasEnable;
	glad_debug_vkCmdSetDepthBiasEnableEXT = glad_vkCmdSetDepthBiasEnableEXT;
	glad_debug_vkCmdSetDepthBounds = glad_vkCmdSetDepthBounds;
	glad_debug_vkCmdSetDepthBoundsTestEnable = glad_vkCmdSetDepthBoundsTestEnable;
	glad_debug_vkCmdSetDepthBoundsTestEnableEXT = glad_vkCmdSetDepthBoundsTestEnableEXT;
	glad_debug_vkCmdSetDepthClampEnableEXT = glad_vkCmdSetDepthClampEnableEXT;
	glad_debug_vkCmdSetDepthClipEnableEXT = glad_vkCmdSetDepthClipEnableEXT;
	glad_debug_vkCmdSetDepthClipNegativeOneToOneEXT = glad_vkCmdSetDepthClipNegativeOneToOneEXT;
	glad_debug_vkCmdSetDepthCompareOp = glad_vkCmdSetDepthCompareOp;
	glad_debug_vkCmdSetDepthCompareOpEXT = glad_vkCmdSetDepthCompareOpEXT;
	glad_debug_vkCmdSetDepthTestEnable = glad_vkCmdSetDepthTestEnable;
	glad_debug_vkCmdSetDepthTestEnableEXT = glad_vkCmdSetDepthTestEnableEXT;
	glad_debug_vkCmdSetDepthWriteEnable = glad_vkCmdSetDepthWriteEnable;
	glad_debug_vkCmdSetDepthWriteEnableEXT = glad_vkCmdSetDepthWriteEnableEXT;
	glad_debug_vkCmdSetDescriptorBufferOffsetsEXT = glad_vkCmdSetDescriptorBufferOffsetsEXT;
	glad_debug_vkCmdSetDeviceMask = glad_vkCmdSetDeviceMask;
	glad_debug_vkCmdSetDeviceMaskKHR = glad_vkCmdSetDeviceMaskKHR;
	glad_debug_vkCmdSetDiscardRectangleEXT = glad_vkCmdSetDiscardRectangleEXT;
	glad_debug_vkCmdSetDiscardRectangleEnableEXT = glad_vkCmdSetDiscardRectangleEnableEXT;
	glad_debug_vkCmdSetDiscardRectangleModeEXT = glad_vkCmdSetDiscardRectangleModeEXT;
	glad_debug_vkCmdSetEvent = glad_vkCmdSetEvent;
	glad_debug_vkCmdSetEvent2 = glad_vkCmdSetEvent2;
	glad_debug_vkCmdSetEvent2KHR = glad_vkCmdSetEvent2KHR;
	glad_debug_vkCmdSetExclusiveScissorEnableNV = glad_vkCmdSetExclusiveScissorEnableNV;
	glad_debug_vkCmdSetExclusiveScissorNV = glad_vkCmdSetExclusiveScissorNV;
	glad_debug_vkCmdSetExtraPrimitiveOverestimationSizeEXT = glad_vkCmdSetExtraPrimitiveOverestimationSizeEXT;
	glad_debug_vkCmdSetFragmentShadingRateEnumNV = glad_vkCmdSetFragmentShadingRateEnumNV;
	glad_debug_vkCmdSetFragmentShadingRateKHR = glad_vkCmdSetFragmentShadingRateKHR;
	glad_debug_vkCmdSetFrontFace = glad_vkCmdSetFrontFace;
	glad_debug_vkCmdSetFrontFaceEXT = glad_vkCmdSetFrontFaceEXT;
	glad_debug_vkCmdSetLineRasterizationModeEXT = glad_vkCmdSetLineRasterizationModeEXT;
	glad_debug_vkCmdSetLineStippleEXT = glad_vkCmdSetLineStippleEXT;
	glad_debug_vkCmdSetLineStippleEnableEXT = glad_vkCmdSetLineStippleEnableEXT;
	glad_debug_vkCmdSetLineWidth = glad_vkCmdSetLineWidth;
	glad_debug_vkCmdSetLogicOpEXT = glad_vkCmdSetLogicOpEXT;
	glad_debug_vkCmdSetLogicOpEnableEXT = glad_vkCmdSetLogicOpEnableEXT;
	glad_debug_vkCmdSetPatchControlPointsEXT = glad_vkCmdSetPatchControlPointsEXT;
	glad_debug_vkCmdSetPerformanceMarkerINTEL = glad_vkCmdSetPerformanceMarkerINTEL;
	glad_debug_vkCmdSetPerformanceOverrideINTEL = glad_vkCmdSetPerformanceOverrideINTEL;
	glad_debug_vkCmdSetPerformanceStreamMarkerINTEL = glad_vkCmdSetPerformanceStreamMarkerINTEL;
	glad_debug_vkCmdSetPolygonModeEXT = glad_vkCmdSetPolygonModeEXT;
	glad_debug_vkCmdSetPrimitiveRestartEnable = glad_vkCmdSetPrimitiveRestartEnable;
	glad_debug_vkCmdSetPrimitiveRestartEnableEXT = glad_vkCmdSetPrimitiveRestartEnableEXT;
	glad_debug_vkCmdSetPrimitiveTopology = glad_vkCmdSetPrimitiveTopology;
	glad_debug_vkCmdSetPrimitiveTopologyEXT = glad_vkCmdSetPrimitiveTopologyEXT;
	glad_debug_vkCmdSetProvokingVertexModeEXT = glad_vkCmdSetProvokingVertexModeEXT;
	glad_debug_vkCmdSetRasterizationSamplesEXT = glad_vkCmdSetRasterizationSamplesEXT;
	glad_debug_vkCmdSetRasterizationStreamEXT = glad_vkCmdSetRasterizationStreamEXT;
	glad_debug_vkCmdSetRasterizerDiscardEnable = glad_vkCmdSetRasterizerDiscardEnable;
	glad_debug_vkCmdSetRasterizerDiscardEnableEXT = glad_vkCmdSetRasterizerDiscardEnableEXT;
	glad_debug_vkCmdSetRayTracingPipelineStackSizeKHR = glad_vkCmdSetRayTracingPipelineStackSizeKHR;
	glad_debug_vkCmdSetRepresentativeFragmentTestEnableNV = glad_vkCmdSetRepresentativeFragmentTestEnableNV;
	glad_debug_vkCmdSetSampleLocationsEXT = glad_vkCmdSetSampleLocationsEXT;
	glad_debug_vkCmdSetSampleLocationsEnableEXT = glad_vkCmdSetSampleLocationsEnableEXT;
	glad_debug_vkCmdSetSampleMaskEXT = glad_vkCmdSetSampleMaskEXT;
	glad_debug_vkCmdSetScissor = glad_vkCmdSetScissor;
	glad_debug_vkCmdSetScissorWithCount = glad_vkCmdSetScissorWithCount;
	glad_debug_vkCmdSetScissorWithCountEXT = glad_vkCmdSetScissorWithCountEXT;
	glad_debug_vkCmdSetShadingRateImageEnableNV = glad_vkCmdSetShadingRateImageEnableNV;
	glad_debug_vkCmdSetStencilCompareMask = glad_vkCmdSetStencilCompareMask;
	glad_debug_vkCmdSetStencilOp = glad_vkCmdSetStencilOp;
	glad_debug_vkCmdSetStencilOpEXT = glad_vkCmdSetStencilOpEXT;
	glad_debug_vkCmdSetStencilReference = glad_vkCmdSetStencilReference;
	glad_debug_vkCmdSetStencilTestEnable = glad_vkCmdSetStencilTestEnable;
	glad_debug_vkCmdSetStencilTestEnableEXT = glad_vkCmdSetStencilTestEnableEXT;
	glad_debug_vkCmdSetStencilWriteMask = glad_vkCmdSetStencilWriteMask;
	glad_debug_vkCmdSetTessellationDomainOriginEXT = glad_vkCmdSetTessellationDomainOriginEXT;
	glad_debug_vkCmdSetVertexInputEXT = glad_vkCmdSetVertexInputEXT;
	glad_debug_vkCmdSetViewport = glad_vkCmdSetViewport;
	glad_debug_vkCmdSetViewportShadingRatePaletteNV = glad_vkCmdSetViewportShadingRatePaletteNV;
	glad_debug_vkCmdSetViewportSwizzleNV = glad_vkCmdSetViewportSwizzleNV;
	glad_debug_vkCmdSetViewportWScalingEnableNV = glad_vkCmdSetViewportWScalingEnableNV;
	glad_debug_vkCmdSetViewportWScalingNV = glad_vkCmdSetViewportWScalingNV;
	glad_debug_vkCmdSetViewportWithCount = glad_vkCmdSetViewportWithCount;
	glad_debug_vkCmdSetViewportWithCountEXT = glad_vkCmdSetViewportWithCountEXT;
	glad_debug_vkCmdSubpassShadingHUAWEI = glad_vkCmdSubpassShadingHUAWEI;
	glad_debug_vkCmdTraceRaysIndirect2KHR = glad_vkCmdTraceRaysIndirect2KHR;
	glad_debug_vkCmdTraceRaysIndirectKHR = glad_vkCmdTraceRaysIndirectKHR;
	glad_debug_vkCmdTraceRaysKHR = glad_vkCmdTraceRaysKHR;
	glad_debug_vkCmdTraceRaysNV = glad_vkCmdTraceRaysNV;
	glad_debug_vkCmdUpdateBuffer = glad_vkCmdUpdateBuffer;
	glad_debug_vkCmdUpdatePipelineIndirectBufferNV = glad_vkCmdUpdatePipelineIndirectBufferNV;
	glad_debug_vkCmdWaitEvents = glad_vkCmdWaitEvents;
	glad_debug_vkCmdWaitEvents2 = glad_vkCmdWaitEvents2;
	glad_debug_vkCmdWaitEvents2KHR = glad_vkCmdWaitEvents2KHR;
	glad_debug_vkCmdWriteAccelerationStructuresPropertiesKHR = glad_vkCmdWriteAccelerationStructuresPropertiesKHR;
	glad_debug_vkCmdWriteAccelerationStructuresPropertiesNV = glad_vkCmdWriteAccelerationStructuresPropertiesNV;
	glad_debug_vkCmdWriteBufferMarker2AMD = glad_vkCmdWriteBufferMarker2AMD;
	glad_debug_vkCmdWriteBufferMarkerAMD = glad_vkCmdWriteBufferMarkerAMD;
	glad_debug_vkCmdWriteMicromapsPropertiesEXT = glad_vkCmdWriteMicromapsPropertiesEXT;
	glad_debug_vkCmdWriteTimestamp = glad_vkCmdWriteTimestamp;
	glad_debug_vkCmdWriteTimestamp2 = glad_vkCmdWriteTimestamp2;
	glad_debug_vkCmdWriteTimestamp2KHR = glad_vkCmdWriteTimestamp2KHR;
	glad_debug_vkCompileDeferredNV = glad_vkCompileDeferredNV;
	glad_debug_vkCopyAccelerationStructureKHR = glad_vkCopyAccelerationStructureKHR;
	glad_debug_vkCopyAccelerationStructureToMemoryKHR = glad_vkCopyAccelerationStructureToMemoryKHR;
	glad_debug_vkCopyImageToImageEXT = glad_vkCopyImageToImageEXT;
	glad_debug_vkCopyImageToMemoryEXT = glad_vkCopyImageToMemoryEXT;
	glad_debug_vkCopyMemoryToAccelerationStructureKHR = glad_vkCopyMemoryToAccelerationStructureKHR;
	glad_debug_vkCopyMemoryToImageEXT = glad_vkCopyMemoryToImageEXT;
	glad_debug_vkCopyMemoryToMicromapEXT = glad_vkCopyMemoryToMicromapEXT;
	glad_debug_vkCopyMicromapEXT = glad_vkCopyMicromapEXT;
	glad_debug_vkCopyMicromapToMemoryEXT = glad_vkCopyMicromapToMemoryEXT;
	glad_debug_vkCreateAccelerationStructureKHR = glad_vkCreateAccelerationStructureKHR;
	glad_debug_vkCreateAccelerationStructureNV = glad_vkCreateAccelerationStructureNV;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	glad_debug_vkCreateAndroidSurfaceKHR = glad_vkCreateAndroidSurfaceKHR;

#endif
	glad_debug_vkCreateBuffer = glad_vkCreateBuffer;
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkCreateBufferCollectionFUCHSIA = glad_vkCreateBufferCollectionFUCHSIA;

#endif
	glad_debug_vkCreateBufferView = glad_vkCreateBufferView;
	glad_debug_vkCreateCommandPool = glad_vkCreateCommandPool;
	glad_debug_vkCreateComputePipelines = glad_vkCreateComputePipelines;
	glad_debug_vkCreateCuFunctionNVX = glad_vkCreateCuFunctionNVX;
	glad_debug_vkCreateCuModuleNVX = glad_vkCreateCuModuleNVX;
	glad_debug_vkCreateDebugReportCallbackEXT = glad_vkCreateDebugReportCallbackEXT;
	glad_debug_vkCreateDebugUtilsMessengerEXT = glad_vkCreateDebugUtilsMessengerEXT;
	glad_debug_vkCreateDeferredOperationKHR = glad_vkCreateDeferredOperationKHR;
	glad_debug_vkCreateDescriptorPool = glad_vkCreateDescriptorPool;
	glad_debug_vkCreateDescriptorSetLayout = glad_vkCreateDescriptorSetLayout;
	glad_debug_vkCreateDescriptorUpdateTemplate = glad_vkCreateDescriptorUpdateTemplate;
	glad_debug_vkCreateDescriptorUpdateTemplateKHR = glad_vkCreateDescriptorUpdateTemplateKHR;
	glad_debug_vkCreateDevice = glad_vkCreateDevice;
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	glad_debug_vkCreateDirectFBSurfaceEXT = glad_vkCreateDirectFBSurfaceEXT;

#endif
	glad_debug_vkCreateDisplayModeKHR = glad_vkCreateDisplayModeKHR;
	glad_debug_vkCreateDisplayPlaneSurfaceKHR = glad_vkCreateDisplayPlaneSurfaceKHR;
	glad_debug_vkCreateEvent = glad_vkCreateEvent;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkCreateExecutionGraphPipelinesAMDX = glad_vkCreateExecutionGraphPipelinesAMDX;

#endif
	glad_debug_vkCreateFence = glad_vkCreateFence;
	glad_debug_vkCreateFramebuffer = glad_vkCreateFramebuffer;
	glad_debug_vkCreateGraphicsPipelines = glad_vkCreateGraphicsPipelines;
	glad_debug_vkCreateHeadlessSurfaceEXT = glad_vkCreateHeadlessSurfaceEXT;
#if defined(VK_USE_PLATFORM_IOS_MVK)
	glad_debug_vkCreateIOSSurfaceMVK = glad_vkCreateIOSSurfaceMVK;

#endif
	glad_debug_vkCreateImage = glad_vkCreateImage;
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkCreateImagePipeSurfaceFUCHSIA = glad_vkCreateImagePipeSurfaceFUCHSIA;

#endif
	glad_debug_vkCreateImageView = glad_vkCreateImageView;
	glad_debug_vkCreateIndirectCommandsLayoutNV = glad_vkCreateIndirectCommandsLayoutNV;
	glad_debug_vkCreateInstance = glad_vkCreateInstance;
#if defined(VK_USE_PLATFORM_MACOS_MVK)
	glad_debug_vkCreateMacOSSurfaceMVK = glad_vkCreateMacOSSurfaceMVK;

#endif
#if defined(VK_USE_PLATFORM_METAL_EXT)
	glad_debug_vkCreateMetalSurfaceEXT = glad_vkCreateMetalSurfaceEXT;

#endif
	glad_debug_vkCreateMicromapEXT = glad_vkCreateMicromapEXT;
	glad_debug_vkCreateOpticalFlowSessionNV = glad_vkCreateOpticalFlowSessionNV;
	glad_debug_vkCreatePipelineCache = glad_vkCreatePipelineCache;
	glad_debug_vkCreatePipelineLayout = glad_vkCreatePipelineLayout;
	glad_debug_vkCreatePrivateDataSlot = glad_vkCreatePrivateDataSlot;
	glad_debug_vkCreatePrivateDataSlotEXT = glad_vkCreatePrivateDataSlotEXT;
	glad_debug_vkCreateQueryPool = glad_vkCreateQueryPool;
	glad_debug_vkCreateRayTracingPipelinesKHR = glad_vkCreateRayTracingPipelinesKHR;
	glad_debug_vkCreateRayTracingPipelinesNV = glad_vkCreateRayTracingPipelinesNV;
	glad_debug_vkCreateRenderPass = glad_vkCreateRenderPass;
	glad_debug_vkCreateRenderPass2 = glad_vkCreateRenderPass2;
	glad_debug_vkCreateRenderPass2KHR = glad_vkCreateRenderPass2KHR;
	glad_debug_vkCreateSampler = glad_vkCreateSampler;
	glad_debug_vkCreateSamplerYcbcrConversion = glad_vkCreateSamplerYcbcrConversion;
	glad_debug_vkCreateSamplerYcbcrConversionKHR = glad_vkCreateSamplerYcbcrConversionKHR;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	glad_debug_vkCreateScreenSurfaceQNX = glad_vkCreateScreenSurfaceQNX;

#endif
	glad_debug_vkCreateSemaphore = glad_vkCreateSemaphore;
	glad_debug_vkCreateShaderModule = glad_vkCreateShaderModule;
	glad_debug_vkCreateShadersEXT = glad_vkCreateShadersEXT;
	glad_debug_vkCreateSharedSwapchainsKHR = glad_vkCreateSharedSwapchainsKHR;
#if defined(VK_USE_PLATFORM_GGP)
	glad_debug_vkCreateStreamDescriptorSurfaceGGP = glad_vkCreateStreamDescriptorSurfaceGGP;

#endif
	glad_debug_vkCreateSwapchainKHR = glad_vkCreateSwapchainKHR;
	glad_debug_vkCreateValidationCacheEXT = glad_vkCreateValidationCacheEXT;
#if defined(VK_USE_PLATFORM_VI_NN)
	glad_debug_vkCreateViSurfaceNN = glad_vkCreateViSurfaceNN;

#endif
	glad_debug_vkCreateVideoSessionKHR = glad_vkCreateVideoSessionKHR;
	glad_debug_vkCreateVideoSessionParametersKHR = glad_vkCreateVideoSessionParametersKHR;
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	glad_debug_vkCreateWaylandSurfaceKHR = glad_vkCreateWaylandSurfaceKHR;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkCreateWin32SurfaceKHR = glad_vkCreateWin32SurfaceKHR;

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
	glad_debug_vkCreateXcbSurfaceKHR = glad_vkCreateXcbSurfaceKHR;

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
	glad_debug_vkCreateXlibSurfaceKHR = glad_vkCreateXlibSurfaceKHR;

#endif
	glad_debug_vkDebugMarkerSetObjectNameEXT = glad_vkDebugMarkerSetObjectNameEXT;
	glad_debug_vkDebugMarkerSetObjectTagEXT = glad_vkDebugMarkerSetObjectTagEXT;
	glad_debug_vkDebugReportMessageEXT = glad_vkDebugReportMessageEXT;
	glad_debug_vkDeferredOperationJoinKHR = glad_vkDeferredOperationJoinKHR;
	glad_debug_vkDestroyAccelerationStructureKHR = glad_vkDestroyAccelerationStructureKHR;
	glad_debug_vkDestroyAccelerationStructureNV = glad_vkDestroyAccelerationStructureNV;
	glad_debug_vkDestroyBuffer = glad_vkDestroyBuffer;
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkDestroyBufferCollectionFUCHSIA = glad_vkDestroyBufferCollectionFUCHSIA;

#endif
	glad_debug_vkDestroyBufferView = glad_vkDestroyBufferView;
	glad_debug_vkDestroyCommandPool = glad_vkDestroyCommandPool;
	glad_debug_vkDestroyCuFunctionNVX = glad_vkDestroyCuFunctionNVX;
	glad_debug_vkDestroyCuModuleNVX = glad_vkDestroyCuModuleNVX;
	glad_debug_vkDestroyDebugReportCallbackEXT = glad_vkDestroyDebugReportCallbackEXT;
	glad_debug_vkDestroyDebugUtilsMessengerEXT = glad_vkDestroyDebugUtilsMessengerEXT;
	glad_debug_vkDestroyDeferredOperationKHR = glad_vkDestroyDeferredOperationKHR;
	glad_debug_vkDestroyDescriptorPool = glad_vkDestroyDescriptorPool;
	glad_debug_vkDestroyDescriptorSetLayout = glad_vkDestroyDescriptorSetLayout;
	glad_debug_vkDestroyDescriptorUpdateTemplate = glad_vkDestroyDescriptorUpdateTemplate;
	glad_debug_vkDestroyDescriptorUpdateTemplateKHR = glad_vkDestroyDescriptorUpdateTemplateKHR;
	glad_debug_vkDestroyDevice = glad_vkDestroyDevice;
	glad_debug_vkDestroyEvent = glad_vkDestroyEvent;
	glad_debug_vkDestroyFence = glad_vkDestroyFence;
	glad_debug_vkDestroyFramebuffer = glad_vkDestroyFramebuffer;
	glad_debug_vkDestroyImage = glad_vkDestroyImage;
	glad_debug_vkDestroyImageView = glad_vkDestroyImageView;
	glad_debug_vkDestroyIndirectCommandsLayoutNV = glad_vkDestroyIndirectCommandsLayoutNV;
	glad_debug_vkDestroyInstance = glad_vkDestroyInstance;
	glad_debug_vkDestroyMicromapEXT = glad_vkDestroyMicromapEXT;
	glad_debug_vkDestroyOpticalFlowSessionNV = glad_vkDestroyOpticalFlowSessionNV;
	glad_debug_vkDestroyPipeline = glad_vkDestroyPipeline;
	glad_debug_vkDestroyPipelineCache = glad_vkDestroyPipelineCache;
	glad_debug_vkDestroyPipelineLayout = glad_vkDestroyPipelineLayout;
	glad_debug_vkDestroyPrivateDataSlot = glad_vkDestroyPrivateDataSlot;
	glad_debug_vkDestroyPrivateDataSlotEXT = glad_vkDestroyPrivateDataSlotEXT;
	glad_debug_vkDestroyQueryPool = glad_vkDestroyQueryPool;
	glad_debug_vkDestroyRenderPass = glad_vkDestroyRenderPass;
	glad_debug_vkDestroySampler = glad_vkDestroySampler;
	glad_debug_vkDestroySamplerYcbcrConversion = glad_vkDestroySamplerYcbcrConversion;
	glad_debug_vkDestroySamplerYcbcrConversionKHR = glad_vkDestroySamplerYcbcrConversionKHR;
	glad_debug_vkDestroySemaphore = glad_vkDestroySemaphore;
	glad_debug_vkDestroyShaderEXT = glad_vkDestroyShaderEXT;
	glad_debug_vkDestroyShaderModule = glad_vkDestroyShaderModule;
	glad_debug_vkDestroySurfaceKHR = glad_vkDestroySurfaceKHR;
	glad_debug_vkDestroySwapchainKHR = glad_vkDestroySwapchainKHR;
	glad_debug_vkDestroyValidationCacheEXT = glad_vkDestroyValidationCacheEXT;
	glad_debug_vkDestroyVideoSessionKHR = glad_vkDestroyVideoSessionKHR;
	glad_debug_vkDestroyVideoSessionParametersKHR = glad_vkDestroyVideoSessionParametersKHR;
	glad_debug_vkDeviceWaitIdle = glad_vkDeviceWaitIdle;
	glad_debug_vkDisplayPowerControlEXT = glad_vkDisplayPowerControlEXT;
	glad_debug_vkEndCommandBuffer = glad_vkEndCommandBuffer;
	glad_debug_vkEnumerateDeviceExtensionProperties = glad_vkEnumerateDeviceExtensionProperties;
	glad_debug_vkEnumerateDeviceLayerProperties = glad_vkEnumerateDeviceLayerProperties;
	glad_debug_vkEnumerateInstanceExtensionProperties = glad_vkEnumerateInstanceExtensionProperties;
	glad_debug_vkEnumerateInstanceLayerProperties = glad_vkEnumerateInstanceLayerProperties;
	glad_debug_vkEnumerateInstanceVersion = glad_vkEnumerateInstanceVersion;
	glad_debug_vkEnumeratePhysicalDeviceGroups = glad_vkEnumeratePhysicalDeviceGroups;
	glad_debug_vkEnumeratePhysicalDeviceGroupsKHR = glad_vkEnumeratePhysicalDeviceGroupsKHR;
	glad_debug_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = glad_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
	glad_debug_vkEnumeratePhysicalDevices = glad_vkEnumeratePhysicalDevices;
#if defined(VK_USE_PLATFORM_METAL_EXT)
	glad_debug_vkExportMetalObjectsEXT = glad_vkExportMetalObjectsEXT;

#endif
	glad_debug_vkFlushMappedMemoryRanges = glad_vkFlushMappedMemoryRanges;
	glad_debug_vkFreeCommandBuffers = glad_vkFreeCommandBuffers;
	glad_debug_vkFreeDescriptorSets = glad_vkFreeDescriptorSets;
	glad_debug_vkFreeMemory = glad_vkFreeMemory;
	glad_debug_vkGetAccelerationStructureBuildSizesKHR = glad_vkGetAccelerationStructureBuildSizesKHR;
	glad_debug_vkGetAccelerationStructureDeviceAddressKHR = glad_vkGetAccelerationStructureDeviceAddressKHR;
	glad_debug_vkGetAccelerationStructureHandleNV = glad_vkGetAccelerationStructureHandleNV;
	glad_debug_vkGetAccelerationStructureMemoryRequirementsNV = glad_vkGetAccelerationStructureMemoryRequirementsNV;
	glad_debug_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = glad_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	glad_debug_vkGetAndroidHardwareBufferPropertiesANDROID = glad_vkGetAndroidHardwareBufferPropertiesANDROID;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkGetBufferCollectionPropertiesFUCHSIA = glad_vkGetBufferCollectionPropertiesFUCHSIA;

#endif
	glad_debug_vkGetBufferDeviceAddress = glad_vkGetBufferDeviceAddress;
	glad_debug_vkGetBufferDeviceAddressEXT = glad_vkGetBufferDeviceAddressEXT;
	glad_debug_vkGetBufferDeviceAddressKHR = glad_vkGetBufferDeviceAddressKHR;
	glad_debug_vkGetBufferMemoryRequirements = glad_vkGetBufferMemoryRequirements;
	glad_debug_vkGetBufferMemoryRequirements2 = glad_vkGetBufferMemoryRequirements2;
	glad_debug_vkGetBufferMemoryRequirements2KHR = glad_vkGetBufferMemoryRequirements2KHR;
	glad_debug_vkGetBufferOpaqueCaptureAddress = glad_vkGetBufferOpaqueCaptureAddress;
	glad_debug_vkGetBufferOpaqueCaptureAddressKHR = glad_vkGetBufferOpaqueCaptureAddressKHR;
	glad_debug_vkGetBufferOpaqueCaptureDescriptorDataEXT = glad_vkGetBufferOpaqueCaptureDescriptorDataEXT;
	glad_debug_vkGetCalibratedTimestampsEXT = glad_vkGetCalibratedTimestampsEXT;
	glad_debug_vkGetDeferredOperationMaxConcurrencyKHR = glad_vkGetDeferredOperationMaxConcurrencyKHR;
	glad_debug_vkGetDeferredOperationResultKHR = glad_vkGetDeferredOperationResultKHR;
	glad_debug_vkGetDescriptorEXT = glad_vkGetDescriptorEXT;
	glad_debug_vkGetDescriptorSetHostMappingVALVE = glad_vkGetDescriptorSetHostMappingVALVE;
	glad_debug_vkGetDescriptorSetLayoutBindingOffsetEXT = glad_vkGetDescriptorSetLayoutBindingOffsetEXT;
	glad_debug_vkGetDescriptorSetLayoutHostMappingInfoVALVE = glad_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
	glad_debug_vkGetDescriptorSetLayoutSizeEXT = glad_vkGetDescriptorSetLayoutSizeEXT;
	glad_debug_vkGetDescriptorSetLayoutSupport = glad_vkGetDescriptorSetLayoutSupport;
	glad_debug_vkGetDescriptorSetLayoutSupportKHR = glad_vkGetDescriptorSetLayoutSupportKHR;
	glad_debug_vkGetDeviceAccelerationStructureCompatibilityKHR = glad_vkGetDeviceAccelerationStructureCompatibilityKHR;
	glad_debug_vkGetDeviceBufferMemoryRequirements = glad_vkGetDeviceBufferMemoryRequirements;
	glad_debug_vkGetDeviceBufferMemoryRequirementsKHR = glad_vkGetDeviceBufferMemoryRequirementsKHR;
	glad_debug_vkGetDeviceFaultInfoEXT = glad_vkGetDeviceFaultInfoEXT;
	glad_debug_vkGetDeviceGroupPeerMemoryFeatures = glad_vkGetDeviceGroupPeerMemoryFeatures;
	glad_debug_vkGetDeviceGroupPeerMemoryFeaturesKHR = glad_vkGetDeviceGroupPeerMemoryFeaturesKHR;
	glad_debug_vkGetDeviceGroupPresentCapabilitiesKHR = glad_vkGetDeviceGroupPresentCapabilitiesKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetDeviceGroupSurfacePresentModes2EXT = glad_vkGetDeviceGroupSurfacePresentModes2EXT;

#endif
	glad_debug_vkGetDeviceGroupSurfacePresentModesKHR = glad_vkGetDeviceGroupSurfacePresentModesKHR;
	glad_debug_vkGetDeviceImageMemoryRequirements = glad_vkGetDeviceImageMemoryRequirements;
	glad_debug_vkGetDeviceImageMemoryRequirementsKHR = glad_vkGetDeviceImageMemoryRequirementsKHR;
	glad_debug_vkGetDeviceImageSparseMemoryRequirements = glad_vkGetDeviceImageSparseMemoryRequirements;
	glad_debug_vkGetDeviceImageSparseMemoryRequirementsKHR = glad_vkGetDeviceImageSparseMemoryRequirementsKHR;
	glad_debug_vkGetDeviceImageSubresourceLayoutKHR = glad_vkGetDeviceImageSubresourceLayoutKHR;
	glad_debug_vkGetDeviceMemoryCommitment = glad_vkGetDeviceMemoryCommitment;
	glad_debug_vkGetDeviceMemoryOpaqueCaptureAddress = glad_vkGetDeviceMemoryOpaqueCaptureAddress;
	glad_debug_vkGetDeviceMemoryOpaqueCaptureAddressKHR = glad_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
	glad_debug_vkGetDeviceMicromapCompatibilityEXT = glad_vkGetDeviceMicromapCompatibilityEXT;
	glad_debug_vkGetDeviceProcAddr = glad_vkGetDeviceProcAddr;
	glad_debug_vkGetDeviceQueue = glad_vkGetDeviceQueue;
	glad_debug_vkGetDeviceQueue2 = glad_vkGetDeviceQueue2;
	glad_debug_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = glad_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
	glad_debug_vkGetDisplayModeProperties2KHR = glad_vkGetDisplayModeProperties2KHR;
	glad_debug_vkGetDisplayModePropertiesKHR = glad_vkGetDisplayModePropertiesKHR;
	glad_debug_vkGetDisplayPlaneCapabilities2KHR = glad_vkGetDisplayPlaneCapabilities2KHR;
	glad_debug_vkGetDisplayPlaneCapabilitiesKHR = glad_vkGetDisplayPlaneCapabilitiesKHR;
	glad_debug_vkGetDisplayPlaneSupportedDisplaysKHR = glad_vkGetDisplayPlaneSupportedDisplaysKHR;
	glad_debug_vkGetDrmDisplayEXT = glad_vkGetDrmDisplayEXT;
	glad_debug_vkGetDynamicRenderingTilePropertiesQCOM = glad_vkGetDynamicRenderingTilePropertiesQCOM;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkGetEncodedVideoSessionParametersKHR = glad_vkGetEncodedVideoSessionParametersKHR;

#endif
	glad_debug_vkGetEventStatus = glad_vkGetEventStatus;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkGetExecutionGraphPipelineNodeIndexAMDX = glad_vkGetExecutionGraphPipelineNodeIndexAMDX;

#endif
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkGetExecutionGraphPipelineScratchSizeAMDX = glad_vkGetExecutionGraphPipelineScratchSizeAMDX;

#endif
	glad_debug_vkGetFenceFdKHR = glad_vkGetFenceFdKHR;
	glad_debug_vkGetFenceStatus = glad_vkGetFenceStatus;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetFenceWin32HandleKHR = glad_vkGetFenceWin32HandleKHR;

#endif
	glad_debug_vkGetFramebufferTilePropertiesQCOM = glad_vkGetFramebufferTilePropertiesQCOM;
	glad_debug_vkGetGeneratedCommandsMemoryRequirementsNV = glad_vkGetGeneratedCommandsMemoryRequirementsNV;
	glad_debug_vkGetImageDrmFormatModifierPropertiesEXT = glad_vkGetImageDrmFormatModifierPropertiesEXT;
	glad_debug_vkGetImageMemoryRequirements = glad_vkGetImageMemoryRequirements;
	glad_debug_vkGetImageMemoryRequirements2 = glad_vkGetImageMemoryRequirements2;
	glad_debug_vkGetImageMemoryRequirements2KHR = glad_vkGetImageMemoryRequirements2KHR;
	glad_debug_vkGetImageOpaqueCaptureDescriptorDataEXT = glad_vkGetImageOpaqueCaptureDescriptorDataEXT;
	glad_debug_vkGetImageSparseMemoryRequirements = glad_vkGetImageSparseMemoryRequirements;
	glad_debug_vkGetImageSparseMemoryRequirements2 = glad_vkGetImageSparseMemoryRequirements2;
	glad_debug_vkGetImageSparseMemoryRequirements2KHR = glad_vkGetImageSparseMemoryRequirements2KHR;
	glad_debug_vkGetImageSubresourceLayout = glad_vkGetImageSubresourceLayout;
	glad_debug_vkGetImageSubresourceLayout2EXT = glad_vkGetImageSubresourceLayout2EXT;
	glad_debug_vkGetImageSubresourceLayout2KHR = glad_vkGetImageSubresourceLayout2KHR;
	glad_debug_vkGetImageViewAddressNVX = glad_vkGetImageViewAddressNVX;
	glad_debug_vkGetImageViewHandleNVX = glad_vkGetImageViewHandleNVX;
	glad_debug_vkGetImageViewOpaqueCaptureDescriptorDataEXT = glad_vkGetImageViewOpaqueCaptureDescriptorDataEXT;
	glad_debug_vkGetInstanceProcAddr = glad_vkGetInstanceProcAddr;
	glad_debug_vkGetLatencyTimingsNV = glad_vkGetLatencyTimingsNV;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
	glad_debug_vkGetMemoryAndroidHardwareBufferANDROID = glad_vkGetMemoryAndroidHardwareBufferANDROID;

#endif
	glad_debug_vkGetMemoryFdKHR = glad_vkGetMemoryFdKHR;
	glad_debug_vkGetMemoryFdPropertiesKHR = glad_vkGetMemoryFdPropertiesKHR;
	glad_debug_vkGetMemoryHostPointerPropertiesEXT = glad_vkGetMemoryHostPointerPropertiesEXT;
	glad_debug_vkGetMemoryRemoteAddressNV = glad_vkGetMemoryRemoteAddressNV;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetMemoryWin32HandleKHR = glad_vkGetMemoryWin32HandleKHR;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetMemoryWin32HandleNV = glad_vkGetMemoryWin32HandleNV;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetMemoryWin32HandlePropertiesKHR = glad_vkGetMemoryWin32HandlePropertiesKHR;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkGetMemoryZirconHandleFUCHSIA = glad_vkGetMemoryZirconHandleFUCHSIA;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkGetMemoryZirconHandlePropertiesFUCHSIA = glad_vkGetMemoryZirconHandlePropertiesFUCHSIA;

#endif
	glad_debug_vkGetMicromapBuildSizesEXT = glad_vkGetMicromapBuildSizesEXT;
	glad_debug_vkGetPastPresentationTimingGOOGLE = glad_vkGetPastPresentationTimingGOOGLE;
	glad_debug_vkGetPerformanceParameterINTEL = glad_vkGetPerformanceParameterINTEL;
	glad_debug_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = glad_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
	glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
	glad_debug_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = glad_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
	glad_debug_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = glad_vkGetPhysicalDeviceDirectFBPresentationSupportEXT;

#endif
	glad_debug_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = glad_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
	glad_debug_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = glad_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
	glad_debug_vkGetPhysicalDeviceDisplayProperties2KHR = glad_vkGetPhysicalDeviceDisplayProperties2KHR;
	glad_debug_vkGetPhysicalDeviceDisplayPropertiesKHR = glad_vkGetPhysicalDeviceDisplayPropertiesKHR;
	glad_debug_vkGetPhysicalDeviceExternalBufferProperties = glad_vkGetPhysicalDeviceExternalBufferProperties;
	glad_debug_vkGetPhysicalDeviceExternalBufferPropertiesKHR = glad_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
	glad_debug_vkGetPhysicalDeviceExternalFenceProperties = glad_vkGetPhysicalDeviceExternalFenceProperties;
	glad_debug_vkGetPhysicalDeviceExternalFencePropertiesKHR = glad_vkGetPhysicalDeviceExternalFencePropertiesKHR;
	glad_debug_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = glad_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
	glad_debug_vkGetPhysicalDeviceExternalSemaphoreProperties = glad_vkGetPhysicalDeviceExternalSemaphoreProperties;
	glad_debug_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = glad_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
	glad_debug_vkGetPhysicalDeviceFeatures = glad_vkGetPhysicalDeviceFeatures;
	glad_debug_vkGetPhysicalDeviceFeatures2 = glad_vkGetPhysicalDeviceFeatures2;
	glad_debug_vkGetPhysicalDeviceFeatures2KHR = glad_vkGetPhysicalDeviceFeatures2KHR;
	glad_debug_vkGetPhysicalDeviceFormatProperties = glad_vkGetPhysicalDeviceFormatProperties;
	glad_debug_vkGetPhysicalDeviceFormatProperties2 = glad_vkGetPhysicalDeviceFormatProperties2;
	glad_debug_vkGetPhysicalDeviceFormatProperties2KHR = glad_vkGetPhysicalDeviceFormatProperties2KHR;
	glad_debug_vkGetPhysicalDeviceFragmentShadingRatesKHR = glad_vkGetPhysicalDeviceFragmentShadingRatesKHR;
	glad_debug_vkGetPhysicalDeviceImageFormatProperties = glad_vkGetPhysicalDeviceImageFormatProperties;
	glad_debug_vkGetPhysicalDeviceImageFormatProperties2 = glad_vkGetPhysicalDeviceImageFormatProperties2;
	glad_debug_vkGetPhysicalDeviceImageFormatProperties2KHR = glad_vkGetPhysicalDeviceImageFormatProperties2KHR;
	glad_debug_vkGetPhysicalDeviceMemoryProperties = glad_vkGetPhysicalDeviceMemoryProperties;
	glad_debug_vkGetPhysicalDeviceMemoryProperties2 = glad_vkGetPhysicalDeviceMemoryProperties2;
	glad_debug_vkGetPhysicalDeviceMemoryProperties2KHR = glad_vkGetPhysicalDeviceMemoryProperties2KHR;
	glad_debug_vkGetPhysicalDeviceMultisamplePropertiesEXT = glad_vkGetPhysicalDeviceMultisamplePropertiesEXT;
	glad_debug_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = glad_vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
	glad_debug_vkGetPhysicalDevicePresentRectanglesKHR = glad_vkGetPhysicalDevicePresentRectanglesKHR;
	glad_debug_vkGetPhysicalDeviceProperties = glad_vkGetPhysicalDeviceProperties;
	glad_debug_vkGetPhysicalDeviceProperties2 = glad_vkGetPhysicalDeviceProperties2;
	glad_debug_vkGetPhysicalDeviceProperties2KHR = glad_vkGetPhysicalDeviceProperties2KHR;
	glad_debug_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = glad_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
	glad_debug_vkGetPhysicalDeviceQueueFamilyProperties = glad_vkGetPhysicalDeviceQueueFamilyProperties;
	glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2 = glad_vkGetPhysicalDeviceQueueFamilyProperties2;
	glad_debug_vkGetPhysicalDeviceQueueFamilyProperties2KHR = glad_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	glad_debug_vkGetPhysicalDeviceScreenPresentationSupportQNX = glad_vkGetPhysicalDeviceScreenPresentationSupportQNX;

#endif
	glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties = glad_vkGetPhysicalDeviceSparseImageFormatProperties;
	glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2 = glad_vkGetPhysicalDeviceSparseImageFormatProperties2;
	glad_debug_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = glad_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
	glad_debug_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = glad_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
	glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2EXT = glad_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
	glad_debug_vkGetPhysicalDeviceSurfaceCapabilities2KHR = glad_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
	glad_debug_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = glad_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
	glad_debug_vkGetPhysicalDeviceSurfaceFormats2KHR = glad_vkGetPhysicalDeviceSurfaceFormats2KHR;
	glad_debug_vkGetPhysicalDeviceSurfaceFormatsKHR = glad_vkGetPhysicalDeviceSurfaceFormatsKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetPhysicalDeviceSurfacePresentModes2EXT = glad_vkGetPhysicalDeviceSurfacePresentModes2EXT;

#endif
	glad_debug_vkGetPhysicalDeviceSurfacePresentModesKHR = glad_vkGetPhysicalDeviceSurfacePresentModesKHR;
	glad_debug_vkGetPhysicalDeviceSurfaceSupportKHR = glad_vkGetPhysicalDeviceSurfaceSupportKHR;
	glad_debug_vkGetPhysicalDeviceToolProperties = glad_vkGetPhysicalDeviceToolProperties;
	glad_debug_vkGetPhysicalDeviceToolPropertiesEXT = glad_vkGetPhysicalDeviceToolPropertiesEXT;
	glad_debug_vkGetPhysicalDeviceVideoCapabilitiesKHR = glad_vkGetPhysicalDeviceVideoCapabilitiesKHR;
#if defined(VK_ENABLE_BETA_EXTENSIONS)
	glad_debug_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = glad_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;

#endif
	glad_debug_vkGetPhysicalDeviceVideoFormatPropertiesKHR = glad_vkGetPhysicalDeviceVideoFormatPropertiesKHR;
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
	glad_debug_vkGetPhysicalDeviceWaylandPresentationSupportKHR = glad_vkGetPhysicalDeviceWaylandPresentationSupportKHR;

#endif
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetPhysicalDeviceWin32PresentationSupportKHR = glad_vkGetPhysicalDeviceWin32PresentationSupportKHR;

#endif
#if defined(VK_USE_PLATFORM_XCB_KHR)
	glad_debug_vkGetPhysicalDeviceXcbPresentationSupportKHR = glad_vkGetPhysicalDeviceXcbPresentationSupportKHR;

#endif
#if defined(VK_USE_PLATFORM_XLIB_KHR)
	glad_debug_vkGetPhysicalDeviceXlibPresentationSupportKHR = glad_vkGetPhysicalDeviceXlibPresentationSupportKHR;

#endif
	glad_debug_vkGetPipelineCacheData = glad_vkGetPipelineCacheData;
	glad_debug_vkGetPipelineExecutableInternalRepresentationsKHR = glad_vkGetPipelineExecutableInternalRepresentationsKHR;
	glad_debug_vkGetPipelineExecutablePropertiesKHR = glad_vkGetPipelineExecutablePropertiesKHR;
	glad_debug_vkGetPipelineExecutableStatisticsKHR = glad_vkGetPipelineExecutableStatisticsKHR;
	glad_debug_vkGetPipelineIndirectDeviceAddressNV = glad_vkGetPipelineIndirectDeviceAddressNV;
	glad_debug_vkGetPipelineIndirectMemoryRequirementsNV = glad_vkGetPipelineIndirectMemoryRequirementsNV;
	glad_debug_vkGetPipelinePropertiesEXT = glad_vkGetPipelinePropertiesEXT;
	glad_debug_vkGetPrivateData = glad_vkGetPrivateData;
	glad_debug_vkGetPrivateDataEXT = glad_vkGetPrivateDataEXT;
	glad_debug_vkGetQueryPoolResults = glad_vkGetQueryPoolResults;
	glad_debug_vkGetQueueCheckpointData2NV = glad_vkGetQueueCheckpointData2NV;
	glad_debug_vkGetQueueCheckpointDataNV = glad_vkGetQueueCheckpointDataNV;
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
	glad_debug_vkGetRandROutputDisplayEXT = glad_vkGetRandROutputDisplayEXT;

#endif
	glad_debug_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = glad_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
	glad_debug_vkGetRayTracingShaderGroupHandlesKHR = glad_vkGetRayTracingShaderGroupHandlesKHR;
	glad_debug_vkGetRayTracingShaderGroupHandlesNV = glad_vkGetRayTracingShaderGroupHandlesNV;
	glad_debug_vkGetRayTracingShaderGroupStackSizeKHR = glad_vkGetRayTracingShaderGroupStackSizeKHR;
	glad_debug_vkGetRefreshCycleDurationGOOGLE = glad_vkGetRefreshCycleDurationGOOGLE;
	glad_debug_vkGetRenderAreaGranularity = glad_vkGetRenderAreaGranularity;
	glad_debug_vkGetRenderingAreaGranularityKHR = glad_vkGetRenderingAreaGranularityKHR;
	glad_debug_vkGetSamplerOpaqueCaptureDescriptorDataEXT = glad_vkGetSamplerOpaqueCaptureDescriptorDataEXT;
#if defined(VK_USE_PLATFORM_SCREEN_QNX)
	glad_debug_vkGetScreenBufferPropertiesQNX = glad_vkGetScreenBufferPropertiesQNX;

#endif
	glad_debug_vkGetSemaphoreCounterValue = glad_vkGetSemaphoreCounterValue;
	glad_debug_vkGetSemaphoreCounterValueKHR = glad_vkGetSemaphoreCounterValueKHR;
	glad_debug_vkGetSemaphoreFdKHR = glad_vkGetSemaphoreFdKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetSemaphoreWin32HandleKHR = glad_vkGetSemaphoreWin32HandleKHR;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkGetSemaphoreZirconHandleFUCHSIA = glad_vkGetSemaphoreZirconHandleFUCHSIA;

#endif
	glad_debug_vkGetShaderBinaryDataEXT = glad_vkGetShaderBinaryDataEXT;
	glad_debug_vkGetShaderInfoAMD = glad_vkGetShaderInfoAMD;
	glad_debug_vkGetShaderModuleCreateInfoIdentifierEXT = glad_vkGetShaderModuleCreateInfoIdentifierEXT;
	glad_debug_vkGetShaderModuleIdentifierEXT = glad_vkGetShaderModuleIdentifierEXT;
	glad_debug_vkGetSwapchainCounterEXT = glad_vkGetSwapchainCounterEXT;
	glad_debug_vkGetSwapchainImagesKHR = glad_vkGetSwapchainImagesKHR;
	glad_debug_vkGetSwapchainStatusKHR = glad_vkGetSwapchainStatusKHR;
	glad_debug_vkGetValidationCacheDataEXT = glad_vkGetValidationCacheDataEXT;
	glad_debug_vkGetVideoSessionMemoryRequirementsKHR = glad_vkGetVideoSessionMemoryRequirementsKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkGetWinrtDisplayNV = glad_vkGetWinrtDisplayNV;

#endif
	glad_debug_vkImportFenceFdKHR = glad_vkImportFenceFdKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkImportFenceWin32HandleKHR = glad_vkImportFenceWin32HandleKHR;

#endif
	glad_debug_vkImportSemaphoreFdKHR = glad_vkImportSemaphoreFdKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkImportSemaphoreWin32HandleKHR = glad_vkImportSemaphoreWin32HandleKHR;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkImportSemaphoreZirconHandleFUCHSIA = glad_vkImportSemaphoreZirconHandleFUCHSIA;

#endif
	glad_debug_vkInitializePerformanceApiINTEL = glad_vkInitializePerformanceApiINTEL;
	glad_debug_vkInvalidateMappedMemoryRanges = glad_vkInvalidateMappedMemoryRanges;
	glad_debug_vkLatencySleepNV = glad_vkLatencySleepNV;
	glad_debug_vkMapMemory = glad_vkMapMemory;
	glad_debug_vkMapMemory2KHR = glad_vkMapMemory2KHR;
	glad_debug_vkMergePipelineCaches = glad_vkMergePipelineCaches;
	glad_debug_vkMergeValidationCachesEXT = glad_vkMergeValidationCachesEXT;
	glad_debug_vkQueueBeginDebugUtilsLabelEXT = glad_vkQueueBeginDebugUtilsLabelEXT;
	glad_debug_vkQueueBindSparse = glad_vkQueueBindSparse;
	glad_debug_vkQueueEndDebugUtilsLabelEXT = glad_vkQueueEndDebugUtilsLabelEXT;
	glad_debug_vkQueueInsertDebugUtilsLabelEXT = glad_vkQueueInsertDebugUtilsLabelEXT;
	glad_debug_vkQueueNotifyOutOfBandNV = glad_vkQueueNotifyOutOfBandNV;
	glad_debug_vkQueuePresentKHR = glad_vkQueuePresentKHR;
	glad_debug_vkQueueSetPerformanceConfigurationINTEL = glad_vkQueueSetPerformanceConfigurationINTEL;
	glad_debug_vkQueueSubmit = glad_vkQueueSubmit;
	glad_debug_vkQueueSubmit2 = glad_vkQueueSubmit2;
	glad_debug_vkQueueSubmit2KHR = glad_vkQueueSubmit2KHR;
	glad_debug_vkQueueWaitIdle = glad_vkQueueWaitIdle;
	glad_debug_vkRegisterDeviceEventEXT = glad_vkRegisterDeviceEventEXT;
	glad_debug_vkRegisterDisplayEventEXT = glad_vkRegisterDisplayEventEXT;
	glad_debug_vkReleaseDisplayEXT = glad_vkReleaseDisplayEXT;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
	glad_debug_vkReleaseFullScreenExclusiveModeEXT = glad_vkReleaseFullScreenExclusiveModeEXT;

#endif
	glad_debug_vkReleasePerformanceConfigurationINTEL = glad_vkReleasePerformanceConfigurationINTEL;
	glad_debug_vkReleaseProfilingLockKHR = glad_vkReleaseProfilingLockKHR;
	glad_debug_vkReleaseSwapchainImagesEXT = glad_vkReleaseSwapchainImagesEXT;
	glad_debug_vkResetCommandBuffer = glad_vkResetCommandBuffer;
	glad_debug_vkResetCommandPool = glad_vkResetCommandPool;
	glad_debug_vkResetDescriptorPool = glad_vkResetDescriptorPool;
	glad_debug_vkResetEvent = glad_vkResetEvent;
	glad_debug_vkResetFences = glad_vkResetFences;
	glad_debug_vkResetQueryPool = glad_vkResetQueryPool;
	glad_debug_vkResetQueryPoolEXT = glad_vkResetQueryPoolEXT;
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkSetBufferCollectionBufferConstraintsFUCHSIA = glad_vkSetBufferCollectionBufferConstraintsFUCHSIA;

#endif
#if defined(VK_USE_PLATFORM_FUCHSIA)
	glad_debug_vkSetBufferCollectionImageConstraintsFUCHSIA = glad_vkSetBufferCollectionImageConstraintsFUCHSIA;

#endif
	glad_debug_vkSetDebugUtilsObjectNameEXT = glad_vkSetDebugUtilsObjectNameEXT;
	glad_debug_vkSetDebugUtilsObjectTagEXT = glad_vkSetDebugUtilsObjectTagEXT;
	glad_debug_vkSetDeviceMemoryPriorityEXT = glad_vkSetDeviceMemoryPriorityEXT;
	glad_debug_vkSetEvent = glad_vkSetEvent;
	glad_debug_vkSetHdrMetadataEXT = glad_vkSetHdrMetadataEXT;
	glad_debug_vkSetLatencyMarkerNV = glad_vkSetLatencyMarkerNV;
	glad_debug_vkSetLatencySleepModeNV = glad_vkSetLatencySleepModeNV;
	glad_debug_vkSetLocalDimmingAMD = glad_vkSetLocalDimmingAMD;
	glad_debug_vkSetPrivateData = glad_vkSetPrivateData;
	glad_debug_vkSetPrivateDataEXT = glad_vkSetPrivateDataEXT;
	glad_debug_vkSignalSemaphore = glad_vkSignalSemaphore;
	glad_debug_vkSignalSemaphoreKHR = glad_vkSignalSemaphoreKHR;
	glad_debug_vkSubmitDebugUtilsMessageEXT = glad_vkSubmitDebugUtilsMessageEXT;
	glad_debug_vkTransitionImageLayoutEXT = glad_vkTransitionImageLayoutEXT;
	glad_debug_vkTrimCommandPool = glad_vkTrimCommandPool;
	glad_debug_vkTrimCommandPoolKHR = glad_vkTrimCommandPoolKHR;
	glad_debug_vkUninitializePerformanceApiINTEL = glad_vkUninitializePerformanceApiINTEL;
	glad_debug_vkUnmapMemory = glad_vkUnmapMemory;
	glad_debug_vkUnmapMemory2KHR = glad_vkUnmapMemory2KHR;
	glad_debug_vkUpdateDescriptorSetWithTemplate = glad_vkUpdateDescriptorSetWithTemplate;
	glad_debug_vkUpdateDescriptorSetWithTemplateKHR = glad_vkUpdateDescriptorSetWithTemplateKHR;
	glad_debug_vkUpdateDescriptorSets = glad_vkUpdateDescriptorSets;
	glad_debug_vkUpdateVideoSessionParametersKHR = glad_vkUpdateVideoSessionParametersKHR;
	glad_debug_vkWaitForFences = glad_vkWaitForFences;
	glad_debug_vkWaitForPresentKHR = glad_vkWaitForPresentKHR;
	glad_debug_vkWaitSemaphores = glad_vkWaitSemaphores;
	glad_debug_vkWaitSemaphoresKHR = glad_vkWaitSemaphoresKHR;
	glad_debug_vkWriteAccelerationStructuresPropertiesKHR = glad_vkWriteAccelerationStructuresPropertiesKHR;
	glad_debug_vkWriteMicromapsPropertiesEXT = glad_vkWriteMicromapsPropertiesEXT;
}

#ifdef GLAD_VULKAN

	#ifndef GLAD_LOADER_LIBRARY_C_
		#define GLAD_LOADER_LIBRARY_C_

		#include <stddef.h>
		#include <stdlib.h>

		#if GLAD_PLATFORM_WIN32
			#include <windows.h>
		#else
			#include <dlfcn.h>
		#endif


static void *glad_get_dlopen_handle(const char *lib_names[], int length) {
	void *handle = NULL;
	int   i;

	for (i = 0; i < length; ++i) {
		#if GLAD_PLATFORM_WIN32
			#if GLAD_PLATFORM_UWP
		size_t buffer_size = (strlen(lib_names[i]) + 1) * sizeof(WCHAR);
		LPWSTR buffer = (LPWSTR)malloc(buffer_size);
		if (buffer != NULL) {
			int ret = MultiByteToWideChar(CP_ACP, 0, lib_names[i], -1, buffer, buffer_size);
			if (ret != 0) {
				handle = (void *)LoadPackagedLibrary(buffer, 0);
			}
			free((void *)buffer);
		}
			#else
		handle = (void *)LoadLibraryA(lib_names[i]);
			#endif
		#else
		handle = dlopen(lib_names[i], RTLD_LAZY | RTLD_LOCAL);
		#endif
		if (handle != NULL) {
			return handle;
		}
	}

	return NULL;
}

static void glad_close_dlopen_handle(void *handle) {
	if (handle != NULL) {
		#if GLAD_PLATFORM_WIN32
		FreeLibrary((HMODULE)handle);
		#else
		dlclose(handle);
		#endif
	}
}

static GLADapiproc glad_dlsym_handle(void *handle, const char *name) {
	if (handle == NULL) {
		return NULL;
	}

		#if GLAD_PLATFORM_WIN32
	return (GLADapiproc)GetProcAddress((HMODULE)handle, name);
		#else
	return GLAD_GNUC_EXTENSION(GLADapiproc) dlsym(handle, name);
		#endif
}

	#endif /* GLAD_LOADER_LIBRARY_C_ */


static const char *DEVICE_FUNCTIONS[] = {
	"vkAcquireFullScreenExclusiveModeEXT",
	"vkAcquireNextImage2KHR",
	"vkAcquireNextImageKHR",
	"vkAcquirePerformanceConfigurationINTEL",
	"vkAcquireProfilingLockKHR",
	"vkAllocateCommandBuffers",
	"vkAllocateDescriptorSets",
	"vkAllocateMemory",
	"vkBeginCommandBuffer",
	"vkBindAccelerationStructureMemoryNV",
	"vkBindBufferMemory",
	"vkBindBufferMemory2",
	"vkBindBufferMemory2KHR",
	"vkBindImageMemory",
	"vkBindImageMemory2",
	"vkBindImageMemory2KHR",
	"vkBindOpticalFlowSessionImageNV",
	"vkBindVideoSessionMemoryKHR",
	"vkBuildAccelerationStructuresKHR",
	"vkBuildMicromapsEXT",
	"vkCmdBeginConditionalRenderingEXT",
	"vkCmdBeginDebugUtilsLabelEXT",
	"vkCmdBeginQuery",
	"vkCmdBeginQueryIndexedEXT",
	"vkCmdBeginRenderPass",
	"vkCmdBeginRenderPass2",
	"vkCmdBeginRenderPass2KHR",
	"vkCmdBeginRendering",
	"vkCmdBeginRenderingKHR",
	"vkCmdBeginTransformFeedbackEXT",
	"vkCmdBeginVideoCodingKHR",
	"vkCmdBindDescriptorBufferEmbeddedSamplersEXT",
	"vkCmdBindDescriptorBuffersEXT",
	"vkCmdBindDescriptorSets",
	"vkCmdBindIndexBuffer",
	"vkCmdBindIndexBuffer2KHR",
	"vkCmdBindInvocationMaskHUAWEI",
	"vkCmdBindPipeline",
	"vkCmdBindPipelineShaderGroupNV",
	"vkCmdBindShadersEXT",
	"vkCmdBindShadingRateImageNV",
	"vkCmdBindTransformFeedbackBuffersEXT",
	"vkCmdBindVertexBuffers",
	"vkCmdBindVertexBuffers2",
	"vkCmdBindVertexBuffers2EXT",
	"vkCmdBlitImage",
	"vkCmdBlitImage2",
	"vkCmdBlitImage2KHR",
	"vkCmdBuildAccelerationStructureNV",
	"vkCmdBuildAccelerationStructuresIndirectKHR",
	"vkCmdBuildAccelerationStructuresKHR",
	"vkCmdBuildMicromapsEXT",
	"vkCmdClearAttachments",
	"vkCmdClearColorImage",
	"vkCmdClearDepthStencilImage",
	"vkCmdControlVideoCodingKHR",
	"vkCmdCopyAccelerationStructureKHR",
	"vkCmdCopyAccelerationStructureNV",
	"vkCmdCopyAccelerationStructureToMemoryKHR",
	"vkCmdCopyBuffer",
	"vkCmdCopyBuffer2",
	"vkCmdCopyBuffer2KHR",
	"vkCmdCopyBufferToImage",
	"vkCmdCopyBufferToImage2",
	"vkCmdCopyBufferToImage2KHR",
	"vkCmdCopyImage",
	"vkCmdCopyImage2",
	"vkCmdCopyImage2KHR",
	"vkCmdCopyImageToBuffer",
	"vkCmdCopyImageToBuffer2",
	"vkCmdCopyImageToBuffer2KHR",
	"vkCmdCopyMemoryIndirectNV",
	"vkCmdCopyMemoryToAccelerationStructureKHR",
	"vkCmdCopyMemoryToImageIndirectNV",
	"vkCmdCopyMemoryToMicromapEXT",
	"vkCmdCopyMicromapEXT",
	"vkCmdCopyMicromapToMemoryEXT",
	"vkCmdCopyQueryPoolResults",
	"vkCmdCuLaunchKernelNVX",
	"vkCmdDebugMarkerBeginEXT",
	"vkCmdDebugMarkerEndEXT",
	"vkCmdDebugMarkerInsertEXT",
	"vkCmdDecodeVideoKHR",
	"vkCmdDecompressMemoryIndirectCountNV",
	"vkCmdDecompressMemoryNV",
	"vkCmdDispatch",
	"vkCmdDispatchBase",
	"vkCmdDispatchBaseKHR",
	"vkCmdDispatchGraphAMDX",
	"vkCmdDispatchGraphIndirectAMDX",
	"vkCmdDispatchGraphIndirectCountAMDX",
	"vkCmdDispatchIndirect",
	"vkCmdDraw",
	"vkCmdDrawClusterHUAWEI",
	"vkCmdDrawClusterIndirectHUAWEI",
	"vkCmdDrawIndexed",
	"vkCmdDrawIndexedIndirect",
	"vkCmdDrawIndexedIndirectCount",
	"vkCmdDrawIndexedIndirectCountAMD",
	"vkCmdDrawIndexedIndirectCountKHR",
	"vkCmdDrawIndirect",
	"vkCmdDrawIndirectByteCountEXT",
	"vkCmdDrawIndirectCount",
	"vkCmdDrawIndirectCountAMD",
	"vkCmdDrawIndirectCountKHR",
	"vkCmdDrawMeshTasksEXT",
	"vkCmdDrawMeshTasksIndirectCountEXT",
	"vkCmdDrawMeshTasksIndirectCountNV",
	"vkCmdDrawMeshTasksIndirectEXT",
	"vkCmdDrawMeshTasksIndirectNV",
	"vkCmdDrawMeshTasksNV",
	"vkCmdDrawMultiEXT",
	"vkCmdDrawMultiIndexedEXT",
	"vkCmdEncodeVideoKHR",
	"vkCmdEndConditionalRenderingEXT",
	"vkCmdEndDebugUtilsLabelEXT",
	"vkCmdEndQuery",
	"vkCmdEndQueryIndexedEXT",
	"vkCmdEndRenderPass",
	"vkCmdEndRenderPass2",
	"vkCmdEndRenderPass2KHR",
	"vkCmdEndRendering",
	"vkCmdEndRenderingKHR",
	"vkCmdEndTransformFeedbackEXT",
	"vkCmdEndVideoCodingKHR",
	"vkCmdExecuteCommands",
	"vkCmdExecuteGeneratedCommandsNV",
	"vkCmdFillBuffer",
	"vkCmdInitializeGraphScratchMemoryAMDX",
	"vkCmdInsertDebugUtilsLabelEXT",
	"vkCmdNextSubpass",
	"vkCmdNextSubpass2",
	"vkCmdNextSubpass2KHR",
	"vkCmdOpticalFlowExecuteNV",
	"vkCmdPipelineBarrier",
	"vkCmdPipelineBarrier2",
	"vkCmdPipelineBarrier2KHR",
	"vkCmdPreprocessGeneratedCommandsNV",
	"vkCmdPushConstants",
	"vkCmdPushDescriptorSetKHR",
	"vkCmdPushDescriptorSetWithTemplateKHR",
	"vkCmdResetEvent",
	"vkCmdResetEvent2",
	"vkCmdResetEvent2KHR",
	"vkCmdResetQueryPool",
	"vkCmdResolveImage",
	"vkCmdResolveImage2",
	"vkCmdResolveImage2KHR",
	"vkCmdSetAlphaToCoverageEnableEXT",
	"vkCmdSetAlphaToOneEnableEXT",
	"vkCmdSetAttachmentFeedbackLoopEnableEXT",
	"vkCmdSetBlendConstants",
	"vkCmdSetCheckpointNV",
	"vkCmdSetCoarseSampleOrderNV",
	"vkCmdSetColorBlendAdvancedEXT",
	"vkCmdSetColorBlendEnableEXT",
	"vkCmdSetColorBlendEquationEXT",
	"vkCmdSetColorWriteEnableEXT",
	"vkCmdSetColorWriteMaskEXT",
	"vkCmdSetConservativeRasterizationModeEXT",
	"vkCmdSetCoverageModulationModeNV",
	"vkCmdSetCoverageModulationTableEnableNV",
	"vkCmdSetCoverageModulationTableNV",
	"vkCmdSetCoverageReductionModeNV",
	"vkCmdSetCoverageToColorEnableNV",
	"vkCmdSetCoverageToColorLocationNV",
	"vkCmdSetCullMode",
	"vkCmdSetCullModeEXT",
	"vkCmdSetDepthBias",
	"vkCmdSetDepthBias2EXT",
	"vkCmdSetDepthBiasEnable",
	"vkCmdSetDepthBiasEnableEXT",
	"vkCmdSetDepthBounds",
	"vkCmdSetDepthBoundsTestEnable",
	"vkCmdSetDepthBoundsTestEnableEXT",
	"vkCmdSetDepthClampEnableEXT",
	"vkCmdSetDepthClipEnableEXT",
	"vkCmdSetDepthClipNegativeOneToOneEXT",
	"vkCmdSetDepthCompareOp",
	"vkCmdSetDepthCompareOpEXT",
	"vkCmdSetDepthTestEnable",
	"vkCmdSetDepthTestEnableEXT",
	"vkCmdSetDepthWriteEnable",
	"vkCmdSetDepthWriteEnableEXT",
	"vkCmdSetDescriptorBufferOffsetsEXT",
	"vkCmdSetDeviceMask",
	"vkCmdSetDeviceMaskKHR",
	"vkCmdSetDiscardRectangleEXT",
	"vkCmdSetDiscardRectangleEnableEXT",
	"vkCmdSetDiscardRectangleModeEXT",
	"vkCmdSetEvent",
	"vkCmdSetEvent2",
	"vkCmdSetEvent2KHR",
	"vkCmdSetExclusiveScissorEnableNV",
	"vkCmdSetExclusiveScissorNV",
	"vkCmdSetExtraPrimitiveOverestimationSizeEXT",
	"vkCmdSetFragmentShadingRateEnumNV",
	"vkCmdSetFragmentShadingRateKHR",
	"vkCmdSetFrontFace",
	"vkCmdSetFrontFaceEXT",
	"vkCmdSetLineRasterizationModeEXT",
	"vkCmdSetLineStippleEXT",
	"vkCmdSetLineStippleEnableEXT",
	"vkCmdSetLineWidth",
	"vkCmdSetLogicOpEXT",
	"vkCmdSetLogicOpEnableEXT",
	"vkCmdSetPatchControlPointsEXT",
	"vkCmdSetPerformanceMarkerINTEL",
	"vkCmdSetPerformanceOverrideINTEL",
	"vkCmdSetPerformanceStreamMarkerINTEL",
	"vkCmdSetPolygonModeEXT",
	"vkCmdSetPrimitiveRestartEnable",
	"vkCmdSetPrimitiveRestartEnableEXT",
	"vkCmdSetPrimitiveTopology",
	"vkCmdSetPrimitiveTopologyEXT",
	"vkCmdSetProvokingVertexModeEXT",
	"vkCmdSetRasterizationSamplesEXT",
	"vkCmdSetRasterizationStreamEXT",
	"vkCmdSetRasterizerDiscardEnable",
	"vkCmdSetRasterizerDiscardEnableEXT",
	"vkCmdSetRayTracingPipelineStackSizeKHR",
	"vkCmdSetRepresentativeFragmentTestEnableNV",
	"vkCmdSetSampleLocationsEXT",
	"vkCmdSetSampleLocationsEnableEXT",
	"vkCmdSetSampleMaskEXT",
	"vkCmdSetScissor",
	"vkCmdSetScissorWithCount",
	"vkCmdSetScissorWithCountEXT",
	"vkCmdSetShadingRateImageEnableNV",
	"vkCmdSetStencilCompareMask",
	"vkCmdSetStencilOp",
	"vkCmdSetStencilOpEXT",
	"vkCmdSetStencilReference",
	"vkCmdSetStencilTestEnable",
	"vkCmdSetStencilTestEnableEXT",
	"vkCmdSetStencilWriteMask",
	"vkCmdSetTessellationDomainOriginEXT",
	"vkCmdSetVertexInputEXT",
	"vkCmdSetViewport",
	"vkCmdSetViewportShadingRatePaletteNV",
	"vkCmdSetViewportSwizzleNV",
	"vkCmdSetViewportWScalingEnableNV",
	"vkCmdSetViewportWScalingNV",
	"vkCmdSetViewportWithCount",
	"vkCmdSetViewportWithCountEXT",
	"vkCmdSubpassShadingHUAWEI",
	"vkCmdTraceRaysIndirect2KHR",
	"vkCmdTraceRaysIndirectKHR",
	"vkCmdTraceRaysKHR",
	"vkCmdTraceRaysNV",
	"vkCmdUpdateBuffer",
	"vkCmdUpdatePipelineIndirectBufferNV",
	"vkCmdWaitEvents",
	"vkCmdWaitEvents2",
	"vkCmdWaitEvents2KHR",
	"vkCmdWriteAccelerationStructuresPropertiesKHR",
	"vkCmdWriteAccelerationStructuresPropertiesNV",
	"vkCmdWriteBufferMarker2AMD",
	"vkCmdWriteBufferMarkerAMD",
	"vkCmdWriteMicromapsPropertiesEXT",
	"vkCmdWriteTimestamp",
	"vkCmdWriteTimestamp2",
	"vkCmdWriteTimestamp2KHR",
	"vkCompileDeferredNV",
	"vkCopyAccelerationStructureKHR",
	"vkCopyAccelerationStructureToMemoryKHR",
	"vkCopyImageToImageEXT",
	"vkCopyImageToMemoryEXT",
	"vkCopyMemoryToAccelerationStructureKHR",
	"vkCopyMemoryToImageEXT",
	"vkCopyMemoryToMicromapEXT",
	"vkCopyMicromapEXT",
	"vkCopyMicromapToMemoryEXT",
	"vkCreateAccelerationStructureKHR",
	"vkCreateAccelerationStructureNV",
	"vkCreateBuffer",
	"vkCreateBufferCollectionFUCHSIA",
	"vkCreateBufferView",
	"vkCreateCommandPool",
	"vkCreateComputePipelines",
	"vkCreateCuFunctionNVX",
	"vkCreateCuModuleNVX",
	"vkCreateDeferredOperationKHR",
	"vkCreateDescriptorPool",
	"vkCreateDescriptorSetLayout",
	"vkCreateDescriptorUpdateTemplate",
	"vkCreateDescriptorUpdateTemplateKHR",
	"vkCreateEvent",
	"vkCreateExecutionGraphPipelinesAMDX",
	"vkCreateFence",
	"vkCreateFramebuffer",
	"vkCreateGraphicsPipelines",
	"vkCreateImage",
	"vkCreateImageView",
	"vkCreateIndirectCommandsLayoutNV",
	"vkCreateMicromapEXT",
	"vkCreateOpticalFlowSessionNV",
	"vkCreatePipelineCache",
	"vkCreatePipelineLayout",
	"vkCreatePrivateDataSlot",
	"vkCreatePrivateDataSlotEXT",
	"vkCreateQueryPool",
	"vkCreateRayTracingPipelinesKHR",
	"vkCreateRayTracingPipelinesNV",
	"vkCreateRenderPass",
	"vkCreateRenderPass2",
	"vkCreateRenderPass2KHR",
	"vkCreateSampler",
	"vkCreateSamplerYcbcrConversion",
	"vkCreateSamplerYcbcrConversionKHR",
	"vkCreateSemaphore",
	"vkCreateShaderModule",
	"vkCreateShadersEXT",
	"vkCreateSharedSwapchainsKHR",
	"vkCreateSwapchainKHR",
	"vkCreateValidationCacheEXT",
	"vkCreateVideoSessionKHR",
	"vkCreateVideoSessionParametersKHR",
	"vkDebugMarkerSetObjectNameEXT",
	"vkDebugMarkerSetObjectTagEXT",
	"vkDeferredOperationJoinKHR",
	"vkDestroyAccelerationStructureKHR",
	"vkDestroyAccelerationStructureNV",
	"vkDestroyBuffer",
	"vkDestroyBufferCollectionFUCHSIA",
	"vkDestroyBufferView",
	"vkDestroyCommandPool",
	"vkDestroyCuFunctionNVX",
	"vkDestroyCuModuleNVX",
	"vkDestroyDeferredOperationKHR",
	"vkDestroyDescriptorPool",
	"vkDestroyDescriptorSetLayout",
	"vkDestroyDescriptorUpdateTemplate",
	"vkDestroyDescriptorUpdateTemplateKHR",
	"vkDestroyDevice",
	"vkDestroyEvent",
	"vkDestroyFence",
	"vkDestroyFramebuffer",
	"vkDestroyImage",
	"vkDestroyImageView",
	"vkDestroyIndirectCommandsLayoutNV",
	"vkDestroyMicromapEXT",
	"vkDestroyOpticalFlowSessionNV",
	"vkDestroyPipeline",
	"vkDestroyPipelineCache",
	"vkDestroyPipelineLayout",
	"vkDestroyPrivateDataSlot",
	"vkDestroyPrivateDataSlotEXT",
	"vkDestroyQueryPool",
	"vkDestroyRenderPass",
	"vkDestroySampler",
	"vkDestroySamplerYcbcrConversion",
	"vkDestroySamplerYcbcrConversionKHR",
	"vkDestroySemaphore",
	"vkDestroyShaderEXT",
	"vkDestroyShaderModule",
	"vkDestroySwapchainKHR",
	"vkDestroyValidationCacheEXT",
	"vkDestroyVideoSessionKHR",
	"vkDestroyVideoSessionParametersKHR",
	"vkDeviceWaitIdle",
	"vkDisplayPowerControlEXT",
	"vkEndCommandBuffer",
	"vkExportMetalObjectsEXT",
	"vkFlushMappedMemoryRanges",
	"vkFreeCommandBuffers",
	"vkFreeDescriptorSets",
	"vkFreeMemory",
	"vkGetAccelerationStructureBuildSizesKHR",
	"vkGetAccelerationStructureDeviceAddressKHR",
	"vkGetAccelerationStructureHandleNV",
	"vkGetAccelerationStructureMemoryRequirementsNV",
	"vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT",
	"vkGetAndroidHardwareBufferPropertiesANDROID",
	"vkGetBufferCollectionPropertiesFUCHSIA",
	"vkGetBufferDeviceAddress",
	"vkGetBufferDeviceAddressEXT",
	"vkGetBufferDeviceAddressKHR",
	"vkGetBufferMemoryRequirements",
	"vkGetBufferMemoryRequirements2",
	"vkGetBufferMemoryRequirements2KHR",
	"vkGetBufferOpaqueCaptureAddress",
	"vkGetBufferOpaqueCaptureAddressKHR",
	"vkGetBufferOpaqueCaptureDescriptorDataEXT",
	"vkGetCalibratedTimestampsEXT",
	"vkGetDeferredOperationMaxConcurrencyKHR",
	"vkGetDeferredOperationResultKHR",
	"vkGetDescriptorEXT",
	"vkGetDescriptorSetHostMappingVALVE",
	"vkGetDescriptorSetLayoutBindingOffsetEXT",
	"vkGetDescriptorSetLayoutHostMappingInfoVALVE",
	"vkGetDescriptorSetLayoutSizeEXT",
	"vkGetDescriptorSetLayoutSupport",
	"vkGetDescriptorSetLayoutSupportKHR",
	"vkGetDeviceAccelerationStructureCompatibilityKHR",
	"vkGetDeviceBufferMemoryRequirements",
	"vkGetDeviceBufferMemoryRequirementsKHR",
	"vkGetDeviceFaultInfoEXT",
	"vkGetDeviceGroupPeerMemoryFeatures",
	"vkGetDeviceGroupPeerMemoryFeaturesKHR",
	"vkGetDeviceGroupPresentCapabilitiesKHR",
	"vkGetDeviceGroupSurfacePresentModes2EXT",
	"vkGetDeviceGroupSurfacePresentModesKHR",
	"vkGetDeviceImageMemoryRequirements",
	"vkGetDeviceImageMemoryRequirementsKHR",
	"vkGetDeviceImageSparseMemoryRequirements",
	"vkGetDeviceImageSparseMemoryRequirementsKHR",
	"vkGetDeviceImageSubresourceLayoutKHR",
	"vkGetDeviceMemoryCommitment",
	"vkGetDeviceMemoryOpaqueCaptureAddress",
	"vkGetDeviceMemoryOpaqueCaptureAddressKHR",
	"vkGetDeviceMicromapCompatibilityEXT",
	"vkGetDeviceProcAddr",
	"vkGetDeviceQueue",
	"vkGetDeviceQueue2",
	"vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI",
	"vkGetDynamicRenderingTilePropertiesQCOM",
	"vkGetEncodedVideoSessionParametersKHR",
	"vkGetEventStatus",
	"vkGetExecutionGraphPipelineNodeIndexAMDX",
	"vkGetExecutionGraphPipelineScratchSizeAMDX",
	"vkGetFenceFdKHR",
	"vkGetFenceStatus",
	"vkGetFenceWin32HandleKHR",
	"vkGetFramebufferTilePropertiesQCOM",
	"vkGetGeneratedCommandsMemoryRequirementsNV",
	"vkGetImageDrmFormatModifierPropertiesEXT",
	"vkGetImageMemoryRequirements",
	"vkGetImageMemoryRequirements2",
	"vkGetImageMemoryRequirements2KHR",
	"vkGetImageOpaqueCaptureDescriptorDataEXT",
	"vkGetImageSparseMemoryRequirements",
	"vkGetImageSparseMemoryRequirements2",
	"vkGetImageSparseMemoryRequirements2KHR",
	"vkGetImageSubresourceLayout",
	"vkGetImageSubresourceLayout2EXT",
	"vkGetImageSubresourceLayout2KHR",
	"vkGetImageViewAddressNVX",
	"vkGetImageViewHandleNVX",
	"vkGetImageViewOpaqueCaptureDescriptorDataEXT",
	"vkGetLatencyTimingsNV",
	"vkGetMemoryAndroidHardwareBufferANDROID",
	"vkGetMemoryFdKHR",
	"vkGetMemoryFdPropertiesKHR",
	"vkGetMemoryHostPointerPropertiesEXT",
	"vkGetMemoryRemoteAddressNV",
	"vkGetMemoryWin32HandleKHR",
	"vkGetMemoryWin32HandleNV",
	"vkGetMemoryWin32HandlePropertiesKHR",
	"vkGetMemoryZirconHandleFUCHSIA",
	"vkGetMemoryZirconHandlePropertiesFUCHSIA",
	"vkGetMicromapBuildSizesEXT",
	"vkGetPastPresentationTimingGOOGLE",
	"vkGetPerformanceParameterINTEL",
	"vkGetPipelineCacheData",
	"vkGetPipelineExecutableInternalRepresentationsKHR",
	"vkGetPipelineExecutablePropertiesKHR",
	"vkGetPipelineExecutableStatisticsKHR",
	"vkGetPipelineIndirectDeviceAddressNV",
	"vkGetPipelineIndirectMemoryRequirementsNV",
	"vkGetPipelinePropertiesEXT",
	"vkGetPrivateData",
	"vkGetPrivateDataEXT",
	"vkGetQueryPoolResults",
	"vkGetQueueCheckpointData2NV",
	"vkGetQueueCheckpointDataNV",
	"vkGetRayTracingCaptureReplayShaderGroupHandlesKHR",
	"vkGetRayTracingShaderGroupHandlesKHR",
	"vkGetRayTracingShaderGroupHandlesNV",
	"vkGetRayTracingShaderGroupStackSizeKHR",
	"vkGetRefreshCycleDurationGOOGLE",
	"vkGetRenderAreaGranularity",
	"vkGetRenderingAreaGranularityKHR",
	"vkGetSamplerOpaqueCaptureDescriptorDataEXT",
	"vkGetScreenBufferPropertiesQNX",
	"vkGetSemaphoreCounterValue",
	"vkGetSemaphoreCounterValueKHR",
	"vkGetSemaphoreFdKHR",
	"vkGetSemaphoreWin32HandleKHR",
	"vkGetSemaphoreZirconHandleFUCHSIA",
	"vkGetShaderBinaryDataEXT",
	"vkGetShaderInfoAMD",
	"vkGetShaderModuleCreateInfoIdentifierEXT",
	"vkGetShaderModuleIdentifierEXT",
	"vkGetSwapchainCounterEXT",
	"vkGetSwapchainImagesKHR",
	"vkGetSwapchainStatusKHR",
	"vkGetValidationCacheDataEXT",
	"vkGetVideoSessionMemoryRequirementsKHR",
	"vkImportFenceFdKHR",
	"vkImportFenceWin32HandleKHR",
	"vkImportSemaphoreFdKHR",
	"vkImportSemaphoreWin32HandleKHR",
	"vkImportSemaphoreZirconHandleFUCHSIA",
	"vkInitializePerformanceApiINTEL",
	"vkInvalidateMappedMemoryRanges",
	"vkLatencySleepNV",
	"vkMapMemory",
	"vkMapMemory2KHR",
	"vkMergePipelineCaches",
	"vkMergeValidationCachesEXT",
	"vkQueueBeginDebugUtilsLabelEXT",
	"vkQueueBindSparse",
	"vkQueueEndDebugUtilsLabelEXT",
	"vkQueueInsertDebugUtilsLabelEXT",
	"vkQueueNotifyOutOfBandNV",
	"vkQueuePresentKHR",
	"vkQueueSetPerformanceConfigurationINTEL",
	"vkQueueSubmit",
	"vkQueueSubmit2",
	"vkQueueSubmit2KHR",
	"vkQueueWaitIdle",
	"vkRegisterDeviceEventEXT",
	"vkRegisterDisplayEventEXT",
	"vkReleaseFullScreenExclusiveModeEXT",
	"vkReleasePerformanceConfigurationINTEL",
	"vkReleaseProfilingLockKHR",
	"vkReleaseSwapchainImagesEXT",
	"vkResetCommandBuffer",
	"vkResetCommandPool",
	"vkResetDescriptorPool",
	"vkResetEvent",
	"vkResetFences",
	"vkResetQueryPool",
	"vkResetQueryPoolEXT",
	"vkSetBufferCollectionBufferConstraintsFUCHSIA",
	"vkSetBufferCollectionImageConstraintsFUCHSIA",
	"vkSetDebugUtilsObjectNameEXT",
	"vkSetDebugUtilsObjectTagEXT",
	"vkSetDeviceMemoryPriorityEXT",
	"vkSetEvent",
	"vkSetHdrMetadataEXT",
	"vkSetLatencyMarkerNV",
	"vkSetLatencySleepModeNV",
	"vkSetLocalDimmingAMD",
	"vkSetPrivateData",
	"vkSetPrivateDataEXT",
	"vkSignalSemaphore",
	"vkSignalSemaphoreKHR",
	"vkTransitionImageLayoutEXT",
	"vkTrimCommandPool",
	"vkTrimCommandPoolKHR",
	"vkUninitializePerformanceApiINTEL",
	"vkUnmapMemory",
	"vkUnmapMemory2KHR",
	"vkUpdateDescriptorSetWithTemplate",
	"vkUpdateDescriptorSetWithTemplateKHR",
	"vkUpdateDescriptorSets",
	"vkUpdateVideoSessionParametersKHR",
	"vkWaitForFences",
	"vkWaitForPresentKHR",
	"vkWaitSemaphores",
	"vkWaitSemaphoresKHR",
	"vkWriteAccelerationStructuresPropertiesKHR",
	"vkWriteMicromapsPropertiesEXT",
};

static int glad_vulkan_is_device_function(const char *name) {
	/* Exists as a workaround for:
     * https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers/issues/2323
     *
     * `vkGetDeviceProcAddr` does not return NULL for non-device functions.
     */
	int i;
	int length = sizeof(DEVICE_FUNCTIONS) / sizeof(DEVICE_FUNCTIONS[0]);

	for (i = 0; i < length; ++i) {
		if (strcmp(DEVICE_FUNCTIONS[i], name) == 0) {
			return 1;
		}
	}

	return 0;
}

struct _glad_vulkan_userptr {
	void                     *vk_handle;
	VkInstance                vk_instance;
	VkDevice                  vk_device;
	PFN_vkGetInstanceProcAddr get_instance_proc_addr;
	PFN_vkGetDeviceProcAddr   get_device_proc_addr;
};

static GLADapiproc glad_vulkan_get_proc(void *vuserptr, const char *name) {
	struct _glad_vulkan_userptr userptr = *(struct _glad_vulkan_userptr *)vuserptr;
	PFN_vkVoidFunction          result = NULL;

	if (userptr.vk_device != NULL && glad_vulkan_is_device_function(name)) {
		result = userptr.get_device_proc_addr(userptr.vk_device, name);
	}

	if (result == NULL && userptr.vk_instance != NULL) {
		result = userptr.get_instance_proc_addr(userptr.vk_instance, name);
	}

	if (result == NULL) {
		result = (PFN_vkVoidFunction)glad_dlsym_handle(userptr.vk_handle, name);
	}

	return (GLADapiproc)result;
}


static void *_glad_Vulkan_loader_handle = NULL;

static void *glad_vulkan_dlopen_handle(void) {
	static const char *NAMES[] = {
	#if GLAD_PLATFORM_APPLE
		"libvulkan.1.dylib",
	#elif GLAD_PLATFORM_WIN32
		"vulkan-1.dll",
		"vulkan.dll",
	#else
		"libvulkan.so.1",
		"libvulkan.so",
	#endif
	};

	if (_glad_Vulkan_loader_handle == NULL) {
		_glad_Vulkan_loader_handle = glad_get_dlopen_handle(NAMES, sizeof(NAMES) / sizeof(NAMES[0]));
	}

	return _glad_Vulkan_loader_handle;
}

static struct _glad_vulkan_userptr glad_vulkan_build_userptr(void *handle, VkInstance instance, VkDevice device) {
	struct _glad_vulkan_userptr userptr;
	userptr.vk_handle = handle;
	userptr.vk_instance = instance;
	userptr.vk_device = device;
	userptr.get_instance_proc_addr = (PFN_vkGetInstanceProcAddr)glad_dlsym_handle(handle, "vkGetInstanceProcAddr");
	userptr.get_device_proc_addr = (PFN_vkGetDeviceProcAddr)glad_dlsym_handle(handle, "vkGetDeviceProcAddr");
	return userptr;
}

int gladLoaderLoadVulkan(VkInstance instance, VkPhysicalDevice physical_device, VkDevice device) {
	int                         version = 0;
	void                       *handle = NULL;
	int                         did_load = 0;
	struct _glad_vulkan_userptr userptr;

	did_load = _glad_Vulkan_loader_handle == NULL;
	handle = glad_vulkan_dlopen_handle();
	if (handle != NULL) {
		userptr = glad_vulkan_build_userptr(handle, instance, device);

		if (userptr.get_instance_proc_addr != NULL && userptr.get_device_proc_addr != NULL) {
			version = gladLoadVulkanUserPtr(physical_device, glad_vulkan_get_proc, &userptr);
		}

		if (!version && did_load) {
			gladLoaderUnloadVulkan();
		}
	}

	return version;
}



void gladLoaderUnloadVulkan(void) {
	if (_glad_Vulkan_loader_handle != NULL) {
		glad_close_dlopen_handle(_glad_Vulkan_loader_handle);
		_glad_Vulkan_loader_handle = NULL;
	}
}

#endif /* GLAD_VULKAN */

#ifdef __cplusplus
}
#endif

#endif /* GLAD_VULKAN_IMPLEMENTATION */
